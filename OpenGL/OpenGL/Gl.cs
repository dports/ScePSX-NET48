using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using Khronos;

namespace OpenGL;

public class Gl : KhronosApi
{
	internal static class Delegates
	{
		[RequiredByFeature("GL_3DFX_tbuffer")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTbufferMask3DFX(uint mask);

		[RequiredByFeature("GL_AMD_debug_output")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDebugMessageEnableAMD(int category, int severity, int count, uint* ids, [MarshalAs(UnmanagedType.I1)] bool enabled);

		[RequiredByFeature("GL_AMD_debug_output")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDebugMessageInsertAMD(int category, int severity, uint id, int length, string buf);

		[RequiredByFeature("GL_AMD_debug_output")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDebugMessageCallbackAMD(DebugProc callback, nint userParam);

		[RequiredByFeature("GL_AMD_debug_output")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate uint glGetDebugMessageLogAMD(uint count, int bufSize, int* categories, int* severities, uint* ids, int* lengths, StringBuilder message);

		[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRenderbufferStorageMultisampleAdvancedAMD(int target, int samples, int storageSamples, int internalformat, int width, int height);

		[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedRenderbufferStorageMultisampleAdvancedAMD(uint renderbuffer, int samples, int storageSamples, int internalformat, int width, int height);

		[RequiredByFeature("GL_AMD_framebuffer_sample_positions")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFramebufferSamplePositionsfvAMD(int target, uint numsamples, uint pixelindex, float* values);

		[RequiredByFeature("GL_AMD_framebuffer_sample_positions")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNamedFramebufferSamplePositionsfvAMD(uint framebuffer, uint numsamples, uint pixelindex, float* values);

		[RequiredByFeature("GL_AMD_framebuffer_sample_positions")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetFramebufferParameterfvAMD(int target, int pname, uint numsamples, uint pixelindex, int size, float* values);

		[RequiredByFeature("GL_AMD_framebuffer_sample_positions")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNamedFramebufferParameterfvAMD(uint framebuffer, int pname, uint numsamples, uint pixelindex, int size, float* values);

		[RequiredByFeature("GL_AMD_interleaved_elements")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribParameteriAMD(uint index, int pname, int param);

		[RequiredByFeature("GL_AMD_name_gen_delete")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenNamesAMD(int identifier, uint num, uint* names);

		[RequiredByFeature("GL_AMD_name_gen_delete")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteNamesAMD(int identifier, uint num, uint* names);

		[RequiredByFeature("GL_AMD_name_gen_delete")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsNameAMD(int identifier, uint name);

		[RequiredByFeature("GL_AMD_occlusion_query_event")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glQueryObjectParameteruiAMD(int target, uint id, int pname, uint param);

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPerfMonitorGroupsAMD(int* numGroups, int groupsSize, uint* groups);

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPerfMonitorCountersAMD(uint group, int* numCounters, int* maxActiveCounters, int counterSize, uint* counters);

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPerfMonitorGroupStringAMD(uint group, int bufSize, int* length, StringBuilder groupString);

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, int* length, StringBuilder counterString);

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetPerfMonitorCounterInfoAMD(uint group, uint counter, int pname, nint data);

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenPerfMonitorsAMD(int n, uint* monitors);

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeletePerfMonitorsAMD(int n, uint* monitors);

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSelectPerfMonitorCountersAMD(uint monitor, [MarshalAs(UnmanagedType.I1)] bool enable, uint group, int numCounters, uint* counterList);

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBeginPerfMonitorAMD(uint monitor);

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEndPerfMonitorAMD(uint monitor);

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPerfMonitorCounterDataAMD(uint monitor, int pname, int dataSize, uint* data, int* bytesWritten);

		[RequiredByFeature("GL_AMD_sample_positions")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSetMultisamplefvAMD(int pname, uint index, float* val);

		[RequiredByFeature("GL_AMD_sparse_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexStorageSparseAMD(int target, int internalFormat, int width, int height, int depth, int layers, uint flags);

		[RequiredByFeature("GL_AMD_sparse_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureStorageSparseAMD(uint texture, int target, int internalFormat, int width, int height, int depth, int layers, uint flags);

		[RequiredByFeature("GL_AMD_stencil_operation_extended")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glStencilOpValueAMD(int face, uint value);

		[RequiredByFeature("GL_AMD_vertex_shader_tessellator")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTessellationFactorAMD(float factor);

		[RequiredByFeature("GL_AMD_vertex_shader_tessellator")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTessellationModeAMD(int mode);

		[RequiredByFeature("GL_ANGLE_framebuffer_blit", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBlitFramebufferANGLE(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter);

		[RequiredByFeature("GL_ANGLE_framebuffer_multisample", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRenderbufferStorageMultisampleANGLE(int target, int samples, int internalformat, int width, int height);

		[RequiredByFeature("GL_ANGLE_translated_shader_source", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTranslatedShaderSourceANGLE(uint shader, int bufSize, int* length, StringBuilder source);

		[RequiredByFeature("GL_APPLE_copy_texture_levels", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyTextureLevelsAPPLE(uint destinationTexture, uint sourceTexture, int sourceBaseLevel, int sourceLevelCount);

		[RequiredByFeature("GL_APPLE_element_array")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glElementPointerAPPLE(int type, nint pointer);

		[RequiredByFeature("GL_APPLE_element_array")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawElementArrayAPPLE(int mode, int first, int count);

		[RequiredByFeature("GL_APPLE_element_array")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawRangeElementArrayAPPLE(int mode, uint start, uint end, int first, int count);

		[RequiredByFeature("GL_APPLE_element_array")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiDrawElementArrayAPPLE(int mode, int* first, int* count, int primcount);

		[RequiredByFeature("GL_APPLE_element_array")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiDrawRangeElementArrayAPPLE(int mode, uint start, uint end, int* first, int* count, int primcount);

		[RequiredByFeature("GL_APPLE_fence")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenFencesAPPLE(int n, uint* fences);

		[RequiredByFeature("GL_APPLE_fence")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteFencesAPPLE(int n, uint* fences);

		[RequiredByFeature("GL_APPLE_fence")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSetFenceAPPLE(uint fence);

		[RequiredByFeature("GL_APPLE_fence")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsFenceAPPLE(uint fence);

		[RequiredByFeature("GL_APPLE_fence")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glTestFenceAPPLE(uint fence);

		[RequiredByFeature("GL_APPLE_fence")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFinishFenceAPPLE(uint fence);

		[RequiredByFeature("GL_APPLE_fence")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glTestObjectAPPLE(int @object, uint name);

		[RequiredByFeature("GL_APPLE_fence")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFinishObjectAPPLE(int @object, int name);

		[RequiredByFeature("GL_APPLE_flush_buffer_range")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBufferParameteriAPPLE(int target, int pname, int param);

		[RequiredByFeature("GL_APPLE_framebuffer_multisample", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRenderbufferStorageMultisampleAPPLE(int target, int samples, int internalformat, int width, int height);

		[RequiredByFeature("GL_APPLE_framebuffer_multisample", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glResolveMultisampleFramebufferAPPLE();

		[RequiredByFeature("GL_APPLE_object_purgeable")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glObjectPurgeableAPPLE(int objectType, uint name, int option);

		[RequiredByFeature("GL_APPLE_object_purgeable")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glObjectUnpurgeableAPPLE(int objectType, uint name, int option);

		[RequiredByFeature("GL_APPLE_object_purgeable")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetObjectParameterivAPPLE(int objectType, uint name, int pname, int* @params);

		[RequiredByFeature("GL_APPLE_texture_range")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureRangeAPPLE(int target, int length, nint pointer);

		[RequiredByFeature("GL_APPLE_texture_range")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexParameterPointervAPPLE(int target, int pname, nint* @params);

		[RequiredByFeature("GL_APPLE_vertex_array_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindVertexArrayAPPLE(uint array);

		[RequiredByFeature("GL_APPLE_vertex_array_range")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayRangeAPPLE(int length, nint pointer);

		[RequiredByFeature("GL_APPLE_vertex_array_range")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFlushVertexArrayRangeAPPLE(int length, nint pointer);

		[RequiredByFeature("GL_APPLE_vertex_array_range")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayParameteriAPPLE(int pname, int param);

		[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEnableVertexAttribAPPLE(uint index, int pname);

		[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDisableVertexAttribAPPLE(uint index, int pname);

		[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsVertexAttribEnabledAPPLE(uint index, int pname);

		[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMapVertexAttrib1dAPPLE(uint index, uint size, double u1, double u2, int stride, int order, double* points);

		[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMapVertexAttrib1fAPPLE(uint index, uint size, float u1, float u2, int stride, int order, float* points);

		[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMapVertexAttrib2dAPPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points);

		[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMapVertexAttrib2fAPPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points);

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_IMG_bindless_texture", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate ulong glGetTextureHandleARB(uint texture);

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_IMG_bindless_texture", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate ulong glGetTextureSamplerHandleARB(uint texture, uint sampler);

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMakeTextureHandleResidentARB(ulong handle);

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMakeTextureHandleNonResidentARB(ulong handle);

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate ulong glGetImageHandleARB(uint texture, int level, [MarshalAs(UnmanagedType.I1)] bool layered, int layer, int format);

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMakeImageHandleResidentARB(ulong handle, int access);

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMakeImageHandleNonResidentARB(ulong handle);

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_IMG_bindless_texture", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniformHandleui64ARB(int location, ulong value);

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_IMG_bindless_texture", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformHandleui64vARB(int location, int count, ulong* value);

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_IMG_bindless_texture", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniformHandleui64ARB(uint program, int location, ulong value);

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_IMG_bindless_texture", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformHandleui64vARB(uint program, int location, int count, ulong* values);

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsTextureHandleResidentARB(ulong handle);

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsImageHandleResidentARB(ulong handle);

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribL1ui64ARB(uint index, ulong x);

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribL1ui64vARB(uint index, ulong* v);

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVertexAttribLui64vARB(uint index, int pname, ulong* @params);

		[RequiredByFeature("GL_ARB_cl_event", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glCreateSyncFromCLeventARB(nint context, nint @event, uint flags);

		[RequiredByFeature("GL_ARB_compute_variable_group_size", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDispatchComputeGroupSizeARB(uint num_groups_x, uint num_groups_y, uint num_groups_z, uint group_size_x, uint group_size_y, uint group_size_z);

		[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_geometry_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferTextureFaceARB(int target, int attachment, uint texture, int level, int face);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform1i64ARB(int location, long x);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform2i64ARB(int location, long x, long y);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform3i64ARB(int location, long x, long y, long z);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform4i64ARB(int location, long x, long y, long z, long w);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform1i64vARB(int location, int count, long* value);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform2i64vARB(int location, int count, long* value);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform3i64vARB(int location, int count, long* value);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform4i64vARB(int location, int count, long* value);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform1ui64ARB(int location, ulong x);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform2ui64ARB(int location, ulong x, ulong y);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform3ui64ARB(int location, ulong x, ulong y, ulong z);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform4ui64ARB(int location, ulong x, ulong y, ulong z, ulong w);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform1ui64vARB(int location, int count, ulong* value);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform2ui64vARB(int location, int count, ulong* value);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform3ui64vARB(int location, int count, ulong* value);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform4ui64vARB(int location, int count, ulong* value);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetUniformi64vARB(uint program, int location, long* @params);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetUniformui64vARB(uint program, int location, ulong* @params);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnUniformi64vARB(uint program, int location, int bufSize, long* @params);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnUniformui64vARB(uint program, int location, int bufSize, ulong* @params);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform1i64ARB(uint program, int location, long x);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform2i64ARB(uint program, int location, long x, long y);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform3i64ARB(uint program, int location, long x, long y, long z);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform4i64ARB(uint program, int location, long x, long y, long z, long w);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform1i64vARB(uint program, int location, int count, long* value);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform2i64vARB(uint program, int location, int count, long* value);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform3i64vARB(uint program, int location, int count, long* value);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform4i64vARB(uint program, int location, int count, long* value);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform1ui64ARB(uint program, int location, ulong x);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform2ui64ARB(uint program, int location, ulong x, ulong y);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform3ui64ARB(uint program, int location, ulong x, ulong y, ulong z);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform4ui64ARB(uint program, int location, ulong x, ulong y, ulong z, ulong w);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform1ui64vARB(uint program, int location, int count, ulong* value);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform2ui64vARB(uint program, int location, int count, ulong* value);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform3ui64vARB(uint program, int location, int count, ulong* value);

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform4ui64vARB(uint program, int location, int count, ulong* value);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_paletted_texture")]
		[RequiredByFeature("GL_SGI_color_table")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColorTable(int target, int internalformat, int width, int format, int type, nint table);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_SGI_color_table")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColorTableParameterfv(int target, int pname, float* @params);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_SGI_color_table")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColorTableParameteriv(int target, int pname, int* @params);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_SGI_color_table")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyColorTable(int target, int internalformat, int x, int y, int width);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_paletted_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetColorTable(int target, int format, int type, nint table);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_paletted_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetColorTableParameterfv(int target, int pname, float* @params);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_paletted_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetColorTableParameteriv(int target, int pname, int* @params);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_color_subtable")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColorSubTable(int target, int start, int count, int format, int type, nint data);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_color_subtable")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyColorSubTable(int target, int start, int x, int y, int width);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_convolution")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, nint image);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_convolution")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, nint image);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_convolution")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glConvolutionParameterf(int target, int pname, float @params);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_convolution")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glConvolutionParameterfv(int target, int pname, float* @params);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_convolution")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glConvolutionParameteri(int target, int pname, int @params);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_convolution")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glConvolutionParameteriv(int target, int pname, int* @params);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_convolution")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyConvolutionFilter1D(int target, int internalformat, int x, int y, int width);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_convolution")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyConvolutionFilter2D(int target, int internalformat, int x, int y, int width, int height);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetConvolutionFilter(int target, int format, int type, nint image);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetConvolutionParameterfv(int target, int pname, float* @params);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetConvolutionParameteriv(int target, int pname, int* @params);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetSeparableFilter(int target, int format, int type, nint row, nint column, nint span);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_convolution")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSeparableFilter2D(int target, int internalformat, int width, int height, int format, int type, nint row, nint column);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetHistogram(int target, [MarshalAs(UnmanagedType.I1)] bool reset, int format, int type, nint values);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetHistogramParameterfv(int target, int pname, float* @params);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetHistogramParameteriv(int target, int pname, int* @params);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetMinmax(int target, [MarshalAs(UnmanagedType.I1)] bool reset, int format, int type, nint values);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMinmaxParameterfv(int target, int pname, float* @params);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMinmaxParameteriv(int target, int pname, int* @params);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_histogram")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glHistogram(int target, int width, int internalformat, [MarshalAs(UnmanagedType.I1)] bool sink);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_histogram")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMinmax(int target, int internalformat, [MarshalAs(UnmanagedType.I1)] bool sink);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_histogram")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glResetHistogram(int target);

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_histogram")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glResetMinmax(int target);

		[RequiredByFeature("GL_ARB_matrix_palette")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCurrentPaletteMatrixARB(int index);

		[RequiredByFeature("GL_ARB_matrix_palette")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMatrixIndexubvARB(int size, byte* indices);

		[RequiredByFeature("GL_ARB_matrix_palette")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMatrixIndexusvARB(int size, ushort* indices);

		[RequiredByFeature("GL_ARB_matrix_palette")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMatrixIndexuivARB(int size, uint* indices);

		[RequiredByFeature("GL_ARB_matrix_palette")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMatrixIndexPointerARB(int size, int type, int stride, nint pointer);

		[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glGetGraphicsResetStatusARB();

		[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetnTexImageARB(int target, int level, int format, int type, int bufSize, nint img);

		[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetnCompressedTexImageARB(int target, int lod, int bufSize, nint img);

		[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnUniformfvARB(uint program, int location, int bufSize, float* @params);

		[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnUniformivARB(uint program, int location, int bufSize, int* @params);

		[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnUniformuivARB(uint program, int location, int bufSize, uint* @params);

		[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnUniformdvARB(uint program, int location, int bufSize, double* @params);

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnMapdvARB(int target, int query, int bufSize, double* v);

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnMapfvARB(int target, int query, int bufSize, float* v);

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnMapivARB(int target, int query, int bufSize, int* v);

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnPixelMapfvARB(int map, int bufSize, float* values);

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnPixelMapuivARB(int map, int bufSize, uint* values);

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnPixelMapusvARB(int map, int bufSize, ushort* values);

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnPolygonStippleARB(int bufSize, byte* pattern);

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetnColorTableARB(int target, int format, int type, int bufSize, nint table);

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetnConvolutionFilterARB(int target, int format, int type, int bufSize, nint image);

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetnSeparableFilterARB(int target, int format, int type, int rowBufSize, nint row, int columnBufSize, nint column, nint span);

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetnHistogramARB(int target, [MarshalAs(UnmanagedType.I1)] bool reset, int format, int type, int bufSize, nint values);

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetnMinmaxARB(int target, [MarshalAs(UnmanagedType.I1)] bool reset, int format, int type, int bufSize, nint values);

		[RequiredByFeature("GL_ARB_sample_locations", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFramebufferSampleLocationsfvARB(int target, uint start, int count, float* v);

		[RequiredByFeature("GL_ARB_sample_locations", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNamedFramebufferSampleLocationsfvARB(uint framebuffer, uint start, int count, float* v);

		[RequiredByFeature("GL_ARB_sample_locations", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEvaluateDepthValuesARB();

		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDeleteObjectARB(uint obj);

		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glGetHandleARB(int pname);

		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetObjectParameterfvARB(uint obj, int pname, float* @params);

		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetObjectParameterivARB(uint obj, int pname, int* @params);

		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetInfoLogARB(uint obj, int maxLength, int* length, StringBuilder infoLog);

		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetAttachedObjectsARB(uint containerObj, int maxCount, int* count, uint* obj);

		[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedStringARB(int type, int namelen, string name, int stringlen, string @string);

		[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDeleteNamedStringARB(int namelen, string name);

		[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCompileShaderIncludeARB(uint shader, int count, string[] path, int* length);

		[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsNamedStringARB(int namelen, string name);

		[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNamedStringARB(int namelen, string name, int bufSize, int* stringlen, StringBuilder @string);

		[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNamedStringivARB(int namelen, string name, int pname, int* @params);

		[RequiredByFeature("GL_ARB_sparse_buffer", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBufferPageCommitmentARB(int target, nint offset, uint size, [MarshalAs(UnmanagedType.I1)] bool commit);

		[RequiredByFeature("GL_ARB_sparse_buffer", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedBufferPageCommitmentEXT(uint buffer, nint offset, uint size, [MarshalAs(UnmanagedType.I1)] bool commit);

		[RequiredByFeature("GL_ARB_sparse_buffer", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedBufferPageCommitmentARB(uint buffer, nint offset, uint size, [MarshalAs(UnmanagedType.I1)] bool commit);

		[RequiredByFeature("GL_ARB_sparse_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexPageCommitmentARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, [MarshalAs(UnmanagedType.I1)] bool commit);

		[RequiredByFeature("GL_ARB_vertex_blend")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWeightbvARB(int size, sbyte* weights);

		[RequiredByFeature("GL_ARB_vertex_blend")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWeightsvARB(int size, short* weights);

		[RequiredByFeature("GL_ARB_vertex_blend")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWeightivARB(int size, int* weights);

		[RequiredByFeature("GL_ARB_vertex_blend")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWeightfvARB(int size, float* weights);

		[RequiredByFeature("GL_ARB_vertex_blend")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWeightdvARB(int size, double* weights);

		[RequiredByFeature("GL_ARB_vertex_blend")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWeightubvARB(int size, byte* weights);

		[RequiredByFeature("GL_ARB_vertex_blend")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWeightusvARB(int size, ushort* weights);

		[RequiredByFeature("GL_ARB_vertex_blend")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWeightuivARB(int size, uint* weights);

		[RequiredByFeature("GL_ARB_vertex_blend")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glWeightPointerARB(int size, int type, int stride, nint pointer);

		[RequiredByFeature("GL_ARB_vertex_blend")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexBlendARB(int count);

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramStringARB(int target, int format, int len, nint @string);

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindProgramARB(int target, uint program);

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteProgramsARB(int n, uint* programs);

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenProgramsARB(int n, uint* programs);

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramEnvParameter4dARB(int target, uint index, double x, double y, double z, double w);

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramEnvParameter4dvARB(int target, uint index, double* @params);

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramEnvParameter4fARB(int target, uint index, float x, float y, float z, float w);

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramEnvParameter4fvARB(int target, uint index, float* @params);

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramLocalParameter4dARB(int target, uint index, double x, double y, double z, double w);

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramLocalParameter4dvARB(int target, uint index, double* @params);

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramLocalParameter4fARB(int target, uint index, float x, float y, float z, float w);

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramLocalParameter4fvARB(int target, uint index, float* @params);

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramEnvParameterdvARB(int target, uint index, double* @params);

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramEnvParameterfvARB(int target, uint index, float* @params);

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramLocalParameterdvARB(int target, uint index, double* @params);

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramLocalParameterfvARB(int target, uint index, float* @params);

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramivARB(int target, int pname, int* @params);

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetProgramStringARB(int target, int pname, nint @string);

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsProgramARB(uint program);

		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDepthRangeArraydvNV(uint first, int count, double* v);

		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDepthRangeIndexeddNV(uint index, double n, double f);

		[RequiredByFeature("GL_ATI_element_array")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glElementPointerATI(int type, nint pointer);

		[RequiredByFeature("GL_ATI_element_array")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawElementArrayATI(int mode, int count);

		[RequiredByFeature("GL_ATI_element_array")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawRangeElementArrayATI(int mode, uint start, uint end, int count);

		[RequiredByFeature("GL_ATI_envmap_bumpmap")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexBumpParameterivATI(int pname, int* param);

		[RequiredByFeature("GL_ATI_envmap_bumpmap")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexBumpParameterfvATI(int pname, float* param);

		[RequiredByFeature("GL_ATI_envmap_bumpmap")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexBumpParameterivATI(int pname, int* param);

		[RequiredByFeature("GL_ATI_envmap_bumpmap")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexBumpParameterfvATI(int pname, float* param);

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glGenFragmentShadersATI(uint range);

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindFragmentShaderATI(uint id);

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDeleteFragmentShaderATI(uint id);

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBeginFragmentShaderATI();

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEndFragmentShaderATI();

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPassTexCoordATI(uint dst, uint coord, int swizzle);

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSampleMapATI(uint dst, uint interp, int swizzle);

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColorFragmentOp1ATI(int op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod);

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColorFragmentOp2ATI(int op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod);

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColorFragmentOp3ATI(int op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod);

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glAlphaFragmentOp1ATI(int op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod);

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glAlphaFragmentOp2ATI(int op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod);

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glAlphaFragmentOp3ATI(int op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod);

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSetFragmentShaderConstantATI(uint dst, float* value);

		[RequiredByFeature("GL_ATI_map_object_buffer")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate nint glMapObjectBufferATI(uint buffer);

		[RequiredByFeature("GL_ATI_map_object_buffer")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUnmapObjectBufferATI(uint buffer);

		[RequiredByFeature("GL_ATI_pn_triangles")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPNTrianglesiATI(int pname, int param);

		[RequiredByFeature("GL_ATI_pn_triangles")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPNTrianglesfATI(int pname, float param);

		[RequiredByFeature("GL_ATI_separate_stencil")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glStencilFuncSeparateATI(int frontfunc, int backfunc, int @ref, uint mask);

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glNewObjectBufferATI(int size, nint pointer, int usage);

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsObjectBufferATI(uint buffer);

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUpdateObjectBufferATI(uint buffer, uint offset, int size, nint pointer, int preserve);

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetObjectBufferfvATI(uint buffer, int pname, float* @params);

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetObjectBufferivATI(uint buffer, int pname, int* @params);

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFreeObjectBufferATI(uint buffer);

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glArrayObjectATI(int array, int size, int type, int stride, uint buffer, uint offset);

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetArrayObjectfvATI(int array, int pname, float* @params);

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetArrayObjectivATI(int array, int pname, int* @params);

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVariantArrayObjectATI(uint id, int type, int stride, uint buffer, uint offset);

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVariantArrayObjectfvATI(uint id, int pname, float* @params);

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVariantArrayObjectivATI(uint id, int pname, int* @params);

		[RequiredByFeature("GL_ATI_vertex_attrib_array_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribArrayObjectATI(uint index, int size, int type, [MarshalAs(UnmanagedType.I1)] bool normalized, int stride, uint buffer, uint offset);

		[RequiredByFeature("GL_ATI_vertex_attrib_array_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVertexAttribArrayObjectfvATI(uint index, int pname, float* @params);

		[RequiredByFeature("GL_ATI_vertex_attrib_array_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVertexAttribArrayObjectivATI(uint index, int pname, int* @params);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexStream1sATI(int stream, short x);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexStream1svATI(int stream, short* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexStream1iATI(int stream, int x);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexStream1ivATI(int stream, int* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexStream1fATI(int stream, float x);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexStream1fvATI(int stream, float* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexStream1dATI(int stream, double x);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexStream1dvATI(int stream, double* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexStream2sATI(int stream, short x, short y);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexStream2svATI(int stream, short* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexStream2iATI(int stream, int x, int y);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexStream2ivATI(int stream, int* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexStream2fATI(int stream, float x, float y);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexStream2fvATI(int stream, float* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexStream2dATI(int stream, double x, double y);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexStream2dvATI(int stream, double* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexStream3sATI(int stream, short x, short y, short z);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexStream3svATI(int stream, short* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexStream3iATI(int stream, int x, int y, int z);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexStream3ivATI(int stream, int* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexStream3fATI(int stream, float x, float y, float z);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexStream3fvATI(int stream, float* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexStream3dATI(int stream, double x, double y, double z);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexStream3dvATI(int stream, double* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexStream4sATI(int stream, short x, short y, short z, short w);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexStream4svATI(int stream, short* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexStream4iATI(int stream, int x, int y, int z, int w);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexStream4ivATI(int stream, int* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexStream4fATI(int stream, float x, float y, float z, float w);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexStream4fvATI(int stream, float* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexStream4dATI(int stream, double x, double y, double z, double w);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexStream4dvATI(int stream, double* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNormalStream3bATI(int stream, sbyte nx, sbyte ny, sbyte nz);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNormalStream3bvATI(int stream, sbyte* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNormalStream3sATI(int stream, short nx, short ny, short nz);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNormalStream3svATI(int stream, short* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNormalStream3iATI(int stream, int nx, int ny, int nz);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNormalStream3ivATI(int stream, int* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNormalStream3fATI(int stream, float nx, float ny, float nz);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNormalStream3fvATI(int stream, float* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNormalStream3dATI(int stream, double nx, double ny, double nz);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNormalStream3dvATI(int stream, double* coords);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClientActiveVertexStreamATI(int stream);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexBlendEnviATI(int pname, int param);

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexBlendEnvfATI(int pname, float param);

		[RequiredByFeature("GL_EXT_bindable_uniform")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniformBufferEXT(uint program, int location, uint buffer);

		[RequiredByFeature("GL_EXT_bindable_uniform")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glGetUniformBufferSizeEXT(uint program, int location);

		[RequiredByFeature("GL_EXT_bindable_uniform")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate nint glGetUniformOffsetEXT(uint program, int location);

		[RequiredByFeature("GL_EXT_blend_func_extended", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glGetProgramResourceLocationIndexEXT(uint program, int programInterface, string name);

		[RequiredByFeature("GL_EXT_compiled_vertex_array")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLockArraysEXT(int first, int count);

		[RequiredByFeature("GL_EXT_compiled_vertex_array")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUnlockArraysEXT();

		[RequiredByFeature("GL_EXT_convolution")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetConvolutionFilterEXT(int target, int format, int type, nint image);

		[RequiredByFeature("GL_EXT_convolution")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetConvolutionParameterfvEXT(int target, int pname, float* @params);

		[RequiredByFeature("GL_EXT_convolution")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetConvolutionParameterivEXT(int target, int pname, int* @params);

		[RequiredByFeature("GL_EXT_convolution")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetSeparableFilterEXT(int target, int format, int type, nint row, nint column, nint span);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTangent3bEXT(sbyte tx, sbyte ty, sbyte tz);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTangent3bvEXT(sbyte* v);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTangent3dEXT(double tx, double ty, double tz);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTangent3dvEXT(double* v);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTangent3fEXT(float tx, float ty, float tz);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTangent3fvEXT(float* v);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTangent3iEXT(int tx, int ty, int tz);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTangent3ivEXT(int* v);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTangent3sEXT(short tx, short ty, short tz);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTangent3svEXT(short* v);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBinormal3bEXT(sbyte bx, sbyte by, sbyte bz);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glBinormal3bvEXT(sbyte* v);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBinormal3dEXT(double bx, double by, double bz);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glBinormal3dvEXT(double* v);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBinormal3fEXT(float bx, float by, float bz);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glBinormal3fvEXT(float* v);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBinormal3iEXT(int bx, int by, int bz);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glBinormal3ivEXT(int* v);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBinormal3sEXT(short bx, short by, short bz);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glBinormal3svEXT(short* v);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTangentPointerEXT(int type, int stride, nint pointer);

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBinormalPointerEXT(int type, int stride, nint pointer);

		[RequiredByFeature("GL_EXT_cull_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCullParameterdvEXT(int pname, double* @params);

		[RequiredByFeature("GL_EXT_cull_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCullParameterfvEXT(int pname, float* @params);

		[RequiredByFeature("GL_EXT_debug_label", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLabelObjectEXT(int type, uint @object, int length, string label);

		[RequiredByFeature("GL_EXT_debug_label", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetObjectLabelEXT(int type, uint @object, int bufSize, int* length, StringBuilder label);

		[RequiredByFeature("GL_EXT_debug_marker", Api = "gl|glcore|gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glInsertEventMarkerEXT(int length, string marker);

		[RequiredByFeature("GL_EXT_debug_marker", Api = "gl|glcore|gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPushGroupMarkerEXT(int length, string marker);

		[RequiredByFeature("GL_EXT_debug_marker", Api = "gl|glcore|gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPopGroupMarkerEXT();

		[RequiredByFeature("GL_EXT_depth_bounds_test")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDepthBoundsEXT(double zmin, double zmax);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMatrixLoadfEXT(int mode, float* m);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMatrixLoaddEXT(int mode, double* m);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMatrixMultfEXT(int mode, float* m);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMatrixMultdEXT(int mode, double* m);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMatrixLoadIdentityEXT(int mode);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMatrixRotatefEXT(int mode, float angle, float x, float y, float z);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMatrixRotatedEXT(int mode, double angle, double x, double y, double z);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMatrixScalefEXT(int mode, float x, float y, float z);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMatrixScaledEXT(int mode, double x, double y, double z);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMatrixTranslatefEXT(int mode, float x, float y, float z);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMatrixTranslatedEXT(int mode, double x, double y, double z);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMatrixFrustumEXT(int mode, double left, double right, double bottom, double top, double zNear, double zFar);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMatrixOrthoEXT(int mode, double left, double right, double bottom, double top, double zNear, double zFar);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMatrixPopEXT(int mode);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMatrixPushEXT(int mode);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClientAttribDefaultEXT(uint mask);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPushClientAttribDefaultEXT(uint mask);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureParameterfEXT(uint texture, int target, int pname, float param);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTextureParameterfvEXT(uint texture, int target, int pname, float* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureParameteriEXT(uint texture, int target, int pname, int param);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTextureParameterivEXT(uint texture, int target, int pname, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureImage1DEXT(uint texture, int target, int level, int internalformat, int width, int border, int format, int type, nint pixels);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureImage2DEXT(uint texture, int target, int level, int internalformat, int width, int height, int border, int format, int type, nint pixels);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureSubImage1DEXT(uint texture, int target, int level, int xoffset, int width, int format, int type, nint pixels);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureSubImage2DEXT(uint texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, nint pixels);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyTextureImage1DEXT(uint texture, int target, int level, int internalformat, int x, int y, int width, int border);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyTextureImage2DEXT(uint texture, int target, int level, int internalformat, int x, int y, int width, int height, int border);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyTextureSubImage1DEXT(uint texture, int target, int level, int xoffset, int x, int y, int width);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyTextureSubImage2DEXT(uint texture, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetTextureImageEXT(uint texture, int target, int level, int format, int type, nint pixels);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTextureParameterfvEXT(uint texture, int target, int pname, float* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTextureParameterivEXT(uint texture, int target, int pname, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTextureLevelParameterfvEXT(uint texture, int target, int level, int pname, float* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTextureLevelParameterivEXT(uint texture, int target, int level, int pname, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureImage3DEXT(uint texture, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, nint pixels);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureSubImage3DEXT(uint texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, nint pixels);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyTextureSubImage3DEXT(uint texture, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindMultiTextureEXT(int texunit, int target, uint texture);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoordPointerEXT(int texunit, int size, int type, int stride, nint pointer);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexEnvfEXT(int texunit, int target, int pname, float param);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexEnvfvEXT(int texunit, int target, int pname, float* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexEnviEXT(int texunit, int target, int pname, int param);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexEnvivEXT(int texunit, int target, int pname, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexGendEXT(int texunit, int coord, int pname, double param);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexGendvEXT(int texunit, int coord, int pname, double* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexGenfEXT(int texunit, int coord, int pname, float param);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexGenfvEXT(int texunit, int coord, int pname, float* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexGeniEXT(int texunit, int coord, int pname, int param);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexGenivEXT(int texunit, int coord, int pname, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMultiTexEnvfvEXT(int texunit, int target, int pname, float* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMultiTexEnvivEXT(int texunit, int target, int pname, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMultiTexGendvEXT(int texunit, int coord, int pname, double* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMultiTexGenfvEXT(int texunit, int coord, int pname, float* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMultiTexGenivEXT(int texunit, int coord, int pname, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexParameteriEXT(int texunit, int target, int pname, int param);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexParameterivEXT(int texunit, int target, int pname, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexParameterfEXT(int texunit, int target, int pname, float param);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexParameterfvEXT(int texunit, int target, int pname, float* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexImage1DEXT(int texunit, int target, int level, int internalformat, int width, int border, int format, int type, nint pixels);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexImage2DEXT(int texunit, int target, int level, int internalformat, int width, int height, int border, int format, int type, nint pixels);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexSubImage1DEXT(int texunit, int target, int level, int xoffset, int width, int format, int type, nint pixels);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexSubImage2DEXT(int texunit, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, nint pixels);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyMultiTexImage1DEXT(int texunit, int target, int level, int internalformat, int x, int y, int width, int border);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyMultiTexImage2DEXT(int texunit, int target, int level, int internalformat, int x, int y, int width, int height, int border);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyMultiTexSubImage1DEXT(int texunit, int target, int level, int xoffset, int x, int y, int width);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyMultiTexSubImage2DEXT(int texunit, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetMultiTexImageEXT(int texunit, int target, int level, int format, int type, nint pixels);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMultiTexParameterfvEXT(int texunit, int target, int pname, float* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMultiTexParameterivEXT(int texunit, int target, int pname, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMultiTexLevelParameterfvEXT(int texunit, int target, int level, int pname, float* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMultiTexLevelParameterivEXT(int texunit, int target, int level, int pname, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexImage3DEXT(int texunit, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, nint pixels);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, nint pixels);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyMultiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEnableClientStateIndexedEXT(int array, uint index);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDisableClientStateIndexedEXT(int array, uint index);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPointerIndexedvEXT(int target, uint index, nint* data);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedTextureImage3DEXT(uint texture, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, nint bits);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedTextureImage2DEXT(uint texture, int target, int level, int internalformat, int width, int height, int border, int imageSize, nint bits);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedTextureImage1DEXT(uint texture, int target, int level, int internalformat, int width, int border, int imageSize, nint bits);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedTextureSubImage3DEXT(uint texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, nint bits);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedTextureSubImage2DEXT(uint texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, nint bits);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedTextureSubImage1DEXT(uint texture, int target, int level, int xoffset, int width, int format, int imageSize, nint bits);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetCompressedTextureImageEXT(uint texture, int target, int lod, nint img);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedMultiTexImage3DEXT(int texunit, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, nint bits);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedMultiTexImage2DEXT(int texunit, int target, int level, int internalformat, int width, int height, int border, int imageSize, nint bits);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedMultiTexImage1DEXT(int texunit, int target, int level, int internalformat, int width, int border, int imageSize, nint bits);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedMultiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, nint bits);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedMultiTexSubImage2DEXT(int texunit, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, nint bits);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedMultiTexSubImage1DEXT(int texunit, int target, int level, int xoffset, int width, int format, int imageSize, nint bits);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetCompressedMultiTexImageEXT(int texunit, int target, int lod, nint img);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMatrixLoadTransposefEXT(int mode, float* m);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMatrixLoadTransposedEXT(int mode, double* m);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMatrixMultTransposefEXT(int mode, float* m);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMatrixMultTransposedEXT(int mode, double* m);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedBufferDataEXT(uint buffer, uint size, nint data, int usage);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate nint glMapNamedBufferEXT(uint buffer, int access);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glUnmapNamedBufferEXT(uint buffer);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNamedBufferParameterivEXT(uint buffer, int pname, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNamedBufferPointervEXT(uint buffer, int pname, nint* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetNamedBufferSubDataEXT(uint buffer, nint offset, uint size, nint data);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureBufferEXT(uint texture, int target, int internalformat, uint buffer);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexBufferEXT(int texunit, int target, int internalformat, uint buffer);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTextureParameterIivEXT(uint texture, int target, int pname, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTextureParameterIuivEXT(uint texture, int target, int pname, uint* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTextureParameterIivEXT(uint texture, int target, int pname, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTextureParameterIuivEXT(uint texture, int target, int pname, uint* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexParameterIivEXT(int texunit, int target, int pname, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexParameterIuivEXT(int texunit, int target, int pname, uint* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMultiTexParameterIivEXT(int texunit, int target, int pname, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMultiTexParameterIuivEXT(int texunit, int target, int pname, uint* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNamedProgramLocalParameters4fvEXT(uint program, int target, uint index, int count, float* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedProgramLocalParameterI4iEXT(uint program, int target, uint index, int x, int y, int z, int w);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNamedProgramLocalParameterI4ivEXT(uint program, int target, uint index, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNamedProgramLocalParametersI4ivEXT(uint program, int target, uint index, int count, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedProgramLocalParameterI4uiEXT(uint program, int target, uint index, uint x, uint y, uint z, uint w);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNamedProgramLocalParameterI4uivEXT(uint program, int target, uint index, uint* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNamedProgramLocalParametersI4uivEXT(uint program, int target, uint index, int count, uint* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNamedProgramLocalParameterIivEXT(uint program, int target, uint index, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNamedProgramLocalParameterIuivEXT(uint program, int target, uint index, uint* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEnableClientStateiEXT(int array, uint index);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDisableClientStateiEXT(int array, uint index);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPointeri_vEXT(int pname, uint index, nint* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedProgramStringEXT(uint program, int target, int format, int len, nint @string);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedProgramLocalParameter4dEXT(uint program, int target, uint index, double x, double y, double z, double w);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNamedProgramLocalParameter4dvEXT(uint program, int target, uint index, double* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedProgramLocalParameter4fEXT(uint program, int target, uint index, float x, float y, float z, float w);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNamedProgramLocalParameter4fvEXT(uint program, int target, uint index, float* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNamedProgramLocalParameterdvEXT(uint program, int target, uint index, double* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNamedProgramLocalParameterfvEXT(uint program, int target, uint index, float* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNamedProgramivEXT(uint program, int target, int pname, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetNamedProgramStringEXT(uint program, int target, int pname, nint @string);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedRenderbufferStorageEXT(uint renderbuffer, int internalformat, int width, int height);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNamedRenderbufferParameterivEXT(uint renderbuffer, int pname, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedRenderbufferStorageMultisampleEXT(uint renderbuffer, int samples, int internalformat, int width, int height);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedRenderbufferStorageMultisampleCoverageEXT(uint renderbuffer, int coverageSamples, int colorSamples, int internalformat, int width, int height);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glCheckNamedFramebufferStatusEXT(uint framebuffer, int target);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedFramebufferTexture1DEXT(uint framebuffer, int attachment, int textarget, uint texture, int level);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedFramebufferTexture2DEXT(uint framebuffer, int attachment, int textarget, uint texture, int level);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedFramebufferTexture3DEXT(uint framebuffer, int attachment, int textarget, uint texture, int level, int zoffset);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedFramebufferRenderbufferEXT(uint framebuffer, int attachment, int renderbuffertarget, uint renderbuffer);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNamedFramebufferAttachmentParameterivEXT(uint framebuffer, int attachment, int pname, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGenerateTextureMipmapEXT(uint texture, int target);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGenerateMultiTexMipmapEXT(int texunit, int target);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferDrawBufferEXT(uint framebuffer, int mode);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFramebufferDrawBuffersEXT(uint framebuffer, int n, int* bufs);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferReadBufferEXT(uint framebuffer, int mode);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetFramebufferParameterivEXT(uint framebuffer, int pname, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedCopyBufferSubDataEXT(uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, uint size);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedFramebufferTextureEXT(uint framebuffer, int attachment, uint texture, int level);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedFramebufferTextureLayerEXT(uint framebuffer, int attachment, uint texture, int level, int layer);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedFramebufferTextureFaceEXT(uint framebuffer, int attachment, uint texture, int level, int face);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureRenderbufferEXT(uint texture, int target, uint renderbuffer);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexRenderbufferEXT(int texunit, int target, uint renderbuffer);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayVertexOffsetEXT(uint vaobj, uint buffer, int size, int type, int stride, nint offset);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayColorOffsetEXT(uint vaobj, uint buffer, int size, int type, int stride, nint offset);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayEdgeFlagOffsetEXT(uint vaobj, uint buffer, int stride, nint offset);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayIndexOffsetEXT(uint vaobj, uint buffer, int type, int stride, nint offset);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayNormalOffsetEXT(uint vaobj, uint buffer, int type, int stride, nint offset);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayTexCoordOffsetEXT(uint vaobj, uint buffer, int size, int type, int stride, nint offset);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayMultiTexCoordOffsetEXT(uint vaobj, uint buffer, int texunit, int size, int type, int stride, nint offset);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayFogCoordOffsetEXT(uint vaobj, uint buffer, int type, int stride, nint offset);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArraySecondaryColorOffsetEXT(uint vaobj, uint buffer, int size, int type, int stride, nint offset);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayVertexAttribOffsetEXT(uint vaobj, uint buffer, uint index, int size, int type, [MarshalAs(UnmanagedType.I1)] bool normalized, int stride, nint offset);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayVertexAttribIOffsetEXT(uint vaobj, uint buffer, uint index, int size, int type, int stride, nint offset);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEnableVertexArrayEXT(uint vaobj, int array);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDisableVertexArrayEXT(uint vaobj, int array);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEnableVertexArrayAttribEXT(uint vaobj, uint index);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDisableVertexArrayAttribEXT(uint vaobj, uint index);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVertexArrayIntegervEXT(uint vaobj, int pname, int* param);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVertexArrayPointervEXT(uint vaobj, int pname, nint* param);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVertexArrayIntegeri_vEXT(uint vaobj, uint index, int pname, int* param);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVertexArrayPointeri_vEXT(uint vaobj, uint index, int pname, nint* param);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate nint glMapNamedBufferRangeEXT(uint buffer, nint offset, uint length, uint access);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFlushMappedNamedBufferRangeEXT(uint buffer, nint offset, uint length);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearNamedBufferDataEXT(uint buffer, int internalformat, int format, int type, nint data);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearNamedBufferSubDataEXT(uint buffer, int internalformat, uint offset, uint size, int format, int type, nint data);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedFramebufferParameteriEXT(uint framebuffer, int pname, int param);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNamedFramebufferParameterivEXT(uint framebuffer, int pname, int* @params);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform1dEXT(uint program, int location, double x);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform2dEXT(uint program, int location, double x, double y);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform3dEXT(uint program, int location, double x, double y, double z);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform4dEXT(uint program, int location, double x, double y, double z, double w);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform1dvEXT(uint program, int location, int count, double* value);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform2dvEXT(uint program, int location, int count, double* value);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform3dvEXT(uint program, int location, int count, double* value);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform4dvEXT(uint program, int location, int count, double* value);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix2dvEXT(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix3dvEXT(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix4dvEXT(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix2x3dvEXT(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix2x4dvEXT(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix3x2dvEXT(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix3x4dvEXT(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix4x2dvEXT(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix4x3dvEXT(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureBufferRangeEXT(uint texture, int target, int internalformat, uint buffer, nint offset, uint size);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureStorage1DEXT(uint texture, int target, int levels, int internalformat, int width);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureStorage2DEXT(uint texture, int target, int levels, int internalformat, int width, int height);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureStorage3DEXT(uint texture, int target, int levels, int internalformat, int width, int height, int depth);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureStorage2DMultisampleEXT(uint texture, int target, int samples, int internalformat, int width, int height, [MarshalAs(UnmanagedType.I1)] bool fixedsamplelocations);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureStorage3DMultisampleEXT(uint texture, int target, int samples, int internalformat, int width, int height, int depth, [MarshalAs(UnmanagedType.I1)] bool fixedsamplelocations);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayBindVertexBufferEXT(uint vaobj, uint bindingindex, uint buffer, nint offset, int stride);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayVertexAttribFormatEXT(uint vaobj, uint attribindex, int size, int type, [MarshalAs(UnmanagedType.I1)] bool normalized, uint relativeoffset);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayVertexAttribIFormatEXT(uint vaobj, uint attribindex, int size, int type, uint relativeoffset);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayVertexAttribLFormatEXT(uint vaobj, uint attribindex, int size, int type, uint relativeoffset);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayVertexAttribBindingEXT(uint vaobj, uint attribindex, uint bindingindex);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayVertexBindingDivisorEXT(uint vaobj, uint bindingindex, uint divisor);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayVertexAttribLOffsetEXT(uint vaobj, uint buffer, uint index, int size, int type, int stride, nint offset);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexturePageCommitmentEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, [MarshalAs(UnmanagedType.I1)] bool commit);

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayVertexAttribDivisorEXT(uint vaobj, uint index, uint divisor);

		[RequiredByFeature("GL_EXT_discard_framebuffer", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDiscardFramebufferEXT(int target, int numAttachments, int* attachments);

		[RequiredByFeature("GL_EXT_EGL_image_storage", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glEGLImageTargetTexStorageEXT(int target, nint image, int* attrib_list);

		[RequiredByFeature("GL_EXT_EGL_image_storage", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glEGLImageTargetTextureStorageEXT(uint texture, nint image, int* attrib_list);

		[RequiredByFeature("GL_EXT_external_buffer", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBufferStorageExternalEXT(int target, nint offset, uint size, nint clientBuffer, uint flags);

		[RequiredByFeature("GL_EXT_external_buffer", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedBufferStorageExternalEXT(uint buffer, nint offset, uint size, nint clientBuffer, uint flags);

		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetFragmentShadingRatesEXT(int samples, int maxCount, int* count, int* shadingRates);

		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glShadingRateEXT(int rate);

		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glShadingRateCombinerOpsEXT(int combinerOp0, int combinerOp1);

		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferShadingRateEXT(int target, int attachment, uint texture, int baseLayer, int numLayers, int texelWidth, int texelHeight);

		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindRenderbufferEXT(int target, uint renderbuffer);

		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindFramebufferEXT(int target, uint framebuffer);

		[RequiredByFeature("GL_EXT_gpu_program_parameters")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramEnvParameters4fvEXT(int target, uint index, int count, float* @params);

		[RequiredByFeature("GL_EXT_gpu_program_parameters")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramLocalParameters4fvEXT(int target, uint index, int count, float* @params);

		[RequiredByFeature("GL_EXT_histogram")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetHistogramEXT(int target, [MarshalAs(UnmanagedType.I1)] bool reset, int format, int type, nint values);

		[RequiredByFeature("GL_EXT_histogram")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetHistogramParameterfvEXT(int target, int pname, float* @params);

		[RequiredByFeature("GL_EXT_histogram")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetHistogramParameterivEXT(int target, int pname, int* @params);

		[RequiredByFeature("GL_EXT_histogram")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetMinmaxEXT(int target, [MarshalAs(UnmanagedType.I1)] bool reset, int format, int type, nint values);

		[RequiredByFeature("GL_EXT_histogram")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMinmaxParameterfvEXT(int target, int pname, float* @params);

		[RequiredByFeature("GL_EXT_histogram")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMinmaxParameterivEXT(int target, int pname, int* @params);

		[RequiredByFeature("GL_EXT_index_func")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glIndexFuncEXT(int func, float @ref);

		[RequiredByFeature("GL_EXT_index_material")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glIndexMaterialEXT(int face, int mode);

		[RequiredByFeature("GL_EXT_light_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glApplyTextureEXT(int mode);

		[RequiredByFeature("GL_EXT_light_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureLightEXT(int pname);

		[RequiredByFeature("GL_EXT_light_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureMaterialEXT(int face, int mode);

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteMemoryObjectsEXT(int n, uint* memoryObjects);

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsMemoryObjectEXT(uint memoryObject);

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCreateMemoryObjectsEXT(int n, uint* memoryObjects);

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMemoryObjectParameterivEXT(uint memoryObject, int pname, int* @params);

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMemoryObjectParameterivEXT(uint memoryObject, int pname, int* @params);

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexStorageMem2DEXT(int target, int levels, int internalFormat, int width, int height, uint memory, ulong offset);

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexStorageMem2DMultisampleEXT(int target, int samples, int internalFormat, int width, int height, [MarshalAs(UnmanagedType.I1)] bool fixedSampleLocations, uint memory, ulong offset);

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexStorageMem3DEXT(int target, int levels, int internalFormat, int width, int height, int depth, uint memory, ulong offset);

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexStorageMem3DMultisampleEXT(int target, int samples, int internalFormat, int width, int height, int depth, [MarshalAs(UnmanagedType.I1)] bool fixedSampleLocations, uint memory, ulong offset);

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBufferStorageMemEXT(int target, uint size, uint memory, ulong offset);

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureStorageMem2DEXT(uint texture, int levels, int internalFormat, int width, int height, uint memory, ulong offset);

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureStorageMem2DMultisampleEXT(uint texture, int samples, int internalFormat, int width, int height, [MarshalAs(UnmanagedType.I1)] bool fixedSampleLocations, uint memory, ulong offset);

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureStorageMem3DEXT(uint texture, int levels, int internalFormat, int width, int height, int depth, uint memory, ulong offset);

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureStorageMem3DMultisampleEXT(uint texture, int samples, int internalFormat, int width, int height, int depth, [MarshalAs(UnmanagedType.I1)] bool fixedSampleLocations, uint memory, ulong offset);

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedBufferStorageMemEXT(uint buffer, uint size, uint memory, ulong offset);

		[RequiredByFeature("GL_EXT_memory_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexStorageMem1DEXT(int target, int levels, int internalFormat, int width, uint memory, ulong offset);

		[RequiredByFeature("GL_EXT_memory_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureStorageMem1DEXT(uint texture, int levels, int internalFormat, int width, uint memory, ulong offset);

		[RequiredByFeature("GL_EXT_memory_object_fd", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glImportMemoryFdEXT(uint memory, ulong size, int handleType, int fd);

		[RequiredByFeature("GL_EXT_memory_object_win32", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glImportMemoryWin32HandleEXT(uint memory, ulong size, int handleType, nint handle);

		[RequiredByFeature("GL_EXT_memory_object_win32", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glImportMemoryWin32NameEXT(uint memory, ulong size, int handleType, nint name);

		[RequiredByFeature("GL_EXT_multisample")]
		[RequiredByFeature("GL_SGIS_multisample")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSampleMaskEXT(float value, [MarshalAs(UnmanagedType.I1)] bool invert);

		[RequiredByFeature("GL_EXT_multisample")]
		[RequiredByFeature("GL_SGIS_multisample")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSamplePatternEXT(int pattern);

		[RequiredByFeature("GL_EXT_multisampled_render_to_texture", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferTexture2DMultisampleEXT(int target, int attachment, int textarget, uint texture, int level, int samples);

		[RequiredByFeature("GL_EXT_multiview_draw_buffers", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glReadBufferIndexedEXT(int src, int index);

		[RequiredByFeature("GL_EXT_multiview_draw_buffers", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDrawBuffersIndexedEXT(int n, int* location, int* indices);

		[RequiredByFeature("GL_EXT_multiview_draw_buffers", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetIntegeri_vEXT(int target, uint index, int* data);

		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
		[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenQueriesEXT(int n, uint* ids);

		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
		[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteQueriesEXT(int n, uint* ids);

		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
		[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsQueryEXT(uint id);

		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
		[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBeginQueryEXT(int target, uint id);

		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
		[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEndQueryEXT(int target);

		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
		[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetQueryivEXT(int target, int pname, int* @params);

		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
		[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetQueryObjectuivEXT(uint id, int pname, uint* @params);

		[RequiredByFeature("GL_EXT_pixel_transform")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPixelTransformParameteriEXT(int target, int pname, int param);

		[RequiredByFeature("GL_EXT_pixel_transform")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPixelTransformParameterfEXT(int target, int pname, float param);

		[RequiredByFeature("GL_EXT_pixel_transform")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPixelTransformParameterivEXT(int target, int pname, int* @params);

		[RequiredByFeature("GL_EXT_pixel_transform")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPixelTransformParameterfvEXT(int target, int pname, float* @params);

		[RequiredByFeature("GL_EXT_pixel_transform")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPixelTransformParameterivEXT(int target, int pname, int* @params);

		[RequiredByFeature("GL_EXT_pixel_transform")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPixelTransformParameterfvEXT(int target, int pname, float* @params);

		[RequiredByFeature("GL_EXT_polygon_offset")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPolygonOffsetEXT(float factor, float bias);

		[RequiredByFeature("GL_EXT_raster_multisample", Api = "gl|glcore|gles2")]
		[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRasterSamplesEXT(uint samples, [MarshalAs(UnmanagedType.I1)] bool fixedsamplelocations);

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetUnsignedBytevEXT(int pname, byte* data);

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetUnsignedBytei_vEXT(int target, uint index, byte* data);

		[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenSemaphoresEXT(int n, uint* semaphores);

		[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteSemaphoresEXT(int n, uint* semaphores);

		[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsSemaphoreEXT(uint semaphore);

		[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSemaphoreParameterui64vEXT(uint semaphore, int pname, ulong* @params);

		[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetSemaphoreParameterui64vEXT(uint semaphore, int pname, ulong* @params);

		[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, uint* textures, int* srcLayouts);

		[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, uint* textures, int* dstLayouts);

		[RequiredByFeature("GL_EXT_semaphore_fd", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glImportSemaphoreFdEXT(uint semaphore, int handleType, int fd);

		[RequiredByFeature("GL_EXT_semaphore_win32", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glImportSemaphoreWin32HandleEXT(uint semaphore, int handleType, nint handle);

		[RequiredByFeature("GL_EXT_semaphore_win32", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glImportSemaphoreWin32NameEXT(uint semaphore, int handleType, nint name);

		[RequiredByFeature("GL_EXT_separate_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUseShaderProgramEXT(int type, uint program);

		[RequiredByFeature("GL_EXT_separate_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glActiveProgramEXT(uint program);

		[RequiredByFeature("GL_EXT_separate_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glCreateShaderProgramEXT(int type, string @string);

		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glActiveShaderProgramEXT(uint pipeline, uint program);

		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindProgramPipelineEXT(uint pipeline);

		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glCreateShaderProgramvEXT(int type, int count, string[] strings);

		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteProgramPipelinesEXT(int n, uint* pipelines);

		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenProgramPipelinesEXT(int n, uint* pipelines);

		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramPipelineInfoLogEXT(uint pipeline, int bufSize, int* length, StringBuilder infoLog);

		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramPipelineivEXT(uint pipeline, int pname, int* @params);

		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsProgramPipelineEXT(uint pipeline);

		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUseProgramStagesEXT(uint pipeline, uint stages, uint program);

		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glValidateProgramPipelineEXT(uint pipeline);

		[RequiredByFeature("GL_EXT_shader_framebuffer_fetch_non_coherent", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferFetchBarrierEXT();

		[RequiredByFeature("GL_EXT_shader_image_load_store")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindImageTextureEXT(uint index, uint texture, int level, [MarshalAs(UnmanagedType.I1)] bool layered, int layer, int access, int format);

		[RequiredByFeature("GL_EXT_shader_pixel_local_storage2", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferPixelLocalStorageSizeEXT(uint target, int size);

		[RequiredByFeature("GL_EXT_shader_pixel_local_storage2", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glGetFramebufferPixelLocalStorageSizeEXT(uint target);

		[RequiredByFeature("GL_EXT_shader_pixel_local_storage2", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glClearPixelLocalStorageuiEXT(int offset, int n, uint* values);

		[RequiredByFeature("GL_EXT_stencil_clear_tag")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glStencilClearTagEXT(int stencilTagBits, uint stencilClearTag);

		[RequiredByFeature("GL_EXT_stencil_two_side")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glActiveStencilFaceEXT(int face);

		[RequiredByFeature("GL_EXT_texture_integer")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearColorIiEXT(int red, int green, int blue, int alpha);

		[RequiredByFeature("GL_EXT_texture_integer")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearColorIuiEXT(uint red, uint green, uint blue, uint alpha);

		[RequiredByFeature("GL_EXT_texture_object")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal unsafe delegate bool glAreTexturesResidentEXT(int n, uint* textures, byte* residences);

		[RequiredByFeature("GL_EXT_texture_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteTexturesEXT(int n, uint* textures);

		[RequiredByFeature("GL_EXT_texture_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenTexturesEXT(int n, uint* textures);

		[RequiredByFeature("GL_EXT_texture_object")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsTextureEXT(uint texture);

		[RequiredByFeature("GL_EXT_texture_perturb_normal")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureNormalEXT(int mode);

		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexStorageAttribs2DEXT(int target, int levels, int internalformat, int width, int height, int* attrib_list);

		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexStorageAttribs3DEXT(int target, int levels, int internalformat, int width, int height, int depth, int* attrib_list);

		[RequiredByFeature("GL_EXT_transform_feedback")]
		[RequiredByFeature("GL_NV_transform_feedback")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindBufferOffsetEXT(int target, uint index, uint buffer, nint offset);

		[RequiredByFeature("GL_EXT_vertex_array")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColorPointerEXT(int size, int type, int stride, int count, nint pointer);

		[RequiredByFeature("GL_EXT_vertex_array")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glEdgeFlagPointerEXT(int stride, int count, byte* pointer);

		[RequiredByFeature("GL_EXT_vertex_array")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glIndexPointerEXT(int type, int stride, int count, nint pointer);

		[RequiredByFeature("GL_EXT_vertex_array")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNormalPointerEXT(int type, int stride, int count, nint pointer);

		[RequiredByFeature("GL_EXT_vertex_array")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoordPointerEXT(int size, int type, int stride, int count, nint pointer);

		[RequiredByFeature("GL_EXT_vertex_array")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexPointerEXT(int size, int type, int stride, int count, nint pointer);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBeginVertexShaderEXT();

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEndVertexShaderEXT();

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindVertexShaderEXT(uint id);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glGenVertexShadersEXT(uint range);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDeleteVertexShaderEXT(uint id);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glShaderOp1EXT(int op, uint res, uint arg1);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glShaderOp2EXT(int op, uint res, uint arg1, uint arg2);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glShaderOp3EXT(int op, uint res, uint arg1, uint arg2, uint arg3);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSwizzleEXT(uint res, uint @in, int outX, int outY, int outZ, int outW);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glWriteMaskEXT(uint res, uint @in, int outX, int outY, int outZ, int outW);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glInsertComponentEXT(uint res, uint src, uint num);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glExtractComponentEXT(uint res, uint src, uint num);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glGenSymbolsEXT(int datatype, int storagetype, int range, uint components);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSetInvariantEXT(uint id, int type, nint addr);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSetLocalConstantEXT(uint id, int type, nint addr);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVariantbvEXT(uint id, sbyte* addr);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVariantsvEXT(uint id, short* addr);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVariantivEXT(uint id, int* addr);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVariantfvEXT(uint id, float* addr);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVariantdvEXT(uint id, double* addr);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVariantubvEXT(uint id, byte* addr);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVariantusvEXT(uint id, ushort* addr);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVariantuivEXT(uint id, uint* addr);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVariantPointerEXT(uint id, int type, uint stride, nint addr);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEnableVariantClientStateEXT(uint id);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDisableVariantClientStateEXT(uint id);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glBindLightParameterEXT(int light, int value);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glBindMaterialParameterEXT(int face, int value);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glBindTexGenParameterEXT(int unit, int coord, int value);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glBindTextureUnitParameterEXT(int unit, int value);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glBindParameterEXT(int value);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsVariantEnabledEXT(uint id, int cap);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVariantBooleanvEXT(uint id, int value, byte* data);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVariantIntegervEXT(uint id, int value, int* data);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVariantFloatvEXT(uint id, int value, float* data);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVariantPointervEXT(uint id, int value, nint* data);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetInvariantBooleanvEXT(uint id, int value, byte* data);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetInvariantIntegervEXT(uint id, int value, int* data);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetInvariantFloatvEXT(uint id, int value, float* data);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetLocalConstantBooleanvEXT(uint id, int value, byte* data);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetLocalConstantIntegervEXT(uint id, int value, int* data);

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetLocalConstantFloatvEXT(uint id, int value, float* data);

		[RequiredByFeature("GL_EXT_vertex_weighting")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexWeightfEXT(float weight);

		[RequiredByFeature("GL_EXT_vertex_weighting")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexWeightfvEXT(float* weight);

		[RequiredByFeature("GL_EXT_vertex_weighting")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexWeightPointerEXT(int size, int type, int stride, nint pointer);

		[RequiredByFeature("GL_EXT_win32_keyed_mutex", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glAcquireKeyedMutexWin32EXT(uint memory, ulong key, uint timeout);

		[RequiredByFeature("GL_EXT_win32_keyed_mutex", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glReleaseKeyedMutexWin32EXT(uint memory, ulong key);

		[RequiredByFeature("GL_EXT_window_rectangles", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWindowRectanglesEXT(int mode, int count, int* box);

		[RequiredByFeature("GL_EXT_x11_sync_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glImportSyncEXT(int external_sync_type, nint external_sync, uint flags);

		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTransformFeedbackVaryings_Unmanaged(uint program, int count, nint* varyings, int bufferMode);

		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_KHR_blend_equation_advanced", Api = "gl|glcore|gles2")]
		[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBlendBarrier();

		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_ES3_2_compatibility", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_primitive_bounding_box", Api = "gles2")]
		[RequiredByFeature("GL_OES_primitive_bounding_box", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPrimitiveBoundingBox(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCullFace(int mode);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFrontFace(int mode);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glHint(int target, int mode);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLineWidth(float width);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPointSize(float size);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_NV_polygon_mode", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPolygonMode(int face, int mode);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glScissor(int x, int y, int width, int height);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexParameterf(int target, int pname, float param);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexParameterfv(int target, int pname, float* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexParameteri(int target, int pname, int param);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexParameteriv(int target, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, nint pixels);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, nint pixels);

		[RequiredByFeature("GL_VERSION_1_0")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawBuffer(int buf);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClear(uint mask);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearColor(float red, float green, float blue, float alpha);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearStencil(int s);

		[RequiredByFeature("GL_VERSION_1_0")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearDepth(double depth);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glStencilMask(uint mask);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColorMask([MarshalAs(UnmanagedType.I1)] bool red, [MarshalAs(UnmanagedType.I1)] bool green, [MarshalAs(UnmanagedType.I1)] bool blue, [MarshalAs(UnmanagedType.I1)] bool alpha);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDepthMask([MarshalAs(UnmanagedType.I1)] bool flag);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDisable(int cap);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEnable(int cap);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFinish();

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFlush();

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBlendFunc(int sfactor, int dfactor);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLogicOp(int opcode);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glStencilFunc(int func, int @ref, uint mask);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glStencilOp(int fail, int zfail, int zpass);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDepthFunc(int func);

		[RequiredByFeature("GL_VERSION_1_0")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPixelStoref(int pname, float param);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPixelStorei(int pname, int param);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glReadBuffer(int src);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glReadPixels(int x, int y, int width, int height, int format, int type, nint pixels);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetBooleanv(int pname, byte* data);

		[RequiredByFeature("GL_VERSION_1_0")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetDoublev(int pname, double* data);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glGetError();

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetFloatv(int pname, float* data);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetIntegerv(int pname, int* data);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate nint glGetString(int name);

		[RequiredByFeature("GL_VERSION_1_0")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetTexImage(int target, int level, int format, int type, nint pixels);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexParameterfv(int target, int pname, float* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexParameteriv(int target, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexLevelParameterfv(int target, int level, int pname, float* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexLevelParameteriv(int target, int level, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsEnabled(int cap);

		[RequiredByFeature("GL_VERSION_1_0")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDepthRange(double n, double f);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glViewport(int x, int y, int width, int height);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNewList(uint list, int mode);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEndList();

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCallList(uint list);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCallLists(int n, int type, nint lists);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDeleteLists(uint list, int range);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glGenLists(int range);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glListBase(uint @base);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBegin(int mode);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte* bitmap);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor3b(sbyte red, sbyte green, sbyte blue);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor3bv(sbyte* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor3d(double red, double green, double blue);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor3dv(double* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor3f(float red, float green, float blue);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor3fv(float* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor3i(int red, int green, int blue);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor3iv(int* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor3s(short red, short green, short blue);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor3sv(short* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor3ub(byte red, byte green, byte blue);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor3ubv(byte* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor3ui(uint red, uint green, uint blue);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor3uiv(uint* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor3us(ushort red, ushort green, ushort blue);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor3usv(ushort* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor4b(sbyte red, sbyte green, sbyte blue, sbyte alpha);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor4bv(sbyte* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor4d(double red, double green, double blue, double alpha);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor4dv(double* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor4f(float red, float green, float blue, float alpha);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor4fv(float* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor4i(int red, int green, int blue, int alpha);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor4iv(int* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor4s(short red, short green, short blue, short alpha);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor4sv(short* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor4ub(byte red, byte green, byte blue, byte alpha);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor4ubv(byte* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor4ui(uint red, uint green, uint blue, uint alpha);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor4uiv(uint* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor4us(ushort red, ushort green, ushort blue, ushort alpha);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor4usv(ushort* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEdgeFlag([MarshalAs(UnmanagedType.I1)] bool flag);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glEdgeFlagv(byte* flag);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEnd();

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glIndexd(double c);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glIndexdv(double* c);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glIndexf(float c);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glIndexfv(float* c);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glIndexi(int c);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glIndexiv(int* c);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glIndexs(short c);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glIndexsv(short* c);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNormal3b(sbyte nx, sbyte ny, sbyte nz);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNormal3bv(sbyte* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNormal3d(double nx, double ny, double nz);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNormal3dv(double* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNormal3f(float nx, float ny, float nz);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNormal3fv(float* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNormal3i(int nx, int ny, int nz);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNormal3iv(int* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNormal3s(short nx, short ny, short nz);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNormal3sv(short* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRasterPos2d(double x, double y);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRasterPos2dv(double* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRasterPos2f(float x, float y);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRasterPos2fv(float* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRasterPos2i(int x, int y);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRasterPos2iv(int* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRasterPos2s(short x, short y);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRasterPos2sv(short* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRasterPos3d(double x, double y, double z);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRasterPos3dv(double* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRasterPos3f(float x, float y, float z);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRasterPos3fv(float* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRasterPos3i(int x, int y, int z);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRasterPos3iv(int* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRasterPos3s(short x, short y, short z);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRasterPos3sv(short* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRasterPos4d(double x, double y, double z, double w);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRasterPos4dv(double* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRasterPos4f(float x, float y, float z, float w);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRasterPos4fv(float* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRasterPos4i(int x, int y, int z, int w);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRasterPos4iv(int* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRasterPos4s(short x, short y, short z, short w);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRasterPos4sv(short* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRectd(double x1, double y1, double x2, double y2);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRectdv(double* v1, double* v2);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRectf(float x1, float y1, float x2, float y2);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRectfv(float* v1, float* v2);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRecti(int x1, int y1, int x2, int y2);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRectiv(int* v1, int* v2);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRects(short x1, short y1, short x2, short y2);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRectsv(short* v1, short* v2);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord1d(double s);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord1dv(double* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord1f(float s);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord1fv(float* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord1i(int s);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord1iv(int* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord1s(short s);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord1sv(short* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord2d(double s, double t);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord2dv(double* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord2f(float s, float t);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord2fv(float* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord2i(int s, int t);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord2iv(int* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord2s(short s, short t);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord2sv(short* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord3d(double s, double t, double r);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord3dv(double* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord3f(float s, float t, float r);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord3fv(float* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord3i(int s, int t, int r);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord3iv(int* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord3s(short s, short t, short r);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord3sv(short* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord4d(double s, double t, double r, double q);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord4dv(double* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord4f(float s, float t, float r, float q);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord4fv(float* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord4i(int s, int t, int r, int q);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord4iv(int* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord4s(short s, short t, short r, short q);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord4sv(short* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex2d(double x, double y);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex2dv(double* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex2f(float x, float y);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex2fv(float* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex2i(int x, int y);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex2iv(int* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex2s(short x, short y);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex2sv(short* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex3d(double x, double y, double z);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex3dv(double* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex3f(float x, float y, float z);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex3fv(float* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex3i(int x, int y, int z);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex3iv(int* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex3s(short x, short y, short z);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex3sv(short* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex4d(double x, double y, double z, double w);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex4dv(double* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex4f(float x, float y, float z, float w);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex4fv(float* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex4i(int x, int y, int z, int w);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex4iv(int* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex4s(short x, short y, short z, short w);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex4sv(short* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glClipPlane(int plane, double* equation);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColorMaterial(int face, int mode);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFogf(int pname, float param);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFogfv(int pname, float* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFogi(int pname, int param);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFogiv(int pname, int* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLightf(int light, int pname, float param);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glLightfv(int light, int pname, float* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLighti(int light, int pname, int param);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glLightiv(int light, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLightModelf(int pname, float param);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glLightModelfv(int pname, float* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLightModeli(int pname, int param);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glLightModeliv(int pname, int* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLineStipple(int factor, ushort pattern);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMaterialf(int face, int pname, float param);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMaterialfv(int face, int pname, float* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMateriali(int face, int pname, int param);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMaterialiv(int face, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPolygonStipple(byte* mask);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glShadeModel(int mode);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexEnvf(int target, int pname, float param);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexEnvfv(int target, int pname, float* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexEnvi(int target, int pname, int param);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexEnviv(int target, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexGend(int coord, int pname, double param);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexGendv(int coord, int pname, double* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexGenf(int coord, int pname, float param);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexGenfv(int coord, int pname, float* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexGeni(int coord, int pname, int param);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexGeniv(int coord, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFeedbackBuffer(int size, int type, float* buffer);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSelectBuffer(int size, uint* buffer);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glRenderMode(int mode);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glInitNames();

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLoadName(uint name);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPassThrough(float token);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPopName();

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPushName(uint name);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearAccum(float red, float green, float blue, float alpha);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearIndex(float c);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glIndexMask(uint mask);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glAccum(int op, float value);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPopAttrib();

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPushAttrib(uint mask);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMap1d(int target, double u1, double u2, int stride, int order, double* points);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMap1f(int target, float u1, float u2, int stride, int order, float* points);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMap2d(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMap2f(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMapGrid1d(int un, double u1, double u2);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMapGrid1f(int un, float u1, float u2);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEvalCoord1d(double u);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glEvalCoord1dv(double* u);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEvalCoord1f(float u);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glEvalCoord1fv(float* u);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEvalCoord2d(double u, double v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glEvalCoord2dv(double* u);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEvalCoord2f(float u, float v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glEvalCoord2fv(float* u);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEvalMesh1(int mode, int i1, int i2);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEvalPoint1(int i);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEvalMesh2(int mode, int i1, int i2, int j1, int j2);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEvalPoint2(int i, int j);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glAlphaFunc(int func, float @ref);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPixelZoom(float xfactor, float yfactor);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPixelTransferf(int pname, float param);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPixelTransferi(int pname, int param);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPixelMapfv(int map, int mapsize, float* values);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPixelMapuiv(int map, int mapsize, uint* values);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPixelMapusv(int map, int mapsize, ushort* values);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyPixels(int x, int y, int width, int height, int type);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawPixels(int width, int height, int format, int type, nint pixels);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetClipPlane(int plane, double* equation);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetLightfv(int light, int pname, float* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetLightiv(int light, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMapdv(int target, int query, double* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMapfv(int target, int query, float* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMapiv(int target, int query, int* v);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMaterialfv(int face, int pname, float* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMaterialiv(int face, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPixelMapfv(int map, float* values);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPixelMapuiv(int map, uint* values);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPixelMapusv(int map, ushort* values);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPolygonStipple(byte* mask);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexEnvfv(int target, int pname, float* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexEnviv(int target, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexGendv(int coord, int pname, double* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexGenfv(int coord, int pname, float* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexGeniv(int coord, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsList(uint list);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFrustum(double left, double right, double bottom, double top, double zNear, double zFar);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLoadIdentity();

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glLoadMatrixf(float* m);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glLoadMatrixd(double* m);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMatrixMode(int mode);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultMatrixf(float* m);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultMatrixd(double* m);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glOrtho(double left, double right, double bottom, double top, double zNear, double zFar);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPopMatrix();

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPushMatrix();

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRotated(double angle, double x, double y, double z);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRotatef(float angle, float x, float y, float z);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glScaled(double x, double y, double z);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glScalef(float x, float y, float z);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTranslated(double x, double y, double z);

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTranslatef(float x, float y, float z);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_EXT_vertex_array")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawArrays(int mode, int first, int count);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawElements(int mode, int count, int type, nint indices);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_EXT_vertex_array")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPointerv(int pname, nint* @params);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPolygonOffset(float factor, float units);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_EXT_copy_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyTexImage1D(int target, int level, int internalformat, int x, int y, int width, int border);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_copy_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyTexImage2D(int target, int level, int internalformat, int x, int y, int width, int height, int border);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_EXT_copy_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyTexSubImage1D(int target, int level, int xoffset, int x, int y, int width);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_copy_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyTexSubImage2D(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_EXT_subtexture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, nint pixels);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_EXT_subtexture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, nint pixels);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_EXT_texture_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindTexture(int target, uint texture);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteTextures(int n, uint* textures);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenTextures(int n, uint* textures);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsTexture(uint texture);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_EXT_vertex_array")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glArrayElement(int i);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColorPointer(int size, int type, int stride, nint pointer);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDisableClientState(int array);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEdgeFlagPointer(int stride, nint pointer);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEnableClientState(int array);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glIndexPointer(int type, int stride, nint pointer);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glInterleavedArrays(int format, int stride, nint pointer);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNormalPointer(int type, int stride, nint pointer);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoordPointer(int size, int type, int stride, nint pointer);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexPointer(int size, int type, int stride, nint pointer);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal unsafe delegate bool glAreTexturesResident(int n, uint* textures, byte* residences);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_EXT_texture_object")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPrioritizeTextures(int n, uint* textures, float* priorities);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glIndexub(byte c);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glIndexubv(byte* c);

		[RequiredByFeature("GL_VERSION_1_1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPopClientAttrib();

		[RequiredByFeature("GL_VERSION_1_1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPushClientAttrib(uint mask);

		[RequiredByFeature("GL_VERSION_1_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_EXT_draw_range_elements")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawRangeElements(int mode, uint start, uint end, int count, int type, nint indices);

		[RequiredByFeature("GL_VERSION_1_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture3D")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, nint pixels);

		[RequiredByFeature("GL_VERSION_1_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture3D")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, nint pixels);

		[RequiredByFeature("GL_VERSION_1_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_copy_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glActiveTexture(int texture);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_multisample")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSampleCoverage(float value, [MarshalAs(UnmanagedType.I1)] bool invert);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_compression")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, nint data);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_compression")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, nint data);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_texture_compression")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, nint data);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_compression")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, nint data);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_texture_compression")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, nint data);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_texture_compression")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, nint data);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_texture_compression")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetCompressedTexImage(int target, int level, nint img);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClientActiveTexture(int texture);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord1d(int target, double s);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord1dv(int target, double* v);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord1f(int target, float s);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord1fv(int target, float* v);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord1i(int target, int s);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord1iv(int target, int* v);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord1s(int target, short s);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord1sv(int target, short* v);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord2d(int target, double s, double t);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord2dv(int target, double* v);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord2f(int target, float s, float t);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord2fv(int target, float* v);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord2i(int target, int s, int t);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord2iv(int target, int* v);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord2s(int target, short s, short t);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord2sv(int target, short* v);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord3d(int target, double s, double t, double r);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord3dv(int target, double* v);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord3f(int target, float s, float t, float r);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord3fv(int target, float* v);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord3i(int target, int s, int t, int r);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord3iv(int target, int* v);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord3s(int target, short s, short t, short r);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord3sv(int target, short* v);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord4d(int target, double s, double t, double r, double q);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord4dv(int target, double* v);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord4f(int target, float s, float t, float r, float q);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord4fv(int target, float* v);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord4i(int target, int s, int t, int r, int q);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord4iv(int target, int* v);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord4s(int target, short s, short t, short r, short q);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord4sv(int target, short* v);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_transpose_matrix")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glLoadTransposeMatrixf(float* m);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_transpose_matrix")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glLoadTransposeMatrixd(double* m);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_transpose_matrix")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultTransposeMatrixf(float* m);

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_transpose_matrix")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultTransposeMatrixd(double* m);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_EXT_blend_func_separate")]
		[RequiredByFeature("GL_INGR_blend_func_separate")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBlendFuncSeparate(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_multi_draw_arrays", Api = "gl|gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiDrawArrays(int mode, int* first, int* count, int drawcount);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_multi_draw_arrays", Api = "gl|gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiDrawElements(int mode, int* count, int type, nint* indices, int drawcount);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ARB_point_parameters")]
		[RequiredByFeature("GL_EXT_point_parameters")]
		[RequiredByFeature("GL_SGIS_point_parameters")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPointParameterf(int pname, float param);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ARB_point_parameters")]
		[RequiredByFeature("GL_EXT_point_parameters")]
		[RequiredByFeature("GL_SGIS_point_parameters")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPointParameterfv(int pname, float* @params);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_NV_point_sprite")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPointParameteri(int pname, int param);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_NV_point_sprite")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPointParameteriv(int pname, int* @params);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_fog_coord")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFogCoordf(float coord);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_fog_coord")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFogCoordfv(float* coord);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_fog_coord")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFogCoordd(double coord);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_fog_coord")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFogCoorddv(double* coord);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_fog_coord")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFogCoordPointer(int type, int stride, nint pointer);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSecondaryColor3b(sbyte red, sbyte green, sbyte blue);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSecondaryColor3bv(sbyte* v);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSecondaryColor3d(double red, double green, double blue);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSecondaryColor3dv(double* v);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSecondaryColor3f(float red, float green, float blue);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSecondaryColor3fv(float* v);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSecondaryColor3i(int red, int green, int blue);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSecondaryColor3iv(int* v);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSecondaryColor3s(short red, short green, short blue);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSecondaryColor3sv(short* v);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSecondaryColor3ub(byte red, byte green, byte blue);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSecondaryColor3ubv(byte* v);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSecondaryColor3ui(uint red, uint green, uint blue);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSecondaryColor3uiv(uint* v);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSecondaryColor3us(ushort red, ushort green, ushort blue);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSecondaryColor3usv(ushort* v);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSecondaryColorPointer(int size, int type, int stride, nint pointer);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos")]
		[RequiredByFeature("GL_MESA_window_pos")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glWindowPos2d(double x, double y);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos")]
		[RequiredByFeature("GL_MESA_window_pos")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWindowPos2dv(double* v);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos")]
		[RequiredByFeature("GL_MESA_window_pos")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glWindowPos2f(float x, float y);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos")]
		[RequiredByFeature("GL_MESA_window_pos")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWindowPos2fv(float* v);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos")]
		[RequiredByFeature("GL_MESA_window_pos")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glWindowPos2i(int x, int y);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos")]
		[RequiredByFeature("GL_MESA_window_pos")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWindowPos2iv(int* v);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos")]
		[RequiredByFeature("GL_MESA_window_pos")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glWindowPos2s(short x, short y);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos")]
		[RequiredByFeature("GL_MESA_window_pos")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWindowPos2sv(short* v);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos")]
		[RequiredByFeature("GL_MESA_window_pos")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glWindowPos3d(double x, double y, double z);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos")]
		[RequiredByFeature("GL_MESA_window_pos")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWindowPos3dv(double* v);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos")]
		[RequiredByFeature("GL_MESA_window_pos")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glWindowPos3f(float x, float y, float z);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos")]
		[RequiredByFeature("GL_MESA_window_pos")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWindowPos3fv(float* v);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos")]
		[RequiredByFeature("GL_MESA_window_pos")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glWindowPos3i(int x, int y, int z);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos")]
		[RequiredByFeature("GL_MESA_window_pos")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWindowPos3iv(int* v);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos")]
		[RequiredByFeature("GL_MESA_window_pos")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glWindowPos3s(short x, short y, short z);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos")]
		[RequiredByFeature("GL_MESA_window_pos")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWindowPos3sv(short* v);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_blend_color")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBlendColor(float red, float green, float blue, float alpha);

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_blend_minmax")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBlendEquation(int mode);

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_occlusion_query")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenQueries(int n, uint* ids);

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_occlusion_query")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteQueries(int n, uint* ids);

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_occlusion_query")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsQuery(uint id);

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_occlusion_query")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBeginQuery(int target, uint id);

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_occlusion_query")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEndQuery(int target);

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_occlusion_query")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetQueryiv(int target, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ARB_occlusion_query")]
		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetQueryObjectiv(uint id, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_occlusion_query")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetQueryObjectuiv(uint id, int pname, uint* @params);

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindBuffer(int target, uint buffer);

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteBuffers(int n, uint* buffers);

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenBuffers(int n, uint* buffers);

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsBuffer(uint buffer);

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBufferData(int target, uint size, nint data, int usage);

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBufferSubData(int target, nint offset, uint size, nint data);

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetBufferSubData(int target, nint offset, uint size, nint data);

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object")]
		[RequiredByFeature("GL_OES_mapbuffer", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate nint glMapBuffer(int target, int access);

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object")]
		[RequiredByFeature("GL_OES_mapbuffer", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glUnmapBuffer(int target);

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetBufferParameteriv(int target, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object")]
		[RequiredByFeature("GL_OES_mapbuffer", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetBufferPointerv(int target, int pname, nint* @params);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_EXT_blend_equation_separate")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBlendEquationSeparate(int modeRGB, int modeAlpha);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_draw_buffers")]
		[RequiredByFeature("GL_ATI_draw_buffers")]
		[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDrawBuffers(int n, int* bufs);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ATI_separate_stencil")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glStencilOpSeparate(int face, int sfail, int dpfail, int dppass);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glStencilFuncSeparate(int face, int func, int @ref, uint mask);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glStencilMaskSeparate(int face, uint mask);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glAttachShader(uint program, uint shader);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindAttribLocation(uint program, uint index, string name);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompileShader(uint shader);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glCreateProgram();

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glCreateShader(int type);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDeleteProgram(uint program);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDeleteShader(uint shader);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDetachShader(uint program, uint shader);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDisableVertexAttribArray(uint index);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEnableVertexAttribArray(uint index);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetActiveAttrib(uint program, uint index, int bufSize, int* length, int* size, int* type, StringBuilder name);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetActiveUniform(uint program, uint index, int bufSize, int* length, int* size, int* type, StringBuilder name);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetAttachedShaders(uint program, int maxCount, int* count, uint* shaders);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glGetAttribLocation(uint program, string name);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramiv(uint program, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramInfoLog(uint program, int bufSize, int* length, StringBuilder infoLog);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetShaderiv(uint shader, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetShaderInfoLog(uint shader, int bufSize, int* length, StringBuilder infoLog);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetShaderSource(uint shader, int bufSize, int* length, StringBuilder source);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glGetUniformLocation(uint program, string name);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetUniformfv(uint program, int location, float* @params);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetUniformiv(uint program, int location, int* @params);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVertexAttribdv(uint index, int pname, double* @params);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVertexAttribfv(uint index, int pname, float* @params);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVertexAttribiv(uint index, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVertexAttribPointerv(uint index, int pname, nint* pointer);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsProgram(uint program);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsShader(uint shader);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLinkProgram(uint program);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glShaderSource(uint shader, int count, string[] @string, int* length);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUseProgram(uint program);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform1f(int location, float v0);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform2f(int location, float v0, float v1);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform3f(int location, float v0, float v1, float v2);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform4f(int location, float v0, float v1, float v2, float v3);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform1i(int location, int v0);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform2i(int location, int v0, int v1);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform3i(int location, int v0, int v1, int v2);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform4i(int location, int v0, int v1, int v2, int v3);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform1fv(int location, int count, float* value);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform2fv(int location, int count, float* value);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform3fv(int location, int count, float* value);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform4fv(int location, int count, float* value);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform1iv(int location, int count, int* value);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform2iv(int location, int count, int* value);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform3iv(int location, int count, int* value);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform4iv(int location, int count, int* value);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformMatrix2fv(int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, float* value);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformMatrix3fv(int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, float* value);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformMatrix4fv(int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, float* value);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glValidateProgram(uint program);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttrib1d(uint index, double x);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib1dv(uint index, double* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttrib1f(uint index, float x);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib1fv(uint index, float* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttrib1s(uint index, short x);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib1sv(uint index, short* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttrib2d(uint index, double x, double y);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib2dv(uint index, double* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttrib2f(uint index, float x, float y);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib2fv(uint index, float* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttrib2s(uint index, short x, short y);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib2sv(uint index, short* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttrib3d(uint index, double x, double y, double z);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib3dv(uint index, double* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttrib3f(uint index, float x, float y, float z);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib3fv(uint index, float* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttrib3s(uint index, short x, short y, short z);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib3sv(uint index, short* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib4Nbv(uint index, sbyte* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib4Niv(uint index, int* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib4Nsv(uint index, short* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib4Nubv(uint index, byte* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib4Nuiv(uint index, uint* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib4Nusv(uint index, ushort* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib4bv(uint index, sbyte* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttrib4d(uint index, double x, double y, double z, double w);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib4dv(uint index, double* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttrib4f(uint index, float x, float y, float z, float w);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib4fv(uint index, float* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib4iv(uint index, int* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttrib4s(uint index, short x, short y, short z, short w);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib4sv(uint index, short* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib4ubv(uint index, byte* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib4uiv(uint index, uint* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib4usv(uint index, ushort* v);

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribPointer(uint index, int size, int type, [MarshalAs(UnmanagedType.I1)] bool normalized, int stride, nint pointer);

		[RequiredByFeature("GL_VERSION_2_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformMatrix2x3fv(int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, float* value);

		[RequiredByFeature("GL_VERSION_2_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformMatrix3x2fv(int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, float* value);

		[RequiredByFeature("GL_VERSION_2_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformMatrix2x4fv(int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, float* value);

		[RequiredByFeature("GL_VERSION_2_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformMatrix4x2fv(int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, float* value);

		[RequiredByFeature("GL_VERSION_2_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformMatrix3x4fv(int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, float* value);

		[RequiredByFeature("GL_VERSION_2_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformMatrix4x3fv(int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, float* value);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_EXT_draw_buffers2")]
		[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
		[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColorMaski(uint index, [MarshalAs(UnmanagedType.I1)] bool r, [MarshalAs(UnmanagedType.I1)] bool g, [MarshalAs(UnmanagedType.I1)] bool b, [MarshalAs(UnmanagedType.I1)] bool a);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_buffers2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetBooleani_v(int target, uint index, byte* data);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_buffers2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetIntegeri_v(int target, uint index, int* data);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_buffers2")]
		[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
		[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEnablei(int target, uint index);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_buffers2")]
		[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
		[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDisablei(int target, uint index);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_buffers2")]
		[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
		[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsEnabledi(int target, uint index);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_transform_feedback")]
		[RequiredByFeature("GL_NV_transform_feedback")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBeginTransformFeedback(int primitiveMode);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_transform_feedback")]
		[RequiredByFeature("GL_NV_transform_feedback")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEndTransformFeedback();

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_transform_feedback")]
		[RequiredByFeature("GL_NV_transform_feedback")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindBufferRange(int target, uint index, uint buffer, nint offset, uint size);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_transform_feedback")]
		[RequiredByFeature("GL_NV_transform_feedback")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindBufferBase(int target, uint index, uint buffer);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_transform_feedback")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTransformFeedbackVaryings(uint program, int count, string[] varyings, int bufferMode);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_transform_feedback")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, int* length, int* size, int* type, StringBuilder name);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ARB_color_buffer_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClampColor(int target, int clamp);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_NV_conditional_render", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBeginConditionalRender(uint id, int mode);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_NVX_conditional_render")]
		[RequiredByFeature("GL_NV_conditional_render", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEndConditionalRender();

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribIPointer(uint index, int size, int type, int stride, nint pointer);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVertexAttribIiv(uint index, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVertexAttribIuiv(uint index, int pname, uint* @params);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribI1i(uint index, int x);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribI2i(uint index, int x, int y);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribI3i(uint index, int x, int y, int z);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribI4i(uint index, int x, int y, int z, int w);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribI1ui(uint index, uint x);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribI2ui(uint index, uint x, uint y);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribI3ui(uint index, uint x, uint y, uint z);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribI4ui(uint index, uint x, uint y, uint z, uint w);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribI1iv(uint index, int* v);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribI2iv(uint index, int* v);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribI3iv(uint index, int* v);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribI4iv(uint index, int* v);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribI1uiv(uint index, uint* v);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribI2uiv(uint index, uint* v);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribI3uiv(uint index, uint* v);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribI4uiv(uint index, uint* v);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribI4bv(uint index, sbyte* v);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribI4sv(uint index, short* v);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribI4ubv(uint index, byte* v);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_vertex_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribI4usv(uint index, ushort* v);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetUniformuiv(uint program, int location, uint* @params);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_blend_func_extended", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindFragDataLocation(uint program, uint color, string name);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glGetFragDataLocation(uint program, string name);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform1ui(int location, uint v0);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform2ui(int location, uint v0, uint v1);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform3ui(int location, uint v0, uint v1, uint v2);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform4ui(int location, uint v0, uint v1, uint v2, uint v3);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform1uiv(int location, int count, uint* value);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform2uiv(int location, int count, uint* value);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform3uiv(int location, int count, uint* value);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform4uiv(int location, int count, uint* value);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture_integer")]
		[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexParameterIiv(int target, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture_integer")]
		[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexParameterIuiv(int target, int pname, uint* @params);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture_integer")]
		[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexParameterIiv(int target, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture_integer")]
		[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexParameterIuiv(int target, int pname, uint* @params);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glClearBufferiv(int buffer, int drawbuffer, int* value);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glClearBufferuiv(int buffer, int drawbuffer, uint* value);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glClearBufferfv(int buffer, int drawbuffer, float* value);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearBufferfi(int buffer, int drawbuffer, float depth, int stencil);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate nint glGetStringi(int name, uint index);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsRenderbuffer(uint renderbuffer);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindRenderbuffer(int target, uint renderbuffer);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteRenderbuffers(int n, uint* renderbuffers);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenRenderbuffers(int n, uint* renderbuffers);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRenderbufferStorage(int target, int internalformat, int width, int height);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetRenderbufferParameteriv(int target, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsFramebuffer(uint framebuffer);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindFramebuffer(int target, uint framebuffer);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteFramebuffers(int n, uint* framebuffers);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenFramebuffers(int n, uint* framebuffers);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glCheckFramebufferStatus(int target);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferTexture1D(int target, int attachment, int textarget, uint texture, int level);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferTexture2D(int target, int attachment, int textarget, uint texture, int level);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferTexture3D(int target, int attachment, int textarget, uint texture, int level, int zoffset);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferRenderbuffer(int target, int attachment, int renderbuffertarget, uint renderbuffer);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetFramebufferAttachmentParameteriv(int target, int attachment, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGenerateMipmap(int target);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_blit")]
		[RequiredByFeature("GL_NV_framebuffer_blit", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_multisample")]
		[RequiredByFeature("GL_EXT_multisampled_render_to_texture", Api = "gles1|gles2")]
		[RequiredByFeature("GL_NV_framebuffer_multisample", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRenderbufferStorageMultisample(int target, int samples, int internalformat, int width, int height);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_array")]
		[RequiredByFeature("GL_NV_geometry_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferTextureLayer(int target, int attachment, uint texture, int level, int layer);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_map_buffer_range", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_map_buffer_range", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate nint glMapBufferRange(int target, nint offset, uint length, uint access);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_flush_buffer_range")]
		[RequiredByFeature("GL_ARB_map_buffer_range", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_map_buffer_range", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFlushMappedBufferRange(int target, nint offset, uint length);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_array_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_vertex_array_object", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindVertexArray(uint array);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_vertex_array_object")]
		[RequiredByFeature("GL_ARB_vertex_array_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_vertex_array_object", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteVertexArrays(int n, uint* arrays);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_vertex_array_object")]
		[RequiredByFeature("GL_ARB_vertex_array_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_vertex_array_object", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenVertexArrays(int n, uint* arrays);

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_vertex_array_object")]
		[RequiredByFeature("GL_ARB_vertex_array_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_vertex_array_object", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsVertexArray(uint array);

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ANGLE_instanced_arrays", Api = "gles2")]
		[RequiredByFeature("GL_ARB_draw_instanced", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_instanced", Api = "gl|glcore|gles2")]
		[RequiredByFeature("GL_EXT_instanced_arrays", Api = "gles2")]
		[RequiredByFeature("GL_NV_draw_instanced", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawArraysInstanced(int mode, int first, int count, int instancecount);

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ANGLE_instanced_arrays", Api = "gles2")]
		[RequiredByFeature("GL_ARB_draw_instanced", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_instanced", Api = "gl|glcore|gles2")]
		[RequiredByFeature("GL_EXT_instanced_arrays", Api = "gles2")]
		[RequiredByFeature("GL_NV_draw_instanced", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawElementsInstanced(int mode, int count, int type, nint indices, int instancecount);

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_buffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture_buffer_object")]
		[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexBuffer(int target, int internalformat, uint buffer);

		[RequiredByFeature("GL_VERSION_3_1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPrimitiveRestartIndex(uint index);

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_copy_buffer", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_copy_buffer", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyBufferSubData(int readTarget, int writeTarget, nint readOffset, nint writeOffset, uint size);

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetUniformIndices(uint program, int uniformCount, string[] uniformNames, uint* uniformIndices);

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetActiveUniformsiv(uint program, int uniformCount, uint* uniformIndices, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetActiveUniformName(uint program, uint uniformIndex, int bufSize, int* length, StringBuilder uniformName);

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glGetUniformBlockIndex(uint program, string uniformBlockName);

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetActiveUniformBlockiv(uint program, uint uniformBlockIndex, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, int* length, StringBuilder uniformBlockName);

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding);

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_draw_elements_base_vertex", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_elements_base_vertex", Api = "gles2")]
		[RequiredByFeature("GL_OES_draw_elements_base_vertex", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawElementsBaseVertex(int mode, int count, int type, nint indices, int basevertex);

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_draw_elements_base_vertex", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_elements_base_vertex", Api = "gles2")]
		[RequiredByFeature("GL_OES_draw_elements_base_vertex", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawRangeElementsBaseVertex(int mode, uint start, uint end, int count, int type, nint indices, int basevertex);

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_draw_elements_base_vertex", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_elements_base_vertex", Api = "gles2")]
		[RequiredByFeature("GL_OES_draw_elements_base_vertex", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawElementsInstancedBaseVertex(int mode, int count, int type, nint indices, int instancecount, int basevertex);

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ARB_draw_elements_base_vertex", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_elements_base_vertex", Api = "gles2")]
		[RequiredByFeature("GL_OES_draw_elements_base_vertex", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiDrawElementsBaseVertex(int mode, int* count, int type, nint* indices, int drawcount, int* basevertex);

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ARB_provoking_vertex", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_provoking_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProvokingVertex(int mode);

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
		[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glFenceSync(int condition, uint flags);

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
		[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsSync(int sync);

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
		[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDeleteSync(int sync);

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
		[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glClientWaitSync(int sync, uint flags, ulong timeout);

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
		[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glWaitSync(int sync, uint flags, ulong timeout);

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
		[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetInteger64v(int pname, long* data);

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
		[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetSynciv(int sync, int pname, int count, int* length, int* values);

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetInteger64i_v(int target, uint index, long* data);

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetBufferParameteri64v(int target, int pname, long* @params);

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
		[RequiredByFeature("GL_NV_geometry_program4")]
		[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferTexture(int target, int attachment, uint texture, int level);

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexImage2DMultisample(int target, int samples, int internalformat, int width, int height, [MarshalAs(UnmanagedType.I1)] bool fixedsamplelocations);

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexImage3DMultisample(int target, int samples, int internalformat, int width, int height, int depth, [MarshalAs(UnmanagedType.I1)] bool fixedsamplelocations);

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_explicit_multisample")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMultisamplefv(int pname, uint index, float* val);

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSampleMaski(uint maskNumber, uint mask);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_blend_func_extended", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_blend_func_extended", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindFragDataLocationIndexed(uint program, uint colorNumber, uint index, string name);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_blend_func_extended", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_blend_func_extended", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glGetFragDataIndex(uint program, string name);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenSamplers(int count, uint* samplers);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteSamplers(int count, uint* samplers);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsSampler(uint sampler);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindSampler(uint unit, uint sampler);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSamplerParameteri(uint sampler, int pname, int param);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSamplerParameteriv(uint sampler, int pname, int* param);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSamplerParameterf(uint sampler, int pname, float param);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSamplerParameterfv(uint sampler, int pname, float* param);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
		[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSamplerParameterIiv(uint sampler, int pname, int* param);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
		[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSamplerParameterIuiv(uint sampler, int pname, uint* param);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetSamplerParameteriv(uint sampler, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
		[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetSamplerParameterIiv(uint sampler, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetSamplerParameterfv(uint sampler, int pname, float* @params);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
		[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetSamplerParameterIuiv(uint sampler, int pname, uint* @params);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_timer_query", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glQueryCounter(uint id, int target);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_timer_query", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
		[RequiredByFeature("GL_EXT_timer_query")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetQueryObjecti64v(uint id, int pname, long* @params);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_timer_query", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
		[RequiredByFeature("GL_EXT_timer_query")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetQueryObjectui64v(uint id, int pname, ulong* @params);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ANGLE_instanced_arrays", Api = "gles2")]
		[RequiredByFeature("GL_ARB_instanced_arrays", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_instanced_arrays", Api = "gles2")]
		[RequiredByFeature("GL_NV_instanced_arrays", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribDivisor(uint index, uint divisor);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribP1ui(uint index, int type, [MarshalAs(UnmanagedType.I1)] bool normalized, uint value);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribP1uiv(uint index, int type, [MarshalAs(UnmanagedType.I1)] bool normalized, uint* value);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribP2ui(uint index, int type, [MarshalAs(UnmanagedType.I1)] bool normalized, uint value);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribP2uiv(uint index, int type, [MarshalAs(UnmanagedType.I1)] bool normalized, uint* value);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribP3ui(uint index, int type, [MarshalAs(UnmanagedType.I1)] bool normalized, uint value);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribP3uiv(uint index, int type, [MarshalAs(UnmanagedType.I1)] bool normalized, uint* value);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribP4ui(uint index, int type, [MarshalAs(UnmanagedType.I1)] bool normalized, uint value);

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribP4uiv(uint index, int type, [MarshalAs(UnmanagedType.I1)] bool normalized, uint* value);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexP2ui(int type, uint value);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexP2uiv(int type, uint* value);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexP3ui(int type, uint value);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexP3uiv(int type, uint* value);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexP4ui(int type, uint value);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexP4uiv(int type, uint* value);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoordP1ui(int type, uint coords);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoordP1uiv(int type, uint* coords);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoordP2ui(int type, uint coords);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoordP2uiv(int type, uint* coords);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoordP3ui(int type, uint coords);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoordP3uiv(int type, uint* coords);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoordP4ui(int type, uint coords);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoordP4uiv(int type, uint* coords);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoordP1ui(int texture, int type, uint coords);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoordP1uiv(int texture, int type, uint* coords);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoordP2ui(int texture, int type, uint coords);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoordP2uiv(int texture, int type, uint* coords);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoordP3ui(int texture, int type, uint coords);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoordP3uiv(int texture, int type, uint* coords);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoordP4ui(int texture, int type, uint coords);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoordP4uiv(int texture, int type, uint* coords);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNormalP3ui(int type, uint coords);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNormalP3uiv(int type, uint* coords);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColorP3ui(int type, uint color);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColorP3uiv(int type, uint* color);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColorP4ui(int type, uint color);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColorP4uiv(int type, uint* color);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSecondaryColorP3ui(int type, uint color);

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSecondaryColorP3uiv(int type, uint* color);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sample_shading", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_sample_shading", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMinSampleShading(float value);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_AMD_draw_buffers_blend")]
		[RequiredByFeature("GL_ARB_draw_buffers_blend", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
		[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBlendEquationi(uint buf, int mode);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_AMD_draw_buffers_blend")]
		[RequiredByFeature("GL_ARB_draw_buffers_blend", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
		[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBlendEquationSeparatei(uint buf, int modeRGB, int modeAlpha);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_AMD_draw_buffers_blend")]
		[RequiredByFeature("GL_ARB_draw_buffers_blend", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
		[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBlendFunci(uint buf, int src, int dst);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_AMD_draw_buffers_blend")]
		[RequiredByFeature("GL_ARB_draw_buffers_blend", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
		[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBlendFuncSeparatei(uint buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_draw_indirect", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawArraysIndirect(int mode, nint indirect);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_draw_indirect", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawElementsIndirect(int mode, int type, nint indirect);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform1d(int location, double x);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform2d(int location, double x, double y);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform3d(int location, double x, double y, double z);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform4d(int location, double x, double y, double z, double w);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform1dv(int location, int count, double* value);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform2dv(int location, int count, double* value);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform3dv(int location, int count, double* value);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform4dv(int location, int count, double* value);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformMatrix2dv(int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformMatrix3dv(int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformMatrix4dv(int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformMatrix2x3dv(int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformMatrix2x4dv(int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformMatrix3x2dv(int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformMatrix3x4dv(int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformMatrix4x2dv(int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformMatrix4x3dv(int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetUniformdv(uint program, int location, double* @params);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glGetSubroutineUniformLocation(uint program, int shadertype, string name);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glGetSubroutineIndex(uint program, int shadertype, string name);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetActiveSubroutineUniformiv(uint program, int shadertype, uint index, int pname, int* values);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetActiveSubroutineUniformName(uint program, int shadertype, uint index, int bufSize, int* length, StringBuilder name);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetActiveSubroutineName(uint program, int shadertype, uint index, int bufSize, int* length, StringBuilder name);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformSubroutinesuiv(int shadertype, int count, uint* indices);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetUniformSubroutineuiv(int shadertype, int location, uint* @params);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramStageiv(uint program, int shadertype, int pname, int* values);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPatchParameteri(int pname, int value);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPatchParameterfv(int pname, float* values);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindTransformFeedback(int target, uint id);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_transform_feedback2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteTransformFeedbacks(int n, uint* ids);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_transform_feedback2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenTransformFeedbacks(int n, uint* ids);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_transform_feedback2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsTransformFeedback(uint id);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_transform_feedback2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPauseTransformFeedback();

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_transform_feedback2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glResumeTransformFeedback();

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_transform_feedback", Api = "gles2")]
		[RequiredByFeature("GL_NV_transform_feedback2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawTransformFeedback(int mode, uint id);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_transform_feedback3", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawTransformFeedbackStream(int mode, uint id, uint stream);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_transform_feedback3", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBeginQueryIndexed(int target, uint index, uint id);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_transform_feedback3", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEndQueryIndexed(int target, uint index);

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_transform_feedback3", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetQueryIndexediv(int target, uint index, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glReleaseShaderCompiler();

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glShaderBinary(int count, uint* shaders, int binaryFormat, nint binary, int length);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetShaderPrecisionFormat(int shadertype, int precisiontype, int* range, int* precision);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_single_precision", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDepthRangef(float n, float f);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_single_precision", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearDepthf(float d);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_get_program_binary", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_get_program_binary", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramBinary(uint program, int bufSize, int* length, int* binaryFormat, nint binary);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_get_program_binary", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_get_program_binary", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramBinary(uint program, int binaryFormat, nint binary, int length);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
		[RequiredByFeature("GL_ARB_get_program_binary", Api = "gl|glcore")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_geometry_shader4")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramParameteri(uint program, int pname, int value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUseProgramStages(uint pipeline, uint stages, uint program);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glActiveShaderProgram(uint pipeline, uint program);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glCreateShaderProgramv(int type, int count, string[] strings);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindProgramPipeline(uint pipeline);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteProgramPipelines(int n, uint* pipelines);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenProgramPipelines(int n, uint* pipelines);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsProgramPipeline(uint pipeline);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramPipelineiv(uint pipeline, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform1i(uint program, int location, int v0);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform1iv(uint program, int location, int count, int* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform1f(uint program, int location, float v0);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform1fv(uint program, int location, int count, float* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform1d(uint program, int location, double v0);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform1dv(uint program, int location, int count, double* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform1ui(uint program, int location, uint v0);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform1uiv(uint program, int location, int count, uint* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform2i(uint program, int location, int v0, int v1);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform2iv(uint program, int location, int count, int* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform2f(uint program, int location, float v0, float v1);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform2fv(uint program, int location, int count, float* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform2d(uint program, int location, double v0, double v1);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform2dv(uint program, int location, int count, double* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform2ui(uint program, int location, uint v0, uint v1);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform2uiv(uint program, int location, int count, uint* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform3i(uint program, int location, int v0, int v1, int v2);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform3iv(uint program, int location, int count, int* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform3f(uint program, int location, float v0, float v1, float v2);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform3fv(uint program, int location, int count, float* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform3d(uint program, int location, double v0, double v1, double v2);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform3dv(uint program, int location, int count, double* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform3uiv(uint program, int location, int count, uint* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform4iv(uint program, int location, int count, int* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform4fv(uint program, int location, int count, float* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform4d(uint program, int location, double v0, double v1, double v2, double v3);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform4dv(uint program, int location, int count, double* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform4uiv(uint program, int location, int count, uint* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix2fv(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, float* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix3fv(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, float* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix4fv(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, float* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix2dv(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix3dv(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix4dv(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix2x3fv(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, float* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix3x2fv(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, float* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix2x4fv(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, float* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix4x2fv(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, float* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix3x4fv(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, float* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix4x3fv(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, float* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix2x3dv(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix3x2dv(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix2x4dv(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix4x2dv(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix3x4dv(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformMatrix4x3dv(uint program, int location, int count, [MarshalAs(UnmanagedType.I1)] bool transpose, double* value);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glValidateProgramPipeline(uint pipeline);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramPipelineInfoLog(uint pipeline, int bufSize, int* length, StringBuilder infoLog);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribL1d(uint index, double x);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribL2d(uint index, double x, double y);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribL3d(uint index, double x, double y, double z);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribL4d(uint index, double x, double y, double z, double w);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribL1dv(uint index, double* v);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribL2dv(uint index, double* v);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribL3dv(uint index, double* v);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribL4dv(uint index, double* v);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribLPointer(uint index, int size, int type, int stride, nint pointer);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVertexAttribLdv(uint index, int pname, double* @params);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glViewportArrayv(uint first, int count, float* v);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glViewportIndexedf(uint index, float x, float y, float w, float h);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glViewportIndexedfv(uint index, float* v);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glScissorArrayv(uint first, int count, int* v);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glScissorIndexed(uint index, int left, int bottom, int width, int height);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glScissorIndexedv(uint index, int* v);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDepthRangeArrayv(uint first, int count, double* v);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDepthRangeIndexed(uint index, double n, double f);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetFloati_v(int target, uint index, float* data);

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetDoublei_v(int target, uint index, double* data);

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ARB_base_instance", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_base_instance", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawArraysInstancedBaseInstance(int mode, int first, int count, int instancecount, uint baseinstance);

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ARB_base_instance", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_base_instance", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawElementsInstancedBaseInstance(int mode, int count, int type, nint indices, int instancecount, uint baseinstance);

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ARB_base_instance", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_base_instance", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawElementsInstancedBaseVertexBaseInstance(int mode, int count, int type, nint indices, int instancecount, int basevertex, uint baseinstance);

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_internalformat_query", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetInternalformativ(int target, int internalformat, int pname, int count, int* @params);

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetActiveAtomicCounterBufferiv(uint program, uint bufferIndex, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindImageTexture(uint unit, uint texture, int level, [MarshalAs(UnmanagedType.I1)] bool layered, int layer, int access, int format);

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_shader_image_load_store")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMemoryBarrier(uint barriers);

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ARB_texture_storage", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexStorage1D(int target, int levels, int internalformat, int width);

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_texture_storage", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexStorage2D(int target, int levels, int internalformat, int width, int height);

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_storage", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexStorage3D(int target, int levels, int internalformat, int width, int height, int depth);

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ARB_transform_feedback_instanced", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_transform_feedback", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawTransformFeedbackInstanced(int mode, uint id, int instancecount);

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ARB_transform_feedback_instanced", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawTransformFeedbackStreamInstanced(int mode, uint id, uint stream, int instancecount);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_clear_buffer_object", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearBufferData(int target, int internalformat, int format, int type, nint data);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_clear_buffer_object", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearBufferSubData(int target, int internalformat, nint offset, uint size, int format, int type, nint data);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDispatchComputeIndirect(nint indirect);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_copy_image", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_copy_image", Api = "gles2")]
		[RequiredByFeature("GL_OES_copy_image", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyImageSubData(uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferParameteri(int target, int pname, int param);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetFramebufferParameteriv(int target, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetInternalformati64v(int target, int internalformat, int pname, int count, long* @params);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glInvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glInvalidateTexImage(uint texture, int level);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glInvalidateBufferSubData(uint buffer, nint offset, uint length);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glInvalidateBufferData(uint buffer);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glInvalidateFramebuffer(int target, int numAttachments, int* attachments);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glInvalidateSubFramebuffer(int target, int numAttachments, int* attachments, int x, int y, int width, int height);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_AMD_multi_draw_indirect")]
		[RequiredByFeature("GL_ARB_multi_draw_indirect", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_multi_draw_indirect", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiDrawArraysIndirect(int mode, nint indirect, int drawcount, int stride);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_AMD_multi_draw_indirect")]
		[RequiredByFeature("GL_ARB_multi_draw_indirect", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_multi_draw_indirect", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiDrawElementsIndirect(int mode, int type, nint indirect, int drawcount, int stride);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramInterfaceiv(uint program, int programInterface, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glGetProgramResourceIndex(uint program, int programInterface, string name);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramResourceName(uint program, int programInterface, uint index, int bufSize, int* length, StringBuilder name);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramResourceiv(uint program, int programInterface, uint index, int propCount, int* props, int count, int* length, int* @params);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glGetProgramResourceLocation(uint program, int programInterface, string name);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glGetProgramResourceLocationIndex(uint program, int programInterface, string name);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_buffer_range", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2")]
		[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexBufferRange(int target, int internalformat, uint buffer, nint offset, uint size);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_storage_multisample", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexStorage2DMultisample(int target, int samples, int internalformat, int width, int height, [MarshalAs(UnmanagedType.I1)] bool fixedsamplelocations);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_storage_multisample", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_texture_storage_multisample_2d_array", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexStorage3DMultisample(int target, int samples, int internalformat, int width, int height, int depth, [MarshalAs(UnmanagedType.I1)] bool fixedsamplelocations);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_texture_view", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_view", Api = "gles2")]
		[RequiredByFeature("GL_OES_texture_view", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureView(uint texture, int target, uint origtexture, int internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindVertexBuffer(uint bindingindex, uint buffer, nint offset, int stride);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribFormat(uint attribindex, int size, int type, [MarshalAs(UnmanagedType.I1)] bool normalized, uint relativeoffset);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribIFormat(uint attribindex, int size, int type, uint relativeoffset);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribLFormat(uint attribindex, int size, int type, uint relativeoffset);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribBinding(uint attribindex, uint bindingindex);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexBindingDivisor(uint bindingindex, uint divisor);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDebugMessageControl(int source, int type, int severity, int count, uint* ids, [MarshalAs(UnmanagedType.I1)] bool enabled);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDebugMessageInsert(int source, int type, uint id, int severity, int length, string buf);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDebugMessageCallback(DebugProc callback, nint userParam);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate uint glGetDebugMessageLog(uint count, int bufSize, int* sources, int* types, uint* ids, int* severities, int* lengths, StringBuilder messageLog);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPushDebugGroup(int source, uint id, int length, string message);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPopDebugGroup();

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glObjectLabel(int identifier, uint name, int length, string label);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetObjectLabel(int identifier, uint name, int bufSize, int* length, StringBuilder label);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glObjectPtrLabel(nint ptr, int length, string label);

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetObjectPtrLabel(nint ptr, int bufSize, int* length, StringBuilder label);

		[RequiredByFeature("GL_VERSION_4_4")]
		[RequiredByFeature("GL_ARB_buffer_storage", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_buffer_storage", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBufferStorage(int target, uint size, nint data, uint flags);

		[RequiredByFeature("GL_VERSION_4_4")]
		[RequiredByFeature("GL_ARB_clear_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_clear_texture", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearTexImage(uint texture, int level, int format, int type, nint data);

		[RequiredByFeature("GL_VERSION_4_4")]
		[RequiredByFeature("GL_ARB_clear_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_clear_texture", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, nint data);

		[RequiredByFeature("GL_VERSION_4_4")]
		[RequiredByFeature("GL_ARB_multi_bind", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glBindBuffersBase(int target, uint first, int count, uint* buffers);

		[RequiredByFeature("GL_VERSION_4_4")]
		[RequiredByFeature("GL_ARB_multi_bind", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glBindBuffersRange(int target, uint first, int count, uint* buffers, nint* offsets, uint* sizes);

		[RequiredByFeature("GL_VERSION_4_4")]
		[RequiredByFeature("GL_ARB_multi_bind", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glBindTextures(uint first, int count, uint* textures);

		[RequiredByFeature("GL_VERSION_4_4")]
		[RequiredByFeature("GL_ARB_multi_bind", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glBindSamplers(uint first, int count, uint* samplers);

		[RequiredByFeature("GL_VERSION_4_4")]
		[RequiredByFeature("GL_ARB_multi_bind", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glBindImageTextures(uint first, int count, uint* textures);

		[RequiredByFeature("GL_VERSION_4_4")]
		[RequiredByFeature("GL_ARB_multi_bind", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glBindVertexBuffers(uint first, int count, uint* buffers, nint* offsets, int* strides);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_clip_control", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_clip_control", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClipControl(int origin, int depth);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCreateTransformFeedbacks(int n, uint* ids);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTransformFeedbackBufferBase(uint xfb, uint index, uint buffer);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTransformFeedbackBufferRange(uint xfb, uint index, uint buffer, nint offset, uint size);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTransformFeedbackiv(uint xfb, int pname, int* param);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTransformFeedbacki_v(uint xfb, int pname, uint index, int* param);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTransformFeedbacki64_v(uint xfb, int pname, uint index, long* param);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCreateBuffers(int n, uint* buffers);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedBufferStorage(uint buffer, uint size, nint data, uint flags);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedBufferData(uint buffer, uint size, nint data, int usage);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedBufferSubData(uint buffer, nint offset, uint size, nint data);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyNamedBufferSubData(uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, uint size);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearNamedBufferData(uint buffer, int internalformat, int format, int type, nint data);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearNamedBufferSubData(uint buffer, int internalformat, nint offset, uint size, int format, int type, nint data);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate nint glMapNamedBuffer(uint buffer, int access);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate nint glMapNamedBufferRange(uint buffer, nint offset, uint length, uint access);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glUnmapNamedBuffer(uint buffer);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFlushMappedNamedBufferRange(uint buffer, nint offset, uint length);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNamedBufferParameteriv(uint buffer, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNamedBufferParameteri64v(uint buffer, int pname, long* @params);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNamedBufferPointerv(uint buffer, int pname, nint* @params);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetNamedBufferSubData(uint buffer, nint offset, uint size, nint data);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCreateFramebuffers(int n, uint* framebuffers);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedFramebufferRenderbuffer(uint framebuffer, int attachment, int renderbuffertarget, uint renderbuffer);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedFramebufferParameteri(uint framebuffer, int pname, int param);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedFramebufferTexture(uint framebuffer, int attachment, uint texture, int level);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedFramebufferTextureLayer(uint framebuffer, int attachment, uint texture, int level, int layer);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedFramebufferDrawBuffer(uint framebuffer, int buf);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNamedFramebufferDrawBuffers(uint framebuffer, int n, int* bufs);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedFramebufferReadBuffer(uint framebuffer, int src);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glInvalidateNamedFramebufferData(uint framebuffer, int numAttachments, int* attachments);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glInvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, int* attachments, int x, int y, int width, int height);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glClearNamedFramebufferiv(uint framebuffer, int buffer, int drawbuffer, int* value);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glClearNamedFramebufferuiv(uint framebuffer, int buffer, int drawbuffer, uint* value);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glClearNamedFramebufferfv(uint framebuffer, int buffer, int drawbuffer, float* value);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearNamedFramebufferfi(uint framebuffer, int buffer, int drawbuffer, float depth, int stencil);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glCheckNamedFramebufferStatus(uint framebuffer, int target);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNamedFramebufferParameteriv(uint framebuffer, int pname, int* param);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNamedFramebufferAttachmentParameteriv(uint framebuffer, int attachment, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCreateRenderbuffers(int n, uint* renderbuffers);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedRenderbufferStorage(uint renderbuffer, int internalformat, int width, int height);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedRenderbufferStorageMultisample(uint renderbuffer, int samples, int internalformat, int width, int height);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNamedRenderbufferParameteriv(uint renderbuffer, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCreateTextures(int target, int n, uint* textures);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureBuffer(uint texture, int internalformat, uint buffer);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureBufferRange(uint texture, int internalformat, uint buffer, nint offset, uint size);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureStorage1D(uint texture, int levels, int internalformat, int width);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureStorage2D(uint texture, int levels, int internalformat, int width, int height);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureStorage3D(uint texture, int levels, int internalformat, int width, int height, int depth);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureStorage2DMultisample(uint texture, int samples, int internalformat, int width, int height, [MarshalAs(UnmanagedType.I1)] bool fixedsamplelocations);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureStorage3DMultisample(uint texture, int samples, int internalformat, int width, int height, int depth, [MarshalAs(UnmanagedType.I1)] bool fixedsamplelocations);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureSubImage1D(uint texture, int level, int xoffset, int width, int format, int type, nint pixels);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, int format, int type, nint pixels);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, nint pixels);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedTextureSubImage1D(uint texture, int level, int xoffset, int width, int format, int imageSize, nint data);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, nint data);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, nint data);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, int width);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, int width, int height);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureParameterf(uint texture, int pname, float param);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTextureParameterfv(uint texture, int pname, float* param);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureParameteri(uint texture, int pname, int param);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTextureParameterIiv(uint texture, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTextureParameterIuiv(uint texture, int pname, uint* @params);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTextureParameteriv(uint texture, int pname, int* param);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGenerateTextureMipmap(uint texture);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindTextureUnit(uint unit, uint texture);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetTextureImage(uint texture, int level, int format, int type, int bufSize, nint pixels);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetCompressedTextureImage(uint texture, int level, int bufSize, nint pixels);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTextureLevelParameterfv(uint texture, int level, int pname, float* @params);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTextureLevelParameteriv(uint texture, int level, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTextureParameterfv(uint texture, int pname, float* @params);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTextureParameterIiv(uint texture, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTextureParameterIuiv(uint texture, int pname, uint* @params);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTextureParameteriv(uint texture, int pname, int* @params);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCreateVertexArrays(int n, uint* arrays);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDisableVertexArrayAttrib(uint vaobj, uint index);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEnableVertexArrayAttrib(uint vaobj, uint index);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayElementBuffer(uint vaobj, uint buffer);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, nint offset, int stride);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexArrayVertexBuffers(uint vaobj, uint first, int count, uint* buffers, nint* offsets, int* strides);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayAttribFormat(uint vaobj, uint attribindex, int size, int type, [MarshalAs(UnmanagedType.I1)] bool normalized, uint relativeoffset);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, int type, uint relativeoffset);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, int type, uint relativeoffset);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVertexArrayiv(uint vaobj, int pname, int* param);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVertexArrayIndexediv(uint vaobj, uint index, int pname, int* param);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVertexArrayIndexed64iv(uint vaobj, uint index, int pname, long* param);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCreateSamplers(int n, uint* samplers);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCreateProgramPipelines(int n, uint* pipelines);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCreateQueries(int target, int n, uint* ids);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetQueryBufferObjecti64v(uint id, uint buffer, int pname, nint offset);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetQueryBufferObjectiv(uint id, uint buffer, int pname, nint offset);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetQueryBufferObjectui64v(uint id, uint buffer, int pname, nint offset);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetQueryBufferObjectuiv(uint id, uint buffer, int pname, nint offset);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_ES3_1_compatibility", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMemoryBarrierByRegion(uint barriers);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_get_texture_sub_image", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int bufSize, nint pixels);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_get_texture_sub_image", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, nint pixels);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_EXT_robustness", Api = "gles1|gles2")]
		[RequiredByFeature("GL_KHR_robustness")]
		[RequiredByFeature("GL_KHR_robustness", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glGetGraphicsResetStatus();

		[RequiredByFeature("GL_VERSION_4_5")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetnCompressedTexImage(int target, int lod, int bufSize, nint pixels);

		[RequiredByFeature("GL_VERSION_4_5")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetnTexImage(int target, int level, int format, int type, int bufSize, nint pixels);

		[RequiredByFeature("GL_VERSION_4_5")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnUniformdv(uint program, int location, int bufSize, double* @params);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_EXT_robustness", Api = "gles1|gles2")]
		[RequiredByFeature("GL_KHR_robustness")]
		[RequiredByFeature("GL_KHR_robustness", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnUniformfv(uint program, int location, int bufSize, float* @params);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_EXT_robustness", Api = "gles1|gles2")]
		[RequiredByFeature("GL_KHR_robustness")]
		[RequiredByFeature("GL_KHR_robustness", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnUniformiv(uint program, int location, int bufSize, int* @params);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_KHR_robustness")]
		[RequiredByFeature("GL_KHR_robustness", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnUniformuiv(uint program, int location, int bufSize, uint* @params);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_robustness", Api = "gles1|gles2")]
		[RequiredByFeature("GL_KHR_robustness")]
		[RequiredByFeature("GL_KHR_robustness", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glReadnPixels(int x, int y, int width, int height, int format, int type, int bufSize, nint data);

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnMapdv(int target, int query, int bufSize, double* v);

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnMapfv(int target, int query, int bufSize, float* v);

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnMapiv(int target, int query, int bufSize, int* v);

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnPixelMapfv(int map, int bufSize, float* values);

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnPixelMapuiv(int map, int bufSize, uint* values);

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnPixelMapusv(int map, int bufSize, ushort* values);

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetnPolygonStipple(int bufSize, byte* pattern);

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetnColorTable(int target, int format, int type, int bufSize, nint table);

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetnConvolutionFilter(int target, int format, int type, int bufSize, nint image);

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetnSeparableFilter(int target, int format, int type, int rowBufSize, nint row, int columnBufSize, nint column, nint span);

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetnHistogram(int target, [MarshalAs(UnmanagedType.I1)] bool reset, int format, int type, int bufSize, nint values);

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetnMinmax(int target, [MarshalAs(UnmanagedType.I1)] bool reset, int format, int type, int bufSize, nint values);

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_texture_barrier", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureBarrier();

		[RequiredByFeature("GL_VERSION_4_6")]
		[RequiredByFeature("GL_ARB_gl_spirv", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSpecializeShader(uint shader, string pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue);

		[RequiredByFeature("GL_VERSION_4_6")]
		[RequiredByFeature("GL_ARB_indirect_parameters", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiDrawArraysIndirectCount(int mode, nint indirect, nint drawcount, int maxdrawcount, int stride);

		[RequiredByFeature("GL_VERSION_4_6")]
		[RequiredByFeature("GL_ARB_indirect_parameters", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiDrawElementsIndirectCount(int mode, int type, nint indirect, nint drawcount, int maxdrawcount, int stride);

		[RequiredByFeature("GL_VERSION_4_6")]
		[RequiredByFeature("GL_ARB_polygon_offset_clamp", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_polygon_offset_clamp", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPolygonOffsetClamp(float factor, float units, float clamp);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glClipPlanef(int p, float* eqn);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFrustumf(float l, float r, float b, float t, float n, float f);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetClipPlanef(int plane, float* equation);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glOrthof(float l, float r, float b, float t, float n, float f);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glAlphaFuncx(int func, nint @ref);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearColorx(nint red, nint green, nint blue, nint alpha);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearDepthx(nint depth);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glClipPlanex(int plane, nint* equation);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor4x(nint red, nint green, nint blue, nint alpha);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDepthRangex(nint n, nint f);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFogx(int pname, nint param);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFogxv(int pname, nint* param);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFrustumx(nint l, nint r, nint b, nint t, nint n, nint f);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetClipPlanex(int plane, nint* equation);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetFixedv(int pname, nint* @params);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetLightxv(int light, int pname, nint* @params);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMaterialxv(int face, int pname, nint* @params);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexEnvxv(int target, int pname, nint* @params);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexParameterxv(int target, int pname, nint* @params);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLightModelx(int pname, nint param);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glLightModelxv(int pname, nint* param);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLightx(int light, int pname, nint param);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glLightxv(int light, int pname, nint* @params);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLineWidthx(nint width);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glLoadMatrixx(nint* m);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMaterialx(int face, int pname, nint param);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMaterialxv(int face, int pname, nint* param);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultMatrixx(nint* m);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord4x(int texture, nint s, nint t, nint r, nint q);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNormal3x(nint nx, nint ny, nint nz);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glOrthox(nint l, nint r, nint b, nint t, nint n, nint f);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPointParameterx(int pname, nint param);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPointParameterxv(int pname, nint* @params);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPointSizex(nint size);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPolygonOffsetx(nint factor, nint units);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRotatex(nint angle, nint x, nint y, nint z);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSampleCoveragex(int value, [MarshalAs(UnmanagedType.I1)] bool invert);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glScalex(nint x, nint y, nint z);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexEnvx(int target, int pname, nint param);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexEnvxv(int target, int pname, nint* @params);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexParameterx(int target, int pname, nint param);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexParameterxv(int target, int pname, nint* @params);

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTranslatex(nint x, nint y, nint z);

		[RequiredByFeature("GL_GREMEDY_frame_terminator")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFrameTerminatorGREMEDY();

		[RequiredByFeature("GL_GREMEDY_string_marker")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glStringMarkerGREMEDY(int len, nint @string);

		[RequiredByFeature("GL_HP_image_transform")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glImageTransformParameteriHP(int target, int pname, int param);

		[RequiredByFeature("GL_HP_image_transform")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glImageTransformParameterfHP(int target, int pname, float param);

		[RequiredByFeature("GL_HP_image_transform")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glImageTransformParameterivHP(int target, int pname, int* @params);

		[RequiredByFeature("GL_HP_image_transform")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glImageTransformParameterfvHP(int target, int pname, float* @params);

		[RequiredByFeature("GL_HP_image_transform")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetImageTransformParameterivHP(int target, int pname, int* @params);

		[RequiredByFeature("GL_HP_image_transform")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetImageTransformParameterfvHP(int target, int pname, float* @params);

		[RequiredByFeature("GL_IBM_multimode_draw_arrays")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiModeDrawArraysIBM(int* mode, int* first, int* count, int primcount, int modestride);

		[RequiredByFeature("GL_IBM_multimode_draw_arrays")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiModeDrawElementsIBM(int* mode, int* count, int type, nint* indices, int primcount, int modestride);

		[RequiredByFeature("GL_IBM_static_data")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFlushStaticDataIBM(int target);

		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColorPointerListIBM(int size, int type, int stride, nint* pointer, int ptrstride);

		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSecondaryColorPointerListIBM(int size, int type, int stride, nint* pointer, int ptrstride);

		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEdgeFlagPointerListIBM(int stride, bool[] pointer, int ptrstride);

		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFogCoordPointerListIBM(int type, int stride, nint* pointer, int ptrstride);

		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glIndexPointerListIBM(int type, int stride, nint* pointer, int ptrstride);

		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNormalPointerListIBM(int type, int stride, nint* pointer, int ptrstride);

		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoordPointerListIBM(int size, int type, int stride, nint* pointer, int ptrstride);

		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexPointerListIBM(int size, int type, int stride, nint* pointer, int ptrstride);

		[RequiredByFeature("GL_IMG_framebuffer_downsample", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferTexture2DDownsampleIMG(int target, int attachment, int textarget, uint texture, int level, int xscale, int yscale);

		[RequiredByFeature("GL_IMG_framebuffer_downsample", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferTextureLayerDownsampleIMG(int target, int attachment, uint texture, int level, int layer, int xscale, int yscale);

		[RequiredByFeature("GL_IMG_multisampled_render_to_texture", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRenderbufferStorageMultisampleIMG(int target, int samples, int internalformat, int width, int height);

		[RequiredByFeature("GL_IMG_multisampled_render_to_texture", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferTexture2DMultisampleIMG(int target, int attachment, int textarget, uint texture, int level, int samples);

		[RequiredByFeature("GL_IMG_user_clip_plane", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glClipPlanefIMG(int p, float* eqn);

		[RequiredByFeature("GL_IMG_user_clip_plane", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glClipPlanexIMG(int p, nint* eqn);

		[RequiredByFeature("GL_INTEL_framebuffer_CMAA", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glApplyFramebufferAttachmentCMAAINTEL();

		[RequiredByFeature("GL_INTEL_map_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSyncTextureINTEL(uint texture);

		[RequiredByFeature("GL_INTEL_map_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUnmapTexture2DINTEL(uint texture, int level);

		[RequiredByFeature("GL_INTEL_map_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate nint glMapTexture2DINTEL(uint texture, int level, uint access, int* stride, int* layout);

		[RequiredByFeature("GL_INTEL_parallel_arrays")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexPointervINTEL(int size, int type, nint* pointer);

		[RequiredByFeature("GL_INTEL_parallel_arrays")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNormalPointervINTEL(int type, nint* pointer);

		[RequiredByFeature("GL_INTEL_parallel_arrays")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColorPointervINTEL(int size, int type, nint* pointer);

		[RequiredByFeature("GL_INTEL_parallel_arrays")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoordPointervINTEL(int size, int type, nint* pointer);

		[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBeginPerfQueryINTEL(uint queryHandle);

		[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCreatePerfQueryINTEL(uint queryId, uint* queryHandle);

		[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDeletePerfQueryINTEL(uint queryHandle);

		[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEndPerfQueryINTEL(uint queryHandle);

		[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetFirstPerfQueryIdINTEL(uint* queryId);

		[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNextPerfQueryIdINTEL(uint queryId, uint* nextQueryId);

		[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue);

		[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPerfQueryDataINTEL(uint queryHandle, uint flags, int dataSize, nint data, uint* bytesWritten);

		[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPerfQueryIdByNameINTEL(string queryName, uint* queryId);

		[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, StringBuilder queryName, uint* dataSize, uint* noCounters, uint* noInstances, uint* capsMask);

		[RequiredByFeature("GL_ARB_parallel_shader_compile", Api = "gl|glcore")]
		[RequiredByFeature("GL_KHR_parallel_shader_compile", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMaxShaderCompilerThreadsKHR(uint count);

		[RequiredByFeature("GL_MESA_framebuffer_flip_y", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferParameteriMESA(int target, int pname, int param);

		[RequiredByFeature("GL_MESA_framebuffer_flip_y", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetFramebufferParameterivMESA(int target, int pname, int* @params);

		[RequiredByFeature("GL_MESA_resize_buffers")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glResizeBuffersMESA();

		[RequiredByFeature("GL_MESA_window_pos")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glWindowPos4dMESA(double x, double y, double z, double w);

		[RequiredByFeature("GL_MESA_window_pos")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWindowPos4dvMESA(double* v);

		[RequiredByFeature("GL_MESA_window_pos")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glWindowPos4fMESA(float x, float y, float z, float w);

		[RequiredByFeature("GL_MESA_window_pos")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWindowPos4fvMESA(float* v);

		[RequiredByFeature("GL_MESA_window_pos")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glWindowPos4iMESA(int x, int y, int z, int w);

		[RequiredByFeature("GL_MESA_window_pos")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWindowPos4ivMESA(int* v);

		[RequiredByFeature("GL_MESA_window_pos")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glWindowPos4sMESA(short x, short y, short z, short w);

		[RequiredByFeature("GL_MESA_window_pos")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWindowPos4svMESA(short* v);

		[RequiredByFeature("GL_NVX_conditional_render")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBeginConditionalRenderNVX(uint id);

		[RequiredByFeature("GL_NVX_gpu_multicast2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUploadGpuMaskNVX(uint mask);

		[RequiredByFeature("GL_NVX_gpu_multicast2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMulticastViewportArrayvNVX(uint gpu, uint first, int count, float* v);

		[RequiredByFeature("GL_NVX_gpu_multicast2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMulticastViewportPositionWScaleNVX(uint gpu, uint index, float xcoeff, float ycoeff);

		[RequiredByFeature("GL_NVX_gpu_multicast2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMulticastScissorArrayvNVX(uint gpu, uint first, int count, int* v);

		[RequiredByFeature("GL_NVX_gpu_multicast2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate uint glAsyncCopyBufferSubDataNVX(int waitSemaphoreCount, uint* waitSemaphoreArray, ulong* fenceValueArray, uint readGpu, uint writeGpuMask, uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, uint size, int signalSemaphoreCount, uint* signalSemaphoreArray, ulong* signalValueArray);

		[RequiredByFeature("GL_NVX_gpu_multicast2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate uint glAsyncCopyImageSubDataNVX(int waitSemaphoreCount, uint* waitSemaphoreArray, ulong* waitValueArray, uint srcGpu, uint dstGpuMask, uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth, int signalSemaphoreCount, uint* signalSemaphoreArray, ulong* signalValueArray);

		[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLGPUNamedBufferSubDataNVX(uint gpuMask, uint buffer, nint offset, uint size, nint data);

		[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLGPUCopyImageSubDataNVX(uint sourceGpu, uint destinationGpuMask, uint srcName, int srcTarget, int srcLevel, int srcX, int srxY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth);

		[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLGPUInterlockNVX();

		[RequiredByFeature("GL_NVX_progress_fence")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glCreateProgressFenceNVX();

		[RequiredByFeature("GL_NVX_progress_fence")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSignalSemaphoreui64NVX(uint signalGpu, int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray);

		[RequiredByFeature("GL_NVX_progress_fence")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray);

		[RequiredByFeature("GL_NVX_progress_fence")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glClientWaitSemaphoreui64NVX(int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray);

		[RequiredByFeature("GL_NV_alpha_to_coverage_dither_control")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glAlphaToCoverageDitherControlNV(int mode);

		[RequiredByFeature("GL_NV_bindless_multi_draw_indirect", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiDrawArraysIndirectBindlessNV(int mode, nint indirect, int drawCount, int stride, int vertexBufferCount);

		[RequiredByFeature("GL_NV_bindless_multi_draw_indirect", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiDrawElementsIndirectBindlessNV(int mode, int type, nint indirect, int drawCount, int stride, int vertexBufferCount);

		[RequiredByFeature("GL_NV_bindless_multi_draw_indirect_count", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiDrawArraysIndirectBindlessCountNV(int mode, nint indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount);

		[RequiredByFeature("GL_NV_bindless_multi_draw_indirect_count", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiDrawElementsIndirectBindlessCountNV(int mode, int type, nint indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount);

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate ulong glGetTextureHandleNV(uint texture);

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate ulong glGetTextureSamplerHandleNV(uint texture, uint sampler);

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMakeTextureHandleResidentNV(ulong handle);

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMakeTextureHandleNonResidentNV(ulong handle);

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate ulong glGetImageHandleNV(uint texture, int level, [MarshalAs(UnmanagedType.I1)] bool layered, int layer, int format);

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMakeImageHandleResidentNV(ulong handle, int access);

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMakeImageHandleNonResidentNV(ulong handle);

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniformHandleui64NV(int location, ulong value);

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformHandleui64vNV(int location, int count, ulong* value);

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniformHandleui64NV(uint program, int location, ulong value);

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformHandleui64vNV(uint program, int location, int count, ulong* values);

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsTextureHandleResidentNV(ulong handle);

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsImageHandleResidentNV(ulong handle);

		[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBlendParameteriNV(int pname, int value);

		[RequiredByFeature("GL_NV_clip_space_w_scaling", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glViewportPositionWScaleNV(uint index, float xcoeff, float ycoeff);

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCreateStatesNV(int n, uint* states);

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteStatesNV(int n, uint* states);

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsStateNV(uint state);

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glStateCaptureNV(uint state, int mode);

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glGetCommandHeaderNV(int tokenID, uint size);

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate ushort glGetStageIndexNV(int shadertype);

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDrawCommandsNV(int primitiveMode, uint buffer, nint* indirects, int* sizes, uint count);

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDrawCommandsAddressNV(int primitiveMode, ulong* indirects, int* sizes, uint count);

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDrawCommandsStatesNV(uint buffer, nint* indirects, int* sizes, uint* states, uint* fbos, uint count);

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDrawCommandsStatesAddressNV(ulong* indirects, int* sizes, uint* states, uint* fbos, uint count);

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCreateCommandListsNV(int n, uint* lists);

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteCommandListsNV(int n, uint* lists);

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsCommandListNV(uint list);

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glListDrawCommandsStatesClientNV(uint list, uint segment, nint* indirects, int* sizes, uint* states, uint* fbos, uint count);

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCommandListSegmentsNV(uint list, uint segments);

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompileCommandListNV(uint list);

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCallCommandListNV(uint list);

		[RequiredByFeature("GL_NV_conservative_raster", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSubpixelPrecisionBiasNV(uint xbits, uint ybits);

		[RequiredByFeature("GL_NV_conservative_raster_dilate", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glConservativeRasterParameterfNV(int pname, float value);

		[RequiredByFeature("GL_NV_conservative_raster_pre_snap_triangles", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glConservativeRasterParameteriNV(int pname, int param);

		[RequiredByFeature("GL_NV_copy_image")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyImageSubDataNV(uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth);

		[RequiredByFeature("GL_NV_coverage_sample", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCoverageMaskNV([MarshalAs(UnmanagedType.I1)] bool mask);

		[RequiredByFeature("GL_NV_coverage_sample", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCoverageOperationNV(int operation);

		[RequiredByFeature("GL_NV_depth_buffer_float", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDepthRangedNV(double zNear, double zFar);

		[RequiredByFeature("GL_NV_depth_buffer_float", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearDepthdNV(double depth);

		[RequiredByFeature("GL_NV_depth_buffer_float", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDepthBoundsdNV(double zmin, double zmax);

		[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDrawBuffersNV(int n, int* bufs);

		[RequiredByFeature("GL_NV_draw_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawTextureNV(uint texture, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1);

		[RequiredByFeature("GL_NV_draw_vulkan_image", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawVkImageNV(ulong vkImage, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1);

		[RequiredByFeature("GL_NV_draw_vulkan_image", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate VulkanProc glGetVkProcAddrNV(string name);

		[RequiredByFeature("GL_NV_draw_vulkan_image", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glWaitVkSemaphoreNV(ulong vkSemaphore);

		[RequiredByFeature("GL_NV_draw_vulkan_image", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSignalVkSemaphoreNV(ulong vkSemaphore);

		[RequiredByFeature("GL_NV_draw_vulkan_image", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSignalVkFenceNV(ulong vkFence);

		[RequiredByFeature("GL_NV_evaluators")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, [MarshalAs(UnmanagedType.I1)] bool packed, nint points);

		[RequiredByFeature("GL_NV_evaluators")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMapParameterivNV(int target, int pname, int* @params);

		[RequiredByFeature("GL_NV_evaluators")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMapParameterfvNV(int target, int pname, float* @params);

		[RequiredByFeature("GL_NV_evaluators")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, [MarshalAs(UnmanagedType.I1)] bool packed, nint points);

		[RequiredByFeature("GL_NV_evaluators")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMapParameterivNV(int target, int pname, int* @params);

		[RequiredByFeature("GL_NV_evaluators")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMapParameterfvNV(int target, int pname, float* @params);

		[RequiredByFeature("GL_NV_evaluators")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMapAttribParameterivNV(int target, uint index, int pname, int* @params);

		[RequiredByFeature("GL_NV_evaluators")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMapAttribParameterfvNV(int target, uint index, int pname, float* @params);

		[RequiredByFeature("GL_NV_evaluators")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEvalMapsNV(int target, int mode);

		[RequiredByFeature("GL_NV_explicit_multisample")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSampleMaskIndexedNV(uint index, uint mask);

		[RequiredByFeature("GL_NV_explicit_multisample")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexRenderbufferNV(int target, uint renderbuffer);

		[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteFencesNV(int n, uint* fences);

		[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenFencesNV(int n, uint* fences);

		[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsFenceNV(uint fence);

		[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glTestFenceNV(uint fence);

		[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetFenceivNV(uint fence, int pname, int* @params);

		[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFinishFenceNV(uint fence);

		[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSetFenceNV(uint fence, int condition);

		[RequiredByFeature("GL_NV_fragment_coverage_to_color", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFragmentCoverageColorNV(uint color);

		[RequiredByFeature("GL_NV_fragment_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramNamedParameter4fNV(uint id, int len, byte* name, float x, float y, float z, float w);

		[RequiredByFeature("GL_NV_fragment_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramNamedParameter4fvNV(uint id, int len, byte* name, float* v);

		[RequiredByFeature("GL_NV_fragment_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramNamedParameter4dNV(uint id, int len, byte* name, double x, double y, double z, double w);

		[RequiredByFeature("GL_NV_fragment_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramNamedParameter4dvNV(uint id, int len, byte* name, double* v);

		[RequiredByFeature("GL_NV_fragment_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramNamedParameterfvNV(uint id, int len, byte* name, float* @params);

		[RequiredByFeature("GL_NV_fragment_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramNamedParameterdvNV(uint id, int len, byte* name, double* @params);

		[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCoverageModulationTableNV(int n, float* v);

		[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetCoverageModulationTableNV(int bufSize, float* v);

		[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCoverageModulationNV(int components);

		[RequiredByFeature("GL_NV_framebuffer_multisample_coverage", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRenderbufferStorageMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalformat, int width, int height);

		[RequiredByFeature("GL_NV_geometry_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramVertexLimitNV(int target, int limit);

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRenderGpuMaskNV(uint mask);

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMulticastBufferSubDataNV(uint gpuMask, uint buffer, nint offset, uint size, nint data);

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMulticastCopyBufferSubDataNV(uint readGpu, uint writeGpuMask, uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, uint size);

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMulticastCopyImageSubDataNV(uint srcGpu, uint dstGpuMask, uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMulticastBlitFramebufferNV(uint srcGpu, uint dstGpu, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter);

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMulticastFramebufferSampleLocationsfvNV(uint gpu, uint framebuffer, uint start, int count, float* v);

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMulticastBarrierNV();

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMulticastWaitSyncNV(uint signalGpu, uint waitGpuMask);

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMulticastGetQueryObjectivNV(uint gpu, uint id, int pname, int* @params);

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMulticastGetQueryObjectuivNV(uint gpu, uint id, int pname, uint* @params);

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMulticastGetQueryObjecti64vNV(uint gpu, uint id, int pname, long* @params);

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMulticastGetQueryObjectui64vNV(uint gpu, uint id, int pname, ulong* @params);

		[RequiredByFeature("GL_NV_gpu_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramLocalParameterI4iNV(int target, uint index, int x, int y, int z, int w);

		[RequiredByFeature("GL_NV_gpu_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramLocalParameterI4ivNV(int target, uint index, int* @params);

		[RequiredByFeature("GL_NV_gpu_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramLocalParametersI4ivNV(int target, uint index, int count, int* @params);

		[RequiredByFeature("GL_NV_gpu_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramLocalParameterI4uiNV(int target, uint index, uint x, uint y, uint z, uint w);

		[RequiredByFeature("GL_NV_gpu_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramLocalParameterI4uivNV(int target, uint index, uint* @params);

		[RequiredByFeature("GL_NV_gpu_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramLocalParametersI4uivNV(int target, uint index, int count, uint* @params);

		[RequiredByFeature("GL_NV_gpu_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramEnvParameterI4iNV(int target, uint index, int x, int y, int z, int w);

		[RequiredByFeature("GL_NV_gpu_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramEnvParameterI4ivNV(int target, uint index, int* @params);

		[RequiredByFeature("GL_NV_gpu_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramEnvParametersI4ivNV(int target, uint index, int count, int* @params);

		[RequiredByFeature("GL_NV_gpu_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramEnvParameterI4uiNV(int target, uint index, uint x, uint y, uint z, uint w);

		[RequiredByFeature("GL_NV_gpu_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramEnvParameterI4uivNV(int target, uint index, uint* @params);

		[RequiredByFeature("GL_NV_gpu_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramEnvParametersI4uivNV(int target, uint index, int count, uint* @params);

		[RequiredByFeature("GL_NV_gpu_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramLocalParameterIivNV(int target, uint index, int* @params);

		[RequiredByFeature("GL_NV_gpu_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramLocalParameterIuivNV(int target, uint index, uint* @params);

		[RequiredByFeature("GL_NV_gpu_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramEnvParameterIivNV(int target, uint index, int* @params);

		[RequiredByFeature("GL_NV_gpu_program4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramEnvParameterIuivNV(int target, uint index, uint* @params);

		[RequiredByFeature("GL_NV_gpu_program5")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramSubroutineParametersuivNV(int target, int count, uint* @params);

		[RequiredByFeature("GL_NV_gpu_program5")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramSubroutineParameteruivNV(int target, uint index, uint* param);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform1i64NV(int location, long x);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform2i64NV(int location, long x, long y);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform3i64NV(int location, long x, long y, long z);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform4i64NV(int location, long x, long y, long z, long w);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform1i64vNV(int location, int count, long* value);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform2i64vNV(int location, int count, long* value);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform3i64vNV(int location, int count, long* value);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform4i64vNV(int location, int count, long* value);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform1ui64NV(int location, ulong x);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform2ui64NV(int location, ulong x, ulong y);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform3ui64NV(int location, ulong x, ulong y, ulong z);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniform4ui64NV(int location, ulong x, ulong y, ulong z, ulong w);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform1ui64vNV(int location, int count, ulong* value);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform2ui64vNV(int location, int count, ulong* value);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform3ui64vNV(int location, int count, ulong* value);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniform4ui64vNV(int location, int count, ulong* value);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetUniformi64vNV(uint program, int location, long* @params);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform1i64NV(uint program, int location, long x);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform2i64NV(uint program, int location, long x, long y);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform3i64NV(uint program, int location, long x, long y, long z);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform4i64NV(uint program, int location, long x, long y, long z, long w);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform1i64vNV(uint program, int location, int count, long* value);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform2i64vNV(uint program, int location, int count, long* value);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform3i64vNV(uint program, int location, int count, long* value);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform4i64vNV(uint program, int location, int count, long* value);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform1ui64NV(uint program, int location, ulong x);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform2ui64NV(uint program, int location, ulong x, ulong y);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform3ui64NV(uint program, int location, ulong x, ulong y, ulong z);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniform4ui64NV(uint program, int location, ulong x, ulong y, ulong z, ulong w);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform1ui64vNV(uint program, int location, int count, ulong* value);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform2ui64vNV(uint program, int location, int count, ulong* value);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform3ui64vNV(uint program, int location, int count, ulong* value);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniform4ui64vNV(uint program, int location, int count, ulong* value);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex2hNV(ushort x, ushort y);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex2hvNV(ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex3hNV(ushort x, ushort y, ushort z);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex3hvNV(ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex4hNV(ushort x, ushort y, ushort z, ushort w);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex4hvNV(ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNormal3hNV(ushort nx, ushort ny, ushort nz);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNormal3hvNV(ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor3hNV(ushort red, ushort green, ushort blue);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor3hvNV(ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor4hNV(ushort red, ushort green, ushort blue, ushort alpha);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor4hvNV(ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord1hNV(ushort s);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord1hvNV(ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord2hNV(ushort s, ushort t);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord2hvNV(ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord3hNV(ushort s, ushort t, ushort r);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord3hvNV(ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord4hNV(ushort s, ushort t, ushort r, ushort q);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord4hvNV(ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord1hNV(int target, ushort s);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord1hvNV(int target, ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord2hNV(int target, ushort s, ushort t);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord2hvNV(int target, ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord3hNV(int target, ushort s, ushort t, ushort r);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord3hvNV(int target, ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord4hNV(int target, ushort s, ushort t, ushort r, ushort q);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord4hvNV(int target, ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFogCoordhNV(ushort fog);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFogCoordhvNV(ushort* fog);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSecondaryColor3hNV(ushort red, ushort green, ushort blue);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSecondaryColor3hvNV(ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexWeighthNV(ushort weight);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexWeighthvNV(ushort* weight);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttrib1hNV(uint index, ushort x);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib1hvNV(uint index, ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttrib2hNV(uint index, ushort x, ushort y);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib2hvNV(uint index, ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttrib3hNV(uint index, ushort x, ushort y, ushort z);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib3hvNV(uint index, ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttrib4hNV(uint index, ushort x, ushort y, ushort z, ushort w);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttrib4hvNV(uint index, ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribs1hvNV(uint index, int n, ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribs2hvNV(uint index, int n, ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribs3hvNV(uint index, int n, ushort* v);

		[RequiredByFeature("GL_NV_half_float")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribs4hvNV(uint index, int n, ushort* v);

		[RequiredByFeature("GL_NV_internalformat_sample_query", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetInternalformatSampleivNV(int target, int internalformat, int samples, int pname, int count, int* @params);

		[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMemoryObjectDetachedResourcesuivNV(uint memory, int pname, int first, int count, uint* @params);

		[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glResetMemoryObjectParameterNV(uint memory, int pname);

		[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexAttachMemoryNV(int target, uint memory, ulong offset);

		[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBufferAttachMemoryNV(int target, uint memory, ulong offset);

		[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureAttachMemoryNV(uint texture, uint memory, ulong offset);

		[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedBufferAttachMemoryNV(uint buffer, uint memory, ulong offset);

		[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBufferPageCommitmentMemNV(int target, nint offset, uint size, uint memory, ulong memOffset, [MarshalAs(UnmanagedType.I1)] bool commit);

		[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexPageCommitmentMemNV(int target, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, [MarshalAs(UnmanagedType.I1)] bool commit);

		[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNamedBufferPageCommitmentMemNV(uint buffer, nint offset, uint size, uint memory, ulong memOffset, [MarshalAs(UnmanagedType.I1)] bool commit);

		[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexturePageCommitmentMemNV(uint texture, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, [MarshalAs(UnmanagedType.I1)] bool commit);

		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawMeshTasksNV(uint first, uint count);

		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawMeshTasksIndirectNV(nint indirect);

		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiDrawMeshTasksIndirectNV(nint indirect, int drawcount, int stride);

		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiDrawMeshTasksIndirectCountNV(nint indirect, nint drawcount, int maxdrawcount, int stride);

		[RequiredByFeature("GL_NV_occlusion_query")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenOcclusionQueriesNV(int n, uint* ids);

		[RequiredByFeature("GL_NV_occlusion_query")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteOcclusionQueriesNV(int n, uint* ids);

		[RequiredByFeature("GL_NV_occlusion_query")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsOcclusionQueryNV(uint id);

		[RequiredByFeature("GL_NV_occlusion_query")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBeginOcclusionQueryNV(uint id);

		[RequiredByFeature("GL_NV_occlusion_query")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEndOcclusionQueryNV();

		[RequiredByFeature("GL_NV_occlusion_query")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetOcclusionQueryivNV(uint id, int pname, int* @params);

		[RequiredByFeature("GL_NV_occlusion_query")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetOcclusionQueryuivNV(uint id, int pname, uint* @params);

		[RequiredByFeature("GL_NV_parameter_buffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramBufferParametersfvNV(int target, uint bindingIndex, uint wordIndex, int count, float* @params);

		[RequiredByFeature("GL_NV_parameter_buffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramBufferParametersIivNV(int target, uint bindingIndex, uint wordIndex, int count, int* @params);

		[RequiredByFeature("GL_NV_parameter_buffer_object")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramBufferParametersIuivNV(int target, uint bindingIndex, uint wordIndex, int count, uint* @params);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glGenPathsNV(int range);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDeletePathsNV(uint path, int range);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsPathNV(uint path);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPathCommandsNV(uint path, int numCommands, byte* commands, int numCoords, int coordType, nint coords);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPathCoordsNV(uint path, int numCoords, int coordType, nint coords);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, byte* commands, int numCoords, int coordType, nint coords);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPathSubCoordsNV(uint path, int coordStart, int numCoords, int coordType, nint coords);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPathStringNV(uint path, int format, int length, nint pathString);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPathGlyphsNV(uint firstPathName, int fontTarget, nint fontName, uint fontStyle, int numGlyphs, int type, nint charcodes, int handleMissingGlyphs, uint pathParameterTemplate, float emScale);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPathGlyphRangeNV(uint firstPathName, int fontTarget, nint fontName, uint fontStyle, uint firstGlyph, int numGlyphs, int handleMissingGlyphs, uint pathParameterTemplate, float emScale);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glWeightPathsNV(uint resultPath, int numPaths, uint* paths, float* weights);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyPathNV(uint resultPath, uint srcPath);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glInterpolatePathsNV(uint resultPath, uint pathA, uint pathB, float weight);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTransformPathNV(uint resultPath, uint srcPath, int transformType, float* transformValues);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPathParameterivNV(uint path, int pname, int* value);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPathParameteriNV(uint path, int pname, int value);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPathParameterfvNV(uint path, int pname, float* value);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPathParameterfNV(uint path, int pname, float value);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPathDashArrayNV(uint path, int dashCount, float* dashArray);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPathStencilFuncNV(int func, int @ref, uint mask);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPathStencilDepthOffsetNV(float factor, float units);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glStencilFillPathNV(uint path, int fillMode, uint mask);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glStencilStrokePathNV(uint path, int reference, uint mask);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glStencilFillPathInstancedNV(int numPaths, int pathNameType, nint paths, uint pathBase, int fillMode, uint mask, int transformType, float* transformValues);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glStencilStrokePathInstancedNV(int numPaths, int pathNameType, nint paths, uint pathBase, int reference, uint mask, int transformType, float* transformValues);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPathCoverDepthFuncNV(int func);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCoverFillPathNV(uint path, int coverMode);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCoverStrokePathNV(uint path, int coverMode);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCoverFillPathInstancedNV(int numPaths, int pathNameType, nint paths, uint pathBase, int coverMode, int transformType, float* transformValues);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCoverStrokePathInstancedNV(int numPaths, int pathNameType, nint paths, uint pathBase, int coverMode, int transformType, float* transformValues);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPathParameterivNV(uint path, int pname, int* value);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPathParameterfvNV(uint path, int pname, float* value);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPathCommandsNV(uint path, byte* commands);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPathCoordsNV(uint path, float* coords);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPathDashArrayNV(uint path, float* dashArray);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPathMetricsNV(uint metricQueryMask, int numPaths, int pathNameType, nint paths, uint pathBase, int stride, float* metrics);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPathMetricRangeNV(uint metricQueryMask, uint firstPathName, int numPaths, int stride, float* metrics);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPathSpacingNV(int pathListMode, int numPaths, int pathNameType, nint paths, uint pathBase, float advanceScale, float kerningScale, int transformType, float* returnedSpacing);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsPointInFillPathNV(uint path, uint mask, float x, float y);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsPointInStrokePathNV(uint path, float x, float y);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate float glGetPathLengthNV(uint path, int startSegment, int numSegments);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal unsafe delegate bool glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, float* x, float* y, float* tangentX, float* tangentY);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMatrixLoad3x2fNV(int matrixMode, float* m);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMatrixLoad3x3fNV(int matrixMode, float* m);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMatrixLoadTranspose3x3fNV(int matrixMode, float* m);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMatrixMult3x2fNV(int matrixMode, float* m);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMatrixMult3x3fNV(int matrixMode, float* m);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMatrixMultTranspose3x3fNV(int matrixMode, float* m);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glStencilThenCoverFillPathNV(uint path, int fillMode, uint mask, int coverMode);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glStencilThenCoverStrokePathNV(uint path, int reference, uint mask, int coverMode);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glStencilThenCoverFillPathInstancedNV(int numPaths, int pathNameType, nint paths, uint pathBase, int fillMode, uint mask, int coverMode, int transformType, float* transformValues);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glStencilThenCoverStrokePathInstancedNV(int numPaths, int pathNameType, nint paths, uint pathBase, int reference, uint mask, int coverMode, int transformType, float* transformValues);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate int glPathGlyphIndexRangeNV(int fontTarget, nint fontName, uint fontStyle, uint pathParameterTemplate, float emScale, uint* baseAndCount);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glPathGlyphIndexArrayNV(uint firstPathName, int fontTarget, nint fontName, uint fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glPathMemoryGlyphIndexArrayNV(uint firstPathName, int fontTarget, uint fontSize, nint fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramPathFragmentInputGenNV(uint program, int location, int genMode, int components, float* coeffs);

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramResourcefvNV(uint program, int programInterface, uint index, int propCount, int* props, int count, int* length, float* @params);

		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPathColorGenNV(int color, int genMode, int colorFormat, float* coeffs);

		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPathTexGenNV(int texCoordSet, int genMode, int components, float* coeffs);

		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPathFogGenNV(int genMode);

		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPathColorGenivNV(int color, int pname, int* value);

		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPathColorGenfvNV(int color, int pname, float* value);

		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPathTexGenivNV(int texCoordSet, int pname, int* value);

		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPathTexGenfvNV(int texCoordSet, int pname, float* value);

		[RequiredByFeature("GL_NV_pixel_data_range")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPixelDataRangeNV(int target, int length, nint pointer);

		[RequiredByFeature("GL_NV_pixel_data_range")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFlushPixelDataRangeNV(int target);

		[RequiredByFeature("GL_NV_present_video")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPresentFrameKeyedNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, int type, int target0, uint fill0, uint key0, int target1, uint fill1, uint key1);

		[RequiredByFeature("GL_NV_present_video")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPresentFrameDualFillNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, int type, int target0, uint fill0, int target1, uint fill1, int target2, uint fill2, int target3, uint fill3);

		[RequiredByFeature("GL_NV_present_video")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVideoivNV(uint video_slot, int pname, int* @params);

		[RequiredByFeature("GL_NV_present_video")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVideouivNV(uint video_slot, int pname, uint* @params);

		[RequiredByFeature("GL_NV_present_video")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVideoi64vNV(uint video_slot, int pname, long* @params);

		[RequiredByFeature("GL_NV_present_video")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVideoui64vNV(uint video_slot, int pname, ulong* @params);

		[RequiredByFeature("GL_NV_primitive_restart")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPrimitiveRestartNV();

		[RequiredByFeature("GL_NV_primitive_restart")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPrimitiveRestartIndexNV(uint index);

		[RequiredByFeature("GL_NV_query_resource")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate int glQueryResourceNV(int queryType, int tagId, uint count, int* buffer);

		[RequiredByFeature("GL_NV_query_resource_tag")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenQueryResourceTagNV(int n, int* tagIds);

		[RequiredByFeature("GL_NV_query_resource_tag")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteQueryResourceTagNV(int n, int* tagIds);

		[RequiredByFeature("GL_NV_query_resource_tag")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glQueryResourceTagNV(int tagId, string tagString);

		[RequiredByFeature("GL_NV_read_buffer", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glReadBufferNV(int mode);

		[RequiredByFeature("GL_NV_register_combiners")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCombinerParameterfvNV(int pname, float* @params);

		[RequiredByFeature("GL_NV_register_combiners")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCombinerParameterfNV(int pname, float param);

		[RequiredByFeature("GL_NV_register_combiners")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCombinerParameterivNV(int pname, int* @params);

		[RequiredByFeature("GL_NV_register_combiners")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCombinerParameteriNV(int pname, int param);

		[RequiredByFeature("GL_NV_register_combiners")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCombinerInputNV(int stage, int portion, int variable, int input, int mapping, int componentUsage);

		[RequiredByFeature("GL_NV_register_combiners")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCombinerOutputNV(int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, [MarshalAs(UnmanagedType.I1)] bool abDotProduct, [MarshalAs(UnmanagedType.I1)] bool cdDotProduct, [MarshalAs(UnmanagedType.I1)] bool muxSum);

		[RequiredByFeature("GL_NV_register_combiners")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFinalCombinerInputNV(int variable, int input, int mapping, int componentUsage);

		[RequiredByFeature("GL_NV_register_combiners")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetCombinerInputParameterfvNV(int stage, int portion, int variable, int pname, float* @params);

		[RequiredByFeature("GL_NV_register_combiners")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetCombinerInputParameterivNV(int stage, int portion, int variable, int pname, int* @params);

		[RequiredByFeature("GL_NV_register_combiners")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetCombinerOutputParameterfvNV(int stage, int portion, int pname, float* @params);

		[RequiredByFeature("GL_NV_register_combiners")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetCombinerOutputParameterivNV(int stage, int portion, int pname, int* @params);

		[RequiredByFeature("GL_NV_register_combiners")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetFinalCombinerInputParameterfvNV(int variable, int pname, float* @params);

		[RequiredByFeature("GL_NV_register_combiners")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetFinalCombinerInputParameterivNV(int variable, int pname, int* @params);

		[RequiredByFeature("GL_NV_register_combiners2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCombinerStageParameterfvNV(int stage, int pname, float* @params);

		[RequiredByFeature("GL_NV_register_combiners2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetCombinerStageParameterfvNV(int stage, int pname, float* @params);

		[RequiredByFeature("GL_NV_sample_locations", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFramebufferSampleLocationsfvNV(int target, uint start, int count, float* v);

		[RequiredByFeature("GL_NV_sample_locations", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNamedFramebufferSampleLocationsfvNV(uint framebuffer, uint start, int count, float* v);

		[RequiredByFeature("GL_NV_sample_locations", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glResolveDepthValuesNV();

		[RequiredByFeature("GL_NV_scissor_exclusive", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glScissorExclusiveNV(int x, int y, int width, int height);

		[RequiredByFeature("GL_NV_scissor_exclusive", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glScissorExclusiveArrayvNV(uint first, int count, int* v);

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMakeBufferResidentNV(int target, int access);

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMakeBufferNonResidentNV(int target);

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsBufferResidentNV(int target);

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMakeNamedBufferResidentNV(uint buffer, int access);

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMakeNamedBufferNonResidentNV(uint buffer);

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsNamedBufferResidentNV(uint buffer);

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetBufferParameterui64vNV(int target, int pname, ulong* @params);

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetNamedBufferParameterui64vNV(uint buffer, int pname, ulong* @params);

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetIntegerui64vNV(int value, ulong* result);

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glUniformui64NV(int location, ulong value);

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glUniformui64vNV(int location, int count, ulong* value);

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetUniformui64vNV(uint program, int location, ulong* @params);

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramUniformui64NV(uint program, int location, ulong value);

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramUniformui64vNV(uint program, int location, int count, ulong* value);

		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindShadingRateImageNV(uint texture);

		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetShadingRateImagePaletteNV(uint viewport, uint entry, int* rate);

		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetShadingRateSampleLocationivNV(int rate, uint samples, uint index, int* location);

		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glShadingRateImageBarrierNV([MarshalAs(UnmanagedType.I1)] bool synchronize);

		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glShadingRateImagePaletteNV(uint viewport, uint first, int count, int* rates);

		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glShadingRateSampleOrderNV(int order);

		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glShadingRateSampleOrderCustomNV(int rate, uint samples, int* locations);

		[RequiredByFeature("GL_NV_texture_barrier", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureBarrierNV();

		[RequiredByFeature("GL_NV_texture_multisample")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexImage2DMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, [MarshalAs(UnmanagedType.I1)] bool fixedSampleLocations);

		[RequiredByFeature("GL_NV_texture_multisample")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexImage3DMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, [MarshalAs(UnmanagedType.I1)] bool fixedSampleLocations);

		[RequiredByFeature("GL_NV_texture_multisample")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureImage2DMultisampleNV(uint texture, int target, int samples, int internalFormat, int width, int height, [MarshalAs(UnmanagedType.I1)] bool fixedSampleLocations);

		[RequiredByFeature("GL_NV_texture_multisample")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureImage3DMultisampleNV(uint texture, int target, int samples, int internalFormat, int width, int height, int depth, [MarshalAs(UnmanagedType.I1)] bool fixedSampleLocations);

		[RequiredByFeature("GL_NV_texture_multisample")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureImage2DMultisampleCoverageNV(uint texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, [MarshalAs(UnmanagedType.I1)] bool fixedSampleLocations);

		[RequiredByFeature("GL_NV_texture_multisample")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureImage3DMultisampleCoverageNV(uint texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, [MarshalAs(UnmanagedType.I1)] bool fixedSampleLocations);

		[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glCreateSemaphoresNV(int n, uint* semaphores);

		[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSemaphoreParameterivNV(uint semaphore, int pname, int* @params);

		[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetSemaphoreParameterivNV(uint semaphore, int pname, int* @params);

		[RequiredByFeature("GL_NV_transform_feedback")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTransformFeedbackAttribsNV(int count, int* attribs, int bufferMode);

		[RequiredByFeature("GL_NV_transform_feedback")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTransformFeedbackVaryingsNV(uint program, int count, int* locations, int bufferMode);

		[RequiredByFeature("GL_NV_transform_feedback")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glActiveVaryingNV(uint program, string name);

		[RequiredByFeature("GL_NV_transform_feedback")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glGetVaryingLocationNV(uint program, string name);

		[RequiredByFeature("GL_NV_transform_feedback")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetActiveVaryingNV(uint program, uint index, int bufSize, int* length, int* size, int* type, StringBuilder name);

		[RequiredByFeature("GL_NV_transform_feedback")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTransformFeedbackVaryingNV(uint program, uint index, int* location);

		[RequiredByFeature("GL_NV_transform_feedback")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTransformFeedbackStreamAttribsNV(int count, int* attribs, int nbuffers, int* bufstreams, int bufferMode);

		[RequiredByFeature("GL_NV_transform_feedback2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindTransformFeedbackNV(int target, uint id);

		[RequiredByFeature("GL_NV_vdpau_interop")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVDPAUInitNV(nint vdpDevice, nint getProcAddress);

		[RequiredByFeature("GL_NV_vdpau_interop")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVDPAUFiniNV();

		[RequiredByFeature("GL_NV_vdpau_interop")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate nint glVDPAURegisterVideoSurfaceNV(nint vdpSurface, int target, int numTextureNames, uint* textureNames);

		[RequiredByFeature("GL_NV_vdpau_interop")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate nint glVDPAURegisterOutputSurfaceNV(nint vdpSurface, int target, int numTextureNames, uint* textureNames);

		[RequiredByFeature("GL_NV_vdpau_interop")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glVDPAUIsSurfaceNV(nint surface);

		[RequiredByFeature("GL_NV_vdpau_interop")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVDPAUUnregisterSurfaceNV(nint surface);

		[RequiredByFeature("GL_NV_vdpau_interop")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVDPAUGetSurfaceivNV(nint surface, int pname, int count, int* length, int* values);

		[RequiredByFeature("GL_NV_vdpau_interop")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVDPAUSurfaceAccessNV(nint surface, int access);

		[RequiredByFeature("GL_NV_vdpau_interop")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVDPAUMapSurfacesNV(int numSurfaces, nint* surfaces);

		[RequiredByFeature("GL_NV_vdpau_interop")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVDPAUUnmapSurfacesNV(int numSurface, nint* surfaces);

		[RequiredByFeature("GL_NV_vdpau_interop2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate nint glVDPAURegisterVideoSurfaceWithPictureStructureNV(nint vdpSurface, int target, int numTextureNames, uint* textureNames, [MarshalAs(UnmanagedType.I1)] bool isFrameStructure);

		[RequiredByFeature("GL_NV_vertex_array_range")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFlushVertexArrayRangeNV();

		[RequiredByFeature("GL_NV_vertex_array_range")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexArrayRangeNV(int length, nint pointer);

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribL1i64NV(uint index, long x);

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribL2i64NV(uint index, long x, long y);

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribL3i64NV(uint index, long x, long y, long z);

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribL4i64NV(uint index, long x, long y, long z, long w);

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribL1i64vNV(uint index, long* v);

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribL2i64vNV(uint index, long* v);

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribL3i64vNV(uint index, long* v);

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribL4i64vNV(uint index, long* v);

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribL1ui64NV(uint index, ulong x);

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribL2ui64NV(uint index, ulong x, ulong y);

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribL3ui64NV(uint index, ulong x, ulong y, ulong z);

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribL4ui64NV(uint index, ulong x, ulong y, ulong z, ulong w);

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribL1ui64vNV(uint index, ulong* v);

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribL2ui64vNV(uint index, ulong* v);

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribL3ui64vNV(uint index, ulong* v);

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribL4ui64vNV(uint index, ulong* v);

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVertexAttribLi64vNV(uint index, int pname, long* @params);

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVertexAttribLui64vNV(uint index, int pname, ulong* @params);

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribLFormatNV(uint index, int size, int type, int stride);

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBufferAddressRangeNV(int pname, uint index, ulong address, uint length);

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexFormatNV(int size, int type, int stride);

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNormalFormatNV(int type, int stride);

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColorFormatNV(int size, int type, int stride);

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glIndexFormatNV(int type, int stride);

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoordFormatNV(int size, int type, int stride);

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEdgeFlagFormatNV(int stride);

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSecondaryColorFormatNV(int size, int type, int stride);

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFogCoordFormatNV(int type, int stride);

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribFormatNV(uint index, int size, int type, [MarshalAs(UnmanagedType.I1)] bool normalized, int stride);

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribIFormatNV(uint index, int size, int type, int stride);

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetIntegerui64i_vNV(int value, uint index, ulong* result);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal unsafe delegate bool glAreProgramsResidentNV(int n, uint* programs, byte* residences);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glExecuteProgramNV(int target, uint id, float* @params);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramParameterdvNV(int target, uint index, int pname, double* @params);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramParameterfvNV(int target, uint index, int pname, float* @params);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramivNV(uint id, int pname, int* @params);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetProgramStringNV(uint id, int pname, byte* program);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTrackMatrixivNV(int target, uint address, int pname, int* @params);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glLoadProgramNV(int target, uint id, int len, byte* program);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramParameter4dNV(int target, uint index, double x, double y, double z, double w);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramParameter4dvNV(int target, uint index, double* v);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glProgramParameter4fNV(int target, uint index, float x, float y, float z, float w);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramParameter4fvNV(int target, uint index, float* v);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramParameters4dvNV(int target, uint index, int count, double* v);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glProgramParameters4fvNV(int target, uint index, int count, float* v);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRequestResidentProgramsNV(int n, uint* programs);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTrackMatrixNV(int target, uint address, int matrix, int transform);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, nint pointer);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribs1dvNV(uint index, int count, double* v);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribs1fvNV(uint index, int count, float* v);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribs1svNV(uint index, int count, short* v);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribs2dvNV(uint index, int count, double* v);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribs2fvNV(uint index, int count, float* v);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribs2svNV(uint index, int count, short* v);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribs3dvNV(uint index, int count, double* v);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribs3fvNV(uint index, int count, float* v);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribs3svNV(uint index, int count, short* v);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribs4dvNV(uint index, int count, double* v);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribs4fvNV(uint index, int count, float* v);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribs4svNV(uint index, int count, short* v);

		[RequiredByFeature("GL_NV_vertex_program")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertexAttribs4ubvNV(uint index, int count, byte* v);

		[RequiredByFeature("GL_NV_video_capture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBeginVideoCaptureNV(uint video_capture_slot);

		[RequiredByFeature("GL_NV_video_capture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindVideoCaptureStreamBufferNV(uint video_capture_slot, uint stream, int frame_region, nint offset);

		[RequiredByFeature("GL_NV_video_capture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindVideoCaptureStreamTextureNV(uint video_capture_slot, uint stream, int frame_region, int target, uint texture);

		[RequiredByFeature("GL_NV_video_capture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEndVideoCaptureNV(uint video_capture_slot);

		[RequiredByFeature("GL_NV_video_capture")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVideoCaptureivNV(uint video_capture_slot, int pname, int* @params);

		[RequiredByFeature("GL_NV_video_capture")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVideoCaptureStreamivNV(uint video_capture_slot, uint stream, int pname, int* @params);

		[RequiredByFeature("GL_NV_video_capture")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVideoCaptureStreamfvNV(uint video_capture_slot, uint stream, int pname, float* @params);

		[RequiredByFeature("GL_NV_video_capture")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetVideoCaptureStreamdvNV(uint video_capture_slot, uint stream, int pname, double* @params);

		[RequiredByFeature("GL_NV_video_capture")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate int glVideoCaptureNV(uint video_capture_slot, uint* sequence_num, ulong* capture_time);

		[RequiredByFeature("GL_NV_video_capture")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVideoCaptureStreamParameterivNV(uint video_capture_slot, uint stream, int pname, int* @params);

		[RequiredByFeature("GL_NV_video_capture")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVideoCaptureStreamParameterfvNV(uint video_capture_slot, uint stream, int pname, float* @params);

		[RequiredByFeature("GL_NV_video_capture")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVideoCaptureStreamParameterdvNV(uint video_capture_slot, uint stream, int pname, double* @params);

		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDepthRangeArrayfvNV(uint first, int count, float* v);

		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDepthRangeIndexedfNV(uint index, float n, float f);

		[RequiredByFeature("GL_NV_viewport_swizzle", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glViewportSwizzleNV(uint index, int swizzlex, int swizzley, int swizzlez, int swizzlew);

		[RequiredByFeature("GL_OES_blend_equation_separate", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBlendEquationSeparateOES(int modeRGB, int modeAlpha);

		[RequiredByFeature("GL_OES_blend_func_separate", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBlendFuncSeparateOES(int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);

		[RequiredByFeature("GL_OES_blend_subtract", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBlendEquationOES(int mode);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord1bOES(int texture, sbyte s);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord1bvOES(int texture, sbyte* coords);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord2bOES(int texture, sbyte s, sbyte t);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord2bvOES(int texture, sbyte* coords);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord3bOES(int texture, sbyte s, sbyte t, sbyte r);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord3bvOES(int texture, sbyte* coords);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord4bOES(int texture, sbyte s, sbyte t, sbyte r, sbyte q);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord4bvOES(int texture, sbyte* coords);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord1bOES(sbyte s);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord1bvOES(sbyte* coords);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord2bOES(sbyte s, sbyte t);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord2bvOES(sbyte* coords);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord3bOES(sbyte s, sbyte t, sbyte r);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord3bvOES(sbyte* coords);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord4bOES(sbyte s, sbyte t, sbyte r, sbyte q);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord4bvOES(sbyte* coords);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex2bOES(sbyte x, sbyte y);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex2bvOES(sbyte* coords);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex3bOES(sbyte x, sbyte y, sbyte z);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex3bvOES(sbyte* coords);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex4bOES(sbyte x, sbyte y, sbyte z, sbyte w);

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex4bvOES(sbyte* coords);

		[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawTexsOES(short x, short y, short z, short width, short height);

		[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawTexiOES(int x, int y, int z, int width, int height);

		[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawTexxOES(nint x, nint y, nint z, nint width, nint height);

		[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDrawTexsvOES(short* coords);

		[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDrawTexivOES(int* coords);

		[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDrawTexxvOES(nint* coords);

		[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawTexfOES(float x, float y, float z, float width, float height);

		[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDrawTexfvOES(float* coords);

		[RequiredByFeature("GL_OES_EGL_image", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEGLImageTargetTexture2DOES(int target, nint image);

		[RequiredByFeature("GL_OES_EGL_image", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEGLImageTargetRenderbufferStorageOES(int target, nint image);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glAlphaFuncxOES(int func, nint @ref);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearColorxOES(nint red, nint green, nint blue, nint alpha);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearDepthxOES(nint depth);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glClipPlanexOES(int plane, nint* equation);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor4xOES(nint red, nint green, nint blue, nint alpha);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDepthRangexOES(nint n, nint f);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFogxOES(int pname, nint param);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFogxvOES(int pname, nint* param);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFrustumxOES(nint l, nint r, nint b, nint t, nint n, nint f);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetClipPlanexOES(int plane, nint* equation);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetFixedvOES(int pname, nint* @params);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexEnvxvOES(int target, int pname, nint* @params);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexParameterxvOES(int target, int pname, nint* @params);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLightModelxOES(int pname, nint param);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glLightModelxvOES(int pname, nint* param);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLightxOES(int light, int pname, nint param);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glLightxvOES(int light, int pname, nint* @params);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLineWidthxOES(nint width);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glLoadMatrixxOES(nint* m);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMaterialxOES(int face, int pname, nint param);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMaterialxvOES(int face, int pname, nint* param);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultMatrixxOES(nint* m);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord4xOES(int texture, nint s, nint t, nint r, nint q);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNormal3xOES(nint nx, nint ny, nint nz);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glOrthoxOES(nint l, nint r, nint b, nint t, nint n, nint f);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPointParameterxvOES(int pname, nint* @params);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPointSizexOES(nint size);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPolygonOffsetxOES(nint factor, nint units);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRotatexOES(nint angle, nint x, nint y, nint z);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glScalexOES(nint x, nint y, nint z);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexEnvxOES(int target, int pname, nint param);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexEnvxvOES(int target, int pname, nint* @params);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexParameterxOES(int target, int pname, nint param);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexParameterxvOES(int target, int pname, nint* @params);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTranslatexOES(nint x, nint y, nint z);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetLightxvOES(int light, int pname, nint* @params);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMaterialxvOES(int face, int pname, nint* @params);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPointParameterxOES(int pname, nint param);

		[RequiredByFeature("GL_OES_fixed_point", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSampleCoveragexOES(int value, [MarshalAs(UnmanagedType.I1)] bool invert);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glAccumxOES(int op, nint value);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glBitmapxOES(int width, int height, nint xorig, nint yorig, nint xmove, nint ymove, byte* bitmap);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBlendColorxOES(nint red, nint green, nint blue, nint alpha);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glClearAccumxOES(nint red, nint green, nint blue, nint alpha);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor3xOES(nint red, nint green, nint blue);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor3xvOES(nint* components);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor4xvOES(nint* components);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glConvolutionParameterxOES(int target, int pname, nint param);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glConvolutionParameterxvOES(int target, int pname, nint* @params);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEvalCoord1xOES(nint u);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glEvalCoord1xvOES(nint* coords);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEvalCoord2xOES(nint u, nint v);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glEvalCoord2xvOES(nint* coords);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFeedbackBufferxOES(int n, int type, nint* buffer);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetConvolutionParameterxvOES(int target, int pname, nint* @params);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetHistogramParameterxvOES(int target, int pname, nint* @params);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetLightxOES(int light, int pname, nint* @params);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetMapxvOES(int target, int query, nint* v);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetMaterialxOES(int face, int pname, nint param);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPixelMapxv(int map, int size, nint* values);

		[RequiredByFeature("GL_OES_fixed_point")]
		[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexGenxvOES(int coord, int pname, nint* @params);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexLevelParameterxvOES(int target, int level, int pname, nint* @params);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glIndexxOES(nint component);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glIndexxvOES(nint* component);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glLoadTransposeMatrixxOES(nint* m);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMap1xOES(int target, nint u1, nint u2, int stride, int order, nint points);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMap2xOES(int target, nint u1, nint u2, int ustride, int uorder, nint v1, nint v2, int vstride, int vorder, nint points);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMapGrid1xOES(int n, nint u1, nint u2);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMapGrid2xOES(int n, nint u1, nint u2, nint v1, nint v2);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultTransposeMatrixxOES(nint* m);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord1xOES(int texture, nint s);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord1xvOES(int texture, nint* coords);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord2xOES(int texture, nint s, nint t);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord2xvOES(int texture, nint* coords);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMultiTexCoord3xOES(int texture, nint s, nint t, nint r);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord3xvOES(int texture, nint* coords);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glMultiTexCoord4xvOES(int texture, nint* coords);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNormal3xvOES(nint* coords);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPassThroughxOES(nint token);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPixelMapx(int map, int size, nint* values);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPixelStorex(int pname, nint param);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPixelTransferxOES(int pname, nint param);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPixelZoomxOES(nint xfactor, nint yfactor);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPrioritizeTexturesxOES(int n, uint* textures, nint* priorities);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRasterPos2xOES(nint x, nint y);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRasterPos2xvOES(nint* coords);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRasterPos3xOES(nint x, nint y, nint z);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRasterPos3xvOES(nint* coords);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRasterPos4xOES(nint x, nint y, nint z, nint w);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRasterPos4xvOES(nint* coords);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRectxOES(nint x1, nint y1, nint x2, nint y2);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glRectxvOES(nint* v1, nint* v2);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord1xOES(nint s);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord1xvOES(nint* coords);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord2xOES(nint s, nint t);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord2xvOES(nint* coords);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord3xOES(nint s, nint t, nint r);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord3xvOES(nint* coords);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord4xOES(nint s, nint t, nint r, nint q);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord4xvOES(nint* coords);

		[RequiredByFeature("GL_OES_fixed_point")]
		[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexGenxOES(int coord, int pname, nint param);

		[RequiredByFeature("GL_OES_fixed_point")]
		[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexGenxvOES(int coord, int pname, nint* @params);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex2xOES(nint x);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex2xvOES(nint* coords);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex3xOES(nint x, nint y);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex3xvOES(nint* coords);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glVertex4xOES(nint x, nint y, nint z);

		[RequiredByFeature("GL_OES_fixed_point")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glVertex4xvOES(nint* coords);

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsRenderbufferOES(uint renderbuffer);

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindRenderbufferOES(int target, uint renderbuffer);

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteRenderbuffersOES(int n, uint* renderbuffers);

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenRenderbuffersOES(int n, uint* renderbuffers);

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glRenderbufferStorageOES(int target, int internalformat, int width, int height);

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetRenderbufferParameterivOES(int target, int pname, int* @params);

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsFramebufferOES(uint framebuffer);

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glBindFramebufferOES(int target, uint framebuffer);

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeleteFramebuffersOES(int n, uint* framebuffers);

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGenFramebuffersOES(int n, uint* framebuffers);

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glCheckFramebufferStatusOES(int target);

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferRenderbufferOES(int target, int attachment, int renderbuffertarget, uint renderbuffer);

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferTexture2DOES(int target, int attachment, int textarget, uint texture, int level);

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetFramebufferAttachmentParameterivOES(int target, int attachment, int pname, int* @params);

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGenerateMipmapOES(int target);

		[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCurrentPaletteMatrixOES(uint matrixpaletteindex);

		[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLoadPaletteFromModelViewMatrixOES();

		[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glMatrixIndexPointerOES(int size, int type, int stride, nint pointer);

		[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glWeightPointerOES(int size, int type, int stride, nint pointer);

		[RequiredByFeature("GL_OES_point_size_array", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPointSizePointerOES(int type, int stride, nint pointer);

		[RequiredByFeature("GL_OES_query_matrix", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate uint glQueryMatrixxOES(nint* mantissa, int* exponent);

		[RequiredByFeature("GL_OES_single_precision", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glClipPlanefOES(int plane, float* equation);

		[RequiredByFeature("GL_OES_single_precision", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFrustumfOES(float l, float r, float b, float t, float n, float f);

		[RequiredByFeature("GL_OES_single_precision", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetClipPlanefOES(int plane, float* equation);

		[RequiredByFeature("GL_OES_single_precision", Api = "gl|gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glOrthofOES(float l, float r, float b, float t, float n, float f);

		[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexImage3DOES(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, nint pixels);

		[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexSubImage3DOES(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, nint pixels);

		[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCopyTexSubImage3DOES(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

		[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedTexImage3DOES(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, nint data);

		[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glCompressedTexSubImage3DOES(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, nint data);

		[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferTexture3DOES(int target, int attachment, int textarget, uint texture, int level, int zoffset);

		[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexGenfOES(int coord, int pname, float param);

		[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexGenfvOES(int coord, int pname, float* @params);

		[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexGeniOES(int coord, int pname, int param);

		[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexGenivOES(int coord, int pname, int* @params);

		[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexGenfvOES(int coord, int pname, float* @params);

		[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexGenivOES(int coord, int pname, int* @params);

		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDepthRangeArrayfvOES(uint first, int count, float* v);

		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDepthRangeIndexedfOES(uint index, float n, float f);

		[RequiredByFeature("GL_OVR_multiview", Api = "gl|glcore|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferTextureMultiviewOVR(int target, int attachment, uint texture, int level, int baseViewIndex, int numViews);

		[RequiredByFeature("GL_OVR_multiview_multisampled_render_to_texture", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferTextureMultisampleMultiviewOVR(int target, int attachment, uint texture, int level, int samples, int baseViewIndex, int numViews);

		[RequiredByFeature("GL_PGI_misc_hints")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glHintPGI(int target, int mode);

		[RequiredByFeature("GL_QCOM_alpha_test", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glAlphaFuncQCOM(int func, float @ref);

		[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetDriverControlsQCOM(int* num, int size, uint* driverControls);

		[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetDriverControlStringQCOM(uint driverControl, int bufSize, int* length, StringBuilder driverControlString);

		[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEnableDriverControlQCOM(uint driverControl);

		[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDisableDriverControlQCOM(uint driverControl);

		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glExtGetTexturesQCOM(uint* textures, int maxTextures, int* numTextures);

		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glExtGetBuffersQCOM(uint* buffers, int maxBuffers, int* numBuffers);

		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glExtGetRenderbuffersQCOM(uint* renderbuffers, int maxRenderbuffers, int* numRenderbuffers);

		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glExtGetFramebuffersQCOM(uint* framebuffers, int maxFramebuffers, int* numFramebuffers);

		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glExtGetTexLevelParameterivQCOM(uint texture, int face, int level, int pname, int* @params);

		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glExtTexObjectStateOverrideiQCOM(int target, int pname, int param);

		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glExtGetTexSubImageQCOM(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, nint texels);

		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glExtGetBufferPointervQCOM(int target, nint* @params);

		[RequiredByFeature("GL_QCOM_extended_get2", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glExtGetShadersQCOM(uint* shaders, int maxShaders, int* numShaders);

		[RequiredByFeature("GL_QCOM_extended_get2", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glExtGetProgramsQCOM(uint* programs, int maxPrograms, int* numPrograms);

		[RequiredByFeature("GL_QCOM_extended_get2", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glExtIsProgramBinaryQCOM(uint program);

		[RequiredByFeature("GL_QCOM_extended_get2", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glExtGetProgramBinarySourceQCOM(uint program, int shadertype, string source, int* length);

		[RequiredByFeature("GL_QCOM_framebuffer_foveated", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFramebufferFoveationConfigQCOM(uint framebuffer, uint numLayers, uint focalPointsPerLayer, uint requestedFeatures, uint* providedFeatures);

		[RequiredByFeature("GL_QCOM_framebuffer_foveated", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferFoveationParametersQCOM(uint framebuffer, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea);

		[RequiredByFeature("GL_QCOM_frame_extrapolation", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glExtrapolateTex2DQCOM(uint src1, uint src2, uint output, float scaleFactor);

		[RequiredByFeature("GL_QCOM_motion_estimation", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexEstimateMotionQCOM(uint @ref, uint target, uint output);

		[RequiredByFeature("GL_QCOM_motion_estimation", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexEstimateMotionRegionsQCOM(uint @ref, uint target, uint output, uint mask);

		[RequiredByFeature("GL_QCOM_shader_framebuffer_fetch_noncoherent", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFramebufferFetchBarrierQCOM();

		[RequiredByFeature("GL_QCOM_shading_rate", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glShadingRateQCOM(int rate);

		[RequiredByFeature("GL_QCOM_texture_foveated", Api = "gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureFoveationParametersQCOM(uint texture, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea);

		[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glStartTilingQCOM(uint x, uint y, uint width, uint height, uint preserveMask);

		[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glEndTilingQCOM(uint preserveMask);

		[RequiredByFeature("GL_SGIS_detail_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDetailTexFuncSGIS(int target, int n, float* points);

		[RequiredByFeature("GL_SGIS_detail_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetDetailTexFuncSGIS(int target, float* points);

		[RequiredByFeature("GL_SGIS_fog_function")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFogFuncSGIS(int n, float* points);

		[RequiredByFeature("GL_SGIS_fog_function")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetFogFuncSGIS(float* points);

		[RequiredByFeature("GL_SGIS_pixel_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPixelTexGenParameteriSGIS(int pname, int param);

		[RequiredByFeature("GL_SGIS_pixel_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPixelTexGenParameterivSGIS(int pname, int* @params);

		[RequiredByFeature("GL_SGIS_pixel_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPixelTexGenParameterfSGIS(int pname, float param);

		[RequiredByFeature("GL_SGIS_pixel_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glPixelTexGenParameterfvSGIS(int pname, float* @params);

		[RequiredByFeature("GL_SGIS_pixel_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPixelTexGenParameterivSGIS(int pname, int* @params);

		[RequiredByFeature("GL_SGIS_pixel_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetPixelTexGenParameterfvSGIS(int pname, float* @params);

		[RequiredByFeature("GL_SGIS_sharpen_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSharpenTexFuncSGIS(int target, int n, float* points);

		[RequiredByFeature("GL_SGIS_sharpen_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetSharpenTexFuncSGIS(int target, float* points);

		[RequiredByFeature("GL_SGIS_texture4D")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, nint pixels);

		[RequiredByFeature("GL_SGIS_texture4D")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, nint pixels);

		[RequiredByFeature("GL_SGIS_texture_color_mask")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTextureColorMaskSGIS([MarshalAs(UnmanagedType.I1)] bool red, [MarshalAs(UnmanagedType.I1)] bool green, [MarshalAs(UnmanagedType.I1)] bool blue, [MarshalAs(UnmanagedType.I1)] bool alpha);

		[RequiredByFeature("GL_SGIS_texture_filter4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetTexFilterFuncSGIS(int target, int filter, float* weights);

		[RequiredByFeature("GL_SGIS_texture_filter4")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexFilterFuncSGIS(int target, int filter, int n, float* weights);

		[RequiredByFeature("GL_SGIX_async")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glAsyncMarkerSGIX(uint marker);

		[RequiredByFeature("GL_SGIX_async")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate int glFinishAsyncSGIX(uint* markerp);

		[RequiredByFeature("GL_SGIX_async")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate int glPollAsyncSGIX(uint* markerp);

		[RequiredByFeature("GL_SGIX_async")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate uint glGenAsyncMarkersSGIX(int range);

		[RequiredByFeature("GL_SGIX_async")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDeleteAsyncMarkersSGIX(uint marker, int range);

		[RequiredByFeature("GL_SGIX_async")]
		[SuppressUnmanagedCodeSecurity]
		[return: MarshalAs(UnmanagedType.I1)]
		internal delegate bool glIsAsyncMarkerSGIX(uint marker);

		[RequiredByFeature("GL_SGIX_flush_raster")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFlushRasterSGIX();

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFragmentColorMaterialSGIX(int face, int mode);

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFragmentLightfSGIX(int light, int pname, float param);

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFragmentLightfvSGIX(int light, int pname, float* @params);

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFragmentLightiSGIX(int light, int pname, int param);

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFragmentLightivSGIX(int light, int pname, int* @params);

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFragmentLightModelfSGIX(int pname, float param);

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFragmentLightModelfvSGIX(int pname, float* @params);

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFragmentLightModeliSGIX(int pname, int param);

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFragmentLightModelivSGIX(int pname, int* @params);

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFragmentMaterialfSGIX(int face, int pname, float param);

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFragmentMaterialfvSGIX(int face, int pname, float* @params);

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFragmentMaterialiSGIX(int face, int pname, int param);

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glFragmentMaterialivSGIX(int face, int pname, int* @params);

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetFragmentLightfvSGIX(int light, int pname, float* @params);

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetFragmentLightivSGIX(int light, int pname, int* @params);

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetFragmentMaterialfvSGIX(int face, int pname, float* @params);

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetFragmentMaterialivSGIX(int face, int pname, int* @params);

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLightEnviSGIX(int pname, int param);

		[RequiredByFeature("GL_SGIX_framezoom")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFrameZoomSGIX(int factor);

		[RequiredByFeature("GL_SGIX_igloo_interface")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glIglooInterfaceSGIX(int pname, nint @params);

		[RequiredByFeature("GL_SGIX_instruments")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate int glGetInstrumentsSGIX();

		[RequiredByFeature("GL_SGIX_instruments")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glInstrumentsBufferSGIX(int size, int* buffer);

		[RequiredByFeature("GL_SGIX_instruments")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate int glPollInstrumentsSGIX(int* marker_p);

		[RequiredByFeature("GL_SGIX_instruments")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glReadInstrumentsSGIX(int marker);

		[RequiredByFeature("GL_SGIX_instruments")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glStartInstrumentsSGIX();

		[RequiredByFeature("GL_SGIX_instruments")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glStopInstrumentsSGIX(int marker);

		[RequiredByFeature("GL_SGIX_list_priority")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetListParameterfvSGIX(uint list, int pname, float* @params);

		[RequiredByFeature("GL_SGIX_list_priority")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetListParameterivSGIX(uint list, int pname, int* @params);

		[RequiredByFeature("GL_SGIX_list_priority")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glListParameterfSGIX(uint list, int pname, float param);

		[RequiredByFeature("GL_SGIX_list_priority")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glListParameterfvSGIX(uint list, int pname, float* @params);

		[RequiredByFeature("GL_SGIX_list_priority")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glListParameteriSGIX(uint list, int pname, int param);

		[RequiredByFeature("GL_SGIX_list_priority")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glListParameterivSGIX(uint list, int pname, int* @params);

		[RequiredByFeature("GL_SGIX_pixel_texture")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glPixelTexGenSGIX(int mode);

		[RequiredByFeature("GL_SGIX_polynomial_ffd")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeformationMap3dSGIX(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double* points);

		[RequiredByFeature("GL_SGIX_polynomial_ffd")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glDeformationMap3fSGIX(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float* points);

		[RequiredByFeature("GL_SGIX_polynomial_ffd")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDeformSGIX(uint mask);

		[RequiredByFeature("GL_SGIX_polynomial_ffd")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glLoadIdentityDeformationMapSGIX(uint mask);

		[RequiredByFeature("GL_SGIX_reference_plane")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glReferencePlaneSGIX(double* equation);

		[RequiredByFeature("GL_SGIX_sprite")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSpriteParameterfSGIX(int pname, float param);

		[RequiredByFeature("GL_SGIX_sprite")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSpriteParameterfvSGIX(int pname, float* @params);

		[RequiredByFeature("GL_SGIX_sprite")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glSpriteParameteriSGIX(int pname, int param);

		[RequiredByFeature("GL_SGIX_sprite")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glSpriteParameterivSGIX(int pname, int* @params);

		[RequiredByFeature("GL_SGIX_tag_sample_buffer")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTagSampleBufferSGIX();

		[RequiredByFeature("GL_SGI_color_table")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGetColorTableSGI(int target, int format, int type, nint table);

		[RequiredByFeature("GL_SGI_color_table")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetColorTableParameterfvSGI(int target, int pname, float* @params);

		[RequiredByFeature("GL_SGI_color_table")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glGetColorTableParameterivSGI(int target, int pname, int* @params);

		[RequiredByFeature("GL_SUNX_constant_data")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glFinishTextureSUNX();

		[RequiredByFeature("GL_SUN_global_alpha")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGlobalAlphaFactorbSUN(sbyte factor);

		[RequiredByFeature("GL_SUN_global_alpha")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGlobalAlphaFactorsSUN(short factor);

		[RequiredByFeature("GL_SUN_global_alpha")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGlobalAlphaFactoriSUN(int factor);

		[RequiredByFeature("GL_SUN_global_alpha")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGlobalAlphaFactorfSUN(float factor);

		[RequiredByFeature("GL_SUN_global_alpha")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGlobalAlphaFactordSUN(double factor);

		[RequiredByFeature("GL_SUN_global_alpha")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGlobalAlphaFactorubSUN(byte factor);

		[RequiredByFeature("GL_SUN_global_alpha")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGlobalAlphaFactorusSUN(ushort factor);

		[RequiredByFeature("GL_SUN_global_alpha")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glGlobalAlphaFactoruiSUN(uint factor);

		[RequiredByFeature("GL_SUN_mesh_array")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glDrawMeshArraysSUN(int mode, int first, int count, int width);

		[RequiredByFeature("GL_SUN_triangle_list")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glReplacementCodeuiSUN(uint code);

		[RequiredByFeature("GL_SUN_triangle_list")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glReplacementCodeusSUN(ushort code);

		[RequiredByFeature("GL_SUN_triangle_list")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glReplacementCodeubSUN(byte code);

		[RequiredByFeature("GL_SUN_triangle_list")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glReplacementCodeuivSUN(uint* code);

		[RequiredByFeature("GL_SUN_triangle_list")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glReplacementCodeusvSUN(ushort* code);

		[RequiredByFeature("GL_SUN_triangle_list")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glReplacementCodeubvSUN(byte* code);

		[RequiredByFeature("GL_SUN_triangle_list")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glReplacementCodePointerSUN(int type, int stride, nint* pointer);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor4ubVertex2fSUN(byte r, byte g, byte b, byte a, float x, float y);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor4ubVertex2fvSUN(byte* c, float* v);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor4ubVertex3fSUN(byte r, byte g, byte b, byte a, float x, float y, float z);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor4ubVertex3fvSUN(byte* c, float* v);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor3fVertex3fSUN(float r, float g, float b, float x, float y, float z);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor3fVertex3fvSUN(float* c, float* v);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glNormal3fVertex3fSUN(float nx, float ny, float nz, float x, float y, float z);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glNormal3fVertex3fvSUN(float* n, float* v);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glColor4fNormal3fVertex3fSUN(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glColor4fNormal3fVertex3fvSUN(float* c, float* n, float* v);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord2fVertex3fSUN(float s, float t, float x, float y, float z);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord2fVertex3fvSUN(float* tc, float* v);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord4fVertex4fSUN(float s, float t, float p, float q, float x, float y, float z, float w);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord4fVertex4fvSUN(float* tc, float* v);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord2fColor4ubVertex3fSUN(float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord2fColor4ubVertex3fvSUN(float* tc, byte* c, float* v);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord2fColor3fVertex3fSUN(float s, float t, float r, float g, float b, float x, float y, float z);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord2fColor3fVertex3fvSUN(float* tc, float* c, float* v);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord2fNormal3fVertex3fSUN(float s, float t, float nx, float ny, float nz, float x, float y, float z);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord2fNormal3fVertex3fvSUN(float* tc, float* n, float* v);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord2fColor4fNormal3fVertex3fSUN(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord2fColor4fNormal3fVertex3fvSUN(float* tc, float* c, float* n, float* v);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glTexCoord4fColor4fNormal3fVertex4fSUN(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glTexCoord4fColor4fNormal3fVertex4fvSUN(float* tc, float* c, float* n, float* v);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glReplacementCodeuiVertex3fSUN(uint rc, float x, float y, float z);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glReplacementCodeuiVertex3fvSUN(uint* rc, float* v);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glReplacementCodeuiColor4ubVertex3fSUN(uint rc, byte r, byte g, byte b, byte a, float x, float y, float z);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glReplacementCodeuiColor4ubVertex3fvSUN(uint* rc, byte* c, float* v);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glReplacementCodeuiColor3fVertex3fSUN(uint rc, float r, float g, float b, float x, float y, float z);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glReplacementCodeuiColor3fVertex3fvSUN(uint* rc, float* c, float* v);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glReplacementCodeuiNormal3fVertex3fSUN(uint rc, float nx, float ny, float nz, float x, float y, float z);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glReplacementCodeuiNormal3fVertex3fvSUN(uint* rc, float* n, float* v);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glReplacementCodeuiColor4fNormal3fVertex3fSUN(uint rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint* rc, float* c, float* n, float* v);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glReplacementCodeuiTexCoord2fVertex3fSUN(uint rc, float s, float t, float x, float y, float z);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glReplacementCodeuiTexCoord2fVertex3fvSUN(uint* rc, float* tc, float* v);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(uint rc, float s, float t, float nx, float ny, float nz, float x, float y, float z);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint* rc, float* tc, float* n, float* v);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal delegate void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(uint rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);

		[RequiredByFeature("GL_SUN_vertex")]
		[SuppressUnmanagedCodeSecurity]
		internal unsafe delegate void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float* tc, float* c, float* n, float* v);

		[RequiredByFeature("GL_3DFX_tbuffer")]
		[ThreadStatic]
		internal static glTbufferMask3DFX pglTbufferMask3DFX;

		[RequiredByFeature("GL_AMD_debug_output")]
		[ThreadStatic]
		internal static glDebugMessageEnableAMD pglDebugMessageEnableAMD;

		[RequiredByFeature("GL_AMD_debug_output")]
		[ThreadStatic]
		internal static glDebugMessageInsertAMD pglDebugMessageInsertAMD;

		[RequiredByFeature("GL_AMD_debug_output")]
		[ThreadStatic]
		internal static glDebugMessageCallbackAMD pglDebugMessageCallbackAMD;

		[RequiredByFeature("GL_AMD_debug_output")]
		[ThreadStatic]
		internal static glGetDebugMessageLogAMD pglGetDebugMessageLogAMD;

		[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glRenderbufferStorageMultisampleAdvancedAMD pglRenderbufferStorageMultisampleAdvancedAMD;

		[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glNamedRenderbufferStorageMultisampleAdvancedAMD pglNamedRenderbufferStorageMultisampleAdvancedAMD;

		[RequiredByFeature("GL_AMD_framebuffer_sample_positions")]
		[ThreadStatic]
		internal static glFramebufferSamplePositionsfvAMD pglFramebufferSamplePositionsfvAMD;

		[RequiredByFeature("GL_AMD_framebuffer_sample_positions")]
		[ThreadStatic]
		internal static glNamedFramebufferSamplePositionsfvAMD pglNamedFramebufferSamplePositionsfvAMD;

		[RequiredByFeature("GL_AMD_framebuffer_sample_positions")]
		[ThreadStatic]
		internal static glGetFramebufferParameterfvAMD pglGetFramebufferParameterfvAMD;

		[RequiredByFeature("GL_AMD_framebuffer_sample_positions")]
		[ThreadStatic]
		internal static glGetNamedFramebufferParameterfvAMD pglGetNamedFramebufferParameterfvAMD;

		[RequiredByFeature("GL_AMD_interleaved_elements")]
		[ThreadStatic]
		internal static glVertexAttribParameteriAMD pglVertexAttribParameteriAMD;

		[RequiredByFeature("GL_AMD_name_gen_delete")]
		[ThreadStatic]
		internal static glGenNamesAMD pglGenNamesAMD;

		[RequiredByFeature("GL_AMD_name_gen_delete")]
		[ThreadStatic]
		internal static glDeleteNamesAMD pglDeleteNamesAMD;

		[RequiredByFeature("GL_AMD_name_gen_delete")]
		[ThreadStatic]
		internal static glIsNameAMD pglIsNameAMD;

		[RequiredByFeature("GL_AMD_occlusion_query_event")]
		[ThreadStatic]
		internal static glQueryObjectParameteruiAMD pglQueryObjectParameteruiAMD;

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetPerfMonitorGroupsAMD pglGetPerfMonitorGroupsAMD;

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetPerfMonitorCountersAMD pglGetPerfMonitorCountersAMD;

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetPerfMonitorGroupStringAMD pglGetPerfMonitorGroupStringAMD;

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetPerfMonitorCounterStringAMD pglGetPerfMonitorCounterStringAMD;

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetPerfMonitorCounterInfoAMD pglGetPerfMonitorCounterInfoAMD;

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGenPerfMonitorsAMD pglGenPerfMonitorsAMD;

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glDeletePerfMonitorsAMD pglDeletePerfMonitorsAMD;

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glSelectPerfMonitorCountersAMD pglSelectPerfMonitorCountersAMD;

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glBeginPerfMonitorAMD pglBeginPerfMonitorAMD;

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glEndPerfMonitorAMD pglEndPerfMonitorAMD;

		[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetPerfMonitorCounterDataAMD pglGetPerfMonitorCounterDataAMD;

		[RequiredByFeature("GL_AMD_sample_positions")]
		[ThreadStatic]
		internal static glSetMultisamplefvAMD pglSetMultisamplefvAMD;

		[RequiredByFeature("GL_AMD_sparse_texture")]
		[ThreadStatic]
		internal static glTexStorageSparseAMD pglTexStorageSparseAMD;

		[RequiredByFeature("GL_AMD_sparse_texture")]
		[ThreadStatic]
		internal static glTextureStorageSparseAMD pglTextureStorageSparseAMD;

		[RequiredByFeature("GL_AMD_stencil_operation_extended")]
		[ThreadStatic]
		internal static glStencilOpValueAMD pglStencilOpValueAMD;

		[RequiredByFeature("GL_AMD_vertex_shader_tessellator")]
		[ThreadStatic]
		internal static glTessellationFactorAMD pglTessellationFactorAMD;

		[RequiredByFeature("GL_AMD_vertex_shader_tessellator")]
		[ThreadStatic]
		internal static glTessellationModeAMD pglTessellationModeAMD;

		[RequiredByFeature("GL_ANGLE_framebuffer_blit", Api = "gles2")]
		[ThreadStatic]
		internal static glBlitFramebufferANGLE pglBlitFramebufferANGLE;

		[RequiredByFeature("GL_ANGLE_framebuffer_multisample", Api = "gles2")]
		[ThreadStatic]
		internal static glRenderbufferStorageMultisampleANGLE pglRenderbufferStorageMultisampleANGLE;

		[RequiredByFeature("GL_ANGLE_translated_shader_source", Api = "gles2")]
		[ThreadStatic]
		internal static glGetTranslatedShaderSourceANGLE pglGetTranslatedShaderSourceANGLE;

		[RequiredByFeature("GL_APPLE_copy_texture_levels", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glCopyTextureLevelsAPPLE pglCopyTextureLevelsAPPLE;

		[RequiredByFeature("GL_APPLE_element_array")]
		[ThreadStatic]
		internal static glElementPointerAPPLE pglElementPointerAPPLE;

		[RequiredByFeature("GL_APPLE_element_array")]
		[ThreadStatic]
		internal static glDrawElementArrayAPPLE pglDrawElementArrayAPPLE;

		[RequiredByFeature("GL_APPLE_element_array")]
		[ThreadStatic]
		internal static glDrawRangeElementArrayAPPLE pglDrawRangeElementArrayAPPLE;

		[RequiredByFeature("GL_APPLE_element_array")]
		[ThreadStatic]
		internal static glMultiDrawElementArrayAPPLE pglMultiDrawElementArrayAPPLE;

		[RequiredByFeature("GL_APPLE_element_array")]
		[ThreadStatic]
		internal static glMultiDrawRangeElementArrayAPPLE pglMultiDrawRangeElementArrayAPPLE;

		[RequiredByFeature("GL_APPLE_fence")]
		[ThreadStatic]
		internal static glGenFencesAPPLE pglGenFencesAPPLE;

		[RequiredByFeature("GL_APPLE_fence")]
		[ThreadStatic]
		internal static glDeleteFencesAPPLE pglDeleteFencesAPPLE;

		[RequiredByFeature("GL_APPLE_fence")]
		[ThreadStatic]
		internal static glSetFenceAPPLE pglSetFenceAPPLE;

		[RequiredByFeature("GL_APPLE_fence")]
		[ThreadStatic]
		internal static glIsFenceAPPLE pglIsFenceAPPLE;

		[RequiredByFeature("GL_APPLE_fence")]
		[ThreadStatic]
		internal static glTestFenceAPPLE pglTestFenceAPPLE;

		[RequiredByFeature("GL_APPLE_fence")]
		[ThreadStatic]
		internal static glFinishFenceAPPLE pglFinishFenceAPPLE;

		[RequiredByFeature("GL_APPLE_fence")]
		[ThreadStatic]
		internal static glTestObjectAPPLE pglTestObjectAPPLE;

		[RequiredByFeature("GL_APPLE_fence")]
		[ThreadStatic]
		internal static glFinishObjectAPPLE pglFinishObjectAPPLE;

		[RequiredByFeature("GL_APPLE_flush_buffer_range")]
		[ThreadStatic]
		internal static glBufferParameteriAPPLE pglBufferParameteriAPPLE;

		[RequiredByFeature("GL_APPLE_framebuffer_multisample", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glRenderbufferStorageMultisampleAPPLE pglRenderbufferStorageMultisampleAPPLE;

		[RequiredByFeature("GL_APPLE_framebuffer_multisample", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glResolveMultisampleFramebufferAPPLE pglResolveMultisampleFramebufferAPPLE;

		[RequiredByFeature("GL_APPLE_object_purgeable")]
		[ThreadStatic]
		internal static glObjectPurgeableAPPLE pglObjectPurgeableAPPLE;

		[RequiredByFeature("GL_APPLE_object_purgeable")]
		[ThreadStatic]
		internal static glObjectUnpurgeableAPPLE pglObjectUnpurgeableAPPLE;

		[RequiredByFeature("GL_APPLE_object_purgeable")]
		[ThreadStatic]
		internal static glGetObjectParameterivAPPLE pglGetObjectParameterivAPPLE;

		[RequiredByFeature("GL_APPLE_texture_range")]
		[ThreadStatic]
		internal static glTextureRangeAPPLE pglTextureRangeAPPLE;

		[RequiredByFeature("GL_APPLE_texture_range")]
		[ThreadStatic]
		internal static glGetTexParameterPointervAPPLE pglGetTexParameterPointervAPPLE;

		[RequiredByFeature("GL_APPLE_vertex_array_object")]
		[ThreadStatic]
		internal static glBindVertexArrayAPPLE pglBindVertexArrayAPPLE;

		[RequiredByFeature("GL_APPLE_vertex_array_range")]
		[ThreadStatic]
		internal static glVertexArrayRangeAPPLE pglVertexArrayRangeAPPLE;

		[RequiredByFeature("GL_APPLE_vertex_array_range")]
		[ThreadStatic]
		internal static glFlushVertexArrayRangeAPPLE pglFlushVertexArrayRangeAPPLE;

		[RequiredByFeature("GL_APPLE_vertex_array_range")]
		[ThreadStatic]
		internal static glVertexArrayParameteriAPPLE pglVertexArrayParameteriAPPLE;

		[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
		[ThreadStatic]
		internal static glEnableVertexAttribAPPLE pglEnableVertexAttribAPPLE;

		[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
		[ThreadStatic]
		internal static glDisableVertexAttribAPPLE pglDisableVertexAttribAPPLE;

		[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
		[ThreadStatic]
		internal static glIsVertexAttribEnabledAPPLE pglIsVertexAttribEnabledAPPLE;

		[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
		[ThreadStatic]
		internal static glMapVertexAttrib1dAPPLE pglMapVertexAttrib1dAPPLE;

		[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
		[ThreadStatic]
		internal static glMapVertexAttrib1fAPPLE pglMapVertexAttrib1fAPPLE;

		[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
		[ThreadStatic]
		internal static glMapVertexAttrib2dAPPLE pglMapVertexAttrib2dAPPLE;

		[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
		[ThreadStatic]
		internal static glMapVertexAttrib2fAPPLE pglMapVertexAttrib2fAPPLE;

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_IMG_bindless_texture", Api = "gles2", EntryPoint = "glGetTextureHandleIMG")]
		[ThreadStatic]
		internal static glGetTextureHandleARB pglGetTextureHandleARB;

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_IMG_bindless_texture", Api = "gles2", EntryPoint = "glGetTextureSamplerHandleIMG")]
		[ThreadStatic]
		internal static glGetTextureSamplerHandleARB pglGetTextureSamplerHandleARB;

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMakeTextureHandleResidentARB pglMakeTextureHandleResidentARB;

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMakeTextureHandleNonResidentARB pglMakeTextureHandleNonResidentARB;

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetImageHandleARB pglGetImageHandleARB;

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMakeImageHandleResidentARB pglMakeImageHandleResidentARB;

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMakeImageHandleNonResidentARB pglMakeImageHandleNonResidentARB;

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_IMG_bindless_texture", Api = "gles2", EntryPoint = "glUniformHandleui64IMG")]
		[ThreadStatic]
		internal static glUniformHandleui64ARB pglUniformHandleui64ARB;

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_IMG_bindless_texture", Api = "gles2", EntryPoint = "glUniformHandleui64vIMG")]
		[ThreadStatic]
		internal static glUniformHandleui64vARB pglUniformHandleui64vARB;

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_IMG_bindless_texture", Api = "gles2", EntryPoint = "glProgramUniformHandleui64IMG")]
		[ThreadStatic]
		internal static glProgramUniformHandleui64ARB pglProgramUniformHandleui64ARB;

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_IMG_bindless_texture", Api = "gles2", EntryPoint = "glProgramUniformHandleui64vIMG")]
		[ThreadStatic]
		internal static glProgramUniformHandleui64vARB pglProgramUniformHandleui64vARB;

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glIsTextureHandleResidentARB pglIsTextureHandleResidentARB;

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glIsImageHandleResidentARB pglIsImageHandleResidentARB;

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribL1ui64ARB pglVertexAttribL1ui64ARB;

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribL1ui64vARB pglVertexAttribL1ui64vARB;

		[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetVertexAttribLui64vARB pglGetVertexAttribLui64vARB;

		[RequiredByFeature("GL_ARB_cl_event", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCreateSyncFromCLeventARB pglCreateSyncFromCLeventARB;

		[RequiredByFeature("GL_ARB_compute_variable_group_size", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDispatchComputeGroupSizeARB pglDispatchComputeGroupSizeARB;

		[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_geometry_program4", EntryPoint = "glFramebufferTextureFaceEXT")]
		[ThreadStatic]
		internal static glFramebufferTextureFaceARB pglFramebufferTextureFaceARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform1i64ARB pglUniform1i64ARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform2i64ARB pglUniform2i64ARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform3i64ARB pglUniform3i64ARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform4i64ARB pglUniform4i64ARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform1i64vARB pglUniform1i64vARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform2i64vARB pglUniform2i64vARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform3i64vARB pglUniform3i64vARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform4i64vARB pglUniform4i64vARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform1ui64ARB pglUniform1ui64ARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform2ui64ARB pglUniform2ui64ARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform3ui64ARB pglUniform3ui64ARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform4ui64ARB pglUniform4ui64ARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform1ui64vARB pglUniform1ui64vARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform2ui64vARB pglUniform2ui64vARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform3ui64vARB pglUniform3ui64vARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform4ui64vARB pglUniform4ui64vARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetUniformi64vARB pglGetUniformi64vARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetUniformui64vARB pglGetUniformui64vARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetnUniformi64vARB pglGetnUniformi64vARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetnUniformui64vARB pglGetnUniformui64vARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform1i64ARB pglProgramUniform1i64ARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform2i64ARB pglProgramUniform2i64ARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform3i64ARB pglProgramUniform3i64ARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform4i64ARB pglProgramUniform4i64ARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform1i64vARB pglProgramUniform1i64vARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform2i64vARB pglProgramUniform2i64vARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform3i64vARB pglProgramUniform3i64vARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform4i64vARB pglProgramUniform4i64vARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform1ui64ARB pglProgramUniform1ui64ARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform2ui64ARB pglProgramUniform2ui64ARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform3ui64ARB pglProgramUniform3ui64ARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform4ui64ARB pglProgramUniform4ui64ARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform1ui64vARB pglProgramUniform1ui64vARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform2ui64vARB pglProgramUniform2ui64vARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform3ui64vARB pglProgramUniform3ui64vARB;

		[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform4ui64vARB pglProgramUniform4ui64vARB;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_paletted_texture", EntryPoint = "glColorTableEXT")]
		[RequiredByFeature("GL_SGI_color_table", EntryPoint = "glColorTableSGI")]
		[ThreadStatic]
		internal static glColorTable pglColorTable;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_SGI_color_table", EntryPoint = "glColorTableParameterfvSGI")]
		[ThreadStatic]
		internal static glColorTableParameterfv pglColorTableParameterfv;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_SGI_color_table", EntryPoint = "glColorTableParameterivSGI")]
		[ThreadStatic]
		internal static glColorTableParameteriv pglColorTableParameteriv;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_SGI_color_table", EntryPoint = "glCopyColorTableSGI")]
		[ThreadStatic]
		internal static glCopyColorTable pglCopyColorTable;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_paletted_texture", EntryPoint = "glGetColorTableEXT")]
		[ThreadStatic]
		internal static glGetColorTable pglGetColorTable;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_paletted_texture", EntryPoint = "glGetColorTableParameterfvEXT")]
		[ThreadStatic]
		internal static glGetColorTableParameterfv pglGetColorTableParameterfv;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_paletted_texture", EntryPoint = "glGetColorTableParameterivEXT")]
		[ThreadStatic]
		internal static glGetColorTableParameteriv pglGetColorTableParameteriv;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_color_subtable", EntryPoint = "glColorSubTableEXT")]
		[ThreadStatic]
		internal static glColorSubTable pglColorSubTable;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_color_subtable", EntryPoint = "glCopyColorSubTableEXT")]
		[ThreadStatic]
		internal static glCopyColorSubTable pglCopyColorSubTable;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_convolution", EntryPoint = "glConvolutionFilter1DEXT")]
		[ThreadStatic]
		internal static glConvolutionFilter1D pglConvolutionFilter1D;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_convolution", EntryPoint = "glConvolutionFilter2DEXT")]
		[ThreadStatic]
		internal static glConvolutionFilter2D pglConvolutionFilter2D;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_convolution", EntryPoint = "glConvolutionParameterfEXT")]
		[ThreadStatic]
		internal static glConvolutionParameterf pglConvolutionParameterf;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_convolution", EntryPoint = "glConvolutionParameterfvEXT")]
		[ThreadStatic]
		internal static glConvolutionParameterfv pglConvolutionParameterfv;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_convolution", EntryPoint = "glConvolutionParameteriEXT")]
		[ThreadStatic]
		internal static glConvolutionParameteri pglConvolutionParameteri;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_convolution", EntryPoint = "glConvolutionParameterivEXT")]
		[ThreadStatic]
		internal static glConvolutionParameteriv pglConvolutionParameteriv;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_convolution", EntryPoint = "glCopyConvolutionFilter1DEXT")]
		[ThreadStatic]
		internal static glCopyConvolutionFilter1D pglCopyConvolutionFilter1D;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_convolution", EntryPoint = "glCopyConvolutionFilter2DEXT")]
		[ThreadStatic]
		internal static glCopyConvolutionFilter2D pglCopyConvolutionFilter2D;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetConvolutionFilter pglGetConvolutionFilter;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetConvolutionParameterfv pglGetConvolutionParameterfv;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetConvolutionParameteriv pglGetConvolutionParameteriv;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetSeparableFilter pglGetSeparableFilter;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_convolution", EntryPoint = "glSeparableFilter2DEXT")]
		[ThreadStatic]
		internal static glSeparableFilter2D pglSeparableFilter2D;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetHistogram pglGetHistogram;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetHistogramParameterfv pglGetHistogramParameterfv;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetHistogramParameteriv pglGetHistogramParameteriv;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetMinmax pglGetMinmax;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetMinmaxParameterfv pglGetMinmaxParameterfv;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetMinmaxParameteriv pglGetMinmaxParameteriv;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_histogram", EntryPoint = "glHistogramEXT")]
		[ThreadStatic]
		internal static glHistogram pglHistogram;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_histogram", EntryPoint = "glMinmaxEXT")]
		[ThreadStatic]
		internal static glMinmax pglMinmax;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_histogram", EntryPoint = "glResetHistogramEXT")]
		[ThreadStatic]
		internal static glResetHistogram pglResetHistogram;

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_histogram", EntryPoint = "glResetMinmaxEXT")]
		[ThreadStatic]
		internal static glResetMinmax pglResetMinmax;

		[RequiredByFeature("GL_ARB_matrix_palette")]
		[ThreadStatic]
		internal static glCurrentPaletteMatrixARB pglCurrentPaletteMatrixARB;

		[RequiredByFeature("GL_ARB_matrix_palette")]
		[ThreadStatic]
		internal static glMatrixIndexubvARB pglMatrixIndexubvARB;

		[RequiredByFeature("GL_ARB_matrix_palette")]
		[ThreadStatic]
		internal static glMatrixIndexusvARB pglMatrixIndexusvARB;

		[RequiredByFeature("GL_ARB_matrix_palette")]
		[ThreadStatic]
		internal static glMatrixIndexuivARB pglMatrixIndexuivARB;

		[RequiredByFeature("GL_ARB_matrix_palette")]
		[ThreadStatic]
		internal static glMatrixIndexPointerARB pglMatrixIndexPointerARB;

		[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetGraphicsResetStatusARB pglGetGraphicsResetStatusARB;

		[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetnTexImageARB pglGetnTexImageARB;

		[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetnCompressedTexImageARB pglGetnCompressedTexImageARB;

		[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetnUniformfvARB pglGetnUniformfvARB;

		[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetnUniformivARB pglGetnUniformivARB;

		[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetnUniformuivARB pglGetnUniformuivARB;

		[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetnUniformdvARB pglGetnUniformdvARB;

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnMapdvARB pglGetnMapdvARB;

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnMapfvARB pglGetnMapfvARB;

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnMapivARB pglGetnMapivARB;

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnPixelMapfvARB pglGetnPixelMapfvARB;

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnPixelMapuivARB pglGetnPixelMapuivARB;

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnPixelMapusvARB pglGetnPixelMapusvARB;

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnPolygonStippleARB pglGetnPolygonStippleARB;

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnColorTableARB pglGetnColorTableARB;

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnConvolutionFilterARB pglGetnConvolutionFilterARB;

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnSeparableFilterARB pglGetnSeparableFilterARB;

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnHistogramARB pglGetnHistogramARB;

		[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnMinmaxARB pglGetnMinmaxARB;

		[RequiredByFeature("GL_ARB_sample_locations", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glFramebufferSampleLocationsfvARB pglFramebufferSampleLocationsfvARB;

		[RequiredByFeature("GL_ARB_sample_locations", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedFramebufferSampleLocationsfvARB pglNamedFramebufferSampleLocationsfvARB;

		[RequiredByFeature("GL_ARB_sample_locations", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glEvaluateDepthValuesARB pglEvaluateDepthValuesARB;

		[RequiredByFeature("GL_ARB_shader_objects")]
		[ThreadStatic]
		internal static glDeleteObjectARB pglDeleteObjectARB;

		[RequiredByFeature("GL_ARB_shader_objects")]
		[ThreadStatic]
		internal static glGetHandleARB pglGetHandleARB;

		[RequiredByFeature("GL_ARB_shader_objects")]
		[ThreadStatic]
		internal static glGetObjectParameterfvARB pglGetObjectParameterfvARB;

		[RequiredByFeature("GL_ARB_shader_objects")]
		[ThreadStatic]
		internal static glGetObjectParameterivARB pglGetObjectParameterivARB;

		[RequiredByFeature("GL_ARB_shader_objects")]
		[ThreadStatic]
		internal static glGetInfoLogARB pglGetInfoLogARB;

		[RequiredByFeature("GL_ARB_shader_objects")]
		[ThreadStatic]
		internal static glGetAttachedObjectsARB pglGetAttachedObjectsARB;

		[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedStringARB pglNamedStringARB;

		[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDeleteNamedStringARB pglDeleteNamedStringARB;

		[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCompileShaderIncludeARB pglCompileShaderIncludeARB;

		[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glIsNamedStringARB pglIsNamedStringARB;

		[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedStringARB pglGetNamedStringARB;

		[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedStringivARB pglGetNamedStringivARB;

		[RequiredByFeature("GL_ARB_sparse_buffer", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glBufferPageCommitmentARB pglBufferPageCommitmentARB;

		[RequiredByFeature("GL_ARB_sparse_buffer", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedBufferPageCommitmentEXT pglNamedBufferPageCommitmentEXT;

		[RequiredByFeature("GL_ARB_sparse_buffer", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedBufferPageCommitmentARB pglNamedBufferPageCommitmentARB;

		[RequiredByFeature("GL_ARB_sparse_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2", EntryPoint = "glTexPageCommitmentEXT")]
		[ThreadStatic]
		internal static glTexPageCommitmentARB pglTexPageCommitmentARB;

		[RequiredByFeature("GL_ARB_vertex_blend")]
		[ThreadStatic]
		internal static glWeightbvARB pglWeightbvARB;

		[RequiredByFeature("GL_ARB_vertex_blend")]
		[ThreadStatic]
		internal static glWeightsvARB pglWeightsvARB;

		[RequiredByFeature("GL_ARB_vertex_blend")]
		[ThreadStatic]
		internal static glWeightivARB pglWeightivARB;

		[RequiredByFeature("GL_ARB_vertex_blend")]
		[ThreadStatic]
		internal static glWeightfvARB pglWeightfvARB;

		[RequiredByFeature("GL_ARB_vertex_blend")]
		[ThreadStatic]
		internal static glWeightdvARB pglWeightdvARB;

		[RequiredByFeature("GL_ARB_vertex_blend")]
		[ThreadStatic]
		internal static glWeightubvARB pglWeightubvARB;

		[RequiredByFeature("GL_ARB_vertex_blend")]
		[ThreadStatic]
		internal static glWeightusvARB pglWeightusvARB;

		[RequiredByFeature("GL_ARB_vertex_blend")]
		[ThreadStatic]
		internal static glWeightuivARB pglWeightuivARB;

		[RequiredByFeature("GL_ARB_vertex_blend")]
		[ThreadStatic]
		internal static glWeightPointerARB pglWeightPointerARB;

		[RequiredByFeature("GL_ARB_vertex_blend")]
		[ThreadStatic]
		internal static glVertexBlendARB pglVertexBlendARB;

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[ThreadStatic]
		internal static glProgramStringARB pglProgramStringARB;

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glBindProgramNV")]
		[ThreadStatic]
		internal static glBindProgramARB pglBindProgramARB;

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glDeleteProgramsNV")]
		[ThreadStatic]
		internal static glDeleteProgramsARB pglDeleteProgramsARB;

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glGenProgramsNV")]
		[ThreadStatic]
		internal static glGenProgramsARB pglGenProgramsARB;

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[ThreadStatic]
		internal static glProgramEnvParameter4dARB pglProgramEnvParameter4dARB;

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[ThreadStatic]
		internal static glProgramEnvParameter4dvARB pglProgramEnvParameter4dvARB;

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[ThreadStatic]
		internal static glProgramEnvParameter4fARB pglProgramEnvParameter4fARB;

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[ThreadStatic]
		internal static glProgramEnvParameter4fvARB pglProgramEnvParameter4fvARB;

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[ThreadStatic]
		internal static glProgramLocalParameter4dARB pglProgramLocalParameter4dARB;

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[ThreadStatic]
		internal static glProgramLocalParameter4dvARB pglProgramLocalParameter4dvARB;

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[ThreadStatic]
		internal static glProgramLocalParameter4fARB pglProgramLocalParameter4fARB;

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[ThreadStatic]
		internal static glProgramLocalParameter4fvARB pglProgramLocalParameter4fvARB;

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[ThreadStatic]
		internal static glGetProgramEnvParameterdvARB pglGetProgramEnvParameterdvARB;

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[ThreadStatic]
		internal static glGetProgramEnvParameterfvARB pglGetProgramEnvParameterfvARB;

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[ThreadStatic]
		internal static glGetProgramLocalParameterdvARB pglGetProgramLocalParameterdvARB;

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[ThreadStatic]
		internal static glGetProgramLocalParameterfvARB pglGetProgramLocalParameterfvARB;

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[ThreadStatic]
		internal static glGetProgramivARB pglGetProgramivARB;

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[ThreadStatic]
		internal static glGetProgramStringARB pglGetProgramStringARB;

		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glIsProgramNV")]
		[ThreadStatic]
		internal static glIsProgramARB pglIsProgramARB;

		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDepthRangeArraydvNV pglDepthRangeArraydvNV;

		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDepthRangeIndexeddNV pglDepthRangeIndexeddNV;

		[RequiredByFeature("GL_ATI_element_array")]
		[ThreadStatic]
		internal static glElementPointerATI pglElementPointerATI;

		[RequiredByFeature("GL_ATI_element_array")]
		[ThreadStatic]
		internal static glDrawElementArrayATI pglDrawElementArrayATI;

		[RequiredByFeature("GL_ATI_element_array")]
		[ThreadStatic]
		internal static glDrawRangeElementArrayATI pglDrawRangeElementArrayATI;

		[RequiredByFeature("GL_ATI_envmap_bumpmap")]
		[ThreadStatic]
		internal static glTexBumpParameterivATI pglTexBumpParameterivATI;

		[RequiredByFeature("GL_ATI_envmap_bumpmap")]
		[ThreadStatic]
		internal static glTexBumpParameterfvATI pglTexBumpParameterfvATI;

		[RequiredByFeature("GL_ATI_envmap_bumpmap")]
		[ThreadStatic]
		internal static glGetTexBumpParameterivATI pglGetTexBumpParameterivATI;

		[RequiredByFeature("GL_ATI_envmap_bumpmap")]
		[ThreadStatic]
		internal static glGetTexBumpParameterfvATI pglGetTexBumpParameterfvATI;

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[ThreadStatic]
		internal static glGenFragmentShadersATI pglGenFragmentShadersATI;

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[ThreadStatic]
		internal static glBindFragmentShaderATI pglBindFragmentShaderATI;

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[ThreadStatic]
		internal static glDeleteFragmentShaderATI pglDeleteFragmentShaderATI;

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[ThreadStatic]
		internal static glBeginFragmentShaderATI pglBeginFragmentShaderATI;

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[ThreadStatic]
		internal static glEndFragmentShaderATI pglEndFragmentShaderATI;

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[ThreadStatic]
		internal static glPassTexCoordATI pglPassTexCoordATI;

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[ThreadStatic]
		internal static glSampleMapATI pglSampleMapATI;

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[ThreadStatic]
		internal static glColorFragmentOp1ATI pglColorFragmentOp1ATI;

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[ThreadStatic]
		internal static glColorFragmentOp2ATI pglColorFragmentOp2ATI;

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[ThreadStatic]
		internal static glColorFragmentOp3ATI pglColorFragmentOp3ATI;

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[ThreadStatic]
		internal static glAlphaFragmentOp1ATI pglAlphaFragmentOp1ATI;

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[ThreadStatic]
		internal static glAlphaFragmentOp2ATI pglAlphaFragmentOp2ATI;

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[ThreadStatic]
		internal static glAlphaFragmentOp3ATI pglAlphaFragmentOp3ATI;

		[RequiredByFeature("GL_ATI_fragment_shader")]
		[ThreadStatic]
		internal static glSetFragmentShaderConstantATI pglSetFragmentShaderConstantATI;

		[RequiredByFeature("GL_ATI_map_object_buffer")]
		[ThreadStatic]
		internal static glMapObjectBufferATI pglMapObjectBufferATI;

		[RequiredByFeature("GL_ATI_map_object_buffer")]
		[ThreadStatic]
		internal static glUnmapObjectBufferATI pglUnmapObjectBufferATI;

		[RequiredByFeature("GL_ATI_pn_triangles")]
		[ThreadStatic]
		internal static glPNTrianglesiATI pglPNTrianglesiATI;

		[RequiredByFeature("GL_ATI_pn_triangles")]
		[ThreadStatic]
		internal static glPNTrianglesfATI pglPNTrianglesfATI;

		[RequiredByFeature("GL_ATI_separate_stencil")]
		[ThreadStatic]
		internal static glStencilFuncSeparateATI pglStencilFuncSeparateATI;

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[ThreadStatic]
		internal static glNewObjectBufferATI pglNewObjectBufferATI;

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[ThreadStatic]
		internal static glIsObjectBufferATI pglIsObjectBufferATI;

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[ThreadStatic]
		internal static glUpdateObjectBufferATI pglUpdateObjectBufferATI;

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[ThreadStatic]
		internal static glGetObjectBufferfvATI pglGetObjectBufferfvATI;

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[ThreadStatic]
		internal static glGetObjectBufferivATI pglGetObjectBufferivATI;

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[ThreadStatic]
		internal static glFreeObjectBufferATI pglFreeObjectBufferATI;

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[ThreadStatic]
		internal static glArrayObjectATI pglArrayObjectATI;

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[ThreadStatic]
		internal static glGetArrayObjectfvATI pglGetArrayObjectfvATI;

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[ThreadStatic]
		internal static glGetArrayObjectivATI pglGetArrayObjectivATI;

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[ThreadStatic]
		internal static glVariantArrayObjectATI pglVariantArrayObjectATI;

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[ThreadStatic]
		internal static glGetVariantArrayObjectfvATI pglGetVariantArrayObjectfvATI;

		[RequiredByFeature("GL_ATI_vertex_array_object")]
		[ThreadStatic]
		internal static glGetVariantArrayObjectivATI pglGetVariantArrayObjectivATI;

		[RequiredByFeature("GL_ATI_vertex_attrib_array_object")]
		[ThreadStatic]
		internal static glVertexAttribArrayObjectATI pglVertexAttribArrayObjectATI;

		[RequiredByFeature("GL_ATI_vertex_attrib_array_object")]
		[ThreadStatic]
		internal static glGetVertexAttribArrayObjectfvATI pglGetVertexAttribArrayObjectfvATI;

		[RequiredByFeature("GL_ATI_vertex_attrib_array_object")]
		[ThreadStatic]
		internal static glGetVertexAttribArrayObjectivATI pglGetVertexAttribArrayObjectivATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream1sATI pglVertexStream1sATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream1svATI pglVertexStream1svATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream1iATI pglVertexStream1iATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream1ivATI pglVertexStream1ivATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream1fATI pglVertexStream1fATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream1fvATI pglVertexStream1fvATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream1dATI pglVertexStream1dATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream1dvATI pglVertexStream1dvATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream2sATI pglVertexStream2sATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream2svATI pglVertexStream2svATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream2iATI pglVertexStream2iATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream2ivATI pglVertexStream2ivATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream2fATI pglVertexStream2fATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream2fvATI pglVertexStream2fvATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream2dATI pglVertexStream2dATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream2dvATI pglVertexStream2dvATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream3sATI pglVertexStream3sATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream3svATI pglVertexStream3svATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream3iATI pglVertexStream3iATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream3ivATI pglVertexStream3ivATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream3fATI pglVertexStream3fATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream3fvATI pglVertexStream3fvATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream3dATI pglVertexStream3dATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream3dvATI pglVertexStream3dvATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream4sATI pglVertexStream4sATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream4svATI pglVertexStream4svATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream4iATI pglVertexStream4iATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream4ivATI pglVertexStream4ivATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream4fATI pglVertexStream4fATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream4fvATI pglVertexStream4fvATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream4dATI pglVertexStream4dATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexStream4dvATI pglVertexStream4dvATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glNormalStream3bATI pglNormalStream3bATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glNormalStream3bvATI pglNormalStream3bvATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glNormalStream3sATI pglNormalStream3sATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glNormalStream3svATI pglNormalStream3svATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glNormalStream3iATI pglNormalStream3iATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glNormalStream3ivATI pglNormalStream3ivATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glNormalStream3fATI pglNormalStream3fATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glNormalStream3fvATI pglNormalStream3fvATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glNormalStream3dATI pglNormalStream3dATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glNormalStream3dvATI pglNormalStream3dvATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glClientActiveVertexStreamATI pglClientActiveVertexStreamATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexBlendEnviATI pglVertexBlendEnviATI;

		[RequiredByFeature("GL_ATI_vertex_streams")]
		[ThreadStatic]
		internal static glVertexBlendEnvfATI pglVertexBlendEnvfATI;

		[RequiredByFeature("GL_EXT_bindable_uniform")]
		[ThreadStatic]
		internal static glUniformBufferEXT pglUniformBufferEXT;

		[RequiredByFeature("GL_EXT_bindable_uniform")]
		[ThreadStatic]
		internal static glGetUniformBufferSizeEXT pglGetUniformBufferSizeEXT;

		[RequiredByFeature("GL_EXT_bindable_uniform")]
		[ThreadStatic]
		internal static glGetUniformOffsetEXT pglGetUniformOffsetEXT;

		[RequiredByFeature("GL_EXT_blend_func_extended", Api = "gles2")]
		[ThreadStatic]
		internal static glGetProgramResourceLocationIndexEXT pglGetProgramResourceLocationIndexEXT;

		[RequiredByFeature("GL_EXT_compiled_vertex_array")]
		[ThreadStatic]
		internal static glLockArraysEXT pglLockArraysEXT;

		[RequiredByFeature("GL_EXT_compiled_vertex_array")]
		[ThreadStatic]
		internal static glUnlockArraysEXT pglUnlockArraysEXT;

		[RequiredByFeature("GL_EXT_convolution")]
		[ThreadStatic]
		internal static glGetConvolutionFilterEXT pglGetConvolutionFilterEXT;

		[RequiredByFeature("GL_EXT_convolution")]
		[ThreadStatic]
		internal static glGetConvolutionParameterfvEXT pglGetConvolutionParameterfvEXT;

		[RequiredByFeature("GL_EXT_convolution")]
		[ThreadStatic]
		internal static glGetConvolutionParameterivEXT pglGetConvolutionParameterivEXT;

		[RequiredByFeature("GL_EXT_convolution")]
		[ThreadStatic]
		internal static glGetSeparableFilterEXT pglGetSeparableFilterEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glTangent3bEXT pglTangent3bEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glTangent3bvEXT pglTangent3bvEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glTangent3dEXT pglTangent3dEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glTangent3dvEXT pglTangent3dvEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glTangent3fEXT pglTangent3fEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glTangent3fvEXT pglTangent3fvEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glTangent3iEXT pglTangent3iEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glTangent3ivEXT pglTangent3ivEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glTangent3sEXT pglTangent3sEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glTangent3svEXT pglTangent3svEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glBinormal3bEXT pglBinormal3bEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glBinormal3bvEXT pglBinormal3bvEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glBinormal3dEXT pglBinormal3dEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glBinormal3dvEXT pglBinormal3dvEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glBinormal3fEXT pglBinormal3fEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glBinormal3fvEXT pglBinormal3fvEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glBinormal3iEXT pglBinormal3iEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glBinormal3ivEXT pglBinormal3ivEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glBinormal3sEXT pglBinormal3sEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glBinormal3svEXT pglBinormal3svEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glTangentPointerEXT pglTangentPointerEXT;

		[RequiredByFeature("GL_EXT_coordinate_frame")]
		[ThreadStatic]
		internal static glBinormalPointerEXT pglBinormalPointerEXT;

		[RequiredByFeature("GL_EXT_cull_vertex")]
		[ThreadStatic]
		internal static glCullParameterdvEXT pglCullParameterdvEXT;

		[RequiredByFeature("GL_EXT_cull_vertex")]
		[ThreadStatic]
		internal static glCullParameterfvEXT pglCullParameterfvEXT;

		[RequiredByFeature("GL_EXT_debug_label", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glLabelObjectEXT pglLabelObjectEXT;

		[RequiredByFeature("GL_EXT_debug_label", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetObjectLabelEXT pglGetObjectLabelEXT;

		[RequiredByFeature("GL_EXT_debug_marker", Api = "gl|glcore|gles1|gles2")]
		[ThreadStatic]
		internal static glInsertEventMarkerEXT pglInsertEventMarkerEXT;

		[RequiredByFeature("GL_EXT_debug_marker", Api = "gl|glcore|gles1|gles2")]
		[ThreadStatic]
		internal static glPushGroupMarkerEXT pglPushGroupMarkerEXT;

		[RequiredByFeature("GL_EXT_debug_marker", Api = "gl|glcore|gles1|gles2")]
		[ThreadStatic]
		internal static glPopGroupMarkerEXT pglPopGroupMarkerEXT;

		[RequiredByFeature("GL_EXT_depth_bounds_test")]
		[ThreadStatic]
		internal static glDepthBoundsEXT pglDepthBoundsEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixLoadfEXT pglMatrixLoadfEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixLoaddEXT pglMatrixLoaddEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixMultfEXT pglMatrixMultfEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixMultdEXT pglMatrixMultdEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixLoadIdentityEXT pglMatrixLoadIdentityEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixRotatefEXT pglMatrixRotatefEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixRotatedEXT pglMatrixRotatedEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixScalefEXT pglMatrixScalefEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixScaledEXT pglMatrixScaledEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixTranslatefEXT pglMatrixTranslatefEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixTranslatedEXT pglMatrixTranslatedEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixFrustumEXT pglMatrixFrustumEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixOrthoEXT pglMatrixOrthoEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixPopEXT pglMatrixPopEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixPushEXT pglMatrixPushEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glClientAttribDefaultEXT pglClientAttribDefaultEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glPushClientAttribDefaultEXT pglPushClientAttribDefaultEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureParameterfEXT pglTextureParameterfEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureParameterfvEXT pglTextureParameterfvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureParameteriEXT pglTextureParameteriEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureParameterivEXT pglTextureParameterivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureImage1DEXT pglTextureImage1DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureImage2DEXT pglTextureImage2DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureSubImage1DEXT pglTextureSubImage1DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureSubImage2DEXT pglTextureSubImage2DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCopyTextureImage1DEXT pglCopyTextureImage1DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCopyTextureImage2DEXT pglCopyTextureImage2DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCopyTextureSubImage1DEXT pglCopyTextureSubImage1DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCopyTextureSubImage2DEXT pglCopyTextureSubImage2DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetTextureImageEXT pglGetTextureImageEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetTextureParameterfvEXT pglGetTextureParameterfvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetTextureParameterivEXT pglGetTextureParameterivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetTextureLevelParameterfvEXT pglGetTextureLevelParameterfvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetTextureLevelParameterivEXT pglGetTextureLevelParameterivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureImage3DEXT pglTextureImage3DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureSubImage3DEXT pglTextureSubImage3DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCopyTextureSubImage3DEXT pglCopyTextureSubImage3DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glBindMultiTextureEXT pglBindMultiTextureEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexCoordPointerEXT pglMultiTexCoordPointerEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexEnvfEXT pglMultiTexEnvfEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexEnvfvEXT pglMultiTexEnvfvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexEnviEXT pglMultiTexEnviEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexEnvivEXT pglMultiTexEnvivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexGendEXT pglMultiTexGendEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexGendvEXT pglMultiTexGendvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexGenfEXT pglMultiTexGenfEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexGenfvEXT pglMultiTexGenfvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexGeniEXT pglMultiTexGeniEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexGenivEXT pglMultiTexGenivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetMultiTexEnvfvEXT pglGetMultiTexEnvfvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetMultiTexEnvivEXT pglGetMultiTexEnvivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetMultiTexGendvEXT pglGetMultiTexGendvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetMultiTexGenfvEXT pglGetMultiTexGenfvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetMultiTexGenivEXT pglGetMultiTexGenivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexParameteriEXT pglMultiTexParameteriEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexParameterivEXT pglMultiTexParameterivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexParameterfEXT pglMultiTexParameterfEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexParameterfvEXT pglMultiTexParameterfvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexImage1DEXT pglMultiTexImage1DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexImage2DEXT pglMultiTexImage2DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexSubImage1DEXT pglMultiTexSubImage1DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexSubImage2DEXT pglMultiTexSubImage2DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCopyMultiTexImage1DEXT pglCopyMultiTexImage1DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCopyMultiTexImage2DEXT pglCopyMultiTexImage2DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCopyMultiTexSubImage1DEXT pglCopyMultiTexSubImage1DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCopyMultiTexSubImage2DEXT pglCopyMultiTexSubImage2DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetMultiTexImageEXT pglGetMultiTexImageEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetMultiTexParameterfvEXT pglGetMultiTexParameterfvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetMultiTexParameterivEXT pglGetMultiTexParameterivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetMultiTexLevelParameterfvEXT pglGetMultiTexLevelParameterfvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetMultiTexLevelParameterivEXT pglGetMultiTexLevelParameterivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexImage3DEXT pglMultiTexImage3DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexSubImage3DEXT pglMultiTexSubImage3DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCopyMultiTexSubImage3DEXT pglCopyMultiTexSubImage3DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glEnableClientStateIndexedEXT pglEnableClientStateIndexedEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDisableClientStateIndexedEXT pglDisableClientStateIndexedEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetPointerIndexedvEXT pglGetPointerIndexedvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCompressedTextureImage3DEXT pglCompressedTextureImage3DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCompressedTextureImage2DEXT pglCompressedTextureImage2DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCompressedTextureImage1DEXT pglCompressedTextureImage1DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCompressedTextureSubImage3DEXT pglCompressedTextureSubImage3DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCompressedTextureSubImage2DEXT pglCompressedTextureSubImage2DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCompressedTextureSubImage1DEXT pglCompressedTextureSubImage1DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetCompressedTextureImageEXT pglGetCompressedTextureImageEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCompressedMultiTexImage3DEXT pglCompressedMultiTexImage3DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCompressedMultiTexImage2DEXT pglCompressedMultiTexImage2DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCompressedMultiTexImage1DEXT pglCompressedMultiTexImage1DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCompressedMultiTexSubImage3DEXT pglCompressedMultiTexSubImage3DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCompressedMultiTexSubImage2DEXT pglCompressedMultiTexSubImage2DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCompressedMultiTexSubImage1DEXT pglCompressedMultiTexSubImage1DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetCompressedMultiTexImageEXT pglGetCompressedMultiTexImageEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixLoadTransposefEXT pglMatrixLoadTransposefEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixLoadTransposedEXT pglMatrixLoadTransposedEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixMultTransposefEXT pglMatrixMultTransposefEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixMultTransposedEXT pglMatrixMultTransposedEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedBufferDataEXT pglNamedBufferDataEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMapNamedBufferEXT pglMapNamedBufferEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUnmapNamedBufferEXT pglUnmapNamedBufferEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedBufferParameterivEXT pglGetNamedBufferParameterivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedBufferPointervEXT pglGetNamedBufferPointervEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedBufferSubDataEXT pglGetNamedBufferSubDataEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureBufferEXT pglTextureBufferEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexBufferEXT pglMultiTexBufferEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureParameterIivEXT pglTextureParameterIivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureParameterIuivEXT pglTextureParameterIuivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetTextureParameterIivEXT pglGetTextureParameterIivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetTextureParameterIuivEXT pglGetTextureParameterIuivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexParameterIivEXT pglMultiTexParameterIivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexParameterIuivEXT pglMultiTexParameterIuivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetMultiTexParameterIivEXT pglGetMultiTexParameterIivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetMultiTexParameterIuivEXT pglGetMultiTexParameterIuivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedProgramLocalParameters4fvEXT pglNamedProgramLocalParameters4fvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedProgramLocalParameterI4iEXT pglNamedProgramLocalParameterI4iEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedProgramLocalParameterI4ivEXT pglNamedProgramLocalParameterI4ivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedProgramLocalParametersI4ivEXT pglNamedProgramLocalParametersI4ivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedProgramLocalParameterI4uiEXT pglNamedProgramLocalParameterI4uiEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedProgramLocalParameterI4uivEXT pglNamedProgramLocalParameterI4uivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedProgramLocalParametersI4uivEXT pglNamedProgramLocalParametersI4uivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedProgramLocalParameterIivEXT pglGetNamedProgramLocalParameterIivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedProgramLocalParameterIuivEXT pglGetNamedProgramLocalParameterIuivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glEnableClientStateiEXT pglEnableClientStateiEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDisableClientStateiEXT pglDisableClientStateiEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetPointeri_vEXT pglGetPointeri_vEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedProgramStringEXT pglNamedProgramStringEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedProgramLocalParameter4dEXT pglNamedProgramLocalParameter4dEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedProgramLocalParameter4dvEXT pglNamedProgramLocalParameter4dvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedProgramLocalParameter4fEXT pglNamedProgramLocalParameter4fEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedProgramLocalParameter4fvEXT pglNamedProgramLocalParameter4fvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedProgramLocalParameterdvEXT pglGetNamedProgramLocalParameterdvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedProgramLocalParameterfvEXT pglGetNamedProgramLocalParameterfvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedProgramivEXT pglGetNamedProgramivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedProgramStringEXT pglGetNamedProgramStringEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedRenderbufferStorageEXT pglNamedRenderbufferStorageEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedRenderbufferParameterivEXT pglGetNamedRenderbufferParameterivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedRenderbufferStorageMultisampleEXT pglNamedRenderbufferStorageMultisampleEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedRenderbufferStorageMultisampleCoverageEXT pglNamedRenderbufferStorageMultisampleCoverageEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCheckNamedFramebufferStatusEXT pglCheckNamedFramebufferStatusEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedFramebufferTexture1DEXT pglNamedFramebufferTexture1DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedFramebufferTexture2DEXT pglNamedFramebufferTexture2DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedFramebufferTexture3DEXT pglNamedFramebufferTexture3DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedFramebufferRenderbufferEXT pglNamedFramebufferRenderbufferEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedFramebufferAttachmentParameterivEXT pglGetNamedFramebufferAttachmentParameterivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGenerateTextureMipmapEXT pglGenerateTextureMipmapEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGenerateMultiTexMipmapEXT pglGenerateMultiTexMipmapEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glFramebufferDrawBufferEXT pglFramebufferDrawBufferEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glFramebufferDrawBuffersEXT pglFramebufferDrawBuffersEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glFramebufferReadBufferEXT pglFramebufferReadBufferEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetFramebufferParameterivEXT pglGetFramebufferParameterivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedCopyBufferSubDataEXT pglNamedCopyBufferSubDataEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedFramebufferTextureEXT pglNamedFramebufferTextureEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedFramebufferTextureLayerEXT pglNamedFramebufferTextureLayerEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedFramebufferTextureFaceEXT pglNamedFramebufferTextureFaceEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureRenderbufferEXT pglTextureRenderbufferEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiTexRenderbufferEXT pglMultiTexRenderbufferEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayVertexOffsetEXT pglVertexArrayVertexOffsetEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayColorOffsetEXT pglVertexArrayColorOffsetEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayEdgeFlagOffsetEXT pglVertexArrayEdgeFlagOffsetEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayIndexOffsetEXT pglVertexArrayIndexOffsetEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayNormalOffsetEXT pglVertexArrayNormalOffsetEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayTexCoordOffsetEXT pglVertexArrayTexCoordOffsetEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayMultiTexCoordOffsetEXT pglVertexArrayMultiTexCoordOffsetEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayFogCoordOffsetEXT pglVertexArrayFogCoordOffsetEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArraySecondaryColorOffsetEXT pglVertexArraySecondaryColorOffsetEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayVertexAttribOffsetEXT pglVertexArrayVertexAttribOffsetEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayVertexAttribIOffsetEXT pglVertexArrayVertexAttribIOffsetEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glEnableVertexArrayEXT pglEnableVertexArrayEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDisableVertexArrayEXT pglDisableVertexArrayEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glEnableVertexArrayAttribEXT pglEnableVertexArrayAttribEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDisableVertexArrayAttribEXT pglDisableVertexArrayAttribEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetVertexArrayIntegervEXT pglGetVertexArrayIntegervEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetVertexArrayPointervEXT pglGetVertexArrayPointervEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetVertexArrayIntegeri_vEXT pglGetVertexArrayIntegeri_vEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetVertexArrayPointeri_vEXT pglGetVertexArrayPointeri_vEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMapNamedBufferRangeEXT pglMapNamedBufferRangeEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glFlushMappedNamedBufferRangeEXT pglFlushMappedNamedBufferRangeEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glClearNamedBufferDataEXT pglClearNamedBufferDataEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glClearNamedBufferSubDataEXT pglClearNamedBufferSubDataEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedFramebufferParameteriEXT pglNamedFramebufferParameteriEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedFramebufferParameterivEXT pglGetNamedFramebufferParameterivEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform1dEXT pglProgramUniform1dEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform2dEXT pglProgramUniform2dEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform3dEXT pglProgramUniform3dEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform4dEXT pglProgramUniform4dEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform1dvEXT pglProgramUniform1dvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform2dvEXT pglProgramUniform2dvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform3dvEXT pglProgramUniform3dvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform4dvEXT pglProgramUniform4dvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniformMatrix2dvEXT pglProgramUniformMatrix2dvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniformMatrix3dvEXT pglProgramUniformMatrix3dvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniformMatrix4dvEXT pglProgramUniformMatrix4dvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniformMatrix2x3dvEXT pglProgramUniformMatrix2x3dvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniformMatrix2x4dvEXT pglProgramUniformMatrix2x4dvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniformMatrix3x2dvEXT pglProgramUniformMatrix3x2dvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniformMatrix3x4dvEXT pglProgramUniformMatrix3x4dvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniformMatrix4x2dvEXT pglProgramUniformMatrix4x2dvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniformMatrix4x3dvEXT pglProgramUniformMatrix4x3dvEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureBufferRangeEXT pglTextureBufferRangeEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
		[ThreadStatic]
		internal static glTextureStorage1DEXT pglTextureStorage1DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
		[ThreadStatic]
		internal static glTextureStorage2DEXT pglTextureStorage2DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
		[ThreadStatic]
		internal static glTextureStorage3DEXT pglTextureStorage3DEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureStorage2DMultisampleEXT pglTextureStorage2DMultisampleEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureStorage3DMultisampleEXT pglTextureStorage3DMultisampleEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayBindVertexBufferEXT pglVertexArrayBindVertexBufferEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayVertexAttribFormatEXT pglVertexArrayVertexAttribFormatEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayVertexAttribIFormatEXT pglVertexArrayVertexAttribIFormatEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayVertexAttribLFormatEXT pglVertexArrayVertexAttribLFormatEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayVertexAttribBindingEXT pglVertexArrayVertexAttribBindingEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayVertexBindingDivisorEXT pglVertexArrayVertexBindingDivisorEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayVertexAttribLOffsetEXT pglVertexArrayVertexAttribLOffsetEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTexturePageCommitmentEXT pglTexturePageCommitmentEXT;

		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayVertexAttribDivisorEXT pglVertexArrayVertexAttribDivisorEXT;

		[RequiredByFeature("GL_EXT_discard_framebuffer", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glDiscardFramebufferEXT pglDiscardFramebufferEXT;

		[RequiredByFeature("GL_EXT_EGL_image_storage", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glEGLImageTargetTexStorageEXT pglEGLImageTargetTexStorageEXT;

		[RequiredByFeature("GL_EXT_EGL_image_storage", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glEGLImageTargetTextureStorageEXT pglEGLImageTargetTextureStorageEXT;

		[RequiredByFeature("GL_EXT_external_buffer", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glBufferStorageExternalEXT pglBufferStorageExternalEXT;

		[RequiredByFeature("GL_EXT_external_buffer", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glNamedBufferStorageExternalEXT pglNamedBufferStorageExternalEXT;

		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		[ThreadStatic]
		internal static glGetFragmentShadingRatesEXT pglGetFragmentShadingRatesEXT;

		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		[ThreadStatic]
		internal static glShadingRateEXT pglShadingRateEXT;

		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		[ThreadStatic]
		internal static glShadingRateCombinerOpsEXT pglShadingRateCombinerOpsEXT;

		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		[ThreadStatic]
		internal static glFramebufferShadingRateEXT pglFramebufferShadingRateEXT;

		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[ThreadStatic]
		internal static glBindRenderbufferEXT pglBindRenderbufferEXT;

		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[ThreadStatic]
		internal static glBindFramebufferEXT pglBindFramebufferEXT;

		[RequiredByFeature("GL_EXT_gpu_program_parameters")]
		[ThreadStatic]
		internal static glProgramEnvParameters4fvEXT pglProgramEnvParameters4fvEXT;

		[RequiredByFeature("GL_EXT_gpu_program_parameters")]
		[ThreadStatic]
		internal static glProgramLocalParameters4fvEXT pglProgramLocalParameters4fvEXT;

		[RequiredByFeature("GL_EXT_histogram")]
		[ThreadStatic]
		internal static glGetHistogramEXT pglGetHistogramEXT;

		[RequiredByFeature("GL_EXT_histogram")]
		[ThreadStatic]
		internal static glGetHistogramParameterfvEXT pglGetHistogramParameterfvEXT;

		[RequiredByFeature("GL_EXT_histogram")]
		[ThreadStatic]
		internal static glGetHistogramParameterivEXT pglGetHistogramParameterivEXT;

		[RequiredByFeature("GL_EXT_histogram")]
		[ThreadStatic]
		internal static glGetMinmaxEXT pglGetMinmaxEXT;

		[RequiredByFeature("GL_EXT_histogram")]
		[ThreadStatic]
		internal static glGetMinmaxParameterfvEXT pglGetMinmaxParameterfvEXT;

		[RequiredByFeature("GL_EXT_histogram")]
		[ThreadStatic]
		internal static glGetMinmaxParameterivEXT pglGetMinmaxParameterivEXT;

		[RequiredByFeature("GL_EXT_index_func")]
		[ThreadStatic]
		internal static glIndexFuncEXT pglIndexFuncEXT;

		[RequiredByFeature("GL_EXT_index_material")]
		[ThreadStatic]
		internal static glIndexMaterialEXT pglIndexMaterialEXT;

		[RequiredByFeature("GL_EXT_light_texture")]
		[ThreadStatic]
		internal static glApplyTextureEXT pglApplyTextureEXT;

		[RequiredByFeature("GL_EXT_light_texture")]
		[ThreadStatic]
		internal static glTextureLightEXT pglTextureLightEXT;

		[RequiredByFeature("GL_EXT_light_texture")]
		[ThreadStatic]
		internal static glTextureMaterialEXT pglTextureMaterialEXT;

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glDeleteMemoryObjectsEXT pglDeleteMemoryObjectsEXT;

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glIsMemoryObjectEXT pglIsMemoryObjectEXT;

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glCreateMemoryObjectsEXT pglCreateMemoryObjectsEXT;

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glMemoryObjectParameterivEXT pglMemoryObjectParameterivEXT;

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glGetMemoryObjectParameterivEXT pglGetMemoryObjectParameterivEXT;

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glTexStorageMem2DEXT pglTexStorageMem2DEXT;

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glTexStorageMem2DMultisampleEXT pglTexStorageMem2DMultisampleEXT;

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glTexStorageMem3DEXT pglTexStorageMem3DEXT;

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glTexStorageMem3DMultisampleEXT pglTexStorageMem3DMultisampleEXT;

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glBufferStorageMemEXT pglBufferStorageMemEXT;

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glTextureStorageMem2DEXT pglTextureStorageMem2DEXT;

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glTextureStorageMem2DMultisampleEXT pglTextureStorageMem2DMultisampleEXT;

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glTextureStorageMem3DEXT pglTextureStorageMem3DEXT;

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glTextureStorageMem3DMultisampleEXT pglTextureStorageMem3DMultisampleEXT;

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glNamedBufferStorageMemEXT pglNamedBufferStorageMemEXT;

		[RequiredByFeature("GL_EXT_memory_object")]
		[ThreadStatic]
		internal static glTexStorageMem1DEXT pglTexStorageMem1DEXT;

		[RequiredByFeature("GL_EXT_memory_object")]
		[ThreadStatic]
		internal static glTextureStorageMem1DEXT pglTextureStorageMem1DEXT;

		[RequiredByFeature("GL_EXT_memory_object_fd", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glImportMemoryFdEXT pglImportMemoryFdEXT;

		[RequiredByFeature("GL_EXT_memory_object_win32", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glImportMemoryWin32HandleEXT pglImportMemoryWin32HandleEXT;

		[RequiredByFeature("GL_EXT_memory_object_win32", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glImportMemoryWin32NameEXT pglImportMemoryWin32NameEXT;

		[RequiredByFeature("GL_EXT_multisample")]
		[RequiredByFeature("GL_SGIS_multisample", EntryPoint = "glSampleMaskSGIS")]
		[ThreadStatic]
		internal static glSampleMaskEXT pglSampleMaskEXT;

		[RequiredByFeature("GL_EXT_multisample")]
		[RequiredByFeature("GL_SGIS_multisample", EntryPoint = "glSamplePatternSGIS")]
		[ThreadStatic]
		internal static glSamplePatternEXT pglSamplePatternEXT;

		[RequiredByFeature("GL_EXT_multisampled_render_to_texture", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glFramebufferTexture2DMultisampleEXT pglFramebufferTexture2DMultisampleEXT;

		[RequiredByFeature("GL_EXT_multiview_draw_buffers", Api = "gles2")]
		[ThreadStatic]
		internal static glReadBufferIndexedEXT pglReadBufferIndexedEXT;

		[RequiredByFeature("GL_EXT_multiview_draw_buffers", Api = "gles2")]
		[ThreadStatic]
		internal static glDrawBuffersIndexedEXT pglDrawBuffersIndexedEXT;

		[RequiredByFeature("GL_EXT_multiview_draw_buffers", Api = "gles2")]
		[ThreadStatic]
		internal static glGetIntegeri_vEXT pglGetIntegeri_vEXT;

		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
		[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
		[ThreadStatic]
		internal static glGenQueriesEXT pglGenQueriesEXT;

		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
		[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
		[ThreadStatic]
		internal static glDeleteQueriesEXT pglDeleteQueriesEXT;

		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
		[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
		[ThreadStatic]
		internal static glIsQueryEXT pglIsQueryEXT;

		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
		[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
		[ThreadStatic]
		internal static glBeginQueryEXT pglBeginQueryEXT;

		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
		[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
		[ThreadStatic]
		internal static glEndQueryEXT pglEndQueryEXT;

		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
		[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
		[ThreadStatic]
		internal static glGetQueryivEXT pglGetQueryivEXT;

		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
		[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
		[ThreadStatic]
		internal static glGetQueryObjectuivEXT pglGetQueryObjectuivEXT;

		[RequiredByFeature("GL_EXT_pixel_transform")]
		[ThreadStatic]
		internal static glPixelTransformParameteriEXT pglPixelTransformParameteriEXT;

		[RequiredByFeature("GL_EXT_pixel_transform")]
		[ThreadStatic]
		internal static glPixelTransformParameterfEXT pglPixelTransformParameterfEXT;

		[RequiredByFeature("GL_EXT_pixel_transform")]
		[ThreadStatic]
		internal static glPixelTransformParameterivEXT pglPixelTransformParameterivEXT;

		[RequiredByFeature("GL_EXT_pixel_transform")]
		[ThreadStatic]
		internal static glPixelTransformParameterfvEXT pglPixelTransformParameterfvEXT;

		[RequiredByFeature("GL_EXT_pixel_transform")]
		[ThreadStatic]
		internal static glGetPixelTransformParameterivEXT pglGetPixelTransformParameterivEXT;

		[RequiredByFeature("GL_EXT_pixel_transform")]
		[ThreadStatic]
		internal static glGetPixelTransformParameterfvEXT pglGetPixelTransformParameterfvEXT;

		[RequiredByFeature("GL_EXT_polygon_offset")]
		[ThreadStatic]
		internal static glPolygonOffsetEXT pglPolygonOffsetEXT;

		[RequiredByFeature("GL_EXT_raster_multisample", Api = "gl|glcore|gles2")]
		[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glRasterSamplesEXT pglRasterSamplesEXT;

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glGetUnsignedBytevEXT pglGetUnsignedBytevEXT;

		[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
		[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glGetUnsignedBytei_vEXT pglGetUnsignedBytei_vEXT;

		[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glGenSemaphoresEXT pglGenSemaphoresEXT;

		[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glDeleteSemaphoresEXT pglDeleteSemaphoresEXT;

		[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glIsSemaphoreEXT pglIsSemaphoreEXT;

		[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glSemaphoreParameterui64vEXT pglSemaphoreParameterui64vEXT;

		[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glGetSemaphoreParameterui64vEXT pglGetSemaphoreParameterui64vEXT;

		[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glWaitSemaphoreEXT pglWaitSemaphoreEXT;

		[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glSignalSemaphoreEXT pglSignalSemaphoreEXT;

		[RequiredByFeature("GL_EXT_semaphore_fd", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glImportSemaphoreFdEXT pglImportSemaphoreFdEXT;

		[RequiredByFeature("GL_EXT_semaphore_win32", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glImportSemaphoreWin32HandleEXT pglImportSemaphoreWin32HandleEXT;

		[RequiredByFeature("GL_EXT_semaphore_win32", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glImportSemaphoreWin32NameEXT pglImportSemaphoreWin32NameEXT;

		[RequiredByFeature("GL_EXT_separate_shader_objects")]
		[ThreadStatic]
		internal static glUseShaderProgramEXT pglUseShaderProgramEXT;

		[RequiredByFeature("GL_EXT_separate_shader_objects")]
		[ThreadStatic]
		internal static glActiveProgramEXT pglActiveProgramEXT;

		[RequiredByFeature("GL_EXT_separate_shader_objects")]
		[ThreadStatic]
		internal static glCreateShaderProgramEXT pglCreateShaderProgramEXT;

		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[ThreadStatic]
		internal static glActiveShaderProgramEXT pglActiveShaderProgramEXT;

		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[ThreadStatic]
		internal static glBindProgramPipelineEXT pglBindProgramPipelineEXT;

		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[ThreadStatic]
		internal static glCreateShaderProgramvEXT pglCreateShaderProgramvEXT;

		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[ThreadStatic]
		internal static glDeleteProgramPipelinesEXT pglDeleteProgramPipelinesEXT;

		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[ThreadStatic]
		internal static glGenProgramPipelinesEXT pglGenProgramPipelinesEXT;

		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[ThreadStatic]
		internal static glGetProgramPipelineInfoLogEXT pglGetProgramPipelineInfoLogEXT;

		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[ThreadStatic]
		internal static glGetProgramPipelineivEXT pglGetProgramPipelineivEXT;

		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[ThreadStatic]
		internal static glIsProgramPipelineEXT pglIsProgramPipelineEXT;

		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[ThreadStatic]
		internal static glUseProgramStagesEXT pglUseProgramStagesEXT;

		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
		[ThreadStatic]
		internal static glValidateProgramPipelineEXT pglValidateProgramPipelineEXT;

		[RequiredByFeature("GL_EXT_shader_framebuffer_fetch_non_coherent", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glFramebufferFetchBarrierEXT pglFramebufferFetchBarrierEXT;

		[RequiredByFeature("GL_EXT_shader_image_load_store")]
		[ThreadStatic]
		internal static glBindImageTextureEXT pglBindImageTextureEXT;

		[RequiredByFeature("GL_EXT_shader_pixel_local_storage2", Api = "gles2")]
		[ThreadStatic]
		internal static glFramebufferPixelLocalStorageSizeEXT pglFramebufferPixelLocalStorageSizeEXT;

		[RequiredByFeature("GL_EXT_shader_pixel_local_storage2", Api = "gles2")]
		[ThreadStatic]
		internal static glGetFramebufferPixelLocalStorageSizeEXT pglGetFramebufferPixelLocalStorageSizeEXT;

		[RequiredByFeature("GL_EXT_shader_pixel_local_storage2", Api = "gles2")]
		[ThreadStatic]
		internal static glClearPixelLocalStorageuiEXT pglClearPixelLocalStorageuiEXT;

		[RequiredByFeature("GL_EXT_stencil_clear_tag")]
		[ThreadStatic]
		internal static glStencilClearTagEXT pglStencilClearTagEXT;

		[RequiredByFeature("GL_EXT_stencil_two_side")]
		[ThreadStatic]
		internal static glActiveStencilFaceEXT pglActiveStencilFaceEXT;

		[RequiredByFeature("GL_EXT_texture_integer")]
		[ThreadStatic]
		internal static glClearColorIiEXT pglClearColorIiEXT;

		[RequiredByFeature("GL_EXT_texture_integer")]
		[ThreadStatic]
		internal static glClearColorIuiEXT pglClearColorIuiEXT;

		[RequiredByFeature("GL_EXT_texture_object")]
		[ThreadStatic]
		internal static glAreTexturesResidentEXT pglAreTexturesResidentEXT;

		[RequiredByFeature("GL_EXT_texture_object")]
		[ThreadStatic]
		internal static glDeleteTexturesEXT pglDeleteTexturesEXT;

		[RequiredByFeature("GL_EXT_texture_object")]
		[ThreadStatic]
		internal static glGenTexturesEXT pglGenTexturesEXT;

		[RequiredByFeature("GL_EXT_texture_object")]
		[ThreadStatic]
		internal static glIsTextureEXT pglIsTextureEXT;

		[RequiredByFeature("GL_EXT_texture_perturb_normal")]
		[ThreadStatic]
		internal static glTextureNormalEXT pglTextureNormalEXT;

		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		[ThreadStatic]
		internal static glTexStorageAttribs2DEXT pglTexStorageAttribs2DEXT;

		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		[ThreadStatic]
		internal static glTexStorageAttribs3DEXT pglTexStorageAttribs3DEXT;

		[RequiredByFeature("GL_EXT_transform_feedback")]
		[RequiredByFeature("GL_NV_transform_feedback", EntryPoint = "glBindBufferOffsetNV")]
		[ThreadStatic]
		internal static glBindBufferOffsetEXT pglBindBufferOffsetEXT;

		[RequiredByFeature("GL_EXT_vertex_array")]
		[ThreadStatic]
		internal static glColorPointerEXT pglColorPointerEXT;

		[RequiredByFeature("GL_EXT_vertex_array")]
		[ThreadStatic]
		internal static glEdgeFlagPointerEXT pglEdgeFlagPointerEXT;

		[RequiredByFeature("GL_EXT_vertex_array")]
		[ThreadStatic]
		internal static glIndexPointerEXT pglIndexPointerEXT;

		[RequiredByFeature("GL_EXT_vertex_array")]
		[ThreadStatic]
		internal static glNormalPointerEXT pglNormalPointerEXT;

		[RequiredByFeature("GL_EXT_vertex_array")]
		[ThreadStatic]
		internal static glTexCoordPointerEXT pglTexCoordPointerEXT;

		[RequiredByFeature("GL_EXT_vertex_array")]
		[ThreadStatic]
		internal static glVertexPointerEXT pglVertexPointerEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glBeginVertexShaderEXT pglBeginVertexShaderEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glEndVertexShaderEXT pglEndVertexShaderEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glBindVertexShaderEXT pglBindVertexShaderEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glGenVertexShadersEXT pglGenVertexShadersEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glDeleteVertexShaderEXT pglDeleteVertexShaderEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glShaderOp1EXT pglShaderOp1EXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glShaderOp2EXT pglShaderOp2EXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glShaderOp3EXT pglShaderOp3EXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glSwizzleEXT pglSwizzleEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glWriteMaskEXT pglWriteMaskEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glInsertComponentEXT pglInsertComponentEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glExtractComponentEXT pglExtractComponentEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glGenSymbolsEXT pglGenSymbolsEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glSetInvariantEXT pglSetInvariantEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glSetLocalConstantEXT pglSetLocalConstantEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glVariantbvEXT pglVariantbvEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glVariantsvEXT pglVariantsvEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glVariantivEXT pglVariantivEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glVariantfvEXT pglVariantfvEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glVariantdvEXT pglVariantdvEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glVariantubvEXT pglVariantubvEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glVariantusvEXT pglVariantusvEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glVariantuivEXT pglVariantuivEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glVariantPointerEXT pglVariantPointerEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glEnableVariantClientStateEXT pglEnableVariantClientStateEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glDisableVariantClientStateEXT pglDisableVariantClientStateEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glBindLightParameterEXT pglBindLightParameterEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glBindMaterialParameterEXT pglBindMaterialParameterEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glBindTexGenParameterEXT pglBindTexGenParameterEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glBindTextureUnitParameterEXT pglBindTextureUnitParameterEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glBindParameterEXT pglBindParameterEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glIsVariantEnabledEXT pglIsVariantEnabledEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glGetVariantBooleanvEXT pglGetVariantBooleanvEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glGetVariantIntegervEXT pglGetVariantIntegervEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glGetVariantFloatvEXT pglGetVariantFloatvEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glGetVariantPointervEXT pglGetVariantPointervEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glGetInvariantBooleanvEXT pglGetInvariantBooleanvEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glGetInvariantIntegervEXT pglGetInvariantIntegervEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glGetInvariantFloatvEXT pglGetInvariantFloatvEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glGetLocalConstantBooleanvEXT pglGetLocalConstantBooleanvEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glGetLocalConstantIntegervEXT pglGetLocalConstantIntegervEXT;

		[RequiredByFeature("GL_EXT_vertex_shader")]
		[ThreadStatic]
		internal static glGetLocalConstantFloatvEXT pglGetLocalConstantFloatvEXT;

		[RequiredByFeature("GL_EXT_vertex_weighting")]
		[ThreadStatic]
		internal static glVertexWeightfEXT pglVertexWeightfEXT;

		[RequiredByFeature("GL_EXT_vertex_weighting")]
		[ThreadStatic]
		internal static glVertexWeightfvEXT pglVertexWeightfvEXT;

		[RequiredByFeature("GL_EXT_vertex_weighting")]
		[ThreadStatic]
		internal static glVertexWeightPointerEXT pglVertexWeightPointerEXT;

		[RequiredByFeature("GL_EXT_win32_keyed_mutex", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glAcquireKeyedMutexWin32EXT pglAcquireKeyedMutexWin32EXT;

		[RequiredByFeature("GL_EXT_win32_keyed_mutex", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glReleaseKeyedMutexWin32EXT pglReleaseKeyedMutexWin32EXT;

		[RequiredByFeature("GL_EXT_window_rectangles", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glWindowRectanglesEXT pglWindowRectanglesEXT;

		[RequiredByFeature("GL_EXT_x11_sync_object")]
		[ThreadStatic]
		internal static glImportSyncEXT pglImportSyncEXT;

		[RequiredByFeature("GL_VERSION_3_0", EntryPoint = "glTransformFeedbackVaryings")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2", EntryPoint = "glTransformFeedbackVaryings")]
		[RequiredByFeature("GL_EXT_transform_feedback", EntryPoint = "glTransformFeedbackVaryingsEXT")]
		[ThreadStatic]
		internal static glTransformFeedbackVaryings_Unmanaged pglTransformFeedbackVaryings_Unmanaged;

		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_KHR_blend_equation_advanced", Api = "gl|glcore|gles2", EntryPoint = "glBlendBarrierKHR")]
		[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2", EntryPoint = "glBlendBarrierNV")]
		[ThreadStatic]
		internal static glBlendBarrier pglBlendBarrier;

		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_ES3_2_compatibility", Api = "gl|glcore", EntryPoint = "glPrimitiveBoundingBoxARB")]
		[RequiredByFeature("GL_EXT_primitive_bounding_box", Api = "gles2", EntryPoint = "glPrimitiveBoundingBoxEXT")]
		[RequiredByFeature("GL_OES_primitive_bounding_box", Api = "gles2", EntryPoint = "glPrimitiveBoundingBoxOES")]
		[ThreadStatic]
		internal static glPrimitiveBoundingBox pglPrimitiveBoundingBox;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glCullFace pglCullFace;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glFrontFace pglFrontFace;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glHint pglHint;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glLineWidth pglLineWidth;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[ThreadStatic]
		internal static glPointSize pglPointSize;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_NV_polygon_mode", Api = "gles2", EntryPoint = "glPolygonModeNV")]
		[ThreadStatic]
		internal static glPolygonMode pglPolygonMode;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glScissor pglScissor;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glTexParameterf pglTexParameterf;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glTexParameterfv pglTexParameterfv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glTexParameteri pglTexParameteri;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glTexParameteriv pglTexParameteriv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[ThreadStatic]
		internal static glTexImage1D pglTexImage1D;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[ThreadStatic]
		internal static glTexImage2D pglTexImage2D;

		[RequiredByFeature("GL_VERSION_1_0")]
		[ThreadStatic]
		internal static glDrawBuffer pglDrawBuffer;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glClear pglClear;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glClearColor pglClearColor;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glClearStencil pglClearStencil;

		[RequiredByFeature("GL_VERSION_1_0")]
		[ThreadStatic]
		internal static glClearDepth pglClearDepth;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glStencilMask pglStencilMask;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glColorMask pglColorMask;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glDepthMask pglDepthMask;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glDisable pglDisable;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glEnable pglEnable;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glFinish pglFinish;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glFlush pglFlush;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glBlendFunc pglBlendFunc;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glLogicOp pglLogicOp;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glStencilFunc pglStencilFunc;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glStencilOp pglStencilOp;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glDepthFunc pglDepthFunc;

		[RequiredByFeature("GL_VERSION_1_0")]
		[ThreadStatic]
		internal static glPixelStoref pglPixelStoref;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glPixelStorei pglPixelStorei;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[ThreadStatic]
		internal static glReadBuffer pglReadBuffer;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[ThreadStatic]
		internal static glReadPixels pglReadPixels;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glGetBooleanv pglGetBooleanv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[ThreadStatic]
		internal static glGetDoublev pglGetDoublev;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glGetError pglGetError;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glGetFloatv pglGetFloatv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glGetIntegerv pglGetIntegerv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glGetString pglGetString;

		[RequiredByFeature("GL_VERSION_1_0")]
		[ThreadStatic]
		internal static glGetTexImage pglGetTexImage;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glGetTexParameterfv pglGetTexParameterfv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glGetTexParameteriv pglGetTexParameteriv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[ThreadStatic]
		internal static glGetTexLevelParameterfv pglGetTexLevelParameterfv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[ThreadStatic]
		internal static glGetTexLevelParameteriv pglGetTexLevelParameteriv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glIsEnabled pglIsEnabled;

		[RequiredByFeature("GL_VERSION_1_0")]
		[ThreadStatic]
		internal static glDepthRange pglDepthRange;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glViewport pglViewport;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glNewList pglNewList;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glEndList pglEndList;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glCallList pglCallList;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glCallLists pglCallLists;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glDeleteLists pglDeleteLists;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glGenLists pglGenLists;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glListBase pglListBase;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glBegin pglBegin;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glBitmap pglBitmap;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor3b pglColor3b;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor3bv pglColor3bv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor3d pglColor3d;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor3dv pglColor3dv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor3f pglColor3f;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor3fv pglColor3fv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor3i pglColor3i;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor3iv pglColor3iv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor3s pglColor3s;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor3sv pglColor3sv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor3ub pglColor3ub;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor3ubv pglColor3ubv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor3ui pglColor3ui;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor3uiv pglColor3uiv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor3us pglColor3us;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor3usv pglColor3usv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor4b pglColor4b;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor4bv pglColor4bv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor4d pglColor4d;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor4dv pglColor4dv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor4f pglColor4f;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor4fv pglColor4fv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor4i pglColor4i;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor4iv pglColor4iv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor4s pglColor4s;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor4sv pglColor4sv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor4ub pglColor4ub;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor4ubv pglColor4ubv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor4ui pglColor4ui;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor4uiv pglColor4uiv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor4us pglColor4us;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColor4usv pglColor4usv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glEdgeFlag pglEdgeFlag;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glEdgeFlagv pglEdgeFlagv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glEnd pglEnd;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glIndexd pglIndexd;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glIndexdv pglIndexdv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glIndexf pglIndexf;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glIndexfv pglIndexfv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glIndexi pglIndexi;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glIndexiv pglIndexiv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glIndexs pglIndexs;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glIndexsv pglIndexsv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glNormal3b pglNormal3b;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glNormal3bv pglNormal3bv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glNormal3d pglNormal3d;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glNormal3dv pglNormal3dv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glNormal3f pglNormal3f;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glNormal3fv pglNormal3fv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glNormal3i pglNormal3i;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glNormal3iv pglNormal3iv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glNormal3s pglNormal3s;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glNormal3sv pglNormal3sv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos2d pglRasterPos2d;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos2dv pglRasterPos2dv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos2f pglRasterPos2f;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos2fv pglRasterPos2fv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos2i pglRasterPos2i;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos2iv pglRasterPos2iv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos2s pglRasterPos2s;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos2sv pglRasterPos2sv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos3d pglRasterPos3d;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos3dv pglRasterPos3dv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos3f pglRasterPos3f;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos3fv pglRasterPos3fv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos3i pglRasterPos3i;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos3iv pglRasterPos3iv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos3s pglRasterPos3s;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos3sv pglRasterPos3sv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos4d pglRasterPos4d;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos4dv pglRasterPos4dv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos4f pglRasterPos4f;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos4fv pglRasterPos4fv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos4i pglRasterPos4i;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos4iv pglRasterPos4iv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos4s pglRasterPos4s;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRasterPos4sv pglRasterPos4sv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRectd pglRectd;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRectdv pglRectdv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRectf pglRectf;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRectfv pglRectfv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRecti pglRecti;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRectiv pglRectiv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRects pglRects;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRectsv pglRectsv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord1d pglTexCoord1d;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord1dv pglTexCoord1dv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord1f pglTexCoord1f;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord1fv pglTexCoord1fv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord1i pglTexCoord1i;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord1iv pglTexCoord1iv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord1s pglTexCoord1s;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord1sv pglTexCoord1sv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord2d pglTexCoord2d;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord2dv pglTexCoord2dv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord2f pglTexCoord2f;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord2fv pglTexCoord2fv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord2i pglTexCoord2i;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord2iv pglTexCoord2iv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord2s pglTexCoord2s;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord2sv pglTexCoord2sv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord3d pglTexCoord3d;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord3dv pglTexCoord3dv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord3f pglTexCoord3f;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord3fv pglTexCoord3fv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord3i pglTexCoord3i;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord3iv pglTexCoord3iv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord3s pglTexCoord3s;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord3sv pglTexCoord3sv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord4d pglTexCoord4d;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord4dv pglTexCoord4dv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord4f pglTexCoord4f;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord4fv pglTexCoord4fv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord4i pglTexCoord4i;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord4iv pglTexCoord4iv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord4s pglTexCoord4s;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoord4sv pglTexCoord4sv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex2d pglVertex2d;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex2dv pglVertex2dv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex2f pglVertex2f;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex2fv pglVertex2fv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex2i pglVertex2i;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex2iv pglVertex2iv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex2s pglVertex2s;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex2sv pglVertex2sv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex3d pglVertex3d;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex3dv pglVertex3dv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex3f pglVertex3f;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex3fv pglVertex3fv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex3i pglVertex3i;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex3iv pglVertex3iv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex3s pglVertex3s;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex3sv pglVertex3sv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex4d pglVertex4d;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex4dv pglVertex4dv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex4f pglVertex4f;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex4fv pglVertex4fv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex4i pglVertex4i;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex4iv pglVertex4iv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex4s pglVertex4s;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertex4sv pglVertex4sv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glClipPlane pglClipPlane;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColorMaterial pglColorMaterial;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glFogf pglFogf;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glFogfv pglFogfv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glFogi pglFogi;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glFogiv pglFogiv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glLightf pglLightf;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glLightfv pglLightfv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glLighti pglLighti;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glLightiv pglLightiv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glLightModelf pglLightModelf;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glLightModelfv pglLightModelfv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glLightModeli pglLightModeli;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glLightModeliv pglLightModeliv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glLineStipple pglLineStipple;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMaterialf pglMaterialf;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMaterialfv pglMaterialfv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMateriali pglMateriali;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMaterialiv pglMaterialiv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glPolygonStipple pglPolygonStipple;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glShadeModel pglShadeModel;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexEnvf pglTexEnvf;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexEnvfv pglTexEnvfv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexEnvi pglTexEnvi;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexEnviv pglTexEnviv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexGend pglTexGend;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexGendv pglTexGendv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexGenf pglTexGenf;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexGenfv pglTexGenfv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexGeni pglTexGeni;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexGeniv pglTexGeniv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glFeedbackBuffer pglFeedbackBuffer;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glSelectBuffer pglSelectBuffer;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRenderMode pglRenderMode;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glInitNames pglInitNames;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glLoadName pglLoadName;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glPassThrough pglPassThrough;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glPopName pglPopName;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glPushName pglPushName;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glClearAccum pglClearAccum;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glClearIndex pglClearIndex;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glIndexMask pglIndexMask;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glAccum pglAccum;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glPopAttrib pglPopAttrib;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glPushAttrib pglPushAttrib;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMap1d pglMap1d;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMap1f pglMap1f;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMap2d pglMap2d;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMap2f pglMap2f;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMapGrid1d pglMapGrid1d;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMapGrid1f pglMapGrid1f;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMapGrid2d pglMapGrid2d;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMapGrid2f pglMapGrid2f;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glEvalCoord1d pglEvalCoord1d;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glEvalCoord1dv pglEvalCoord1dv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glEvalCoord1f pglEvalCoord1f;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glEvalCoord1fv pglEvalCoord1fv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glEvalCoord2d pglEvalCoord2d;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glEvalCoord2dv pglEvalCoord2dv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glEvalCoord2f pglEvalCoord2f;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glEvalCoord2fv pglEvalCoord2fv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glEvalMesh1 pglEvalMesh1;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glEvalPoint1 pglEvalPoint1;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glEvalMesh2 pglEvalMesh2;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glEvalPoint2 pglEvalPoint2;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glAlphaFunc pglAlphaFunc;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glPixelZoom pglPixelZoom;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glPixelTransferf pglPixelTransferf;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glPixelTransferi pglPixelTransferi;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glPixelMapfv pglPixelMapfv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glPixelMapuiv pglPixelMapuiv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glPixelMapusv pglPixelMapusv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glCopyPixels pglCopyPixels;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glDrawPixels pglDrawPixels;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glGetClipPlane pglGetClipPlane;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glGetLightfv pglGetLightfv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glGetLightiv pglGetLightiv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glGetMapdv pglGetMapdv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glGetMapfv pglGetMapfv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glGetMapiv pglGetMapiv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glGetMaterialfv pglGetMaterialfv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glGetMaterialiv pglGetMaterialiv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glGetPixelMapfv pglGetPixelMapfv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glGetPixelMapuiv pglGetPixelMapuiv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glGetPixelMapusv pglGetPixelMapusv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glGetPolygonStipple pglGetPolygonStipple;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glGetTexEnvfv pglGetTexEnvfv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glGetTexEnviv pglGetTexEnviv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glGetTexGendv pglGetTexGendv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glGetTexGenfv pglGetTexGenfv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glGetTexGeniv pglGetTexGeniv;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glIsList pglIsList;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glFrustum pglFrustum;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glLoadIdentity pglLoadIdentity;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glLoadMatrixf pglLoadMatrixf;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glLoadMatrixd pglLoadMatrixd;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMatrixMode pglMatrixMode;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultMatrixf pglMultMatrixf;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultMatrixd pglMultMatrixd;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glOrtho pglOrtho;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glPopMatrix pglPopMatrix;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glPushMatrix pglPushMatrix;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRotated pglRotated;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glRotatef pglRotatef;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glScaled pglScaled;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glScalef pglScalef;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTranslated pglTranslated;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTranslatef pglTranslatef;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_EXT_vertex_array", EntryPoint = "glDrawArraysEXT")]
		[ThreadStatic]
		internal static glDrawArrays pglDrawArrays;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[ThreadStatic]
		internal static glDrawElements pglDrawElements;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_EXT_vertex_array", EntryPoint = "glGetPointervEXT")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2", EntryPoint = "glGetPointervKHR")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glGetPointerv pglGetPointerv;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glPolygonOffset pglPolygonOffset;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_EXT_copy_texture", EntryPoint = "glCopyTexImage1DEXT")]
		[ThreadStatic]
		internal static glCopyTexImage1D pglCopyTexImage1D;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_copy_texture", EntryPoint = "glCopyTexImage2DEXT")]
		[ThreadStatic]
		internal static glCopyTexImage2D pglCopyTexImage2D;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_EXT_copy_texture", EntryPoint = "glCopyTexSubImage1DEXT")]
		[ThreadStatic]
		internal static glCopyTexSubImage1D pglCopyTexSubImage1D;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_copy_texture", EntryPoint = "glCopyTexSubImage2DEXT")]
		[ThreadStatic]
		internal static glCopyTexSubImage2D pglCopyTexSubImage2D;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_EXT_subtexture", EntryPoint = "glTexSubImage1DEXT")]
		[ThreadStatic]
		internal static glTexSubImage1D pglTexSubImage1D;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_EXT_subtexture", EntryPoint = "glTexSubImage2DEXT")]
		[ThreadStatic]
		internal static glTexSubImage2D pglTexSubImage2D;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_EXT_texture_object", EntryPoint = "glBindTextureEXT")]
		[ThreadStatic]
		internal static glBindTexture pglBindTexture;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[ThreadStatic]
		internal static glDeleteTextures pglDeleteTextures;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glGenTextures pglGenTextures;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[ThreadStatic]
		internal static glIsTexture pglIsTexture;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_EXT_vertex_array", EntryPoint = "glArrayElementEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glArrayElement pglArrayElement;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glColorPointer pglColorPointer;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glDisableClientState pglDisableClientState;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glEdgeFlagPointer pglEdgeFlagPointer;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glEnableClientState pglEnableClientState;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glIndexPointer pglIndexPointer;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glInterleavedArrays pglInterleavedArrays;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glNormalPointer pglNormalPointer;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glTexCoordPointer pglTexCoordPointer;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glVertexPointer pglVertexPointer;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glAreTexturesResident pglAreTexturesResident;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RequiredByFeature("GL_EXT_texture_object", EntryPoint = "glPrioritizeTexturesEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glPrioritizeTextures pglPrioritizeTextures;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glIndexub pglIndexub;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glIndexubv pglIndexubv;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glPopClientAttrib pglPopClientAttrib;

		[RequiredByFeature("GL_VERSION_1_1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glPushClientAttrib pglPushClientAttrib;

		[RequiredByFeature("GL_VERSION_1_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_EXT_draw_range_elements", EntryPoint = "glDrawRangeElementsEXT")]
		[ThreadStatic]
		internal static glDrawRangeElements pglDrawRangeElements;

		[RequiredByFeature("GL_VERSION_1_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture3D", EntryPoint = "glTexImage3DEXT")]
		[ThreadStatic]
		internal static glTexImage3D pglTexImage3D;

		[RequiredByFeature("GL_VERSION_1_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture3D", EntryPoint = "glTexSubImage3DEXT")]
		[ThreadStatic]
		internal static glTexSubImage3D pglTexSubImage3D;

		[RequiredByFeature("GL_VERSION_1_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_copy_texture", EntryPoint = "glCopyTexSubImage3DEXT")]
		[ThreadStatic]
		internal static glCopyTexSubImage3D pglCopyTexSubImage3D;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glActiveTextureARB")]
		[ThreadStatic]
		internal static glActiveTexture pglActiveTexture;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_multisample", EntryPoint = "glSampleCoverageARB")]
		[ThreadStatic]
		internal static glSampleCoverage pglSampleCoverage;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_compression", EntryPoint = "glCompressedTexImage3DARB")]
		[ThreadStatic]
		internal static glCompressedTexImage3D pglCompressedTexImage3D;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_compression", EntryPoint = "glCompressedTexImage2DARB")]
		[ThreadStatic]
		internal static glCompressedTexImage2D pglCompressedTexImage2D;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_texture_compression", EntryPoint = "glCompressedTexImage1DARB")]
		[ThreadStatic]
		internal static glCompressedTexImage1D pglCompressedTexImage1D;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_compression", EntryPoint = "glCompressedTexSubImage3DARB")]
		[ThreadStatic]
		internal static glCompressedTexSubImage3D pglCompressedTexSubImage3D;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_texture_compression", EntryPoint = "glCompressedTexSubImage2DARB")]
		[ThreadStatic]
		internal static glCompressedTexSubImage2D pglCompressedTexSubImage2D;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_texture_compression", EntryPoint = "glCompressedTexSubImage1DARB")]
		[ThreadStatic]
		internal static glCompressedTexSubImage1D pglCompressedTexSubImage1D;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_texture_compression", EntryPoint = "glGetCompressedTexImageARB")]
		[ThreadStatic]
		internal static glGetCompressedTexImage pglGetCompressedTexImage;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glClientActiveTextureARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glClientActiveTexture pglClientActiveTexture;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord1dARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord1d pglMultiTexCoord1d;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord1dvARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord1dv pglMultiTexCoord1dv;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord1fARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord1f pglMultiTexCoord1f;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord1fvARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord1fv pglMultiTexCoord1fv;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord1iARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord1i pglMultiTexCoord1i;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord1ivARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord1iv pglMultiTexCoord1iv;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord1sARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord1s pglMultiTexCoord1s;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord1svARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord1sv pglMultiTexCoord1sv;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord2dARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord2d pglMultiTexCoord2d;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord2dvARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord2dv pglMultiTexCoord2dv;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord2fARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord2f pglMultiTexCoord2f;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord2fvARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord2fv pglMultiTexCoord2fv;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord2iARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord2i pglMultiTexCoord2i;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord2ivARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord2iv pglMultiTexCoord2iv;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord2sARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord2s pglMultiTexCoord2s;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord2svARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord2sv pglMultiTexCoord2sv;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord3dARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord3d pglMultiTexCoord3d;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord3dvARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord3dv pglMultiTexCoord3dv;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord3fARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord3f pglMultiTexCoord3f;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord3fvARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord3fv pglMultiTexCoord3fv;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord3iARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord3i pglMultiTexCoord3i;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord3ivARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord3iv pglMultiTexCoord3iv;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord3sARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord3s pglMultiTexCoord3s;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord3svARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord3sv pglMultiTexCoord3sv;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord4dARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord4d pglMultiTexCoord4d;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord4dvARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord4dv pglMultiTexCoord4dv;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord4fARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord4f pglMultiTexCoord4f;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord4fvARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord4fv pglMultiTexCoord4fv;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord4iARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord4i pglMultiTexCoord4i;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord4ivARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord4iv pglMultiTexCoord4iv;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord4sARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord4s pglMultiTexCoord4s;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_multitexture", EntryPoint = "glMultiTexCoord4svARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultiTexCoord4sv pglMultiTexCoord4sv;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_transpose_matrix", EntryPoint = "glLoadTransposeMatrixfARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glLoadTransposeMatrixf pglLoadTransposeMatrixf;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_transpose_matrix", EntryPoint = "glLoadTransposeMatrixdARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glLoadTransposeMatrixd pglLoadTransposeMatrixd;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_transpose_matrix", EntryPoint = "glMultTransposeMatrixfARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultTransposeMatrixf pglMultTransposeMatrixf;

		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ARB_transpose_matrix", EntryPoint = "glMultTransposeMatrixdARB")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glMultTransposeMatrixd pglMultTransposeMatrixd;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_EXT_blend_func_separate", EntryPoint = "glBlendFuncSeparateEXT")]
		[RequiredByFeature("GL_INGR_blend_func_separate", EntryPoint = "glBlendFuncSeparateINGR")]
		[ThreadStatic]
		internal static glBlendFuncSeparate pglBlendFuncSeparate;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_multi_draw_arrays", Api = "gl|gles1|gles2", EntryPoint = "glMultiDrawArraysEXT")]
		[ThreadStatic]
		internal static glMultiDrawArrays pglMultiDrawArrays;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_multi_draw_arrays", Api = "gl|gles1|gles2", EntryPoint = "glMultiDrawElementsEXT")]
		[ThreadStatic]
		internal static glMultiDrawElements pglMultiDrawElements;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ARB_point_parameters", EntryPoint = "glPointParameterfARB")]
		[RequiredByFeature("GL_EXT_point_parameters", EntryPoint = "glPointParameterfEXT")]
		[RequiredByFeature("GL_SGIS_point_parameters", EntryPoint = "glPointParameterfSGIS")]
		[ThreadStatic]
		internal static glPointParameterf pglPointParameterf;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ARB_point_parameters", EntryPoint = "glPointParameterfvARB")]
		[RequiredByFeature("GL_EXT_point_parameters", EntryPoint = "glPointParameterfvEXT")]
		[RequiredByFeature("GL_SGIS_point_parameters", EntryPoint = "glPointParameterfvSGIS")]
		[ThreadStatic]
		internal static glPointParameterfv pglPointParameterfv;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_NV_point_sprite", EntryPoint = "glPointParameteriNV")]
		[ThreadStatic]
		internal static glPointParameteri pglPointParameteri;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_NV_point_sprite", EntryPoint = "glPointParameterivNV")]
		[ThreadStatic]
		internal static glPointParameteriv pglPointParameteriv;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_fog_coord", EntryPoint = "glFogCoordfEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glFogCoordf pglFogCoordf;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_fog_coord", EntryPoint = "glFogCoordfvEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glFogCoordfv pglFogCoordfv;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_fog_coord", EntryPoint = "glFogCoorddEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glFogCoordd pglFogCoordd;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_fog_coord", EntryPoint = "glFogCoorddvEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glFogCoorddv pglFogCoorddv;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_fog_coord", EntryPoint = "glFogCoordPointerEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glFogCoordPointer pglFogCoordPointer;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color", EntryPoint = "glSecondaryColor3bEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glSecondaryColor3b pglSecondaryColor3b;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color", EntryPoint = "glSecondaryColor3bvEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glSecondaryColor3bv pglSecondaryColor3bv;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color", EntryPoint = "glSecondaryColor3dEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glSecondaryColor3d pglSecondaryColor3d;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color", EntryPoint = "glSecondaryColor3dvEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glSecondaryColor3dv pglSecondaryColor3dv;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color", EntryPoint = "glSecondaryColor3fEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glSecondaryColor3f pglSecondaryColor3f;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color", EntryPoint = "glSecondaryColor3fvEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glSecondaryColor3fv pglSecondaryColor3fv;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color", EntryPoint = "glSecondaryColor3iEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glSecondaryColor3i pglSecondaryColor3i;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color", EntryPoint = "glSecondaryColor3ivEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glSecondaryColor3iv pglSecondaryColor3iv;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color", EntryPoint = "glSecondaryColor3sEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glSecondaryColor3s pglSecondaryColor3s;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color", EntryPoint = "glSecondaryColor3svEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glSecondaryColor3sv pglSecondaryColor3sv;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color", EntryPoint = "glSecondaryColor3ubEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glSecondaryColor3ub pglSecondaryColor3ub;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color", EntryPoint = "glSecondaryColor3ubvEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glSecondaryColor3ubv pglSecondaryColor3ubv;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color", EntryPoint = "glSecondaryColor3uiEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glSecondaryColor3ui pglSecondaryColor3ui;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color", EntryPoint = "glSecondaryColor3uivEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glSecondaryColor3uiv pglSecondaryColor3uiv;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color", EntryPoint = "glSecondaryColor3usEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glSecondaryColor3us pglSecondaryColor3us;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color", EntryPoint = "glSecondaryColor3usvEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glSecondaryColor3usv pglSecondaryColor3usv;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_EXT_secondary_color", EntryPoint = "glSecondaryColorPointerEXT")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glSecondaryColorPointer pglSecondaryColorPointer;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos", EntryPoint = "glWindowPos2dARB")]
		[RequiredByFeature("GL_MESA_window_pos", EntryPoint = "glWindowPos2dMESA")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glWindowPos2d pglWindowPos2d;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos", EntryPoint = "glWindowPos2dvARB")]
		[RequiredByFeature("GL_MESA_window_pos", EntryPoint = "glWindowPos2dvMESA")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glWindowPos2dv pglWindowPos2dv;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos", EntryPoint = "glWindowPos2fARB")]
		[RequiredByFeature("GL_MESA_window_pos", EntryPoint = "glWindowPos2fMESA")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glWindowPos2f pglWindowPos2f;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos", EntryPoint = "glWindowPos2fvARB")]
		[RequiredByFeature("GL_MESA_window_pos", EntryPoint = "glWindowPos2fvMESA")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glWindowPos2fv pglWindowPos2fv;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos", EntryPoint = "glWindowPos2iARB")]
		[RequiredByFeature("GL_MESA_window_pos", EntryPoint = "glWindowPos2iMESA")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glWindowPos2i pglWindowPos2i;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos", EntryPoint = "glWindowPos2ivARB")]
		[RequiredByFeature("GL_MESA_window_pos", EntryPoint = "glWindowPos2ivMESA")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glWindowPos2iv pglWindowPos2iv;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos", EntryPoint = "glWindowPos2sARB")]
		[RequiredByFeature("GL_MESA_window_pos", EntryPoint = "glWindowPos2sMESA")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glWindowPos2s pglWindowPos2s;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos", EntryPoint = "glWindowPos2svARB")]
		[RequiredByFeature("GL_MESA_window_pos", EntryPoint = "glWindowPos2svMESA")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glWindowPos2sv pglWindowPos2sv;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos", EntryPoint = "glWindowPos3dARB")]
		[RequiredByFeature("GL_MESA_window_pos", EntryPoint = "glWindowPos3dMESA")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glWindowPos3d pglWindowPos3d;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos", EntryPoint = "glWindowPos3dvARB")]
		[RequiredByFeature("GL_MESA_window_pos", EntryPoint = "glWindowPos3dvMESA")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glWindowPos3dv pglWindowPos3dv;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos", EntryPoint = "glWindowPos3fARB")]
		[RequiredByFeature("GL_MESA_window_pos", EntryPoint = "glWindowPos3fMESA")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glWindowPos3f pglWindowPos3f;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos", EntryPoint = "glWindowPos3fvARB")]
		[RequiredByFeature("GL_MESA_window_pos", EntryPoint = "glWindowPos3fvMESA")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glWindowPos3fv pglWindowPos3fv;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos", EntryPoint = "glWindowPos3iARB")]
		[RequiredByFeature("GL_MESA_window_pos", EntryPoint = "glWindowPos3iMESA")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glWindowPos3i pglWindowPos3i;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos", EntryPoint = "glWindowPos3ivARB")]
		[RequiredByFeature("GL_MESA_window_pos", EntryPoint = "glWindowPos3ivMESA")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glWindowPos3iv pglWindowPos3iv;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos", EntryPoint = "glWindowPos3sARB")]
		[RequiredByFeature("GL_MESA_window_pos", EntryPoint = "glWindowPos3sMESA")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glWindowPos3s pglWindowPos3s;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ARB_window_pos", EntryPoint = "glWindowPos3svARB")]
		[RequiredByFeature("GL_MESA_window_pos", EntryPoint = "glWindowPos3svMESA")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		[ThreadStatic]
		internal static glWindowPos3sv pglWindowPos3sv;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_blend_color", EntryPoint = "glBlendColorEXT")]
		[ThreadStatic]
		internal static glBlendColor pglBlendColor;

		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_blend_minmax", EntryPoint = "glBlendEquationEXT")]
		[ThreadStatic]
		internal static glBlendEquation pglBlendEquation;

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_occlusion_query", EntryPoint = "glGenQueriesARB")]
		[ThreadStatic]
		internal static glGenQueries pglGenQueries;

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_occlusion_query", EntryPoint = "glDeleteQueriesARB")]
		[ThreadStatic]
		internal static glDeleteQueries pglDeleteQueries;

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_occlusion_query", EntryPoint = "glIsQueryARB")]
		[ThreadStatic]
		internal static glIsQuery pglIsQuery;

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_occlusion_query", EntryPoint = "glBeginQueryARB")]
		[ThreadStatic]
		internal static glBeginQuery pglBeginQuery;

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_occlusion_query", EntryPoint = "glEndQueryARB")]
		[ThreadStatic]
		internal static glEndQuery pglEndQuery;

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_occlusion_query", EntryPoint = "glGetQueryivARB")]
		[ThreadStatic]
		internal static glGetQueryiv pglGetQueryiv;

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ARB_occlusion_query", EntryPoint = "glGetQueryObjectivARB")]
		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2", EntryPoint = "glGetQueryObjectivEXT")]
		[ThreadStatic]
		internal static glGetQueryObjectiv pglGetQueryObjectiv;

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_occlusion_query", EntryPoint = "glGetQueryObjectuivARB")]
		[ThreadStatic]
		internal static glGetQueryObjectuiv pglGetQueryObjectuiv;

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object", EntryPoint = "glBindBufferARB")]
		[ThreadStatic]
		internal static glBindBuffer pglBindBuffer;

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object", EntryPoint = "glDeleteBuffersARB")]
		[ThreadStatic]
		internal static glDeleteBuffers pglDeleteBuffers;

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object", EntryPoint = "glGenBuffersARB")]
		[ThreadStatic]
		internal static glGenBuffers pglGenBuffers;

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object", EntryPoint = "glIsBufferARB")]
		[ThreadStatic]
		internal static glIsBuffer pglIsBuffer;

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object", EntryPoint = "glBufferDataARB")]
		[ThreadStatic]
		internal static glBufferData pglBufferData;

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object", EntryPoint = "glBufferSubDataARB")]
		[ThreadStatic]
		internal static glBufferSubData pglBufferSubData;

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object", EntryPoint = "glGetBufferSubDataARB")]
		[ThreadStatic]
		internal static glGetBufferSubData pglGetBufferSubData;

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object", EntryPoint = "glMapBufferARB")]
		[RequiredByFeature("GL_OES_mapbuffer", Api = "gles1|gles2", EntryPoint = "glMapBufferOES")]
		[ThreadStatic]
		internal static glMapBuffer pglMapBuffer;

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object", EntryPoint = "glUnmapBufferARB")]
		[RequiredByFeature("GL_OES_mapbuffer", Api = "gles1|gles2", EntryPoint = "glUnmapBufferOES")]
		[ThreadStatic]
		internal static glUnmapBuffer pglUnmapBuffer;

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object", EntryPoint = "glGetBufferParameterivARB")]
		[ThreadStatic]
		internal static glGetBufferParameteriv pglGetBufferParameteriv;

		[RequiredByFeature("GL_VERSION_1_5")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_buffer_object", EntryPoint = "glGetBufferPointervARB")]
		[RequiredByFeature("GL_OES_mapbuffer", Api = "gles1|gles2", EntryPoint = "glGetBufferPointervOES")]
		[ThreadStatic]
		internal static glGetBufferPointerv pglGetBufferPointerv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_EXT_blend_equation_separate", EntryPoint = "glBlendEquationSeparateEXT")]
		[ThreadStatic]
		internal static glBlendEquationSeparate pglBlendEquationSeparate;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_draw_buffers", EntryPoint = "glDrawBuffersARB")]
		[RequiredByFeature("GL_ATI_draw_buffers", EntryPoint = "glDrawBuffersATI")]
		[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2", EntryPoint = "glDrawBuffersEXT")]
		[ThreadStatic]
		internal static glDrawBuffers pglDrawBuffers;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ATI_separate_stencil", EntryPoint = "glStencilOpSeparateATI")]
		[ThreadStatic]
		internal static glStencilOpSeparate pglStencilOpSeparate;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glStencilFuncSeparate pglStencilFuncSeparate;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glStencilMaskSeparate pglStencilMaskSeparate;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glAttachObjectARB")]
		[ThreadStatic]
		internal static glAttachShader pglAttachShader;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glBindAttribLocationARB")]
		[ThreadStatic]
		internal static glBindAttribLocation pglBindAttribLocation;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glCompileShaderARB")]
		[ThreadStatic]
		internal static glCompileShader pglCompileShader;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glCreateProgramObjectARB")]
		[ThreadStatic]
		internal static glCreateProgram pglCreateProgram;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glCreateShaderObjectARB")]
		[ThreadStatic]
		internal static glCreateShader pglCreateShader;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[ThreadStatic]
		internal static glDeleteProgram pglDeleteProgram;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[ThreadStatic]
		internal static glDeleteShader pglDeleteShader;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glDetachObjectARB")]
		[ThreadStatic]
		internal static glDetachShader pglDetachShader;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glDisableVertexAttribArrayARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glDisableVertexAttribArrayARB")]
		[ThreadStatic]
		internal static glDisableVertexAttribArray pglDisableVertexAttribArray;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glEnableVertexAttribArrayARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glEnableVertexAttribArrayARB")]
		[ThreadStatic]
		internal static glEnableVertexAttribArray pglEnableVertexAttribArray;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glGetActiveAttribARB")]
		[ThreadStatic]
		internal static glGetActiveAttrib pglGetActiveAttrib;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glGetActiveUniformARB")]
		[ThreadStatic]
		internal static glGetActiveUniform pglGetActiveUniform;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[ThreadStatic]
		internal static glGetAttachedShaders pglGetAttachedShaders;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glGetAttribLocationARB")]
		[ThreadStatic]
		internal static glGetAttribLocation pglGetAttribLocation;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[ThreadStatic]
		internal static glGetProgramiv pglGetProgramiv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[ThreadStatic]
		internal static glGetProgramInfoLog pglGetProgramInfoLog;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[ThreadStatic]
		internal static glGetShaderiv pglGetShaderiv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[ThreadStatic]
		internal static glGetShaderInfoLog pglGetShaderInfoLog;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glGetShaderSourceARB")]
		[ThreadStatic]
		internal static glGetShaderSource pglGetShaderSource;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glGetUniformLocationARB")]
		[ThreadStatic]
		internal static glGetUniformLocation pglGetUniformLocation;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glGetUniformfvARB")]
		[ThreadStatic]
		internal static glGetUniformfv pglGetUniformfv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glGetUniformivARB")]
		[ThreadStatic]
		internal static glGetUniformiv pglGetUniformiv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glGetVertexAttribdvARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glGetVertexAttribdvARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glGetVertexAttribdvNV")]
		[ThreadStatic]
		internal static glGetVertexAttribdv pglGetVertexAttribdv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glGetVertexAttribfvARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glGetVertexAttribfvARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glGetVertexAttribfvNV")]
		[ThreadStatic]
		internal static glGetVertexAttribfv pglGetVertexAttribfv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glGetVertexAttribivARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glGetVertexAttribivARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glGetVertexAttribivNV")]
		[ThreadStatic]
		internal static glGetVertexAttribiv pglGetVertexAttribiv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glGetVertexAttribPointervARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glGetVertexAttribPointervARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glGetVertexAttribPointervNV")]
		[ThreadStatic]
		internal static glGetVertexAttribPointerv pglGetVertexAttribPointerv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[ThreadStatic]
		internal static glIsProgram pglIsProgram;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[ThreadStatic]
		internal static glIsShader pglIsShader;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glLinkProgramARB")]
		[ThreadStatic]
		internal static glLinkProgram pglLinkProgram;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glShaderSourceARB")]
		[ThreadStatic]
		internal static glShaderSource pglShaderSource;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glUseProgramObjectARB")]
		[ThreadStatic]
		internal static glUseProgram pglUseProgram;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glUniform1fARB")]
		[ThreadStatic]
		internal static glUniform1f pglUniform1f;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glUniform2fARB")]
		[ThreadStatic]
		internal static glUniform2f pglUniform2f;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glUniform3fARB")]
		[ThreadStatic]
		internal static glUniform3f pglUniform3f;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glUniform4fARB")]
		[ThreadStatic]
		internal static glUniform4f pglUniform4f;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glUniform1iARB")]
		[ThreadStatic]
		internal static glUniform1i pglUniform1i;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glUniform2iARB")]
		[ThreadStatic]
		internal static glUniform2i pglUniform2i;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glUniform3iARB")]
		[ThreadStatic]
		internal static glUniform3i pglUniform3i;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glUniform4iARB")]
		[ThreadStatic]
		internal static glUniform4i pglUniform4i;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glUniform1fvARB")]
		[ThreadStatic]
		internal static glUniform1fv pglUniform1fv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glUniform2fvARB")]
		[ThreadStatic]
		internal static glUniform2fv pglUniform2fv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glUniform3fvARB")]
		[ThreadStatic]
		internal static glUniform3fv pglUniform3fv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glUniform4fvARB")]
		[ThreadStatic]
		internal static glUniform4fv pglUniform4fv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glUniform1ivARB")]
		[ThreadStatic]
		internal static glUniform1iv pglUniform1iv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glUniform2ivARB")]
		[ThreadStatic]
		internal static glUniform2iv pglUniform2iv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glUniform3ivARB")]
		[ThreadStatic]
		internal static glUniform3iv pglUniform3iv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glUniform4ivARB")]
		[ThreadStatic]
		internal static glUniform4iv pglUniform4iv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glUniformMatrix2fvARB")]
		[ThreadStatic]
		internal static glUniformMatrix2fv pglUniformMatrix2fv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glUniformMatrix3fvARB")]
		[ThreadStatic]
		internal static glUniformMatrix3fv pglUniformMatrix3fv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glUniformMatrix4fvARB")]
		[ThreadStatic]
		internal static glUniformMatrix4fv pglUniformMatrix4fv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_objects", EntryPoint = "glValidateProgramARB")]
		[ThreadStatic]
		internal static glValidateProgram pglValidateProgram;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib1dARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib1dARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib1dNV")]
		[ThreadStatic]
		internal static glVertexAttrib1d pglVertexAttrib1d;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib1dvARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib1dvARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib1dvNV")]
		[ThreadStatic]
		internal static glVertexAttrib1dv pglVertexAttrib1dv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib1fARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib1fARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib1fNV")]
		[ThreadStatic]
		internal static glVertexAttrib1f pglVertexAttrib1f;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib1fvARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib1fvARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib1fvNV")]
		[ThreadStatic]
		internal static glVertexAttrib1fv pglVertexAttrib1fv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib1sARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib1sARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib1sNV")]
		[ThreadStatic]
		internal static glVertexAttrib1s pglVertexAttrib1s;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib1svARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib1svARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib1svNV")]
		[ThreadStatic]
		internal static glVertexAttrib1sv pglVertexAttrib1sv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib2dARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib2dARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib2dNV")]
		[ThreadStatic]
		internal static glVertexAttrib2d pglVertexAttrib2d;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib2dvARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib2dvARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib2dvNV")]
		[ThreadStatic]
		internal static glVertexAttrib2dv pglVertexAttrib2dv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib2fARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib2fARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib2fNV")]
		[ThreadStatic]
		internal static glVertexAttrib2f pglVertexAttrib2f;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib2fvARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib2fvARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib2fvNV")]
		[ThreadStatic]
		internal static glVertexAttrib2fv pglVertexAttrib2fv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib2sARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib2sARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib2sNV")]
		[ThreadStatic]
		internal static glVertexAttrib2s pglVertexAttrib2s;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib2svARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib2svARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib2svNV")]
		[ThreadStatic]
		internal static glVertexAttrib2sv pglVertexAttrib2sv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib3dARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib3dARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib3dNV")]
		[ThreadStatic]
		internal static glVertexAttrib3d pglVertexAttrib3d;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib3dvARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib3dvARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib3dvNV")]
		[ThreadStatic]
		internal static glVertexAttrib3dv pglVertexAttrib3dv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib3fARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib3fARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib3fNV")]
		[ThreadStatic]
		internal static glVertexAttrib3f pglVertexAttrib3f;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib3fvARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib3fvARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib3fvNV")]
		[ThreadStatic]
		internal static glVertexAttrib3fv pglVertexAttrib3fv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib3sARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib3sARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib3sNV")]
		[ThreadStatic]
		internal static glVertexAttrib3s pglVertexAttrib3s;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib3svARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib3svARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib3svNV")]
		[ThreadStatic]
		internal static glVertexAttrib3sv pglVertexAttrib3sv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib4NbvARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib4NbvARB")]
		[ThreadStatic]
		internal static glVertexAttrib4Nbv pglVertexAttrib4Nbv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib4NivARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib4NivARB")]
		[ThreadStatic]
		internal static glVertexAttrib4Niv pglVertexAttrib4Niv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib4NsvARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib4NsvARB")]
		[ThreadStatic]
		internal static glVertexAttrib4Nsv pglVertexAttrib4Nsv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib4NubARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib4NubARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib4ubNV")]
		[ThreadStatic]
		internal static glVertexAttrib4Nub pglVertexAttrib4Nub;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib4NubvARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib4NubvARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib4ubvNV")]
		[ThreadStatic]
		internal static glVertexAttrib4Nubv pglVertexAttrib4Nubv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib4NuivARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib4NuivARB")]
		[ThreadStatic]
		internal static glVertexAttrib4Nuiv pglVertexAttrib4Nuiv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib4NusvARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib4NusvARB")]
		[ThreadStatic]
		internal static glVertexAttrib4Nusv pglVertexAttrib4Nusv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib4bvARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib4bvARB")]
		[ThreadStatic]
		internal static glVertexAttrib4bv pglVertexAttrib4bv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib4dARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib4dARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib4dNV")]
		[ThreadStatic]
		internal static glVertexAttrib4d pglVertexAttrib4d;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib4dvARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib4dvARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib4dvNV")]
		[ThreadStatic]
		internal static glVertexAttrib4dv pglVertexAttrib4dv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib4fARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib4fARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib4fNV")]
		[ThreadStatic]
		internal static glVertexAttrib4f pglVertexAttrib4f;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib4fvARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib4fvARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib4fvNV")]
		[ThreadStatic]
		internal static glVertexAttrib4fv pglVertexAttrib4fv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib4ivARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib4ivARB")]
		[ThreadStatic]
		internal static glVertexAttrib4iv pglVertexAttrib4iv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib4sARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib4sARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib4sNV")]
		[ThreadStatic]
		internal static glVertexAttrib4s pglVertexAttrib4s;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib4svARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib4svARB")]
		[RequiredByFeature("GL_NV_vertex_program", EntryPoint = "glVertexAttrib4svNV")]
		[ThreadStatic]
		internal static glVertexAttrib4sv pglVertexAttrib4sv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib4ubvARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib4ubvARB")]
		[ThreadStatic]
		internal static glVertexAttrib4ubv pglVertexAttrib4ubv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib4uivARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib4uivARB")]
		[ThreadStatic]
		internal static glVertexAttrib4uiv pglVertexAttrib4uiv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttrib4usvARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttrib4usvARB")]
		[ThreadStatic]
		internal static glVertexAttrib4usv pglVertexAttrib4usv;

		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program", EntryPoint = "glVertexAttribPointerARB")]
		[RequiredByFeature("GL_ARB_vertex_shader", EntryPoint = "glVertexAttribPointerARB")]
		[ThreadStatic]
		internal static glVertexAttribPointer pglVertexAttribPointer;

		[RequiredByFeature("GL_VERSION_2_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2", EntryPoint = "glUniformMatrix2x3fvNV")]
		[ThreadStatic]
		internal static glUniformMatrix2x3fv pglUniformMatrix2x3fv;

		[RequiredByFeature("GL_VERSION_2_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2", EntryPoint = "glUniformMatrix3x2fvNV")]
		[ThreadStatic]
		internal static glUniformMatrix3x2fv pglUniformMatrix3x2fv;

		[RequiredByFeature("GL_VERSION_2_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2", EntryPoint = "glUniformMatrix2x4fvNV")]
		[ThreadStatic]
		internal static glUniformMatrix2x4fv pglUniformMatrix2x4fv;

		[RequiredByFeature("GL_VERSION_2_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2", EntryPoint = "glUniformMatrix4x2fvNV")]
		[ThreadStatic]
		internal static glUniformMatrix4x2fv pglUniformMatrix4x2fv;

		[RequiredByFeature("GL_VERSION_2_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2", EntryPoint = "glUniformMatrix3x4fvNV")]
		[ThreadStatic]
		internal static glUniformMatrix3x4fv pglUniformMatrix3x4fv;

		[RequiredByFeature("GL_VERSION_2_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2", EntryPoint = "glUniformMatrix4x3fvNV")]
		[ThreadStatic]
		internal static glUniformMatrix4x3fv pglUniformMatrix4x3fv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_EXT_draw_buffers2", EntryPoint = "glColorMaskIndexedEXT")]
		[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2", EntryPoint = "glColorMaskiEXT")]
		[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2", EntryPoint = "glColorMaskiOES")]
		[ThreadStatic]
		internal static glColorMaski pglColorMaski;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glGetBooleanIndexedvEXT")]
		[RequiredByFeature("GL_EXT_draw_buffers2", EntryPoint = "glGetBooleanIndexedvEXT")]
		[ThreadStatic]
		internal static glGetBooleani_v pglGetBooleani_v;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glGetIntegerIndexedvEXT")]
		[RequiredByFeature("GL_EXT_draw_buffers2", EntryPoint = "glGetIntegerIndexedvEXT")]
		[ThreadStatic]
		internal static glGetIntegeri_v pglGetIntegeri_v;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glEnableIndexedEXT")]
		[RequiredByFeature("GL_EXT_draw_buffers2", EntryPoint = "glEnableIndexedEXT")]
		[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2", EntryPoint = "glEnableiEXT")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2", EntryPoint = "glEnableiNV")]
		[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2", EntryPoint = "glEnableiOES")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2", EntryPoint = "glEnableiOES")]
		[ThreadStatic]
		internal static glEnablei pglEnablei;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glDisableIndexedEXT")]
		[RequiredByFeature("GL_EXT_draw_buffers2", EntryPoint = "glDisableIndexedEXT")]
		[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2", EntryPoint = "glDisableiEXT")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2", EntryPoint = "glDisableiNV")]
		[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2", EntryPoint = "glDisableiOES")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2", EntryPoint = "glDisableiOES")]
		[ThreadStatic]
		internal static glDisablei pglDisablei;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glIsEnabledIndexedEXT")]
		[RequiredByFeature("GL_EXT_draw_buffers2", EntryPoint = "glIsEnabledIndexedEXT")]
		[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2", EntryPoint = "glIsEnablediEXT")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2", EntryPoint = "glIsEnablediNV")]
		[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2", EntryPoint = "glIsEnablediOES")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2", EntryPoint = "glIsEnablediOES")]
		[ThreadStatic]
		internal static glIsEnabledi pglIsEnabledi;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_transform_feedback", EntryPoint = "glBeginTransformFeedbackEXT")]
		[RequiredByFeature("GL_NV_transform_feedback", EntryPoint = "glBeginTransformFeedbackNV")]
		[ThreadStatic]
		internal static glBeginTransformFeedback pglBeginTransformFeedback;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_transform_feedback", EntryPoint = "glEndTransformFeedbackEXT")]
		[RequiredByFeature("GL_NV_transform_feedback", EntryPoint = "glEndTransformFeedbackNV")]
		[ThreadStatic]
		internal static glEndTransformFeedback pglEndTransformFeedback;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_transform_feedback", EntryPoint = "glBindBufferRangeEXT")]
		[RequiredByFeature("GL_NV_transform_feedback", EntryPoint = "glBindBufferRangeNV")]
		[ThreadStatic]
		internal static glBindBufferRange pglBindBufferRange;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_transform_feedback", EntryPoint = "glBindBufferBaseEXT")]
		[RequiredByFeature("GL_NV_transform_feedback", EntryPoint = "glBindBufferBaseNV")]
		[ThreadStatic]
		internal static glBindBufferBase pglBindBufferBase;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_transform_feedback", EntryPoint = "glTransformFeedbackVaryingsEXT")]
		[ThreadStatic]
		internal static glTransformFeedbackVaryings pglTransformFeedbackVaryings;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_transform_feedback", EntryPoint = "glGetTransformFeedbackVaryingEXT")]
		[ThreadStatic]
		internal static glGetTransformFeedbackVarying pglGetTransformFeedbackVarying;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ARB_color_buffer_float", EntryPoint = "glClampColorARB")]
		[ThreadStatic]
		internal static glClampColor pglClampColor;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_NV_conditional_render", Api = "gl|glcore|gles2", EntryPoint = "glBeginConditionalRenderNV")]
		[ThreadStatic]
		internal static glBeginConditionalRender pglBeginConditionalRender;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_NVX_conditional_render", EntryPoint = "glEndConditionalRenderNVX")]
		[RequiredByFeature("GL_NV_conditional_render", Api = "gl|glcore|gles2", EntryPoint = "glEndConditionalRenderNV")]
		[ThreadStatic]
		internal static glEndConditionalRender pglEndConditionalRender;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribIPointerEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribIPointerEXT")]
		[ThreadStatic]
		internal static glVertexAttribIPointer pglVertexAttribIPointer;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glGetVertexAttribIivEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glGetVertexAttribIivEXT")]
		[ThreadStatic]
		internal static glGetVertexAttribIiv pglGetVertexAttribIiv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glGetVertexAttribIuivEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glGetVertexAttribIuivEXT")]
		[ThreadStatic]
		internal static glGetVertexAttribIuiv pglGetVertexAttribIuiv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribI1iEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribI1iEXT")]
		[ThreadStatic]
		internal static glVertexAttribI1i pglVertexAttribI1i;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribI2iEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribI2iEXT")]
		[ThreadStatic]
		internal static glVertexAttribI2i pglVertexAttribI2i;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribI3iEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribI3iEXT")]
		[ThreadStatic]
		internal static glVertexAttribI3i pglVertexAttribI3i;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribI4iEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribI4iEXT")]
		[ThreadStatic]
		internal static glVertexAttribI4i pglVertexAttribI4i;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribI1uiEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribI1uiEXT")]
		[ThreadStatic]
		internal static glVertexAttribI1ui pglVertexAttribI1ui;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribI2uiEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribI2uiEXT")]
		[ThreadStatic]
		internal static glVertexAttribI2ui pglVertexAttribI2ui;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribI3uiEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribI3uiEXT")]
		[ThreadStatic]
		internal static glVertexAttribI3ui pglVertexAttribI3ui;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribI4uiEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribI4uiEXT")]
		[ThreadStatic]
		internal static glVertexAttribI4ui pglVertexAttribI4ui;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribI1ivEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribI1ivEXT")]
		[ThreadStatic]
		internal static glVertexAttribI1iv pglVertexAttribI1iv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribI2ivEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribI2ivEXT")]
		[ThreadStatic]
		internal static glVertexAttribI2iv pglVertexAttribI2iv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribI3ivEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribI3ivEXT")]
		[ThreadStatic]
		internal static glVertexAttribI3iv pglVertexAttribI3iv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribI4ivEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribI4ivEXT")]
		[ThreadStatic]
		internal static glVertexAttribI4iv pglVertexAttribI4iv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribI1uivEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribI1uivEXT")]
		[ThreadStatic]
		internal static glVertexAttribI1uiv pglVertexAttribI1uiv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribI2uivEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribI2uivEXT")]
		[ThreadStatic]
		internal static glVertexAttribI2uiv pglVertexAttribI2uiv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribI3uivEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribI3uivEXT")]
		[ThreadStatic]
		internal static glVertexAttribI3uiv pglVertexAttribI3uiv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribI4uivEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribI4uivEXT")]
		[ThreadStatic]
		internal static glVertexAttribI4uiv pglVertexAttribI4uiv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribI4bvEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribI4bvEXT")]
		[ThreadStatic]
		internal static glVertexAttribI4bv pglVertexAttribI4bv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribI4svEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribI4svEXT")]
		[ThreadStatic]
		internal static glVertexAttribI4sv pglVertexAttribI4sv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribI4ubvEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribI4ubvEXT")]
		[ThreadStatic]
		internal static glVertexAttribI4ubv pglVertexAttribI4ubv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glVertexAttribI4usvEXT")]
		[RequiredByFeature("GL_NV_vertex_program4", EntryPoint = "glVertexAttribI4usvEXT")]
		[ThreadStatic]
		internal static glVertexAttribI4usv pglVertexAttribI4usv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glGetUniformuivEXT")]
		[ThreadStatic]
		internal static glGetUniformuiv pglGetUniformuiv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_EXT_blend_func_extended", Api = "gles2", EntryPoint = "glBindFragDataLocationEXT")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glBindFragDataLocationEXT")]
		[ThreadStatic]
		internal static glBindFragDataLocation pglBindFragDataLocation;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glGetFragDataLocationEXT")]
		[ThreadStatic]
		internal static glGetFragDataLocation pglGetFragDataLocation;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glUniform1uiEXT")]
		[ThreadStatic]
		internal static glUniform1ui pglUniform1ui;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glUniform2uiEXT")]
		[ThreadStatic]
		internal static glUniform2ui pglUniform2ui;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glUniform3uiEXT")]
		[ThreadStatic]
		internal static glUniform3ui pglUniform3ui;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glUniform4uiEXT")]
		[ThreadStatic]
		internal static glUniform4ui pglUniform4ui;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glUniform1uivEXT")]
		[ThreadStatic]
		internal static glUniform1uiv pglUniform1uiv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glUniform2uivEXT")]
		[ThreadStatic]
		internal static glUniform2uiv pglUniform2uiv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glUniform3uivEXT")]
		[ThreadStatic]
		internal static glUniform3uiv pglUniform3uiv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4", EntryPoint = "glUniform4uivEXT")]
		[ThreadStatic]
		internal static glUniform4uiv pglUniform4uiv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2", EntryPoint = "glTexParameterIivEXT")]
		[RequiredByFeature("GL_EXT_texture_integer", EntryPoint = "glTexParameterIivEXT")]
		[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2", EntryPoint = "glTexParameterIivOES")]
		[ThreadStatic]
		internal static glTexParameterIiv pglTexParameterIiv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2", EntryPoint = "glTexParameterIuivEXT")]
		[RequiredByFeature("GL_EXT_texture_integer", EntryPoint = "glTexParameterIuivEXT")]
		[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2", EntryPoint = "glTexParameterIuivOES")]
		[ThreadStatic]
		internal static glTexParameterIuiv pglTexParameterIuiv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2", EntryPoint = "glGetTexParameterIivEXT")]
		[RequiredByFeature("GL_EXT_texture_integer", EntryPoint = "glGetTexParameterIivEXT")]
		[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2", EntryPoint = "glGetTexParameterIivOES")]
		[ThreadStatic]
		internal static glGetTexParameterIiv pglGetTexParameterIiv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2", EntryPoint = "glGetTexParameterIuivEXT")]
		[RequiredByFeature("GL_EXT_texture_integer", EntryPoint = "glGetTexParameterIuivEXT")]
		[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2", EntryPoint = "glGetTexParameterIuivOES")]
		[ThreadStatic]
		internal static glGetTexParameterIuiv pglGetTexParameterIuiv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[ThreadStatic]
		internal static glClearBufferiv pglClearBufferiv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[ThreadStatic]
		internal static glClearBufferuiv pglClearBufferuiv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[ThreadStatic]
		internal static glClearBufferfv pglClearBufferfv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[ThreadStatic]
		internal static glClearBufferfi pglClearBufferfi;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[ThreadStatic]
		internal static glGetStringi pglGetStringi;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object", EntryPoint = "glIsRenderbufferEXT")]
		[ThreadStatic]
		internal static glIsRenderbuffer pglIsRenderbuffer;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glBindRenderbuffer pglBindRenderbuffer;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object", EntryPoint = "glDeleteRenderbuffersEXT")]
		[ThreadStatic]
		internal static glDeleteRenderbuffers pglDeleteRenderbuffers;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object", EntryPoint = "glGenRenderbuffersEXT")]
		[ThreadStatic]
		internal static glGenRenderbuffers pglGenRenderbuffers;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object", EntryPoint = "glRenderbufferStorageEXT")]
		[ThreadStatic]
		internal static glRenderbufferStorage pglRenderbufferStorage;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object", EntryPoint = "glGetRenderbufferParameterivEXT")]
		[ThreadStatic]
		internal static glGetRenderbufferParameteriv pglGetRenderbufferParameteriv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object", EntryPoint = "glIsFramebufferEXT")]
		[ThreadStatic]
		internal static glIsFramebuffer pglIsFramebuffer;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glBindFramebuffer pglBindFramebuffer;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object", EntryPoint = "glDeleteFramebuffersEXT")]
		[ThreadStatic]
		internal static glDeleteFramebuffers pglDeleteFramebuffers;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object", EntryPoint = "glGenFramebuffersEXT")]
		[ThreadStatic]
		internal static glGenFramebuffers pglGenFramebuffers;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object", EntryPoint = "glCheckFramebufferStatusEXT")]
		[ThreadStatic]
		internal static glCheckFramebufferStatus pglCheckFramebufferStatus;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object", EntryPoint = "glFramebufferTexture1DEXT")]
		[ThreadStatic]
		internal static glFramebufferTexture1D pglFramebufferTexture1D;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object", EntryPoint = "glFramebufferTexture2DEXT")]
		[ThreadStatic]
		internal static glFramebufferTexture2D pglFramebufferTexture2D;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object", EntryPoint = "glFramebufferTexture3DEXT")]
		[ThreadStatic]
		internal static glFramebufferTexture3D pglFramebufferTexture3D;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object", EntryPoint = "glFramebufferRenderbufferEXT")]
		[ThreadStatic]
		internal static glFramebufferRenderbuffer pglFramebufferRenderbuffer;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object", EntryPoint = "glGetFramebufferAttachmentParameterivEXT")]
		[ThreadStatic]
		internal static glGetFramebufferAttachmentParameteriv pglGetFramebufferAttachmentParameteriv;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object", EntryPoint = "glGenerateMipmapEXT")]
		[ThreadStatic]
		internal static glGenerateMipmap pglGenerateMipmap;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_blit", EntryPoint = "glBlitFramebufferEXT")]
		[RequiredByFeature("GL_NV_framebuffer_blit", Api = "gles2", EntryPoint = "glBlitFramebufferNV")]
		[ThreadStatic]
		internal static glBlitFramebuffer pglBlitFramebuffer;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_multisample", EntryPoint = "glRenderbufferStorageMultisampleEXT")]
		[RequiredByFeature("GL_EXT_multisampled_render_to_texture", Api = "gles1|gles2", EntryPoint = "glRenderbufferStorageMultisampleEXT")]
		[RequiredByFeature("GL_NV_framebuffer_multisample", Api = "gles2", EntryPoint = "glRenderbufferStorageMultisampleNV")]
		[ThreadStatic]
		internal static glRenderbufferStorageMultisample pglRenderbufferStorageMultisample;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore", EntryPoint = "glFramebufferTextureLayerARB")]
		[RequiredByFeature("GL_EXT_texture_array", EntryPoint = "glFramebufferTextureLayerEXT")]
		[RequiredByFeature("GL_NV_geometry_program4", EntryPoint = "glFramebufferTextureLayerEXT")]
		[ThreadStatic]
		internal static glFramebufferTextureLayer pglFramebufferTextureLayer;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_map_buffer_range", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_map_buffer_range", Api = "gles1|gles2", EntryPoint = "glMapBufferRangeEXT")]
		[ThreadStatic]
		internal static glMapBufferRange pglMapBufferRange;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_flush_buffer_range", EntryPoint = "glFlushMappedBufferRangeAPPLE")]
		[RequiredByFeature("GL_ARB_map_buffer_range", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_map_buffer_range", Api = "gles1|gles2", EntryPoint = "glFlushMappedBufferRangeEXT")]
		[ThreadStatic]
		internal static glFlushMappedBufferRange pglFlushMappedBufferRange;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_array_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_vertex_array_object", Api = "gles1|gles2", EntryPoint = "glBindVertexArrayOES")]
		[ThreadStatic]
		internal static glBindVertexArray pglBindVertexArray;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_vertex_array_object", EntryPoint = "glDeleteVertexArraysAPPLE")]
		[RequiredByFeature("GL_ARB_vertex_array_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_vertex_array_object", Api = "gles1|gles2", EntryPoint = "glDeleteVertexArraysOES")]
		[ThreadStatic]
		internal static glDeleteVertexArrays pglDeleteVertexArrays;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_vertex_array_object", EntryPoint = "glGenVertexArraysAPPLE")]
		[RequiredByFeature("GL_ARB_vertex_array_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_vertex_array_object", Api = "gles1|gles2", EntryPoint = "glGenVertexArraysOES")]
		[ThreadStatic]
		internal static glGenVertexArrays pglGenVertexArrays;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_vertex_array_object", EntryPoint = "glIsVertexArrayAPPLE")]
		[RequiredByFeature("GL_ARB_vertex_array_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_vertex_array_object", Api = "gles1|gles2", EntryPoint = "glIsVertexArrayOES")]
		[ThreadStatic]
		internal static glIsVertexArray pglIsVertexArray;

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ANGLE_instanced_arrays", Api = "gles2", EntryPoint = "glDrawArraysInstancedANGLE")]
		[RequiredByFeature("GL_ARB_draw_instanced", Api = "gl|glcore", EntryPoint = "glDrawArraysInstancedARB")]
		[RequiredByFeature("GL_EXT_draw_instanced", Api = "gl|glcore|gles2", EntryPoint = "glDrawArraysInstancedEXT")]
		[RequiredByFeature("GL_EXT_instanced_arrays", Api = "gles2", EntryPoint = "glDrawArraysInstancedEXT")]
		[RequiredByFeature("GL_NV_draw_instanced", Api = "gles2", EntryPoint = "glDrawArraysInstancedNV")]
		[ThreadStatic]
		internal static glDrawArraysInstanced pglDrawArraysInstanced;

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ANGLE_instanced_arrays", Api = "gles2", EntryPoint = "glDrawElementsInstancedANGLE")]
		[RequiredByFeature("GL_ARB_draw_instanced", Api = "gl|glcore", EntryPoint = "glDrawElementsInstancedARB")]
		[RequiredByFeature("GL_EXT_draw_instanced", Api = "gl|glcore|gles2", EntryPoint = "glDrawElementsInstancedEXT")]
		[RequiredByFeature("GL_EXT_instanced_arrays", Api = "gles2", EntryPoint = "glDrawElementsInstancedEXT")]
		[RequiredByFeature("GL_NV_draw_instanced", Api = "gles2", EntryPoint = "glDrawElementsInstancedNV")]
		[ThreadStatic]
		internal static glDrawElementsInstanced pglDrawElementsInstanced;

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_buffer_object", Api = "gl|glcore", EntryPoint = "glTexBufferARB")]
		[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2", EntryPoint = "glTexBufferEXT")]
		[RequiredByFeature("GL_EXT_texture_buffer_object", EntryPoint = "glTexBufferEXT")]
		[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2", EntryPoint = "glTexBufferOES")]
		[ThreadStatic]
		internal static glTexBuffer pglTexBuffer;

		[RequiredByFeature("GL_VERSION_3_1")]
		[ThreadStatic]
		internal static glPrimitiveRestartIndex pglPrimitiveRestartIndex;

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_copy_buffer", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_copy_buffer", Api = "gles2", EntryPoint = "glCopyBufferSubDataNV")]
		[ThreadStatic]
		internal static glCopyBufferSubData pglCopyBufferSubData;

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetUniformIndices pglGetUniformIndices;

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetActiveUniformsiv pglGetActiveUniformsiv;

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetActiveUniformName pglGetActiveUniformName;

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetUniformBlockIndex pglGetUniformBlockIndex;

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetActiveUniformBlockiv pglGetActiveUniformBlockiv;

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetActiveUniformBlockName pglGetActiveUniformBlockName;

		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniformBlockBinding pglUniformBlockBinding;

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_draw_elements_base_vertex", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_elements_base_vertex", Api = "gles2", EntryPoint = "glDrawElementsBaseVertexEXT")]
		[RequiredByFeature("GL_OES_draw_elements_base_vertex", Api = "gles2", EntryPoint = "glDrawElementsBaseVertexOES")]
		[ThreadStatic]
		internal static glDrawElementsBaseVertex pglDrawElementsBaseVertex;

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_draw_elements_base_vertex", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_elements_base_vertex", Api = "gles2", EntryPoint = "glDrawRangeElementsBaseVertexEXT")]
		[RequiredByFeature("GL_OES_draw_elements_base_vertex", Api = "gles2", EntryPoint = "glDrawRangeElementsBaseVertexOES")]
		[ThreadStatic]
		internal static glDrawRangeElementsBaseVertex pglDrawRangeElementsBaseVertex;

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_draw_elements_base_vertex", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_elements_base_vertex", Api = "gles2", EntryPoint = "glDrawElementsInstancedBaseVertexEXT")]
		[RequiredByFeature("GL_OES_draw_elements_base_vertex", Api = "gles2", EntryPoint = "glDrawElementsInstancedBaseVertexOES")]
		[ThreadStatic]
		internal static glDrawElementsInstancedBaseVertex pglDrawElementsInstancedBaseVertex;

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ARB_draw_elements_base_vertex", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_elements_base_vertex", Api = "gles2", EntryPoint = "glMultiDrawElementsBaseVertexEXT")]
		[RequiredByFeature("GL_OES_draw_elements_base_vertex", Api = "gles2", EntryPoint = "glMultiDrawElementsBaseVertexEXT")]
		[ThreadStatic]
		internal static glMultiDrawElementsBaseVertex pglMultiDrawElementsBaseVertex;

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ARB_provoking_vertex", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_provoking_vertex", EntryPoint = "glProvokingVertexEXT")]
		[ThreadStatic]
		internal static glProvokingVertex pglProvokingVertex;

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2", EntryPoint = "glFenceSyncAPPLE")]
		[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glFenceSync pglFenceSync;

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2", EntryPoint = "glIsSyncAPPLE")]
		[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glIsSync pglIsSync;

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2", EntryPoint = "glDeleteSyncAPPLE")]
		[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDeleteSync pglDeleteSync;

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2", EntryPoint = "glClientWaitSyncAPPLE")]
		[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glClientWaitSync pglClientWaitSync;

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2", EntryPoint = "glWaitSyncAPPLE")]
		[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glWaitSync pglWaitSync;

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2", EntryPoint = "glGetInteger64vAPPLE")]
		[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2", EntryPoint = "glGetInteger64vEXT")]
		[ThreadStatic]
		internal static glGetInteger64v pglGetInteger64v;

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2", EntryPoint = "glGetSyncivAPPLE")]
		[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetSynciv pglGetSynciv;

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[ThreadStatic]
		internal static glGetInteger64i_v pglGetInteger64i_v;

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[ThreadStatic]
		internal static glGetBufferParameteri64v pglGetBufferParameteri64v;

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore", EntryPoint = "glFramebufferTextureARB")]
		[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2", EntryPoint = "glFramebufferTextureEXT")]
		[RequiredByFeature("GL_NV_geometry_program4", EntryPoint = "glFramebufferTextureEXT")]
		[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2", EntryPoint = "glFramebufferTextureOES")]
		[ThreadStatic]
		internal static glFramebufferTexture pglFramebufferTexture;

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTexImage2DMultisample pglTexImage2DMultisample;

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTexImage3DMultisample pglTexImage3DMultisample;

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_explicit_multisample", EntryPoint = "glGetMultisamplefvNV")]
		[ThreadStatic]
		internal static glGetMultisamplefv pglGetMultisamplefv;

		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glSampleMaski pglSampleMaski;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_blend_func_extended", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_blend_func_extended", Api = "gles2", EntryPoint = "glBindFragDataLocationIndexedEXT")]
		[ThreadStatic]
		internal static glBindFragDataLocationIndexed pglBindFragDataLocationIndexed;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_blend_func_extended", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_blend_func_extended", Api = "gles2", EntryPoint = "glGetFragDataIndexEXT")]
		[ThreadStatic]
		internal static glGetFragDataIndex pglGetFragDataIndex;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGenSamplers pglGenSamplers;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDeleteSamplers pglDeleteSamplers;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glIsSampler pglIsSampler;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glBindSampler pglBindSampler;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glSamplerParameteri pglSamplerParameteri;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glSamplerParameteriv pglSamplerParameteriv;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glSamplerParameterf pglSamplerParameterf;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glSamplerParameterfv pglSamplerParameterfv;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2", EntryPoint = "glSamplerParameterIivEXT")]
		[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2", EntryPoint = "glSamplerParameterIivOES")]
		[ThreadStatic]
		internal static glSamplerParameterIiv pglSamplerParameterIiv;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2", EntryPoint = "glSamplerParameterIuivEXT")]
		[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2", EntryPoint = "glSamplerParameterIuivOES")]
		[ThreadStatic]
		internal static glSamplerParameterIuiv pglSamplerParameterIuiv;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetSamplerParameteriv pglGetSamplerParameteriv;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2", EntryPoint = "glGetSamplerParameterIivEXT")]
		[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2", EntryPoint = "glGetSamplerParameterIivOES")]
		[ThreadStatic]
		internal static glGetSamplerParameterIiv pglGetSamplerParameterIiv;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetSamplerParameterfv pglGetSamplerParameterfv;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2", EntryPoint = "glGetSamplerParameterIuivEXT")]
		[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2", EntryPoint = "glGetSamplerParameterIuivOES")]
		[ThreadStatic]
		internal static glGetSamplerParameterIuiv pglGetSamplerParameterIuiv;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_timer_query", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2", EntryPoint = "glQueryCounterEXT")]
		[ThreadStatic]
		internal static glQueryCounter pglQueryCounter;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_timer_query", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2", EntryPoint = "glGetQueryObjecti64vEXT")]
		[RequiredByFeature("GL_EXT_timer_query", EntryPoint = "glGetQueryObjecti64vEXT")]
		[ThreadStatic]
		internal static glGetQueryObjecti64v pglGetQueryObjecti64v;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_timer_query", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2", EntryPoint = "glGetQueryObjectui64vEXT")]
		[RequiredByFeature("GL_EXT_timer_query", EntryPoint = "glGetQueryObjectui64vEXT")]
		[ThreadStatic]
		internal static glGetQueryObjectui64v pglGetQueryObjectui64v;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ANGLE_instanced_arrays", Api = "gles2", EntryPoint = "glVertexAttribDivisorANGLE")]
		[RequiredByFeature("GL_ARB_instanced_arrays", Api = "gl|glcore", EntryPoint = "glVertexAttribDivisorARB")]
		[RequiredByFeature("GL_EXT_instanced_arrays", Api = "gles2", EntryPoint = "glVertexAttribDivisorEXT")]
		[RequiredByFeature("GL_NV_instanced_arrays", Api = "gles2", EntryPoint = "glVertexAttribDivisorNV")]
		[ThreadStatic]
		internal static glVertexAttribDivisor pglVertexAttribDivisor;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribP1ui pglVertexAttribP1ui;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribP1uiv pglVertexAttribP1uiv;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribP2ui pglVertexAttribP2ui;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribP2uiv pglVertexAttribP2uiv;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribP3ui pglVertexAttribP3ui;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribP3uiv pglVertexAttribP3uiv;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribP4ui pglVertexAttribP4ui;

		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribP4uiv pglVertexAttribP4uiv;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glVertexP2ui pglVertexP2ui;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glVertexP2uiv pglVertexP2uiv;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glVertexP3ui pglVertexP3ui;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glVertexP3uiv pglVertexP3uiv;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glVertexP4ui pglVertexP4ui;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glVertexP4uiv pglVertexP4uiv;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glTexCoordP1ui pglTexCoordP1ui;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glTexCoordP1uiv pglTexCoordP1uiv;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glTexCoordP2ui pglTexCoordP2ui;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glTexCoordP2uiv pglTexCoordP2uiv;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glTexCoordP3ui pglTexCoordP3ui;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glTexCoordP3uiv pglTexCoordP3uiv;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glTexCoordP4ui pglTexCoordP4ui;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glTexCoordP4uiv pglTexCoordP4uiv;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glMultiTexCoordP1ui pglMultiTexCoordP1ui;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glMultiTexCoordP1uiv pglMultiTexCoordP1uiv;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glMultiTexCoordP2ui pglMultiTexCoordP2ui;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glMultiTexCoordP2uiv pglMultiTexCoordP2uiv;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glMultiTexCoordP3ui pglMultiTexCoordP3ui;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glMultiTexCoordP3uiv pglMultiTexCoordP3uiv;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glMultiTexCoordP4ui pglMultiTexCoordP4ui;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glMultiTexCoordP4uiv pglMultiTexCoordP4uiv;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glNormalP3ui pglNormalP3ui;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glNormalP3uiv pglNormalP3uiv;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glColorP3ui pglColorP3ui;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glColorP3uiv pglColorP3uiv;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glColorP4ui pglColorP4ui;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glColorP4uiv pglColorP4uiv;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glSecondaryColorP3ui pglSecondaryColorP3ui;

		[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
		[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
		[ThreadStatic]
		internal static glSecondaryColorP3uiv pglSecondaryColorP3uiv;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sample_shading", Api = "gl|glcore", EntryPoint = "glMinSampleShadingARB")]
		[RequiredByFeature("GL_OES_sample_shading", Api = "gles2", EntryPoint = "glMinSampleShadingOES")]
		[ThreadStatic]
		internal static glMinSampleShading pglMinSampleShading;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_AMD_draw_buffers_blend", EntryPoint = "glBlendEquationIndexedAMD")]
		[RequiredByFeature("GL_ARB_draw_buffers_blend", Api = "gl|glcore", EntryPoint = "glBlendEquationiARB")]
		[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2", EntryPoint = "glBlendEquationiEXT")]
		[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2", EntryPoint = "glBlendEquationiOES")]
		[ThreadStatic]
		internal static glBlendEquationi pglBlendEquationi;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_AMD_draw_buffers_blend", EntryPoint = "glBlendEquationSeparateIndexedAMD")]
		[RequiredByFeature("GL_ARB_draw_buffers_blend", Api = "gl|glcore", EntryPoint = "glBlendEquationSeparateiARB")]
		[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2", EntryPoint = "glBlendEquationSeparateiEXT")]
		[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2", EntryPoint = "glBlendEquationSeparateiOES")]
		[ThreadStatic]
		internal static glBlendEquationSeparatei pglBlendEquationSeparatei;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_AMD_draw_buffers_blend", EntryPoint = "glBlendFuncIndexedAMD")]
		[RequiredByFeature("GL_ARB_draw_buffers_blend", Api = "gl|glcore", EntryPoint = "glBlendFunciARB")]
		[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2", EntryPoint = "glBlendFunciEXT")]
		[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2", EntryPoint = "glBlendFunciOES")]
		[ThreadStatic]
		internal static glBlendFunci pglBlendFunci;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_AMD_draw_buffers_blend", EntryPoint = "glBlendFuncSeparateIndexedAMD")]
		[RequiredByFeature("GL_ARB_draw_buffers_blend", Api = "gl|glcore", EntryPoint = "glBlendFuncSeparateiARB")]
		[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2", EntryPoint = "glBlendFuncSeparateiEXT")]
		[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2", EntryPoint = "glBlendFuncSeparateiOES")]
		[ThreadStatic]
		internal static glBlendFuncSeparatei pglBlendFuncSeparatei;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_draw_indirect", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDrawArraysIndirect pglDrawArraysIndirect;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_draw_indirect", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDrawElementsIndirect pglDrawElementsIndirect;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform1d pglUniform1d;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform2d pglUniform2d;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform3d pglUniform3d;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform4d pglUniform4d;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform1dv pglUniform1dv;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform2dv pglUniform2dv;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform3dv pglUniform3dv;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniform4dv pglUniform4dv;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniformMatrix2dv pglUniformMatrix2dv;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniformMatrix3dv pglUniformMatrix3dv;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniformMatrix4dv pglUniformMatrix4dv;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniformMatrix2x3dv pglUniformMatrix2x3dv;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniformMatrix2x4dv pglUniformMatrix2x4dv;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniformMatrix3x2dv pglUniformMatrix3x2dv;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniformMatrix3x4dv pglUniformMatrix3x4dv;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniformMatrix4x2dv pglUniformMatrix4x2dv;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniformMatrix4x3dv pglUniformMatrix4x3dv;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetUniformdv pglGetUniformdv;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetSubroutineUniformLocation pglGetSubroutineUniformLocation;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetSubroutineIndex pglGetSubroutineIndex;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetActiveSubroutineUniformiv pglGetActiveSubroutineUniformiv;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetActiveSubroutineUniformName pglGetActiveSubroutineUniformName;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetActiveSubroutineName pglGetActiveSubroutineName;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniformSubroutinesuiv pglUniformSubroutinesuiv;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetUniformSubroutineuiv pglGetUniformSubroutineuiv;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetProgramStageiv pglGetProgramStageiv;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2", EntryPoint = "glPatchParameteriEXT")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2", EntryPoint = "glPatchParameteriOES")]
		[ThreadStatic]
		internal static glPatchParameteri pglPatchParameteri;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glPatchParameterfv pglPatchParameterfv;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glBindTransformFeedback pglBindTransformFeedback;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_transform_feedback2", EntryPoint = "glDeleteTransformFeedbacksNV")]
		[ThreadStatic]
		internal static glDeleteTransformFeedbacks pglDeleteTransformFeedbacks;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_transform_feedback2", EntryPoint = "glGenTransformFeedbacksNV")]
		[ThreadStatic]
		internal static glGenTransformFeedbacks pglGenTransformFeedbacks;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_transform_feedback2", EntryPoint = "glIsTransformFeedbackNV")]
		[ThreadStatic]
		internal static glIsTransformFeedback pglIsTransformFeedback;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_transform_feedback2", EntryPoint = "glPauseTransformFeedbackNV")]
		[ThreadStatic]
		internal static glPauseTransformFeedback pglPauseTransformFeedback;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_transform_feedback2", EntryPoint = "glResumeTransformFeedbackNV")]
		[ThreadStatic]
		internal static glResumeTransformFeedback pglResumeTransformFeedback;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_transform_feedback", Api = "gles2", EntryPoint = "glDrawTransformFeedbackEXT")]
		[RequiredByFeature("GL_NV_transform_feedback2", EntryPoint = "glDrawTransformFeedbackNV")]
		[ThreadStatic]
		internal static glDrawTransformFeedback pglDrawTransformFeedback;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_transform_feedback3", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDrawTransformFeedbackStream pglDrawTransformFeedbackStream;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_transform_feedback3", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glBeginQueryIndexed pglBeginQueryIndexed;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_transform_feedback3", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glEndQueryIndexed pglEndQueryIndexed;

		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_transform_feedback3", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetQueryIndexediv pglGetQueryIndexediv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glReleaseShaderCompiler pglReleaseShaderCompiler;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glShaderBinary pglShaderBinary;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetShaderPrecisionFormat pglGetShaderPrecisionFormat;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_single_precision", Api = "gl|gles1", EntryPoint = "glDepthRangefOES")]
		[ThreadStatic]
		internal static glDepthRangef pglDepthRangef;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_single_precision", Api = "gl|gles1", EntryPoint = "glClearDepthfOES")]
		[ThreadStatic]
		internal static glClearDepthf pglClearDepthf;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_get_program_binary", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_get_program_binary", Api = "gles2", EntryPoint = "glGetProgramBinaryOES")]
		[ThreadStatic]
		internal static glGetProgramBinary pglGetProgramBinary;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_get_program_binary", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_get_program_binary", Api = "gles2", EntryPoint = "glProgramBinaryOES")]
		[ThreadStatic]
		internal static glProgramBinary pglProgramBinary;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore", EntryPoint = "glProgramParameteriARB")]
		[RequiredByFeature("GL_ARB_get_program_binary", Api = "gl|glcore")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_geometry_shader4", EntryPoint = "glProgramParameteriEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramParameteriEXT")]
		[ThreadStatic]
		internal static glProgramParameteri pglProgramParameteri;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUseProgramStages pglUseProgramStages;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glActiveShaderProgram pglActiveShaderProgram;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCreateShaderProgramv pglCreateShaderProgramv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glBindProgramPipeline pglBindProgramPipeline;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDeleteProgramPipelines pglDeleteProgramPipelines;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGenProgramPipelines pglGenProgramPipelines;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glIsProgramPipeline pglIsProgramPipeline;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetProgramPipelineiv pglGetProgramPipelineiv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform1iEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform1iEXT")]
		[ThreadStatic]
		internal static glProgramUniform1i pglProgramUniform1i;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform1ivEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform1ivEXT")]
		[ThreadStatic]
		internal static glProgramUniform1iv pglProgramUniform1iv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform1fEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform1fEXT")]
		[ThreadStatic]
		internal static glProgramUniform1f pglProgramUniform1f;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform1fvEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform1fvEXT")]
		[ThreadStatic]
		internal static glProgramUniform1fv pglProgramUniform1fv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform1d pglProgramUniform1d;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform1dv pglProgramUniform1dv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform1uiEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform1uiEXT")]
		[ThreadStatic]
		internal static glProgramUniform1ui pglProgramUniform1ui;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform1uivEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform1uivEXT")]
		[ThreadStatic]
		internal static glProgramUniform1uiv pglProgramUniform1uiv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform2iEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform2iEXT")]
		[ThreadStatic]
		internal static glProgramUniform2i pglProgramUniform2i;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform2ivEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform2ivEXT")]
		[ThreadStatic]
		internal static glProgramUniform2iv pglProgramUniform2iv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform2fEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform2fEXT")]
		[ThreadStatic]
		internal static glProgramUniform2f pglProgramUniform2f;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform2fvEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform2fvEXT")]
		[ThreadStatic]
		internal static glProgramUniform2fv pglProgramUniform2fv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform2d pglProgramUniform2d;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform2dv pglProgramUniform2dv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform2uiEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform2uiEXT")]
		[ThreadStatic]
		internal static glProgramUniform2ui pglProgramUniform2ui;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform2uivEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform2uivEXT")]
		[ThreadStatic]
		internal static glProgramUniform2uiv pglProgramUniform2uiv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform3iEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform3iEXT")]
		[ThreadStatic]
		internal static glProgramUniform3i pglProgramUniform3i;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform3ivEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform3ivEXT")]
		[ThreadStatic]
		internal static glProgramUniform3iv pglProgramUniform3iv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform3fEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform3fEXT")]
		[ThreadStatic]
		internal static glProgramUniform3f pglProgramUniform3f;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform3fvEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform3fvEXT")]
		[ThreadStatic]
		internal static glProgramUniform3fv pglProgramUniform3fv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform3d pglProgramUniform3d;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform3dv pglProgramUniform3dv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform3uiEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform3uiEXT")]
		[ThreadStatic]
		internal static glProgramUniform3ui pglProgramUniform3ui;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform3uivEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform3uivEXT")]
		[ThreadStatic]
		internal static glProgramUniform3uiv pglProgramUniform3uiv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform4iEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform4iEXT")]
		[ThreadStatic]
		internal static glProgramUniform4i pglProgramUniform4i;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform4ivEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform4ivEXT")]
		[ThreadStatic]
		internal static glProgramUniform4iv pglProgramUniform4iv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform4fEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform4fEXT")]
		[ThreadStatic]
		internal static glProgramUniform4f pglProgramUniform4f;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform4fvEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform4fvEXT")]
		[ThreadStatic]
		internal static glProgramUniform4fv pglProgramUniform4fv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform4d pglProgramUniform4d;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniform4dv pglProgramUniform4dv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform4uiEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform4uiEXT")]
		[ThreadStatic]
		internal static glProgramUniform4ui pglProgramUniform4ui;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniform4uivEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniform4uivEXT")]
		[ThreadStatic]
		internal static glProgramUniform4uiv pglProgramUniform4uiv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniformMatrix2fvEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniformMatrix2fvEXT")]
		[ThreadStatic]
		internal static glProgramUniformMatrix2fv pglProgramUniformMatrix2fv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniformMatrix3fvEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniformMatrix3fvEXT")]
		[ThreadStatic]
		internal static glProgramUniformMatrix3fv pglProgramUniformMatrix3fv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniformMatrix4fvEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniformMatrix4fvEXT")]
		[ThreadStatic]
		internal static glProgramUniformMatrix4fv pglProgramUniformMatrix4fv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniformMatrix2dv pglProgramUniformMatrix2dv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniformMatrix3dv pglProgramUniformMatrix3dv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniformMatrix4dv pglProgramUniformMatrix4dv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
		[ThreadStatic]
		internal static glProgramUniformMatrix2x3fv pglProgramUniformMatrix2x3fv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
		[ThreadStatic]
		internal static glProgramUniformMatrix3x2fv pglProgramUniformMatrix3x2fv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
		[ThreadStatic]
		internal static glProgramUniformMatrix2x4fv pglProgramUniformMatrix2x4fv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
		[ThreadStatic]
		internal static glProgramUniformMatrix4x2fv pglProgramUniformMatrix4x2fv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
		[ThreadStatic]
		internal static glProgramUniformMatrix3x4fv pglProgramUniformMatrix3x4fv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
		[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
		[ThreadStatic]
		internal static glProgramUniformMatrix4x3fv pglProgramUniformMatrix4x3fv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniformMatrix2x3dv pglProgramUniformMatrix2x3dv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniformMatrix3x2dv pglProgramUniformMatrix3x2dv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniformMatrix2x4dv pglProgramUniformMatrix2x4dv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniformMatrix4x2dv pglProgramUniformMatrix4x2dv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniformMatrix3x4dv pglProgramUniformMatrix3x4dv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniformMatrix4x3dv pglProgramUniformMatrix4x3dv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glValidateProgramPipeline pglValidateProgramPipeline;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetProgramPipelineInfoLog pglGetProgramPipelineInfoLog;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL1dEXT")]
		[ThreadStatic]
		internal static glVertexAttribL1d pglVertexAttribL1d;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL2dEXT")]
		[ThreadStatic]
		internal static glVertexAttribL2d pglVertexAttribL2d;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL3dEXT")]
		[ThreadStatic]
		internal static glVertexAttribL3d pglVertexAttribL3d;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL4dEXT")]
		[ThreadStatic]
		internal static glVertexAttribL4d pglVertexAttribL4d;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL1dvEXT")]
		[ThreadStatic]
		internal static glVertexAttribL1dv pglVertexAttribL1dv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL2dvEXT")]
		[ThreadStatic]
		internal static glVertexAttribL2dv pglVertexAttribL2dv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL3dvEXT")]
		[ThreadStatic]
		internal static glVertexAttribL3dv pglVertexAttribL3dv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL4dvEXT")]
		[ThreadStatic]
		internal static glVertexAttribL4dv pglVertexAttribL4dv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointerEXT")]
		[ThreadStatic]
		internal static glVertexAttribLPointer pglVertexAttribLPointer;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_vertex_attrib_64bit", EntryPoint = "glGetVertexAttribLdvEXT")]
		[ThreadStatic]
		internal static glGetVertexAttribLdv pglGetVertexAttribLdv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2", EntryPoint = "glViewportArrayvNV")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2", EntryPoint = "glViewportArrayvOES")]
		[ThreadStatic]
		internal static glViewportArrayv pglViewportArrayv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2", EntryPoint = "glViewportIndexedfNV")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2", EntryPoint = "glViewportIndexedfOES")]
		[ThreadStatic]
		internal static glViewportIndexedf pglViewportIndexedf;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2", EntryPoint = "glViewportIndexedfvNV")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2", EntryPoint = "glViewportIndexedfvOES")]
		[ThreadStatic]
		internal static glViewportIndexedfv pglViewportIndexedfv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2", EntryPoint = "glScissorArrayvNV")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2", EntryPoint = "glScissorArrayvOES")]
		[ThreadStatic]
		internal static glScissorArrayv pglScissorArrayv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2", EntryPoint = "glScissorIndexedNV")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2", EntryPoint = "glScissorIndexedOES")]
		[ThreadStatic]
		internal static glScissorIndexed pglScissorIndexed;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2", EntryPoint = "glScissorIndexedvNV")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2", EntryPoint = "glScissorIndexedvOES")]
		[ThreadStatic]
		internal static glScissorIndexedv pglScissorIndexedv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDepthRangeArrayv pglDepthRangeArrayv;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDepthRangeIndexed pglDepthRangeIndexed;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glGetFloatIndexedvEXT")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glGetFloatIndexedvEXT")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2", EntryPoint = "glGetFloati_vNV")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2", EntryPoint = "glGetFloati_vOES")]
		[ThreadStatic]
		internal static glGetFloati_v pglGetFloati_v;

		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glGetDoubleIndexedvEXT")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glGetDoubleIndexedvEXT")]
		[ThreadStatic]
		internal static glGetDoublei_v pglGetDoublei_v;

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ARB_base_instance", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_base_instance", Api = "gles2", EntryPoint = "glDrawArraysInstancedBaseInstanceEXT")]
		[ThreadStatic]
		internal static glDrawArraysInstancedBaseInstance pglDrawArraysInstancedBaseInstance;

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ARB_base_instance", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_base_instance", Api = "gles2", EntryPoint = "glDrawElementsInstancedBaseInstanceEXT")]
		[ThreadStatic]
		internal static glDrawElementsInstancedBaseInstance pglDrawElementsInstancedBaseInstance;

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ARB_base_instance", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_base_instance", Api = "gles2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstanceEXT")]
		[ThreadStatic]
		internal static glDrawElementsInstancedBaseVertexBaseInstance pglDrawElementsInstancedBaseVertexBaseInstance;

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_internalformat_query", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetInternalformativ pglGetInternalformativ;

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetActiveAtomicCounterBufferiv pglGetActiveAtomicCounterBufferiv;

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glBindImageTexture pglBindImageTexture;

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_shader_image_load_store", EntryPoint = "glMemoryBarrierEXT")]
		[ThreadStatic]
		internal static glMemoryBarrier pglMemoryBarrier;

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ARB_texture_storage", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore", EntryPoint = "glTexStorage1DEXT")]
		[ThreadStatic]
		internal static glTexStorage1D pglTexStorage1D;

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_texture_storage", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore", EntryPoint = "glTexStorage2DEXT")]
		[ThreadStatic]
		internal static glTexStorage2D pglTexStorage2D;

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_storage", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore", EntryPoint = "glTexStorage3DEXT")]
		[ThreadStatic]
		internal static glTexStorage3D pglTexStorage3D;

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ARB_transform_feedback_instanced", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_transform_feedback", Api = "gles2", EntryPoint = "glDrawTransformFeedbackInstancedEXT")]
		[ThreadStatic]
		internal static glDrawTransformFeedbackInstanced pglDrawTransformFeedbackInstanced;

		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ARB_transform_feedback_instanced", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDrawTransformFeedbackStreamInstanced pglDrawTransformFeedbackStreamInstanced;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_clear_buffer_object", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glClearBufferData pglClearBufferData;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_clear_buffer_object", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glClearBufferSubData pglClearBufferSubData;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDispatchCompute pglDispatchCompute;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDispatchComputeIndirect pglDispatchComputeIndirect;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_copy_image", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_copy_image", Api = "gles2", EntryPoint = "glCopyImageSubDataEXT")]
		[RequiredByFeature("GL_OES_copy_image", Api = "gles2", EntryPoint = "glCopyImageSubDataOES")]
		[ThreadStatic]
		internal static glCopyImageSubData pglCopyImageSubData;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glFramebufferParameteri pglFramebufferParameteri;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetFramebufferParameteriv pglGetFramebufferParameteriv;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetInternalformati64v pglGetInternalformati64v;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glInvalidateTexSubImage pglInvalidateTexSubImage;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glInvalidateTexImage pglInvalidateTexImage;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glInvalidateBufferSubData pglInvalidateBufferSubData;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glInvalidateBufferData pglInvalidateBufferData;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glInvalidateFramebuffer pglInvalidateFramebuffer;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glInvalidateSubFramebuffer pglInvalidateSubFramebuffer;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_AMD_multi_draw_indirect", EntryPoint = "glMultiDrawArraysIndirectAMD")]
		[RequiredByFeature("GL_ARB_multi_draw_indirect", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_multi_draw_indirect", Api = "gles2", EntryPoint = "glMultiDrawArraysIndirectEXT")]
		[ThreadStatic]
		internal static glMultiDrawArraysIndirect pglMultiDrawArraysIndirect;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_AMD_multi_draw_indirect", EntryPoint = "glMultiDrawElementsIndirectAMD")]
		[RequiredByFeature("GL_ARB_multi_draw_indirect", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_multi_draw_indirect", Api = "gles2", EntryPoint = "glMultiDrawElementsIndirectEXT")]
		[ThreadStatic]
		internal static glMultiDrawElementsIndirect pglMultiDrawElementsIndirect;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetProgramInterfaceiv pglGetProgramInterfaceiv;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetProgramResourceIndex pglGetProgramResourceIndex;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetProgramResourceName pglGetProgramResourceName;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetProgramResourceiv pglGetProgramResourceiv;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetProgramResourceLocation pglGetProgramResourceLocation;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetProgramResourceLocationIndex pglGetProgramResourceLocationIndex;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glShaderStorageBlockBinding pglShaderStorageBlockBinding;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_buffer_range", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2", EntryPoint = "glTexBufferRangeEXT")]
		[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2", EntryPoint = "glTexBufferRangeOES")]
		[ThreadStatic]
		internal static glTexBufferRange pglTexBufferRange;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_storage_multisample", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTexStorage2DMultisample pglTexStorage2DMultisample;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_storage_multisample", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_texture_storage_multisample_2d_array", Api = "gles2", EntryPoint = "glTexStorage3DMultisampleOES")]
		[ThreadStatic]
		internal static glTexStorage3DMultisample pglTexStorage3DMultisample;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_texture_view", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_view", Api = "gles2", EntryPoint = "glTextureViewEXT")]
		[RequiredByFeature("GL_OES_texture_view", Api = "gles2", EntryPoint = "glTextureViewOES")]
		[ThreadStatic]
		internal static glTextureView pglTextureView;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glBindVertexBuffer pglBindVertexBuffer;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribFormat pglVertexAttribFormat;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribIFormat pglVertexAttribIFormat;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribLFormat pglVertexAttribLFormat;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribBinding pglVertexAttribBinding;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexBindingDivisor pglVertexBindingDivisor;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore", EntryPoint = "glDebugMessageControlARB")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2", EntryPoint = "glDebugMessageControlKHR")]
		[ThreadStatic]
		internal static glDebugMessageControl pglDebugMessageControl;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore", EntryPoint = "glDebugMessageInsertARB")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2", EntryPoint = "glDebugMessageInsertKHR")]
		[ThreadStatic]
		internal static glDebugMessageInsert pglDebugMessageInsert;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore", EntryPoint = "glDebugMessageCallbackARB")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2", EntryPoint = "glDebugMessageCallbackKHR")]
		[ThreadStatic]
		internal static glDebugMessageCallback pglDebugMessageCallback;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore", EntryPoint = "glGetDebugMessageLogARB")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2", EntryPoint = "glGetDebugMessageLogKHR")]
		[ThreadStatic]
		internal static glGetDebugMessageLog pglGetDebugMessageLog;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2", EntryPoint = "glPushDebugGroupKHR")]
		[ThreadStatic]
		internal static glPushDebugGroup pglPushDebugGroup;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2", EntryPoint = "glPopDebugGroupKHR")]
		[ThreadStatic]
		internal static glPopDebugGroup pglPopDebugGroup;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2", EntryPoint = "glObjectLabelKHR")]
		[ThreadStatic]
		internal static glObjectLabel pglObjectLabel;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2", EntryPoint = "glGetObjectLabelKHR")]
		[ThreadStatic]
		internal static glGetObjectLabel pglGetObjectLabel;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2", EntryPoint = "glObjectPtrLabelKHR")]
		[ThreadStatic]
		internal static glObjectPtrLabel pglObjectPtrLabel;

		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_KHR_debug")]
		[RequiredByFeature("GL_KHR_debug", Api = "gles2", EntryPoint = "glGetObjectPtrLabelKHR")]
		[ThreadStatic]
		internal static glGetObjectPtrLabel pglGetObjectPtrLabel;

		[RequiredByFeature("GL_VERSION_4_4")]
		[RequiredByFeature("GL_ARB_buffer_storage", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_buffer_storage", Api = "gles2", EntryPoint = "glBufferStorageEXT")]
		[ThreadStatic]
		internal static glBufferStorage pglBufferStorage;

		[RequiredByFeature("GL_VERSION_4_4")]
		[RequiredByFeature("GL_ARB_clear_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_clear_texture", Api = "gles2", EntryPoint = "glClearTexImageEXT")]
		[ThreadStatic]
		internal static glClearTexImage pglClearTexImage;

		[RequiredByFeature("GL_VERSION_4_4")]
		[RequiredByFeature("GL_ARB_clear_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_clear_texture", Api = "gles2", EntryPoint = "glClearTexSubImageEXT")]
		[ThreadStatic]
		internal static glClearTexSubImage pglClearTexSubImage;

		[RequiredByFeature("GL_VERSION_4_4")]
		[RequiredByFeature("GL_ARB_multi_bind", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glBindBuffersBase pglBindBuffersBase;

		[RequiredByFeature("GL_VERSION_4_4")]
		[RequiredByFeature("GL_ARB_multi_bind", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glBindBuffersRange pglBindBuffersRange;

		[RequiredByFeature("GL_VERSION_4_4")]
		[RequiredByFeature("GL_ARB_multi_bind", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glBindTextures pglBindTextures;

		[RequiredByFeature("GL_VERSION_4_4")]
		[RequiredByFeature("GL_ARB_multi_bind", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glBindSamplers pglBindSamplers;

		[RequiredByFeature("GL_VERSION_4_4")]
		[RequiredByFeature("GL_ARB_multi_bind", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glBindImageTextures pglBindImageTextures;

		[RequiredByFeature("GL_VERSION_4_4")]
		[RequiredByFeature("GL_ARB_multi_bind", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glBindVertexBuffers pglBindVertexBuffers;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_clip_control", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_clip_control", Api = "gles2", EntryPoint = "glClipControlEXT")]
		[ThreadStatic]
		internal static glClipControl pglClipControl;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCreateTransformFeedbacks pglCreateTransformFeedbacks;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTransformFeedbackBufferBase pglTransformFeedbackBufferBase;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTransformFeedbackBufferRange pglTransformFeedbackBufferRange;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetTransformFeedbackiv pglGetTransformFeedbackiv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetTransformFeedbacki_v pglGetTransformFeedbacki_v;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetTransformFeedbacki64_v pglGetTransformFeedbacki64_v;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCreateBuffers pglCreateBuffers;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glNamedBufferStorageEXT")]
		[ThreadStatic]
		internal static glNamedBufferStorage pglNamedBufferStorage;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedBufferData pglNamedBufferData;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore", EntryPoint = "glNamedBufferSubDataEXT")]
		[ThreadStatic]
		internal static glNamedBufferSubData pglNamedBufferSubData;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCopyNamedBufferSubData pglCopyNamedBufferSubData;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glClearNamedBufferData pglClearNamedBufferData;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glClearNamedBufferSubData pglClearNamedBufferSubData;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMapNamedBuffer pglMapNamedBuffer;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMapNamedBufferRange pglMapNamedBufferRange;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUnmapNamedBuffer pglUnmapNamedBuffer;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glFlushMappedNamedBufferRange pglFlushMappedNamedBufferRange;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedBufferParameteriv pglGetNamedBufferParameteriv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedBufferParameteri64v pglGetNamedBufferParameteri64v;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedBufferPointerv pglGetNamedBufferPointerv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedBufferSubData pglGetNamedBufferSubData;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCreateFramebuffers pglCreateFramebuffers;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedFramebufferRenderbuffer pglNamedFramebufferRenderbuffer;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedFramebufferParameteri pglNamedFramebufferParameteri;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedFramebufferTexture pglNamedFramebufferTexture;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedFramebufferTextureLayer pglNamedFramebufferTextureLayer;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedFramebufferDrawBuffer pglNamedFramebufferDrawBuffer;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedFramebufferDrawBuffers pglNamedFramebufferDrawBuffers;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedFramebufferReadBuffer pglNamedFramebufferReadBuffer;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glInvalidateNamedFramebufferData pglInvalidateNamedFramebufferData;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glInvalidateNamedFramebufferSubData pglInvalidateNamedFramebufferSubData;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glClearNamedFramebufferiv pglClearNamedFramebufferiv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glClearNamedFramebufferuiv pglClearNamedFramebufferuiv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glClearNamedFramebufferfv pglClearNamedFramebufferfv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glClearNamedFramebufferfi pglClearNamedFramebufferfi;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glBlitNamedFramebuffer pglBlitNamedFramebuffer;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCheckNamedFramebufferStatus pglCheckNamedFramebufferStatus;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedFramebufferParameteriv pglGetNamedFramebufferParameteriv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedFramebufferAttachmentParameteriv pglGetNamedFramebufferAttachmentParameteriv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCreateRenderbuffers pglCreateRenderbuffers;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedRenderbufferStorage pglNamedRenderbufferStorage;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNamedRenderbufferStorageMultisample pglNamedRenderbufferStorageMultisample;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedRenderbufferParameteriv pglGetNamedRenderbufferParameteriv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCreateTextures pglCreateTextures;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureBuffer pglTextureBuffer;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureBufferRange pglTextureBufferRange;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureStorage1D pglTextureStorage1D;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureStorage2D pglTextureStorage2D;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureStorage3D pglTextureStorage3D;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureStorage2DMultisample pglTextureStorage2DMultisample;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureStorage3DMultisample pglTextureStorage3DMultisample;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureSubImage1D pglTextureSubImage1D;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureSubImage2D pglTextureSubImage2D;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureSubImage3D pglTextureSubImage3D;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCompressedTextureSubImage1D pglCompressedTextureSubImage1D;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCompressedTextureSubImage2D pglCompressedTextureSubImage2D;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCompressedTextureSubImage3D pglCompressedTextureSubImage3D;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCopyTextureSubImage1D pglCopyTextureSubImage1D;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCopyTextureSubImage2D pglCopyTextureSubImage2D;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCopyTextureSubImage3D pglCopyTextureSubImage3D;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureParameterf pglTextureParameterf;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureParameterfv pglTextureParameterfv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureParameteri pglTextureParameteri;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureParameterIiv pglTextureParameterIiv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureParameterIuiv pglTextureParameterIuiv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureParameteriv pglTextureParameteriv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGenerateTextureMipmap pglGenerateTextureMipmap;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glBindTextureUnit pglBindTextureUnit;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetTextureImage pglGetTextureImage;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetCompressedTextureImage pglGetCompressedTextureImage;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetTextureLevelParameterfv pglGetTextureLevelParameterfv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetTextureLevelParameteriv pglGetTextureLevelParameteriv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetTextureParameterfv pglGetTextureParameterfv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetTextureParameterIiv pglGetTextureParameterIiv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetTextureParameterIuiv pglGetTextureParameterIuiv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetTextureParameteriv pglGetTextureParameteriv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCreateVertexArrays pglCreateVertexArrays;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDisableVertexArrayAttrib pglDisableVertexArrayAttrib;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glEnableVertexArrayAttrib pglEnableVertexArrayAttrib;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayElementBuffer pglVertexArrayElementBuffer;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayVertexBuffer pglVertexArrayVertexBuffer;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayVertexBuffers pglVertexArrayVertexBuffers;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayAttribBinding pglVertexArrayAttribBinding;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayAttribFormat pglVertexArrayAttribFormat;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayAttribIFormat pglVertexArrayAttribIFormat;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayAttribLFormat pglVertexArrayAttribLFormat;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexArrayBindingDivisor pglVertexArrayBindingDivisor;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetVertexArrayiv pglGetVertexArrayiv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetVertexArrayIndexediv pglGetVertexArrayIndexediv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetVertexArrayIndexed64iv pglGetVertexArrayIndexed64iv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCreateSamplers pglCreateSamplers;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCreateProgramPipelines pglCreateProgramPipelines;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCreateQueries pglCreateQueries;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetQueryBufferObjecti64v pglGetQueryBufferObjecti64v;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetQueryBufferObjectiv pglGetQueryBufferObjectiv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetQueryBufferObjectui64v pglGetQueryBufferObjectui64v;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetQueryBufferObjectuiv pglGetQueryBufferObjectuiv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_ES3_1_compatibility", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMemoryBarrierByRegion pglMemoryBarrierByRegion;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_get_texture_sub_image", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetTextureSubImage pglGetTextureSubImage;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_get_texture_sub_image", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetCompressedTextureSubImage pglGetCompressedTextureSubImage;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_EXT_robustness", Api = "gles1|gles2", EntryPoint = "glGetGraphicsResetStatusEXT")]
		[RequiredByFeature("GL_KHR_robustness")]
		[RequiredByFeature("GL_KHR_robustness", Api = "gles2", EntryPoint = "glGetGraphicsResetStatusKHR")]
		[ThreadStatic]
		internal static glGetGraphicsResetStatus pglGetGraphicsResetStatus;

		[RequiredByFeature("GL_VERSION_4_5")]
		[ThreadStatic]
		internal static glGetnCompressedTexImage pglGetnCompressedTexImage;

		[RequiredByFeature("GL_VERSION_4_5")]
		[ThreadStatic]
		internal static glGetnTexImage pglGetnTexImage;

		[RequiredByFeature("GL_VERSION_4_5")]
		[ThreadStatic]
		internal static glGetnUniformdv pglGetnUniformdv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_EXT_robustness", Api = "gles1|gles2", EntryPoint = "glGetnUniformfvEXT")]
		[RequiredByFeature("GL_KHR_robustness")]
		[RequiredByFeature("GL_KHR_robustness", Api = "gles2", EntryPoint = "glGetnUniformfvKHR")]
		[ThreadStatic]
		internal static glGetnUniformfv pglGetnUniformfv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_EXT_robustness", Api = "gles1|gles2", EntryPoint = "glGetnUniformivEXT")]
		[RequiredByFeature("GL_KHR_robustness")]
		[RequiredByFeature("GL_KHR_robustness", Api = "gles2", EntryPoint = "glGetnUniformivKHR")]
		[ThreadStatic]
		internal static glGetnUniformiv pglGetnUniformiv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_KHR_robustness")]
		[RequiredByFeature("GL_KHR_robustness", Api = "gles2", EntryPoint = "glGetnUniformuivKHR")]
		[ThreadStatic]
		internal static glGetnUniformuiv pglGetnUniformuiv;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore", EntryPoint = "glReadnPixelsARB")]
		[RequiredByFeature("GL_EXT_robustness", Api = "gles1|gles2", EntryPoint = "glReadnPixelsEXT")]
		[RequiredByFeature("GL_KHR_robustness")]
		[RequiredByFeature("GL_KHR_robustness", Api = "gles2", EntryPoint = "glReadnPixelsKHR")]
		[ThreadStatic]
		internal static glReadnPixels pglReadnPixels;

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnMapdv pglGetnMapdv;

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnMapfv pglGetnMapfv;

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnMapiv pglGetnMapiv;

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnPixelMapfv pglGetnPixelMapfv;

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnPixelMapuiv pglGetnPixelMapuiv;

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnPixelMapusv pglGetnPixelMapusv;

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnPolygonStipple pglGetnPolygonStipple;

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnColorTable pglGetnColorTable;

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnConvolutionFilter pglGetnConvolutionFilter;

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnSeparableFilter pglGetnSeparableFilter;

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnHistogram pglGetnHistogram;

		[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetnMinmax pglGetnMinmax;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_texture_barrier", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureBarrier pglTextureBarrier;

		[RequiredByFeature("GL_VERSION_4_6")]
		[RequiredByFeature("GL_ARB_gl_spirv", Api = "gl|glcore", EntryPoint = "glSpecializeShaderARB")]
		[ThreadStatic]
		internal static glSpecializeShader pglSpecializeShader;

		[RequiredByFeature("GL_VERSION_4_6")]
		[RequiredByFeature("GL_ARB_indirect_parameters", Api = "gl|glcore", EntryPoint = "glMultiDrawArraysIndirectCountARB")]
		[ThreadStatic]
		internal static glMultiDrawArraysIndirectCount pglMultiDrawArraysIndirectCount;

		[RequiredByFeature("GL_VERSION_4_6")]
		[RequiredByFeature("GL_ARB_indirect_parameters", Api = "gl|glcore", EntryPoint = "glMultiDrawElementsIndirectCountARB")]
		[ThreadStatic]
		internal static glMultiDrawElementsIndirectCount pglMultiDrawElementsIndirectCount;

		[RequiredByFeature("GL_VERSION_4_6")]
		[RequiredByFeature("GL_ARB_polygon_offset_clamp", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_polygon_offset_clamp", Api = "gl|glcore|gles2", EntryPoint = "glPolygonOffsetClampEXT")]
		[ThreadStatic]
		internal static glPolygonOffsetClamp pglPolygonOffsetClamp;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[ThreadStatic]
		internal static glClipPlanef pglClipPlanef;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[ThreadStatic]
		internal static glFrustumf pglFrustumf;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[ThreadStatic]
		internal static glGetClipPlanef pglGetClipPlanef;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[ThreadStatic]
		internal static glOrthof pglOrthof;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glAlphaFuncx pglAlphaFuncx;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glClearColorx pglClearColorx;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glClearDepthx pglClearDepthx;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glClipPlanex pglClipPlanex;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glColor4x pglColor4x;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glDepthRangex pglDepthRangex;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glFogx pglFogx;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glFogxv pglFogxv;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glFrustumx pglFrustumx;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glGetClipPlanex pglGetClipPlanex;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glGetFixedv pglGetFixedv;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glGetLightxv pglGetLightxv;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glGetMaterialxv pglGetMaterialxv;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glGetTexEnvxv pglGetTexEnvxv;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glGetTexParameterxv pglGetTexParameterxv;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glLightModelx pglLightModelx;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glLightModelxv pglLightModelxv;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glLightx pglLightx;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glLightxv pglLightxv;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glLineWidthx pglLineWidthx;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glLoadMatrixx pglLoadMatrixx;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glMaterialx pglMaterialx;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glMaterialxv pglMaterialxv;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glMultMatrixx pglMultMatrixx;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glMultiTexCoord4x pglMultiTexCoord4x;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glNormal3x pglNormal3x;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glOrthox pglOrthox;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glPointParameterx pglPointParameterx;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glPointParameterxv pglPointParameterxv;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glPointSizex pglPointSizex;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glPolygonOffsetx pglPolygonOffsetx;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glRotatex pglRotatex;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glSampleCoveragex pglSampleCoveragex;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glScalex pglScalex;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glTexEnvx pglTexEnvx;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glTexEnvxv pglTexEnvxv;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glTexParameterx pglTexParameterx;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glTexParameterxv pglTexParameterxv;

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[ThreadStatic]
		internal static glTranslatex pglTranslatex;

		[RequiredByFeature("GL_GREMEDY_frame_terminator")]
		[ThreadStatic]
		internal static glFrameTerminatorGREMEDY pglFrameTerminatorGREMEDY;

		[RequiredByFeature("GL_GREMEDY_string_marker")]
		[ThreadStatic]
		internal static glStringMarkerGREMEDY pglStringMarkerGREMEDY;

		[RequiredByFeature("GL_HP_image_transform")]
		[ThreadStatic]
		internal static glImageTransformParameteriHP pglImageTransformParameteriHP;

		[RequiredByFeature("GL_HP_image_transform")]
		[ThreadStatic]
		internal static glImageTransformParameterfHP pglImageTransformParameterfHP;

		[RequiredByFeature("GL_HP_image_transform")]
		[ThreadStatic]
		internal static glImageTransformParameterivHP pglImageTransformParameterivHP;

		[RequiredByFeature("GL_HP_image_transform")]
		[ThreadStatic]
		internal static glImageTransformParameterfvHP pglImageTransformParameterfvHP;

		[RequiredByFeature("GL_HP_image_transform")]
		[ThreadStatic]
		internal static glGetImageTransformParameterivHP pglGetImageTransformParameterivHP;

		[RequiredByFeature("GL_HP_image_transform")]
		[ThreadStatic]
		internal static glGetImageTransformParameterfvHP pglGetImageTransformParameterfvHP;

		[RequiredByFeature("GL_IBM_multimode_draw_arrays")]
		[ThreadStatic]
		internal static glMultiModeDrawArraysIBM pglMultiModeDrawArraysIBM;

		[RequiredByFeature("GL_IBM_multimode_draw_arrays")]
		[ThreadStatic]
		internal static glMultiModeDrawElementsIBM pglMultiModeDrawElementsIBM;

		[RequiredByFeature("GL_IBM_static_data")]
		[ThreadStatic]
		internal static glFlushStaticDataIBM pglFlushStaticDataIBM;

		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		[ThreadStatic]
		internal static glColorPointerListIBM pglColorPointerListIBM;

		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		[ThreadStatic]
		internal static glSecondaryColorPointerListIBM pglSecondaryColorPointerListIBM;

		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		[ThreadStatic]
		internal static glEdgeFlagPointerListIBM pglEdgeFlagPointerListIBM;

		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		[ThreadStatic]
		internal static glFogCoordPointerListIBM pglFogCoordPointerListIBM;

		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		[ThreadStatic]
		internal static glIndexPointerListIBM pglIndexPointerListIBM;

		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		[ThreadStatic]
		internal static glNormalPointerListIBM pglNormalPointerListIBM;

		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		[ThreadStatic]
		internal static glTexCoordPointerListIBM pglTexCoordPointerListIBM;

		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		[ThreadStatic]
		internal static glVertexPointerListIBM pglVertexPointerListIBM;

		[RequiredByFeature("GL_IMG_framebuffer_downsample", Api = "gles2")]
		[ThreadStatic]
		internal static glFramebufferTexture2DDownsampleIMG pglFramebufferTexture2DDownsampleIMG;

		[RequiredByFeature("GL_IMG_framebuffer_downsample", Api = "gles2")]
		[ThreadStatic]
		internal static glFramebufferTextureLayerDownsampleIMG pglFramebufferTextureLayerDownsampleIMG;

		[RequiredByFeature("GL_IMG_multisampled_render_to_texture", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glRenderbufferStorageMultisampleIMG pglRenderbufferStorageMultisampleIMG;

		[RequiredByFeature("GL_IMG_multisampled_render_to_texture", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glFramebufferTexture2DMultisampleIMG pglFramebufferTexture2DMultisampleIMG;

		[RequiredByFeature("GL_IMG_user_clip_plane", Api = "gles1")]
		[ThreadStatic]
		internal static glClipPlanefIMG pglClipPlanefIMG;

		[RequiredByFeature("GL_IMG_user_clip_plane", Api = "gles1")]
		[ThreadStatic]
		internal static glClipPlanexIMG pglClipPlanexIMG;

		[RequiredByFeature("GL_INTEL_framebuffer_CMAA", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glApplyFramebufferAttachmentCMAAINTEL pglApplyFramebufferAttachmentCMAAINTEL;

		[RequiredByFeature("GL_INTEL_map_texture")]
		[ThreadStatic]
		internal static glSyncTextureINTEL pglSyncTextureINTEL;

		[RequiredByFeature("GL_INTEL_map_texture")]
		[ThreadStatic]
		internal static glUnmapTexture2DINTEL pglUnmapTexture2DINTEL;

		[RequiredByFeature("GL_INTEL_map_texture")]
		[ThreadStatic]
		internal static glMapTexture2DINTEL pglMapTexture2DINTEL;

		[RequiredByFeature("GL_INTEL_parallel_arrays")]
		[ThreadStatic]
		internal static glVertexPointervINTEL pglVertexPointervINTEL;

		[RequiredByFeature("GL_INTEL_parallel_arrays")]
		[ThreadStatic]
		internal static glNormalPointervINTEL pglNormalPointervINTEL;

		[RequiredByFeature("GL_INTEL_parallel_arrays")]
		[ThreadStatic]
		internal static glColorPointervINTEL pglColorPointervINTEL;

		[RequiredByFeature("GL_INTEL_parallel_arrays")]
		[ThreadStatic]
		internal static glTexCoordPointervINTEL pglTexCoordPointervINTEL;

		[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glBeginPerfQueryINTEL pglBeginPerfQueryINTEL;

		[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glCreatePerfQueryINTEL pglCreatePerfQueryINTEL;

		[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glDeletePerfQueryINTEL pglDeletePerfQueryINTEL;

		[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glEndPerfQueryINTEL pglEndPerfQueryINTEL;

		[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetFirstPerfQueryIdINTEL pglGetFirstPerfQueryIdINTEL;

		[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetNextPerfQueryIdINTEL pglGetNextPerfQueryIdINTEL;

		[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetPerfCounterInfoINTEL pglGetPerfCounterInfoINTEL;

		[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetPerfQueryDataINTEL pglGetPerfQueryDataINTEL;

		[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetPerfQueryIdByNameINTEL pglGetPerfQueryIdByNameINTEL;

		[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetPerfQueryInfoINTEL pglGetPerfQueryInfoINTEL;

		[RequiredByFeature("GL_ARB_parallel_shader_compile", Api = "gl|glcore", EntryPoint = "glMaxShaderCompilerThreadsARB")]
		[RequiredByFeature("GL_KHR_parallel_shader_compile", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMaxShaderCompilerThreadsKHR pglMaxShaderCompilerThreadsKHR;

		[RequiredByFeature("GL_MESA_framebuffer_flip_y", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glFramebufferParameteriMESA pglFramebufferParameteriMESA;

		[RequiredByFeature("GL_MESA_framebuffer_flip_y", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetFramebufferParameterivMESA pglGetFramebufferParameterivMESA;

		[RequiredByFeature("GL_MESA_resize_buffers")]
		[ThreadStatic]
		internal static glResizeBuffersMESA pglResizeBuffersMESA;

		[RequiredByFeature("GL_MESA_window_pos")]
		[ThreadStatic]
		internal static glWindowPos4dMESA pglWindowPos4dMESA;

		[RequiredByFeature("GL_MESA_window_pos")]
		[ThreadStatic]
		internal static glWindowPos4dvMESA pglWindowPos4dvMESA;

		[RequiredByFeature("GL_MESA_window_pos")]
		[ThreadStatic]
		internal static glWindowPos4fMESA pglWindowPos4fMESA;

		[RequiredByFeature("GL_MESA_window_pos")]
		[ThreadStatic]
		internal static glWindowPos4fvMESA pglWindowPos4fvMESA;

		[RequiredByFeature("GL_MESA_window_pos")]
		[ThreadStatic]
		internal static glWindowPos4iMESA pglWindowPos4iMESA;

		[RequiredByFeature("GL_MESA_window_pos")]
		[ThreadStatic]
		internal static glWindowPos4ivMESA pglWindowPos4ivMESA;

		[RequiredByFeature("GL_MESA_window_pos")]
		[ThreadStatic]
		internal static glWindowPos4sMESA pglWindowPos4sMESA;

		[RequiredByFeature("GL_MESA_window_pos")]
		[ThreadStatic]
		internal static glWindowPos4svMESA pglWindowPos4svMESA;

		[RequiredByFeature("GL_NVX_conditional_render")]
		[ThreadStatic]
		internal static glBeginConditionalRenderNVX pglBeginConditionalRenderNVX;

		[RequiredByFeature("GL_NVX_gpu_multicast2")]
		[ThreadStatic]
		internal static glUploadGpuMaskNVX pglUploadGpuMaskNVX;

		[RequiredByFeature("GL_NVX_gpu_multicast2")]
		[ThreadStatic]
		internal static glMulticastViewportArrayvNVX pglMulticastViewportArrayvNVX;

		[RequiredByFeature("GL_NVX_gpu_multicast2")]
		[ThreadStatic]
		internal static glMulticastViewportPositionWScaleNVX pglMulticastViewportPositionWScaleNVX;

		[RequiredByFeature("GL_NVX_gpu_multicast2")]
		[ThreadStatic]
		internal static glMulticastScissorArrayvNVX pglMulticastScissorArrayvNVX;

		[RequiredByFeature("GL_NVX_gpu_multicast2")]
		[ThreadStatic]
		internal static glAsyncCopyBufferSubDataNVX pglAsyncCopyBufferSubDataNVX;

		[RequiredByFeature("GL_NVX_gpu_multicast2")]
		[ThreadStatic]
		internal static glAsyncCopyImageSubDataNVX pglAsyncCopyImageSubDataNVX;

		[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
		[ThreadStatic]
		internal static glLGPUNamedBufferSubDataNVX pglLGPUNamedBufferSubDataNVX;

		[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
		[ThreadStatic]
		internal static glLGPUCopyImageSubDataNVX pglLGPUCopyImageSubDataNVX;

		[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
		[ThreadStatic]
		internal static glLGPUInterlockNVX pglLGPUInterlockNVX;

		[RequiredByFeature("GL_NVX_progress_fence")]
		[ThreadStatic]
		internal static glCreateProgressFenceNVX pglCreateProgressFenceNVX;

		[RequiredByFeature("GL_NVX_progress_fence")]
		[ThreadStatic]
		internal static glSignalSemaphoreui64NVX pglSignalSemaphoreui64NVX;

		[RequiredByFeature("GL_NVX_progress_fence")]
		[ThreadStatic]
		internal static glWaitSemaphoreui64NVX pglWaitSemaphoreui64NVX;

		[RequiredByFeature("GL_NVX_progress_fence")]
		[ThreadStatic]
		internal static glClientWaitSemaphoreui64NVX pglClientWaitSemaphoreui64NVX;

		[RequiredByFeature("GL_NV_alpha_to_coverage_dither_control")]
		[ThreadStatic]
		internal static glAlphaToCoverageDitherControlNV pglAlphaToCoverageDitherControlNV;

		[RequiredByFeature("GL_NV_bindless_multi_draw_indirect", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiDrawArraysIndirectBindlessNV pglMultiDrawArraysIndirectBindlessNV;

		[RequiredByFeature("GL_NV_bindless_multi_draw_indirect", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiDrawElementsIndirectBindlessNV pglMultiDrawElementsIndirectBindlessNV;

		[RequiredByFeature("GL_NV_bindless_multi_draw_indirect_count", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiDrawArraysIndirectBindlessCountNV pglMultiDrawArraysIndirectBindlessCountNV;

		[RequiredByFeature("GL_NV_bindless_multi_draw_indirect_count", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMultiDrawElementsIndirectBindlessCountNV pglMultiDrawElementsIndirectBindlessCountNV;

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetTextureHandleNV pglGetTextureHandleNV;

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetTextureSamplerHandleNV pglGetTextureSamplerHandleNV;

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMakeTextureHandleResidentNV pglMakeTextureHandleResidentNV;

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMakeTextureHandleNonResidentNV pglMakeTextureHandleNonResidentNV;

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetImageHandleNV pglGetImageHandleNV;

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMakeImageHandleResidentNV pglMakeImageHandleResidentNV;

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMakeImageHandleNonResidentNV pglMakeImageHandleNonResidentNV;

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glUniformHandleui64NV pglUniformHandleui64NV;

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glUniformHandleui64vNV pglUniformHandleui64vNV;

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glProgramUniformHandleui64NV pglProgramUniformHandleui64NV;

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glProgramUniformHandleui64vNV pglProgramUniformHandleui64vNV;

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glIsTextureHandleResidentNV pglIsTextureHandleResidentNV;

		[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glIsImageHandleResidentNV pglIsImageHandleResidentNV;

		[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glBlendParameteriNV pglBlendParameteriNV;

		[RequiredByFeature("GL_NV_clip_space_w_scaling", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glViewportPositionWScaleNV pglViewportPositionWScaleNV;

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCreateStatesNV pglCreateStatesNV;

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDeleteStatesNV pglDeleteStatesNV;

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glIsStateNV pglIsStateNV;

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glStateCaptureNV pglStateCaptureNV;

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetCommandHeaderNV pglGetCommandHeaderNV;

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetStageIndexNV pglGetStageIndexNV;

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDrawCommandsNV pglDrawCommandsNV;

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDrawCommandsAddressNV pglDrawCommandsAddressNV;

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDrawCommandsStatesNV pglDrawCommandsStatesNV;

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDrawCommandsStatesAddressNV pglDrawCommandsStatesAddressNV;

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCreateCommandListsNV pglCreateCommandListsNV;

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDeleteCommandListsNV pglDeleteCommandListsNV;

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glIsCommandListNV pglIsCommandListNV;

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glListDrawCommandsStatesClientNV pglListDrawCommandsStatesClientNV;

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCommandListSegmentsNV pglCommandListSegmentsNV;

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCompileCommandListNV pglCompileCommandListNV;

		[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glCallCommandListNV pglCallCommandListNV;

		[RequiredByFeature("GL_NV_conservative_raster", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glSubpixelPrecisionBiasNV pglSubpixelPrecisionBiasNV;

		[RequiredByFeature("GL_NV_conservative_raster_dilate", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glConservativeRasterParameterfNV pglConservativeRasterParameterfNV;

		[RequiredByFeature("GL_NV_conservative_raster_pre_snap_triangles", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glConservativeRasterParameteriNV pglConservativeRasterParameteriNV;

		[RequiredByFeature("GL_NV_copy_image")]
		[ThreadStatic]
		internal static glCopyImageSubDataNV pglCopyImageSubDataNV;

		[RequiredByFeature("GL_NV_coverage_sample", Api = "gles2")]
		[ThreadStatic]
		internal static glCoverageMaskNV pglCoverageMaskNV;

		[RequiredByFeature("GL_NV_coverage_sample", Api = "gles2")]
		[ThreadStatic]
		internal static glCoverageOperationNV pglCoverageOperationNV;

		[RequiredByFeature("GL_NV_depth_buffer_float", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDepthRangedNV pglDepthRangedNV;

		[RequiredByFeature("GL_NV_depth_buffer_float", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glClearDepthdNV pglClearDepthdNV;

		[RequiredByFeature("GL_NV_depth_buffer_float", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glDepthBoundsdNV pglDepthBoundsdNV;

		[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
		[ThreadStatic]
		internal static glDrawBuffersNV pglDrawBuffersNV;

		[RequiredByFeature("GL_NV_draw_texture")]
		[ThreadStatic]
		internal static glDrawTextureNV pglDrawTextureNV;

		[RequiredByFeature("GL_NV_draw_vulkan_image", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glDrawVkImageNV pglDrawVkImageNV;

		[RequiredByFeature("GL_NV_draw_vulkan_image", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetVkProcAddrNV pglGetVkProcAddrNV;

		[RequiredByFeature("GL_NV_draw_vulkan_image", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glWaitVkSemaphoreNV pglWaitVkSemaphoreNV;

		[RequiredByFeature("GL_NV_draw_vulkan_image", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glSignalVkSemaphoreNV pglSignalVkSemaphoreNV;

		[RequiredByFeature("GL_NV_draw_vulkan_image", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glSignalVkFenceNV pglSignalVkFenceNV;

		[RequiredByFeature("GL_NV_evaluators")]
		[ThreadStatic]
		internal static glMapControlPointsNV pglMapControlPointsNV;

		[RequiredByFeature("GL_NV_evaluators")]
		[ThreadStatic]
		internal static glMapParameterivNV pglMapParameterivNV;

		[RequiredByFeature("GL_NV_evaluators")]
		[ThreadStatic]
		internal static glMapParameterfvNV pglMapParameterfvNV;

		[RequiredByFeature("GL_NV_evaluators")]
		[ThreadStatic]
		internal static glGetMapControlPointsNV pglGetMapControlPointsNV;

		[RequiredByFeature("GL_NV_evaluators")]
		[ThreadStatic]
		internal static glGetMapParameterivNV pglGetMapParameterivNV;

		[RequiredByFeature("GL_NV_evaluators")]
		[ThreadStatic]
		internal static glGetMapParameterfvNV pglGetMapParameterfvNV;

		[RequiredByFeature("GL_NV_evaluators")]
		[ThreadStatic]
		internal static glGetMapAttribParameterivNV pglGetMapAttribParameterivNV;

		[RequiredByFeature("GL_NV_evaluators")]
		[ThreadStatic]
		internal static glGetMapAttribParameterfvNV pglGetMapAttribParameterfvNV;

		[RequiredByFeature("GL_NV_evaluators")]
		[ThreadStatic]
		internal static glEvalMapsNV pglEvalMapsNV;

		[RequiredByFeature("GL_NV_explicit_multisample")]
		[ThreadStatic]
		internal static glSampleMaskIndexedNV pglSampleMaskIndexedNV;

		[RequiredByFeature("GL_NV_explicit_multisample")]
		[ThreadStatic]
		internal static glTexRenderbufferNV pglTexRenderbufferNV;

		[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
		[ThreadStatic]
		internal static glDeleteFencesNV pglDeleteFencesNV;

		[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
		[ThreadStatic]
		internal static glGenFencesNV pglGenFencesNV;

		[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
		[ThreadStatic]
		internal static glIsFenceNV pglIsFenceNV;

		[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
		[ThreadStatic]
		internal static glTestFenceNV pglTestFenceNV;

		[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
		[ThreadStatic]
		internal static glGetFenceivNV pglGetFenceivNV;

		[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
		[ThreadStatic]
		internal static glFinishFenceNV pglFinishFenceNV;

		[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
		[ThreadStatic]
		internal static glSetFenceNV pglSetFenceNV;

		[RequiredByFeature("GL_NV_fragment_coverage_to_color", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glFragmentCoverageColorNV pglFragmentCoverageColorNV;

		[RequiredByFeature("GL_NV_fragment_program")]
		[ThreadStatic]
		internal static glProgramNamedParameter4fNV pglProgramNamedParameter4fNV;

		[RequiredByFeature("GL_NV_fragment_program")]
		[ThreadStatic]
		internal static glProgramNamedParameter4fvNV pglProgramNamedParameter4fvNV;

		[RequiredByFeature("GL_NV_fragment_program")]
		[ThreadStatic]
		internal static glProgramNamedParameter4dNV pglProgramNamedParameter4dNV;

		[RequiredByFeature("GL_NV_fragment_program")]
		[ThreadStatic]
		internal static glProgramNamedParameter4dvNV pglProgramNamedParameter4dvNV;

		[RequiredByFeature("GL_NV_fragment_program")]
		[ThreadStatic]
		internal static glGetProgramNamedParameterfvNV pglGetProgramNamedParameterfvNV;

		[RequiredByFeature("GL_NV_fragment_program")]
		[ThreadStatic]
		internal static glGetProgramNamedParameterdvNV pglGetProgramNamedParameterdvNV;

		[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glCoverageModulationTableNV pglCoverageModulationTableNV;

		[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetCoverageModulationTableNV pglGetCoverageModulationTableNV;

		[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glCoverageModulationNV pglCoverageModulationNV;

		[RequiredByFeature("GL_NV_framebuffer_multisample_coverage", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glRenderbufferStorageMultisampleCoverageNV pglRenderbufferStorageMultisampleCoverageNV;

		[RequiredByFeature("GL_NV_geometry_program4")]
		[ThreadStatic]
		internal static glProgramVertexLimitNV pglProgramVertexLimitNV;

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[ThreadStatic]
		internal static glRenderGpuMaskNV pglRenderGpuMaskNV;

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[ThreadStatic]
		internal static glMulticastBufferSubDataNV pglMulticastBufferSubDataNV;

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[ThreadStatic]
		internal static glMulticastCopyBufferSubDataNV pglMulticastCopyBufferSubDataNV;

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[ThreadStatic]
		internal static glMulticastCopyImageSubDataNV pglMulticastCopyImageSubDataNV;

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[ThreadStatic]
		internal static glMulticastBlitFramebufferNV pglMulticastBlitFramebufferNV;

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[ThreadStatic]
		internal static glMulticastFramebufferSampleLocationsfvNV pglMulticastFramebufferSampleLocationsfvNV;

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[ThreadStatic]
		internal static glMulticastBarrierNV pglMulticastBarrierNV;

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[ThreadStatic]
		internal static glMulticastWaitSyncNV pglMulticastWaitSyncNV;

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[ThreadStatic]
		internal static glMulticastGetQueryObjectivNV pglMulticastGetQueryObjectivNV;

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[ThreadStatic]
		internal static glMulticastGetQueryObjectuivNV pglMulticastGetQueryObjectuivNV;

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[ThreadStatic]
		internal static glMulticastGetQueryObjecti64vNV pglMulticastGetQueryObjecti64vNV;

		[RequiredByFeature("GL_NV_gpu_multicast")]
		[ThreadStatic]
		internal static glMulticastGetQueryObjectui64vNV pglMulticastGetQueryObjectui64vNV;

		[RequiredByFeature("GL_NV_gpu_program4")]
		[ThreadStatic]
		internal static glProgramLocalParameterI4iNV pglProgramLocalParameterI4iNV;

		[RequiredByFeature("GL_NV_gpu_program4")]
		[ThreadStatic]
		internal static glProgramLocalParameterI4ivNV pglProgramLocalParameterI4ivNV;

		[RequiredByFeature("GL_NV_gpu_program4")]
		[ThreadStatic]
		internal static glProgramLocalParametersI4ivNV pglProgramLocalParametersI4ivNV;

		[RequiredByFeature("GL_NV_gpu_program4")]
		[ThreadStatic]
		internal static glProgramLocalParameterI4uiNV pglProgramLocalParameterI4uiNV;

		[RequiredByFeature("GL_NV_gpu_program4")]
		[ThreadStatic]
		internal static glProgramLocalParameterI4uivNV pglProgramLocalParameterI4uivNV;

		[RequiredByFeature("GL_NV_gpu_program4")]
		[ThreadStatic]
		internal static glProgramLocalParametersI4uivNV pglProgramLocalParametersI4uivNV;

		[RequiredByFeature("GL_NV_gpu_program4")]
		[ThreadStatic]
		internal static glProgramEnvParameterI4iNV pglProgramEnvParameterI4iNV;

		[RequiredByFeature("GL_NV_gpu_program4")]
		[ThreadStatic]
		internal static glProgramEnvParameterI4ivNV pglProgramEnvParameterI4ivNV;

		[RequiredByFeature("GL_NV_gpu_program4")]
		[ThreadStatic]
		internal static glProgramEnvParametersI4ivNV pglProgramEnvParametersI4ivNV;

		[RequiredByFeature("GL_NV_gpu_program4")]
		[ThreadStatic]
		internal static glProgramEnvParameterI4uiNV pglProgramEnvParameterI4uiNV;

		[RequiredByFeature("GL_NV_gpu_program4")]
		[ThreadStatic]
		internal static glProgramEnvParameterI4uivNV pglProgramEnvParameterI4uivNV;

		[RequiredByFeature("GL_NV_gpu_program4")]
		[ThreadStatic]
		internal static glProgramEnvParametersI4uivNV pglProgramEnvParametersI4uivNV;

		[RequiredByFeature("GL_NV_gpu_program4")]
		[ThreadStatic]
		internal static glGetProgramLocalParameterIivNV pglGetProgramLocalParameterIivNV;

		[RequiredByFeature("GL_NV_gpu_program4")]
		[ThreadStatic]
		internal static glGetProgramLocalParameterIuivNV pglGetProgramLocalParameterIuivNV;

		[RequiredByFeature("GL_NV_gpu_program4")]
		[ThreadStatic]
		internal static glGetProgramEnvParameterIivNV pglGetProgramEnvParameterIivNV;

		[RequiredByFeature("GL_NV_gpu_program4")]
		[ThreadStatic]
		internal static glGetProgramEnvParameterIuivNV pglGetProgramEnvParameterIuivNV;

		[RequiredByFeature("GL_NV_gpu_program5")]
		[ThreadStatic]
		internal static glProgramSubroutineParametersuivNV pglProgramSubroutineParametersuivNV;

		[RequiredByFeature("GL_NV_gpu_program5")]
		[ThreadStatic]
		internal static glGetProgramSubroutineParameteruivNV pglGetProgramSubroutineParameteruivNV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glUniform1i64NV pglUniform1i64NV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glUniform2i64NV pglUniform2i64NV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glUniform3i64NV pglUniform3i64NV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glUniform4i64NV pglUniform4i64NV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glUniform1i64vNV pglUniform1i64vNV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glUniform2i64vNV pglUniform2i64vNV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glUniform3i64vNV pglUniform3i64vNV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glUniform4i64vNV pglUniform4i64vNV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glUniform1ui64NV pglUniform1ui64NV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glUniform2ui64NV pglUniform2ui64NV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glUniform3ui64NV pglUniform3ui64NV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glUniform4ui64NV pglUniform4ui64NV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glUniform1ui64vNV pglUniform1ui64vNV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glUniform2ui64vNV pglUniform2ui64vNV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glUniform3ui64vNV pglUniform3ui64vNV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glUniform4ui64vNV pglUniform4ui64vNV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetUniformi64vNV pglGetUniformi64vNV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glProgramUniform1i64NV pglProgramUniform1i64NV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glProgramUniform2i64NV pglProgramUniform2i64NV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glProgramUniform3i64NV pglProgramUniform3i64NV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glProgramUniform4i64NV pglProgramUniform4i64NV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glProgramUniform1i64vNV pglProgramUniform1i64vNV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glProgramUniform2i64vNV pglProgramUniform2i64vNV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glProgramUniform3i64vNV pglProgramUniform3i64vNV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glProgramUniform4i64vNV pglProgramUniform4i64vNV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glProgramUniform1ui64NV pglProgramUniform1ui64NV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glProgramUniform2ui64NV pglProgramUniform2ui64NV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glProgramUniform3ui64NV pglProgramUniform3ui64NV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glProgramUniform4ui64NV pglProgramUniform4ui64NV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glProgramUniform1ui64vNV pglProgramUniform1ui64vNV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glProgramUniform2ui64vNV pglProgramUniform2ui64vNV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glProgramUniform3ui64vNV pglProgramUniform3ui64vNV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glProgramUniform4ui64vNV pglProgramUniform4ui64vNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glVertex2hNV pglVertex2hNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glVertex2hvNV pglVertex2hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glVertex3hNV pglVertex3hNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glVertex3hvNV pglVertex3hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glVertex4hNV pglVertex4hNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glVertex4hvNV pglVertex4hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glNormal3hNV pglNormal3hNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glNormal3hvNV pglNormal3hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glColor3hNV pglColor3hNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glColor3hvNV pglColor3hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glColor4hNV pglColor4hNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glColor4hvNV pglColor4hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glTexCoord1hNV pglTexCoord1hNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glTexCoord1hvNV pglTexCoord1hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glTexCoord2hNV pglTexCoord2hNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glTexCoord2hvNV pglTexCoord2hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glTexCoord3hNV pglTexCoord3hNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glTexCoord3hvNV pglTexCoord3hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glTexCoord4hNV pglTexCoord4hNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glTexCoord4hvNV pglTexCoord4hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glMultiTexCoord1hNV pglMultiTexCoord1hNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glMultiTexCoord1hvNV pglMultiTexCoord1hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glMultiTexCoord2hNV pglMultiTexCoord2hNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glMultiTexCoord2hvNV pglMultiTexCoord2hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glMultiTexCoord3hNV pglMultiTexCoord3hNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glMultiTexCoord3hvNV pglMultiTexCoord3hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glMultiTexCoord4hNV pglMultiTexCoord4hNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glMultiTexCoord4hvNV pglMultiTexCoord4hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glFogCoordhNV pglFogCoordhNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glFogCoordhvNV pglFogCoordhvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glSecondaryColor3hNV pglSecondaryColor3hNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glSecondaryColor3hvNV pglSecondaryColor3hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glVertexWeighthNV pglVertexWeighthNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glVertexWeighthvNV pglVertexWeighthvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glVertexAttrib1hNV pglVertexAttrib1hNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glVertexAttrib1hvNV pglVertexAttrib1hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glVertexAttrib2hNV pglVertexAttrib2hNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glVertexAttrib2hvNV pglVertexAttrib2hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glVertexAttrib3hNV pglVertexAttrib3hNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glVertexAttrib3hvNV pglVertexAttrib3hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glVertexAttrib4hNV pglVertexAttrib4hNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glVertexAttrib4hvNV pglVertexAttrib4hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glVertexAttribs1hvNV pglVertexAttribs1hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glVertexAttribs2hvNV pglVertexAttribs2hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glVertexAttribs3hvNV pglVertexAttribs3hvNV;

		[RequiredByFeature("GL_NV_half_float")]
		[ThreadStatic]
		internal static glVertexAttribs4hvNV pglVertexAttribs4hvNV;

		[RequiredByFeature("GL_NV_internalformat_sample_query", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetInternalformatSampleivNV pglGetInternalformatSampleivNV;

		[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetMemoryObjectDetachedResourcesuivNV pglGetMemoryObjectDetachedResourcesuivNV;

		[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glResetMemoryObjectParameterNV pglResetMemoryObjectParameterNV;

		[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glTexAttachMemoryNV pglTexAttachMemoryNV;

		[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glBufferAttachMemoryNV pglBufferAttachMemoryNV;

		[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glTextureAttachMemoryNV pglTextureAttachMemoryNV;

		[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glNamedBufferAttachMemoryNV pglNamedBufferAttachMemoryNV;

		[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glBufferPageCommitmentMemNV pglBufferPageCommitmentMemNV;

		[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glTexPageCommitmentMemNV pglTexPageCommitmentMemNV;

		[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glNamedBufferPageCommitmentMemNV pglNamedBufferPageCommitmentMemNV;

		[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glTexturePageCommitmentMemNV pglTexturePageCommitmentMemNV;

		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glDrawMeshTasksNV pglDrawMeshTasksNV;

		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glDrawMeshTasksIndirectNV pglDrawMeshTasksIndirectNV;

		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMultiDrawMeshTasksIndirectNV pglMultiDrawMeshTasksIndirectNV;

		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMultiDrawMeshTasksIndirectCountNV pglMultiDrawMeshTasksIndirectCountNV;

		[RequiredByFeature("GL_NV_occlusion_query")]
		[ThreadStatic]
		internal static glGenOcclusionQueriesNV pglGenOcclusionQueriesNV;

		[RequiredByFeature("GL_NV_occlusion_query")]
		[ThreadStatic]
		internal static glDeleteOcclusionQueriesNV pglDeleteOcclusionQueriesNV;

		[RequiredByFeature("GL_NV_occlusion_query")]
		[ThreadStatic]
		internal static glIsOcclusionQueryNV pglIsOcclusionQueryNV;

		[RequiredByFeature("GL_NV_occlusion_query")]
		[ThreadStatic]
		internal static glBeginOcclusionQueryNV pglBeginOcclusionQueryNV;

		[RequiredByFeature("GL_NV_occlusion_query")]
		[ThreadStatic]
		internal static glEndOcclusionQueryNV pglEndOcclusionQueryNV;

		[RequiredByFeature("GL_NV_occlusion_query")]
		[ThreadStatic]
		internal static glGetOcclusionQueryivNV pglGetOcclusionQueryivNV;

		[RequiredByFeature("GL_NV_occlusion_query")]
		[ThreadStatic]
		internal static glGetOcclusionQueryuivNV pglGetOcclusionQueryuivNV;

		[RequiredByFeature("GL_NV_parameter_buffer_object")]
		[ThreadStatic]
		internal static glProgramBufferParametersfvNV pglProgramBufferParametersfvNV;

		[RequiredByFeature("GL_NV_parameter_buffer_object")]
		[ThreadStatic]
		internal static glProgramBufferParametersIivNV pglProgramBufferParametersIivNV;

		[RequiredByFeature("GL_NV_parameter_buffer_object")]
		[ThreadStatic]
		internal static glProgramBufferParametersIuivNV pglProgramBufferParametersIuivNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGenPathsNV pglGenPathsNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glDeletePathsNV pglDeletePathsNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glIsPathNV pglIsPathNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glPathCommandsNV pglPathCommandsNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glPathCoordsNV pglPathCoordsNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glPathSubCommandsNV pglPathSubCommandsNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glPathSubCoordsNV pglPathSubCoordsNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glPathStringNV pglPathStringNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glPathGlyphsNV pglPathGlyphsNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glPathGlyphRangeNV pglPathGlyphRangeNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glWeightPathsNV pglWeightPathsNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glCopyPathNV pglCopyPathNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glInterpolatePathsNV pglInterpolatePathsNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glTransformPathNV pglTransformPathNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glPathParameterivNV pglPathParameterivNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glPathParameteriNV pglPathParameteriNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glPathParameterfvNV pglPathParameterfvNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glPathParameterfNV pglPathParameterfNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glPathDashArrayNV pglPathDashArrayNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glPathStencilFuncNV pglPathStencilFuncNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glPathStencilDepthOffsetNV pglPathStencilDepthOffsetNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glStencilFillPathNV pglStencilFillPathNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glStencilStrokePathNV pglStencilStrokePathNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glStencilFillPathInstancedNV pglStencilFillPathInstancedNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glStencilStrokePathInstancedNV pglStencilStrokePathInstancedNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glPathCoverDepthFuncNV pglPathCoverDepthFuncNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glCoverFillPathNV pglCoverFillPathNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glCoverStrokePathNV pglCoverStrokePathNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glCoverFillPathInstancedNV pglCoverFillPathInstancedNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glCoverStrokePathInstancedNV pglCoverStrokePathInstancedNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetPathParameterivNV pglGetPathParameterivNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetPathParameterfvNV pglGetPathParameterfvNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetPathCommandsNV pglGetPathCommandsNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetPathCoordsNV pglGetPathCoordsNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetPathDashArrayNV pglGetPathDashArrayNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetPathMetricsNV pglGetPathMetricsNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetPathMetricRangeNV pglGetPathMetricRangeNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetPathSpacingNV pglGetPathSpacingNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glIsPointInFillPathNV pglIsPointInFillPathNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glIsPointInStrokePathNV pglIsPointInStrokePathNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetPathLengthNV pglGetPathLengthNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glPointAlongPathNV pglPointAlongPathNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixLoad3x2fNV pglMatrixLoad3x2fNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixLoad3x3fNV pglMatrixLoad3x3fNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixLoadTranspose3x3fNV pglMatrixLoadTranspose3x3fNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixMult3x2fNV pglMatrixMult3x2fNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixMult3x3fNV pglMatrixMult3x3fNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glMatrixMultTranspose3x3fNV pglMatrixMultTranspose3x3fNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glStencilThenCoverFillPathNV pglStencilThenCoverFillPathNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glStencilThenCoverStrokePathNV pglStencilThenCoverStrokePathNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glStencilThenCoverFillPathInstancedNV pglStencilThenCoverFillPathInstancedNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glStencilThenCoverStrokePathInstancedNV pglStencilThenCoverStrokePathInstancedNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glPathGlyphIndexRangeNV pglPathGlyphIndexRangeNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glPathGlyphIndexArrayNV pglPathGlyphIndexArrayNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glPathMemoryGlyphIndexArrayNV pglPathMemoryGlyphIndexArrayNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glProgramPathFragmentInputGenNV pglProgramPathFragmentInputGenNV;

		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetProgramResourcefvNV pglGetProgramResourcefvNV;

		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		[ThreadStatic]
		internal static glPathColorGenNV pglPathColorGenNV;

		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		[ThreadStatic]
		internal static glPathTexGenNV pglPathTexGenNV;

		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		[ThreadStatic]
		internal static glPathFogGenNV pglPathFogGenNV;

		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetPathColorGenivNV pglGetPathColorGenivNV;

		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetPathColorGenfvNV pglGetPathColorGenfvNV;

		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetPathTexGenivNV pglGetPathTexGenivNV;

		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		[ThreadStatic]
		internal static glGetPathTexGenfvNV pglGetPathTexGenfvNV;

		[RequiredByFeature("GL_NV_pixel_data_range")]
		[ThreadStatic]
		internal static glPixelDataRangeNV pglPixelDataRangeNV;

		[RequiredByFeature("GL_NV_pixel_data_range")]
		[ThreadStatic]
		internal static glFlushPixelDataRangeNV pglFlushPixelDataRangeNV;

		[RequiredByFeature("GL_NV_present_video")]
		[ThreadStatic]
		internal static glPresentFrameKeyedNV pglPresentFrameKeyedNV;

		[RequiredByFeature("GL_NV_present_video")]
		[ThreadStatic]
		internal static glPresentFrameDualFillNV pglPresentFrameDualFillNV;

		[RequiredByFeature("GL_NV_present_video")]
		[ThreadStatic]
		internal static glGetVideoivNV pglGetVideoivNV;

		[RequiredByFeature("GL_NV_present_video")]
		[ThreadStatic]
		internal static glGetVideouivNV pglGetVideouivNV;

		[RequiredByFeature("GL_NV_present_video")]
		[ThreadStatic]
		internal static glGetVideoi64vNV pglGetVideoi64vNV;

		[RequiredByFeature("GL_NV_present_video")]
		[ThreadStatic]
		internal static glGetVideoui64vNV pglGetVideoui64vNV;

		[RequiredByFeature("GL_NV_primitive_restart")]
		[ThreadStatic]
		internal static glPrimitiveRestartNV pglPrimitiveRestartNV;

		[RequiredByFeature("GL_NV_primitive_restart")]
		[ThreadStatic]
		internal static glPrimitiveRestartIndexNV pglPrimitiveRestartIndexNV;

		[RequiredByFeature("GL_NV_query_resource")]
		[ThreadStatic]
		internal static glQueryResourceNV pglQueryResourceNV;

		[RequiredByFeature("GL_NV_query_resource_tag")]
		[ThreadStatic]
		internal static glGenQueryResourceTagNV pglGenQueryResourceTagNV;

		[RequiredByFeature("GL_NV_query_resource_tag")]
		[ThreadStatic]
		internal static glDeleteQueryResourceTagNV pglDeleteQueryResourceTagNV;

		[RequiredByFeature("GL_NV_query_resource_tag")]
		[ThreadStatic]
		internal static glQueryResourceTagNV pglQueryResourceTagNV;

		[RequiredByFeature("GL_NV_read_buffer", Api = "gles2")]
		[ThreadStatic]
		internal static glReadBufferNV pglReadBufferNV;

		[RequiredByFeature("GL_NV_register_combiners")]
		[ThreadStatic]
		internal static glCombinerParameterfvNV pglCombinerParameterfvNV;

		[RequiredByFeature("GL_NV_register_combiners")]
		[ThreadStatic]
		internal static glCombinerParameterfNV pglCombinerParameterfNV;

		[RequiredByFeature("GL_NV_register_combiners")]
		[ThreadStatic]
		internal static glCombinerParameterivNV pglCombinerParameterivNV;

		[RequiredByFeature("GL_NV_register_combiners")]
		[ThreadStatic]
		internal static glCombinerParameteriNV pglCombinerParameteriNV;

		[RequiredByFeature("GL_NV_register_combiners")]
		[ThreadStatic]
		internal static glCombinerInputNV pglCombinerInputNV;

		[RequiredByFeature("GL_NV_register_combiners")]
		[ThreadStatic]
		internal static glCombinerOutputNV pglCombinerOutputNV;

		[RequiredByFeature("GL_NV_register_combiners")]
		[ThreadStatic]
		internal static glFinalCombinerInputNV pglFinalCombinerInputNV;

		[RequiredByFeature("GL_NV_register_combiners")]
		[ThreadStatic]
		internal static glGetCombinerInputParameterfvNV pglGetCombinerInputParameterfvNV;

		[RequiredByFeature("GL_NV_register_combiners")]
		[ThreadStatic]
		internal static glGetCombinerInputParameterivNV pglGetCombinerInputParameterivNV;

		[RequiredByFeature("GL_NV_register_combiners")]
		[ThreadStatic]
		internal static glGetCombinerOutputParameterfvNV pglGetCombinerOutputParameterfvNV;

		[RequiredByFeature("GL_NV_register_combiners")]
		[ThreadStatic]
		internal static glGetCombinerOutputParameterivNV pglGetCombinerOutputParameterivNV;

		[RequiredByFeature("GL_NV_register_combiners")]
		[ThreadStatic]
		internal static glGetFinalCombinerInputParameterfvNV pglGetFinalCombinerInputParameterfvNV;

		[RequiredByFeature("GL_NV_register_combiners")]
		[ThreadStatic]
		internal static glGetFinalCombinerInputParameterivNV pglGetFinalCombinerInputParameterivNV;

		[RequiredByFeature("GL_NV_register_combiners2")]
		[ThreadStatic]
		internal static glCombinerStageParameterfvNV pglCombinerStageParameterfvNV;

		[RequiredByFeature("GL_NV_register_combiners2")]
		[ThreadStatic]
		internal static glGetCombinerStageParameterfvNV pglGetCombinerStageParameterfvNV;

		[RequiredByFeature("GL_NV_sample_locations", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glFramebufferSampleLocationsfvNV pglFramebufferSampleLocationsfvNV;

		[RequiredByFeature("GL_NV_sample_locations", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glNamedFramebufferSampleLocationsfvNV pglNamedFramebufferSampleLocationsfvNV;

		[RequiredByFeature("GL_NV_sample_locations", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glResolveDepthValuesNV pglResolveDepthValuesNV;

		[RequiredByFeature("GL_NV_scissor_exclusive", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glScissorExclusiveNV pglScissorExclusiveNV;

		[RequiredByFeature("GL_NV_scissor_exclusive", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glScissorExclusiveArrayvNV pglScissorExclusiveArrayvNV;

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMakeBufferResidentNV pglMakeBufferResidentNV;

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMakeBufferNonResidentNV pglMakeBufferNonResidentNV;

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glIsBufferResidentNV pglIsBufferResidentNV;

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMakeNamedBufferResidentNV pglMakeNamedBufferResidentNV;

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glMakeNamedBufferNonResidentNV pglMakeNamedBufferNonResidentNV;

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glIsNamedBufferResidentNV pglIsNamedBufferResidentNV;

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetBufferParameterui64vNV pglGetBufferParameterui64vNV;

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetNamedBufferParameterui64vNV pglGetNamedBufferParameterui64vNV;

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetIntegerui64vNV pglGetIntegerui64vNV;

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniformui64NV pglUniformui64NV;

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glUniformui64vNV pglUniformui64vNV;

		[RequiredByFeature("GL_AMD_gpu_shader_int64")]
		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetUniformui64vNV pglGetUniformui64vNV;

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniformui64NV pglProgramUniformui64NV;

		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glProgramUniformui64vNV pglProgramUniformui64vNV;

		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glBindShadingRateImageNV pglBindShadingRateImageNV;

		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetShadingRateImagePaletteNV pglGetShadingRateImagePaletteNV;

		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glGetShadingRateSampleLocationivNV pglGetShadingRateSampleLocationivNV;

		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glShadingRateImageBarrierNV pglShadingRateImageBarrierNV;

		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glShadingRateImagePaletteNV pglShadingRateImagePaletteNV;

		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glShadingRateSampleOrderNV pglShadingRateSampleOrderNV;

		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glShadingRateSampleOrderCustomNV pglShadingRateSampleOrderCustomNV;

		[RequiredByFeature("GL_NV_texture_barrier", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTextureBarrierNV pglTextureBarrierNV;

		[RequiredByFeature("GL_NV_texture_multisample")]
		[ThreadStatic]
		internal static glTexImage2DMultisampleCoverageNV pglTexImage2DMultisampleCoverageNV;

		[RequiredByFeature("GL_NV_texture_multisample")]
		[ThreadStatic]
		internal static glTexImage3DMultisampleCoverageNV pglTexImage3DMultisampleCoverageNV;

		[RequiredByFeature("GL_NV_texture_multisample")]
		[ThreadStatic]
		internal static glTextureImage2DMultisampleNV pglTextureImage2DMultisampleNV;

		[RequiredByFeature("GL_NV_texture_multisample")]
		[ThreadStatic]
		internal static glTextureImage3DMultisampleNV pglTextureImage3DMultisampleNV;

		[RequiredByFeature("GL_NV_texture_multisample")]
		[ThreadStatic]
		internal static glTextureImage2DMultisampleCoverageNV pglTextureImage2DMultisampleCoverageNV;

		[RequiredByFeature("GL_NV_texture_multisample")]
		[ThreadStatic]
		internal static glTextureImage3DMultisampleCoverageNV pglTextureImage3DMultisampleCoverageNV;

		[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glCreateSemaphoresNV pglCreateSemaphoresNV;

		[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glSemaphoreParameterivNV pglSemaphoreParameterivNV;

		[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
		[ThreadStatic]
		internal static glGetSemaphoreParameterivNV pglGetSemaphoreParameterivNV;

		[RequiredByFeature("GL_NV_transform_feedback")]
		[ThreadStatic]
		internal static glTransformFeedbackAttribsNV pglTransformFeedbackAttribsNV;

		[RequiredByFeature("GL_NV_transform_feedback")]
		[ThreadStatic]
		internal static glTransformFeedbackVaryingsNV pglTransformFeedbackVaryingsNV;

		[RequiredByFeature("GL_NV_transform_feedback")]
		[ThreadStatic]
		internal static glActiveVaryingNV pglActiveVaryingNV;

		[RequiredByFeature("GL_NV_transform_feedback")]
		[ThreadStatic]
		internal static glGetVaryingLocationNV pglGetVaryingLocationNV;

		[RequiredByFeature("GL_NV_transform_feedback")]
		[ThreadStatic]
		internal static glGetActiveVaryingNV pglGetActiveVaryingNV;

		[RequiredByFeature("GL_NV_transform_feedback")]
		[ThreadStatic]
		internal static glGetTransformFeedbackVaryingNV pglGetTransformFeedbackVaryingNV;

		[RequiredByFeature("GL_NV_transform_feedback")]
		[ThreadStatic]
		internal static glTransformFeedbackStreamAttribsNV pglTransformFeedbackStreamAttribsNV;

		[RequiredByFeature("GL_NV_transform_feedback2")]
		[ThreadStatic]
		internal static glBindTransformFeedbackNV pglBindTransformFeedbackNV;

		[RequiredByFeature("GL_NV_vdpau_interop")]
		[ThreadStatic]
		internal static glVDPAUInitNV pglVDPAUInitNV;

		[RequiredByFeature("GL_NV_vdpau_interop")]
		[ThreadStatic]
		internal static glVDPAUFiniNV pglVDPAUFiniNV;

		[RequiredByFeature("GL_NV_vdpau_interop")]
		[ThreadStatic]
		internal static glVDPAURegisterVideoSurfaceNV pglVDPAURegisterVideoSurfaceNV;

		[RequiredByFeature("GL_NV_vdpau_interop")]
		[ThreadStatic]
		internal static glVDPAURegisterOutputSurfaceNV pglVDPAURegisterOutputSurfaceNV;

		[RequiredByFeature("GL_NV_vdpau_interop")]
		[ThreadStatic]
		internal static glVDPAUIsSurfaceNV pglVDPAUIsSurfaceNV;

		[RequiredByFeature("GL_NV_vdpau_interop")]
		[ThreadStatic]
		internal static glVDPAUUnregisterSurfaceNV pglVDPAUUnregisterSurfaceNV;

		[RequiredByFeature("GL_NV_vdpau_interop")]
		[ThreadStatic]
		internal static glVDPAUGetSurfaceivNV pglVDPAUGetSurfaceivNV;

		[RequiredByFeature("GL_NV_vdpau_interop")]
		[ThreadStatic]
		internal static glVDPAUSurfaceAccessNV pglVDPAUSurfaceAccessNV;

		[RequiredByFeature("GL_NV_vdpau_interop")]
		[ThreadStatic]
		internal static glVDPAUMapSurfacesNV pglVDPAUMapSurfacesNV;

		[RequiredByFeature("GL_NV_vdpau_interop")]
		[ThreadStatic]
		internal static glVDPAUUnmapSurfacesNV pglVDPAUUnmapSurfacesNV;

		[RequiredByFeature("GL_NV_vdpau_interop2")]
		[ThreadStatic]
		internal static glVDPAURegisterVideoSurfaceWithPictureStructureNV pglVDPAURegisterVideoSurfaceWithPictureStructureNV;

		[RequiredByFeature("GL_NV_vertex_array_range")]
		[ThreadStatic]
		internal static glFlushVertexArrayRangeNV pglFlushVertexArrayRangeNV;

		[RequiredByFeature("GL_NV_vertex_array_range")]
		[ThreadStatic]
		internal static glVertexArrayRangeNV pglVertexArrayRangeNV;

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribL1i64NV pglVertexAttribL1i64NV;

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribL2i64NV pglVertexAttribL2i64NV;

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribL3i64NV pglVertexAttribL3i64NV;

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribL4i64NV pglVertexAttribL4i64NV;

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribL1i64vNV pglVertexAttribL1i64vNV;

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribL2i64vNV pglVertexAttribL2i64vNV;

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribL3i64vNV pglVertexAttribL3i64vNV;

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribL4i64vNV pglVertexAttribL4i64vNV;

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribL1ui64NV pglVertexAttribL1ui64NV;

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribL2ui64NV pglVertexAttribL2ui64NV;

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribL3ui64NV pglVertexAttribL3ui64NV;

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribL4ui64NV pglVertexAttribL4ui64NV;

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribL1ui64vNV pglVertexAttribL1ui64vNV;

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribL2ui64vNV pglVertexAttribL2ui64vNV;

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribL3ui64vNV pglVertexAttribL3ui64vNV;

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribL4ui64vNV pglVertexAttribL4ui64vNV;

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetVertexAttribLi64vNV pglGetVertexAttribLi64vNV;

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetVertexAttribLui64vNV pglGetVertexAttribLui64vNV;

		[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribLFormatNV pglVertexAttribLFormatNV;

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glBufferAddressRangeNV pglBufferAddressRangeNV;

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexFormatNV pglVertexFormatNV;

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glNormalFormatNV pglNormalFormatNV;

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glColorFormatNV pglColorFormatNV;

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glIndexFormatNV pglIndexFormatNV;

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glTexCoordFormatNV pglTexCoordFormatNV;

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glEdgeFlagFormatNV pglEdgeFlagFormatNV;

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glSecondaryColorFormatNV pglSecondaryColorFormatNV;

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glFogCoordFormatNV pglFogCoordFormatNV;

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribFormatNV pglVertexAttribFormatNV;

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glVertexAttribIFormatNV pglVertexAttribIFormatNV;

		[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		[ThreadStatic]
		internal static glGetIntegerui64i_vNV pglGetIntegerui64i_vNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glAreProgramsResidentNV pglAreProgramsResidentNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glExecuteProgramNV pglExecuteProgramNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glGetProgramParameterdvNV pglGetProgramParameterdvNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glGetProgramParameterfvNV pglGetProgramParameterfvNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glGetProgramivNV pglGetProgramivNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glGetProgramStringNV pglGetProgramStringNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glGetTrackMatrixivNV pglGetTrackMatrixivNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glLoadProgramNV pglLoadProgramNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glProgramParameter4dNV pglProgramParameter4dNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glProgramParameter4dvNV pglProgramParameter4dvNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glProgramParameter4fNV pglProgramParameter4fNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glProgramParameter4fvNV pglProgramParameter4fvNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glProgramParameters4dvNV pglProgramParameters4dvNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glProgramParameters4fvNV pglProgramParameters4fvNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glRequestResidentProgramsNV pglRequestResidentProgramsNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glTrackMatrixNV pglTrackMatrixNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glVertexAttribPointerNV pglVertexAttribPointerNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glVertexAttribs1dvNV pglVertexAttribs1dvNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glVertexAttribs1fvNV pglVertexAttribs1fvNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glVertexAttribs1svNV pglVertexAttribs1svNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glVertexAttribs2dvNV pglVertexAttribs2dvNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glVertexAttribs2fvNV pglVertexAttribs2fvNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glVertexAttribs2svNV pglVertexAttribs2svNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glVertexAttribs3dvNV pglVertexAttribs3dvNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glVertexAttribs3fvNV pglVertexAttribs3fvNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glVertexAttribs3svNV pglVertexAttribs3svNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glVertexAttribs4dvNV pglVertexAttribs4dvNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glVertexAttribs4fvNV pglVertexAttribs4fvNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glVertexAttribs4svNV pglVertexAttribs4svNV;

		[RequiredByFeature("GL_NV_vertex_program")]
		[ThreadStatic]
		internal static glVertexAttribs4ubvNV pglVertexAttribs4ubvNV;

		[RequiredByFeature("GL_NV_video_capture")]
		[ThreadStatic]
		internal static glBeginVideoCaptureNV pglBeginVideoCaptureNV;

		[RequiredByFeature("GL_NV_video_capture")]
		[ThreadStatic]
		internal static glBindVideoCaptureStreamBufferNV pglBindVideoCaptureStreamBufferNV;

		[RequiredByFeature("GL_NV_video_capture")]
		[ThreadStatic]
		internal static glBindVideoCaptureStreamTextureNV pglBindVideoCaptureStreamTextureNV;

		[RequiredByFeature("GL_NV_video_capture")]
		[ThreadStatic]
		internal static glEndVideoCaptureNV pglEndVideoCaptureNV;

		[RequiredByFeature("GL_NV_video_capture")]
		[ThreadStatic]
		internal static glGetVideoCaptureivNV pglGetVideoCaptureivNV;

		[RequiredByFeature("GL_NV_video_capture")]
		[ThreadStatic]
		internal static glGetVideoCaptureStreamivNV pglGetVideoCaptureStreamivNV;

		[RequiredByFeature("GL_NV_video_capture")]
		[ThreadStatic]
		internal static glGetVideoCaptureStreamfvNV pglGetVideoCaptureStreamfvNV;

		[RequiredByFeature("GL_NV_video_capture")]
		[ThreadStatic]
		internal static glGetVideoCaptureStreamdvNV pglGetVideoCaptureStreamdvNV;

		[RequiredByFeature("GL_NV_video_capture")]
		[ThreadStatic]
		internal static glVideoCaptureNV pglVideoCaptureNV;

		[RequiredByFeature("GL_NV_video_capture")]
		[ThreadStatic]
		internal static glVideoCaptureStreamParameterivNV pglVideoCaptureStreamParameterivNV;

		[RequiredByFeature("GL_NV_video_capture")]
		[ThreadStatic]
		internal static glVideoCaptureStreamParameterfvNV pglVideoCaptureStreamParameterfvNV;

		[RequiredByFeature("GL_NV_video_capture")]
		[ThreadStatic]
		internal static glVideoCaptureStreamParameterdvNV pglVideoCaptureStreamParameterdvNV;

		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
		[ThreadStatic]
		internal static glDepthRangeArrayfvNV pglDepthRangeArrayfvNV;

		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
		[ThreadStatic]
		internal static glDepthRangeIndexedfNV pglDepthRangeIndexedfNV;

		[RequiredByFeature("GL_NV_viewport_swizzle", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glViewportSwizzleNV pglViewportSwizzleNV;

		[RequiredByFeature("GL_OES_blend_equation_separate", Api = "gles1")]
		[ThreadStatic]
		internal static glBlendEquationSeparateOES pglBlendEquationSeparateOES;

		[RequiredByFeature("GL_OES_blend_func_separate", Api = "gles1")]
		[ThreadStatic]
		internal static glBlendFuncSeparateOES pglBlendFuncSeparateOES;

		[RequiredByFeature("GL_OES_blend_subtract", Api = "gles1")]
		[ThreadStatic]
		internal static glBlendEquationOES pglBlendEquationOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glMultiTexCoord1bOES pglMultiTexCoord1bOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glMultiTexCoord1bvOES pglMultiTexCoord1bvOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glMultiTexCoord2bOES pglMultiTexCoord2bOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glMultiTexCoord2bvOES pglMultiTexCoord2bvOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glMultiTexCoord3bOES pglMultiTexCoord3bOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glMultiTexCoord3bvOES pglMultiTexCoord3bvOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glMultiTexCoord4bOES pglMultiTexCoord4bOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glMultiTexCoord4bvOES pglMultiTexCoord4bvOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glTexCoord1bOES pglTexCoord1bOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glTexCoord1bvOES pglTexCoord1bvOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glTexCoord2bOES pglTexCoord2bOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glTexCoord2bvOES pglTexCoord2bvOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glTexCoord3bOES pglTexCoord3bOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glTexCoord3bvOES pglTexCoord3bvOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glTexCoord4bOES pglTexCoord4bOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glTexCoord4bvOES pglTexCoord4bvOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glVertex2bOES pglVertex2bOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glVertex2bvOES pglVertex2bvOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glVertex3bOES pglVertex3bOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glVertex3bvOES pglVertex3bvOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glVertex4bOES pglVertex4bOES;

		[RequiredByFeature("GL_OES_byte_coordinates")]
		[ThreadStatic]
		internal static glVertex4bvOES pglVertex4bvOES;

		[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
		[ThreadStatic]
		internal static glDrawTexsOES pglDrawTexsOES;

		[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
		[ThreadStatic]
		internal static glDrawTexiOES pglDrawTexiOES;

		[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
		[ThreadStatic]
		internal static glDrawTexxOES pglDrawTexxOES;

		[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
		[ThreadStatic]
		internal static glDrawTexsvOES pglDrawTexsvOES;

		[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
		[ThreadStatic]
		internal static glDrawTexivOES pglDrawTexivOES;

		[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
		[ThreadStatic]
		internal static glDrawTexxvOES pglDrawTexxvOES;

		[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
		[ThreadStatic]
		internal static glDrawTexfOES pglDrawTexfOES;

		[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
		[ThreadStatic]
		internal static glDrawTexfvOES pglDrawTexfvOES;

		[RequiredByFeature("GL_OES_EGL_image", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glEGLImageTargetTexture2DOES pglEGLImageTargetTexture2DOES;

		[RequiredByFeature("GL_OES_EGL_image", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glEGLImageTargetRenderbufferStorageOES pglEGLImageTargetRenderbufferStorageOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glAlphaFuncxOES pglAlphaFuncxOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glClearColorxOES pglClearColorxOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glClearDepthxOES pglClearDepthxOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glClipPlanexOES pglClipPlanexOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glColor4xOES pglColor4xOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glDepthRangexOES pglDepthRangexOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glFogxOES pglFogxOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glFogxvOES pglFogxvOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glFrustumxOES pglFrustumxOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glGetClipPlanexOES pglGetClipPlanexOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glGetFixedvOES pglGetFixedvOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glGetTexEnvxvOES pglGetTexEnvxvOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glGetTexParameterxvOES pglGetTexParameterxvOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glLightModelxOES pglLightModelxOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glLightModelxvOES pglLightModelxvOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glLightxOES pglLightxOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glLightxvOES pglLightxvOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glLineWidthxOES pglLineWidthxOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glLoadMatrixxOES pglLoadMatrixxOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glMaterialxOES pglMaterialxOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glMaterialxvOES pglMaterialxvOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glMultMatrixxOES pglMultMatrixxOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glMultiTexCoord4xOES pglMultiTexCoord4xOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glNormal3xOES pglNormal3xOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glOrthoxOES pglOrthoxOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glPointParameterxvOES pglPointParameterxvOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glPointSizexOES pglPointSizexOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glPolygonOffsetxOES pglPolygonOffsetxOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glRotatexOES pglRotatexOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glScalexOES pglScalexOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glTexEnvxOES pglTexEnvxOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glTexEnvxvOES pglTexEnvxvOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glTexParameterxOES pglTexParameterxOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glTexParameterxvOES pglTexParameterxvOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glTranslatexOES pglTranslatexOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gles1")]
		[ThreadStatic]
		internal static glGetLightxvOES pglGetLightxvOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gles1")]
		[ThreadStatic]
		internal static glGetMaterialxvOES pglGetMaterialxvOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gles1")]
		[ThreadStatic]
		internal static glPointParameterxOES pglPointParameterxOES;

		[RequiredByFeature("GL_OES_fixed_point", Api = "gles1")]
		[ThreadStatic]
		internal static glSampleCoveragexOES pglSampleCoveragexOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glAccumxOES pglAccumxOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glBitmapxOES pglBitmapxOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glBlendColorxOES pglBlendColorxOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glClearAccumxOES pglClearAccumxOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glColor3xOES pglColor3xOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glColor3xvOES pglColor3xvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glColor4xvOES pglColor4xvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glConvolutionParameterxOES pglConvolutionParameterxOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glConvolutionParameterxvOES pglConvolutionParameterxvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glEvalCoord1xOES pglEvalCoord1xOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glEvalCoord1xvOES pglEvalCoord1xvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glEvalCoord2xOES pglEvalCoord2xOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glEvalCoord2xvOES pglEvalCoord2xvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glFeedbackBufferxOES pglFeedbackBufferxOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glGetConvolutionParameterxvOES pglGetConvolutionParameterxvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glGetHistogramParameterxvOES pglGetHistogramParameterxvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glGetLightxOES pglGetLightxOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glGetMapxvOES pglGetMapxvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glGetMaterialxOES pglGetMaterialxOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glGetPixelMapxv pglGetPixelMapxv;

		[RequiredByFeature("GL_OES_fixed_point")]
		[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
		[ThreadStatic]
		internal static glGetTexGenxvOES pglGetTexGenxvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glGetTexLevelParameterxvOES pglGetTexLevelParameterxvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glIndexxOES pglIndexxOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glIndexxvOES pglIndexxvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glLoadTransposeMatrixxOES pglLoadTransposeMatrixxOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glMap1xOES pglMap1xOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glMap2xOES pglMap2xOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glMapGrid1xOES pglMapGrid1xOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glMapGrid2xOES pglMapGrid2xOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glMultTransposeMatrixxOES pglMultTransposeMatrixxOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glMultiTexCoord1xOES pglMultiTexCoord1xOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glMultiTexCoord1xvOES pglMultiTexCoord1xvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glMultiTexCoord2xOES pglMultiTexCoord2xOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glMultiTexCoord2xvOES pglMultiTexCoord2xvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glMultiTexCoord3xOES pglMultiTexCoord3xOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glMultiTexCoord3xvOES pglMultiTexCoord3xvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glMultiTexCoord4xvOES pglMultiTexCoord4xvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glNormal3xvOES pglNormal3xvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glPassThroughxOES pglPassThroughxOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glPixelMapx pglPixelMapx;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glPixelStorex pglPixelStorex;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glPixelTransferxOES pglPixelTransferxOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glPixelZoomxOES pglPixelZoomxOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glPrioritizeTexturesxOES pglPrioritizeTexturesxOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glRasterPos2xOES pglRasterPos2xOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glRasterPos2xvOES pglRasterPos2xvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glRasterPos3xOES pglRasterPos3xOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glRasterPos3xvOES pglRasterPos3xvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glRasterPos4xOES pglRasterPos4xOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glRasterPos4xvOES pglRasterPos4xvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glRectxOES pglRectxOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glRectxvOES pglRectxvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glTexCoord1xOES pglTexCoord1xOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glTexCoord1xvOES pglTexCoord1xvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glTexCoord2xOES pglTexCoord2xOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glTexCoord2xvOES pglTexCoord2xvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glTexCoord3xOES pglTexCoord3xOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glTexCoord3xvOES pglTexCoord3xvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glTexCoord4xOES pglTexCoord4xOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glTexCoord4xvOES pglTexCoord4xvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
		[ThreadStatic]
		internal static glTexGenxOES pglTexGenxOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
		[ThreadStatic]
		internal static glTexGenxvOES pglTexGenxvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glVertex2xOES pglVertex2xOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glVertex2xvOES pglVertex2xvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glVertex3xOES pglVertex3xOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glVertex3xvOES pglVertex3xvOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glVertex4xOES pglVertex4xOES;

		[RequiredByFeature("GL_OES_fixed_point")]
		[ThreadStatic]
		internal static glVertex4xvOES pglVertex4xvOES;

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[ThreadStatic]
		internal static glIsRenderbufferOES pglIsRenderbufferOES;

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[ThreadStatic]
		internal static glBindRenderbufferOES pglBindRenderbufferOES;

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[ThreadStatic]
		internal static glDeleteRenderbuffersOES pglDeleteRenderbuffersOES;

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[ThreadStatic]
		internal static glGenRenderbuffersOES pglGenRenderbuffersOES;

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[ThreadStatic]
		internal static glRenderbufferStorageOES pglRenderbufferStorageOES;

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[ThreadStatic]
		internal static glGetRenderbufferParameterivOES pglGetRenderbufferParameterivOES;

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[ThreadStatic]
		internal static glIsFramebufferOES pglIsFramebufferOES;

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[ThreadStatic]
		internal static glBindFramebufferOES pglBindFramebufferOES;

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[ThreadStatic]
		internal static glDeleteFramebuffersOES pglDeleteFramebuffersOES;

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[ThreadStatic]
		internal static glGenFramebuffersOES pglGenFramebuffersOES;

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[ThreadStatic]
		internal static glCheckFramebufferStatusOES pglCheckFramebufferStatusOES;

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[ThreadStatic]
		internal static glFramebufferRenderbufferOES pglFramebufferRenderbufferOES;

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[ThreadStatic]
		internal static glFramebufferTexture2DOES pglFramebufferTexture2DOES;

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[ThreadStatic]
		internal static glGetFramebufferAttachmentParameterivOES pglGetFramebufferAttachmentParameterivOES;

		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		[ThreadStatic]
		internal static glGenerateMipmapOES pglGenerateMipmapOES;

		[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
		[ThreadStatic]
		internal static glCurrentPaletteMatrixOES pglCurrentPaletteMatrixOES;

		[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
		[ThreadStatic]
		internal static glLoadPaletteFromModelViewMatrixOES pglLoadPaletteFromModelViewMatrixOES;

		[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
		[ThreadStatic]
		internal static glMatrixIndexPointerOES pglMatrixIndexPointerOES;

		[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
		[ThreadStatic]
		internal static glWeightPointerOES pglWeightPointerOES;

		[RequiredByFeature("GL_OES_point_size_array", Api = "gles1")]
		[ThreadStatic]
		internal static glPointSizePointerOES pglPointSizePointerOES;

		[RequiredByFeature("GL_OES_query_matrix", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glQueryMatrixxOES pglQueryMatrixxOES;

		[RequiredByFeature("GL_OES_single_precision", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glClipPlanefOES pglClipPlanefOES;

		[RequiredByFeature("GL_OES_single_precision", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glFrustumfOES pglFrustumfOES;

		[RequiredByFeature("GL_OES_single_precision", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glGetClipPlanefOES pglGetClipPlanefOES;

		[RequiredByFeature("GL_OES_single_precision", Api = "gl|gles1")]
		[ThreadStatic]
		internal static glOrthofOES pglOrthofOES;

		[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
		[ThreadStatic]
		internal static glTexImage3DOES pglTexImage3DOES;

		[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
		[ThreadStatic]
		internal static glTexSubImage3DOES pglTexSubImage3DOES;

		[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
		[ThreadStatic]
		internal static glCopyTexSubImage3DOES pglCopyTexSubImage3DOES;

		[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
		[ThreadStatic]
		internal static glCompressedTexImage3DOES pglCompressedTexImage3DOES;

		[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
		[ThreadStatic]
		internal static glCompressedTexSubImage3DOES pglCompressedTexSubImage3DOES;

		[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
		[ThreadStatic]
		internal static glFramebufferTexture3DOES pglFramebufferTexture3DOES;

		[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
		[ThreadStatic]
		internal static glTexGenfOES pglTexGenfOES;

		[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
		[ThreadStatic]
		internal static glTexGenfvOES pglTexGenfvOES;

		[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
		[ThreadStatic]
		internal static glTexGeniOES pglTexGeniOES;

		[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
		[ThreadStatic]
		internal static glTexGenivOES pglTexGenivOES;

		[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
		[ThreadStatic]
		internal static glGetTexGenfvOES pglGetTexGenfvOES;

		[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
		[ThreadStatic]
		internal static glGetTexGenivOES pglGetTexGenivOES;

		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
		[ThreadStatic]
		internal static glDepthRangeArrayfvOES pglDepthRangeArrayfvOES;

		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
		[ThreadStatic]
		internal static glDepthRangeIndexedfOES pglDepthRangeIndexedfOES;

		[RequiredByFeature("GL_OVR_multiview", Api = "gl|glcore|gles2")]
		[ThreadStatic]
		internal static glFramebufferTextureMultiviewOVR pglFramebufferTextureMultiviewOVR;

		[RequiredByFeature("GL_OVR_multiview_multisampled_render_to_texture", Api = "gles2")]
		[ThreadStatic]
		internal static glFramebufferTextureMultisampleMultiviewOVR pglFramebufferTextureMultisampleMultiviewOVR;

		[RequiredByFeature("GL_PGI_misc_hints")]
		[ThreadStatic]
		internal static glHintPGI pglHintPGI;

		[RequiredByFeature("GL_QCOM_alpha_test", Api = "gles2")]
		[ThreadStatic]
		internal static glAlphaFuncQCOM pglAlphaFuncQCOM;

		[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glGetDriverControlsQCOM pglGetDriverControlsQCOM;

		[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glGetDriverControlStringQCOM pglGetDriverControlStringQCOM;

		[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glEnableDriverControlQCOM pglEnableDriverControlQCOM;

		[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glDisableDriverControlQCOM pglDisableDriverControlQCOM;

		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glExtGetTexturesQCOM pglExtGetTexturesQCOM;

		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glExtGetBuffersQCOM pglExtGetBuffersQCOM;

		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glExtGetRenderbuffersQCOM pglExtGetRenderbuffersQCOM;

		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glExtGetFramebuffersQCOM pglExtGetFramebuffersQCOM;

		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glExtGetTexLevelParameterivQCOM pglExtGetTexLevelParameterivQCOM;

		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glExtTexObjectStateOverrideiQCOM pglExtTexObjectStateOverrideiQCOM;

		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glExtGetTexSubImageQCOM pglExtGetTexSubImageQCOM;

		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glExtGetBufferPointervQCOM pglExtGetBufferPointervQCOM;

		[RequiredByFeature("GL_QCOM_extended_get2", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glExtGetShadersQCOM pglExtGetShadersQCOM;

		[RequiredByFeature("GL_QCOM_extended_get2", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glExtGetProgramsQCOM pglExtGetProgramsQCOM;

		[RequiredByFeature("GL_QCOM_extended_get2", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glExtIsProgramBinaryQCOM pglExtIsProgramBinaryQCOM;

		[RequiredByFeature("GL_QCOM_extended_get2", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glExtGetProgramBinarySourceQCOM pglExtGetProgramBinarySourceQCOM;

		[RequiredByFeature("GL_QCOM_framebuffer_foveated", Api = "gles2")]
		[ThreadStatic]
		internal static glFramebufferFoveationConfigQCOM pglFramebufferFoveationConfigQCOM;

		[RequiredByFeature("GL_QCOM_framebuffer_foveated", Api = "gles2")]
		[ThreadStatic]
		internal static glFramebufferFoveationParametersQCOM pglFramebufferFoveationParametersQCOM;

		[RequiredByFeature("GL_QCOM_frame_extrapolation", Api = "gles2")]
		[ThreadStatic]
		internal static glExtrapolateTex2DQCOM pglExtrapolateTex2DQCOM;

		[RequiredByFeature("GL_QCOM_motion_estimation", Api = "gles2")]
		[ThreadStatic]
		internal static glTexEstimateMotionQCOM pglTexEstimateMotionQCOM;

		[RequiredByFeature("GL_QCOM_motion_estimation", Api = "gles2")]
		[ThreadStatic]
		internal static glTexEstimateMotionRegionsQCOM pglTexEstimateMotionRegionsQCOM;

		[RequiredByFeature("GL_QCOM_shader_framebuffer_fetch_noncoherent", Api = "gles2")]
		[ThreadStatic]
		internal static glFramebufferFetchBarrierQCOM pglFramebufferFetchBarrierQCOM;

		[RequiredByFeature("GL_QCOM_shading_rate", Api = "gles2")]
		[ThreadStatic]
		internal static glShadingRateQCOM pglShadingRateQCOM;

		[RequiredByFeature("GL_QCOM_texture_foveated", Api = "gles2")]
		[ThreadStatic]
		internal static glTextureFoveationParametersQCOM pglTextureFoveationParametersQCOM;

		[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glStartTilingQCOM pglStartTilingQCOM;

		[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
		[ThreadStatic]
		internal static glEndTilingQCOM pglEndTilingQCOM;

		[RequiredByFeature("GL_SGIS_detail_texture")]
		[ThreadStatic]
		internal static glDetailTexFuncSGIS pglDetailTexFuncSGIS;

		[RequiredByFeature("GL_SGIS_detail_texture")]
		[ThreadStatic]
		internal static glGetDetailTexFuncSGIS pglGetDetailTexFuncSGIS;

		[RequiredByFeature("GL_SGIS_fog_function")]
		[ThreadStatic]
		internal static glFogFuncSGIS pglFogFuncSGIS;

		[RequiredByFeature("GL_SGIS_fog_function")]
		[ThreadStatic]
		internal static glGetFogFuncSGIS pglGetFogFuncSGIS;

		[RequiredByFeature("GL_SGIS_pixel_texture")]
		[ThreadStatic]
		internal static glPixelTexGenParameteriSGIS pglPixelTexGenParameteriSGIS;

		[RequiredByFeature("GL_SGIS_pixel_texture")]
		[ThreadStatic]
		internal static glPixelTexGenParameterivSGIS pglPixelTexGenParameterivSGIS;

		[RequiredByFeature("GL_SGIS_pixel_texture")]
		[ThreadStatic]
		internal static glPixelTexGenParameterfSGIS pglPixelTexGenParameterfSGIS;

		[RequiredByFeature("GL_SGIS_pixel_texture")]
		[ThreadStatic]
		internal static glPixelTexGenParameterfvSGIS pglPixelTexGenParameterfvSGIS;

		[RequiredByFeature("GL_SGIS_pixel_texture")]
		[ThreadStatic]
		internal static glGetPixelTexGenParameterivSGIS pglGetPixelTexGenParameterivSGIS;

		[RequiredByFeature("GL_SGIS_pixel_texture")]
		[ThreadStatic]
		internal static glGetPixelTexGenParameterfvSGIS pglGetPixelTexGenParameterfvSGIS;

		[RequiredByFeature("GL_SGIS_sharpen_texture")]
		[ThreadStatic]
		internal static glSharpenTexFuncSGIS pglSharpenTexFuncSGIS;

		[RequiredByFeature("GL_SGIS_sharpen_texture")]
		[ThreadStatic]
		internal static glGetSharpenTexFuncSGIS pglGetSharpenTexFuncSGIS;

		[RequiredByFeature("GL_SGIS_texture4D")]
		[ThreadStatic]
		internal static glTexImage4DSGIS pglTexImage4DSGIS;

		[RequiredByFeature("GL_SGIS_texture4D")]
		[ThreadStatic]
		internal static glTexSubImage4DSGIS pglTexSubImage4DSGIS;

		[RequiredByFeature("GL_SGIS_texture_color_mask")]
		[ThreadStatic]
		internal static glTextureColorMaskSGIS pglTextureColorMaskSGIS;

		[RequiredByFeature("GL_SGIS_texture_filter4")]
		[ThreadStatic]
		internal static glGetTexFilterFuncSGIS pglGetTexFilterFuncSGIS;

		[RequiredByFeature("GL_SGIS_texture_filter4")]
		[ThreadStatic]
		internal static glTexFilterFuncSGIS pglTexFilterFuncSGIS;

		[RequiredByFeature("GL_SGIX_async")]
		[ThreadStatic]
		internal static glAsyncMarkerSGIX pglAsyncMarkerSGIX;

		[RequiredByFeature("GL_SGIX_async")]
		[ThreadStatic]
		internal static glFinishAsyncSGIX pglFinishAsyncSGIX;

		[RequiredByFeature("GL_SGIX_async")]
		[ThreadStatic]
		internal static glPollAsyncSGIX pglPollAsyncSGIX;

		[RequiredByFeature("GL_SGIX_async")]
		[ThreadStatic]
		internal static glGenAsyncMarkersSGIX pglGenAsyncMarkersSGIX;

		[RequiredByFeature("GL_SGIX_async")]
		[ThreadStatic]
		internal static glDeleteAsyncMarkersSGIX pglDeleteAsyncMarkersSGIX;

		[RequiredByFeature("GL_SGIX_async")]
		[ThreadStatic]
		internal static glIsAsyncMarkerSGIX pglIsAsyncMarkerSGIX;

		[RequiredByFeature("GL_SGIX_flush_raster")]
		[ThreadStatic]
		internal static glFlushRasterSGIX pglFlushRasterSGIX;

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[ThreadStatic]
		internal static glFragmentColorMaterialSGIX pglFragmentColorMaterialSGIX;

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[ThreadStatic]
		internal static glFragmentLightfSGIX pglFragmentLightfSGIX;

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[ThreadStatic]
		internal static glFragmentLightfvSGIX pglFragmentLightfvSGIX;

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[ThreadStatic]
		internal static glFragmentLightiSGIX pglFragmentLightiSGIX;

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[ThreadStatic]
		internal static glFragmentLightivSGIX pglFragmentLightivSGIX;

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[ThreadStatic]
		internal static glFragmentLightModelfSGIX pglFragmentLightModelfSGIX;

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[ThreadStatic]
		internal static glFragmentLightModelfvSGIX pglFragmentLightModelfvSGIX;

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[ThreadStatic]
		internal static glFragmentLightModeliSGIX pglFragmentLightModeliSGIX;

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[ThreadStatic]
		internal static glFragmentLightModelivSGIX pglFragmentLightModelivSGIX;

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[ThreadStatic]
		internal static glFragmentMaterialfSGIX pglFragmentMaterialfSGIX;

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[ThreadStatic]
		internal static glFragmentMaterialfvSGIX pglFragmentMaterialfvSGIX;

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[ThreadStatic]
		internal static glFragmentMaterialiSGIX pglFragmentMaterialiSGIX;

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[ThreadStatic]
		internal static glFragmentMaterialivSGIX pglFragmentMaterialivSGIX;

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[ThreadStatic]
		internal static glGetFragmentLightfvSGIX pglGetFragmentLightfvSGIX;

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[ThreadStatic]
		internal static glGetFragmentLightivSGIX pglGetFragmentLightivSGIX;

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[ThreadStatic]
		internal static glGetFragmentMaterialfvSGIX pglGetFragmentMaterialfvSGIX;

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[ThreadStatic]
		internal static glGetFragmentMaterialivSGIX pglGetFragmentMaterialivSGIX;

		[RequiredByFeature("GL_SGIX_fragment_lighting")]
		[ThreadStatic]
		internal static glLightEnviSGIX pglLightEnviSGIX;

		[RequiredByFeature("GL_SGIX_framezoom")]
		[ThreadStatic]
		internal static glFrameZoomSGIX pglFrameZoomSGIX;

		[RequiredByFeature("GL_SGIX_igloo_interface")]
		[ThreadStatic]
		internal static glIglooInterfaceSGIX pglIglooInterfaceSGIX;

		[RequiredByFeature("GL_SGIX_instruments")]
		[ThreadStatic]
		internal static glGetInstrumentsSGIX pglGetInstrumentsSGIX;

		[RequiredByFeature("GL_SGIX_instruments")]
		[ThreadStatic]
		internal static glInstrumentsBufferSGIX pglInstrumentsBufferSGIX;

		[RequiredByFeature("GL_SGIX_instruments")]
		[ThreadStatic]
		internal static glPollInstrumentsSGIX pglPollInstrumentsSGIX;

		[RequiredByFeature("GL_SGIX_instruments")]
		[ThreadStatic]
		internal static glReadInstrumentsSGIX pglReadInstrumentsSGIX;

		[RequiredByFeature("GL_SGIX_instruments")]
		[ThreadStatic]
		internal static glStartInstrumentsSGIX pglStartInstrumentsSGIX;

		[RequiredByFeature("GL_SGIX_instruments")]
		[ThreadStatic]
		internal static glStopInstrumentsSGIX pglStopInstrumentsSGIX;

		[RequiredByFeature("GL_SGIX_list_priority")]
		[ThreadStatic]
		internal static glGetListParameterfvSGIX pglGetListParameterfvSGIX;

		[RequiredByFeature("GL_SGIX_list_priority")]
		[ThreadStatic]
		internal static glGetListParameterivSGIX pglGetListParameterivSGIX;

		[RequiredByFeature("GL_SGIX_list_priority")]
		[ThreadStatic]
		internal static glListParameterfSGIX pglListParameterfSGIX;

		[RequiredByFeature("GL_SGIX_list_priority")]
		[ThreadStatic]
		internal static glListParameterfvSGIX pglListParameterfvSGIX;

		[RequiredByFeature("GL_SGIX_list_priority")]
		[ThreadStatic]
		internal static glListParameteriSGIX pglListParameteriSGIX;

		[RequiredByFeature("GL_SGIX_list_priority")]
		[ThreadStatic]
		internal static glListParameterivSGIX pglListParameterivSGIX;

		[RequiredByFeature("GL_SGIX_pixel_texture")]
		[ThreadStatic]
		internal static glPixelTexGenSGIX pglPixelTexGenSGIX;

		[RequiredByFeature("GL_SGIX_polynomial_ffd")]
		[ThreadStatic]
		internal static glDeformationMap3dSGIX pglDeformationMap3dSGIX;

		[RequiredByFeature("GL_SGIX_polynomial_ffd")]
		[ThreadStatic]
		internal static glDeformationMap3fSGIX pglDeformationMap3fSGIX;

		[RequiredByFeature("GL_SGIX_polynomial_ffd")]
		[ThreadStatic]
		internal static glDeformSGIX pglDeformSGIX;

		[RequiredByFeature("GL_SGIX_polynomial_ffd")]
		[ThreadStatic]
		internal static glLoadIdentityDeformationMapSGIX pglLoadIdentityDeformationMapSGIX;

		[RequiredByFeature("GL_SGIX_reference_plane")]
		[ThreadStatic]
		internal static glReferencePlaneSGIX pglReferencePlaneSGIX;

		[RequiredByFeature("GL_SGIX_sprite")]
		[ThreadStatic]
		internal static glSpriteParameterfSGIX pglSpriteParameterfSGIX;

		[RequiredByFeature("GL_SGIX_sprite")]
		[ThreadStatic]
		internal static glSpriteParameterfvSGIX pglSpriteParameterfvSGIX;

		[RequiredByFeature("GL_SGIX_sprite")]
		[ThreadStatic]
		internal static glSpriteParameteriSGIX pglSpriteParameteriSGIX;

		[RequiredByFeature("GL_SGIX_sprite")]
		[ThreadStatic]
		internal static glSpriteParameterivSGIX pglSpriteParameterivSGIX;

		[RequiredByFeature("GL_SGIX_tag_sample_buffer")]
		[ThreadStatic]
		internal static glTagSampleBufferSGIX pglTagSampleBufferSGIX;

		[RequiredByFeature("GL_SGI_color_table")]
		[ThreadStatic]
		internal static glGetColorTableSGI pglGetColorTableSGI;

		[RequiredByFeature("GL_SGI_color_table")]
		[ThreadStatic]
		internal static glGetColorTableParameterfvSGI pglGetColorTableParameterfvSGI;

		[RequiredByFeature("GL_SGI_color_table")]
		[ThreadStatic]
		internal static glGetColorTableParameterivSGI pglGetColorTableParameterivSGI;

		[RequiredByFeature("GL_SUNX_constant_data")]
		[ThreadStatic]
		internal static glFinishTextureSUNX pglFinishTextureSUNX;

		[RequiredByFeature("GL_SUN_global_alpha")]
		[ThreadStatic]
		internal static glGlobalAlphaFactorbSUN pglGlobalAlphaFactorbSUN;

		[RequiredByFeature("GL_SUN_global_alpha")]
		[ThreadStatic]
		internal static glGlobalAlphaFactorsSUN pglGlobalAlphaFactorsSUN;

		[RequiredByFeature("GL_SUN_global_alpha")]
		[ThreadStatic]
		internal static glGlobalAlphaFactoriSUN pglGlobalAlphaFactoriSUN;

		[RequiredByFeature("GL_SUN_global_alpha")]
		[ThreadStatic]
		internal static glGlobalAlphaFactorfSUN pglGlobalAlphaFactorfSUN;

		[RequiredByFeature("GL_SUN_global_alpha")]
		[ThreadStatic]
		internal static glGlobalAlphaFactordSUN pglGlobalAlphaFactordSUN;

		[RequiredByFeature("GL_SUN_global_alpha")]
		[ThreadStatic]
		internal static glGlobalAlphaFactorubSUN pglGlobalAlphaFactorubSUN;

		[RequiredByFeature("GL_SUN_global_alpha")]
		[ThreadStatic]
		internal static glGlobalAlphaFactorusSUN pglGlobalAlphaFactorusSUN;

		[RequiredByFeature("GL_SUN_global_alpha")]
		[ThreadStatic]
		internal static glGlobalAlphaFactoruiSUN pglGlobalAlphaFactoruiSUN;

		[RequiredByFeature("GL_SUN_mesh_array")]
		[ThreadStatic]
		internal static glDrawMeshArraysSUN pglDrawMeshArraysSUN;

		[RequiredByFeature("GL_SUN_triangle_list")]
		[ThreadStatic]
		internal static glReplacementCodeuiSUN pglReplacementCodeuiSUN;

		[RequiredByFeature("GL_SUN_triangle_list")]
		[ThreadStatic]
		internal static glReplacementCodeusSUN pglReplacementCodeusSUN;

		[RequiredByFeature("GL_SUN_triangle_list")]
		[ThreadStatic]
		internal static glReplacementCodeubSUN pglReplacementCodeubSUN;

		[RequiredByFeature("GL_SUN_triangle_list")]
		[ThreadStatic]
		internal static glReplacementCodeuivSUN pglReplacementCodeuivSUN;

		[RequiredByFeature("GL_SUN_triangle_list")]
		[ThreadStatic]
		internal static glReplacementCodeusvSUN pglReplacementCodeusvSUN;

		[RequiredByFeature("GL_SUN_triangle_list")]
		[ThreadStatic]
		internal static glReplacementCodeubvSUN pglReplacementCodeubvSUN;

		[RequiredByFeature("GL_SUN_triangle_list")]
		[ThreadStatic]
		internal static glReplacementCodePointerSUN pglReplacementCodePointerSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glColor4ubVertex2fSUN pglColor4ubVertex2fSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glColor4ubVertex2fvSUN pglColor4ubVertex2fvSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glColor4ubVertex3fSUN pglColor4ubVertex3fSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glColor4ubVertex3fvSUN pglColor4ubVertex3fvSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glColor3fVertex3fSUN pglColor3fVertex3fSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glColor3fVertex3fvSUN pglColor3fVertex3fvSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glNormal3fVertex3fSUN pglNormal3fVertex3fSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glNormal3fVertex3fvSUN pglNormal3fVertex3fvSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glColor4fNormal3fVertex3fSUN pglColor4fNormal3fVertex3fSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glColor4fNormal3fVertex3fvSUN pglColor4fNormal3fVertex3fvSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glTexCoord2fVertex3fSUN pglTexCoord2fVertex3fSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glTexCoord2fVertex3fvSUN pglTexCoord2fVertex3fvSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glTexCoord4fVertex4fSUN pglTexCoord4fVertex4fSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glTexCoord4fVertex4fvSUN pglTexCoord4fVertex4fvSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glTexCoord2fColor4ubVertex3fSUN pglTexCoord2fColor4ubVertex3fSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glTexCoord2fColor4ubVertex3fvSUN pglTexCoord2fColor4ubVertex3fvSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glTexCoord2fColor3fVertex3fSUN pglTexCoord2fColor3fVertex3fSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glTexCoord2fColor3fVertex3fvSUN pglTexCoord2fColor3fVertex3fvSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glTexCoord2fNormal3fVertex3fSUN pglTexCoord2fNormal3fVertex3fSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glTexCoord2fNormal3fVertex3fvSUN pglTexCoord2fNormal3fVertex3fvSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glTexCoord2fColor4fNormal3fVertex3fSUN pglTexCoord2fColor4fNormal3fVertex3fSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glTexCoord2fColor4fNormal3fVertex3fvSUN pglTexCoord2fColor4fNormal3fVertex3fvSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glTexCoord4fColor4fNormal3fVertex4fSUN pglTexCoord4fColor4fNormal3fVertex4fSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glTexCoord4fColor4fNormal3fVertex4fvSUN pglTexCoord4fColor4fNormal3fVertex4fvSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glReplacementCodeuiVertex3fSUN pglReplacementCodeuiVertex3fSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glReplacementCodeuiVertex3fvSUN pglReplacementCodeuiVertex3fvSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glReplacementCodeuiColor4ubVertex3fSUN pglReplacementCodeuiColor4ubVertex3fSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glReplacementCodeuiColor4ubVertex3fvSUN pglReplacementCodeuiColor4ubVertex3fvSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glReplacementCodeuiColor3fVertex3fSUN pglReplacementCodeuiColor3fVertex3fSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glReplacementCodeuiColor3fVertex3fvSUN pglReplacementCodeuiColor3fVertex3fvSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glReplacementCodeuiNormal3fVertex3fSUN pglReplacementCodeuiNormal3fVertex3fSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glReplacementCodeuiNormal3fVertex3fvSUN pglReplacementCodeuiNormal3fVertex3fvSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glReplacementCodeuiColor4fNormal3fVertex3fSUN pglReplacementCodeuiColor4fNormal3fVertex3fSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glReplacementCodeuiColor4fNormal3fVertex3fvSUN pglReplacementCodeuiColor4fNormal3fVertex3fvSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glReplacementCodeuiTexCoord2fVertex3fSUN pglReplacementCodeuiTexCoord2fVertex3fSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glReplacementCodeuiTexCoord2fVertex3fvSUN pglReplacementCodeuiTexCoord2fVertex3fvSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN pglReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN pglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN pglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;

		[RequiredByFeature("GL_SUN_vertex")]
		[ThreadStatic]
		internal static glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN pglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
	}

	[UnmanagedFunctionPointer(CallingConvention.Winapi)]
	public delegate void DebugProc(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, nint message, nint userParam);

	public delegate nint VulkanProc();

	public class Extensions : ExtensionsCollection
	{
		[CoreExtension(3, 1)]
		[CoreExtension(3, 0, "gles2")]
		public bool PrimitiveRestart;

		[CoreExtension(3, 2)]
		[Extension("GL_ARB_instanced_arrays")]
		public bool InstancedArrays;

		[Extension("GL_ARB_multitexture")]
		public bool Multitexture_ARB;

		[Extension("GL_ARB_transpose_matrix")]
		public bool TransposeMatrix_ARB;

		[Extension("GL_ARB_multisample")]
		public bool Multisample_ARB;

		[Extension("GL_ARB_texture_env_add")]
		public bool TextureEnvAdd_ARB;

		[Extension("GL_ARB_texture_cube_map")]
		public bool TextureCubeMap_ARB;

		[Extension("GL_ARB_texture_compression")]
		public bool TextureCompression_ARB;

		[Extension("GL_ARB_texture_border_clamp", Api = "gl|glcore")]
		public bool TextureBorderClamp_ARB;

		[Extension("GL_ARB_point_parameters")]
		public bool PointParameters_ARB;

		[Extension("GL_ARB_vertex_blend")]
		public bool VertexBlend_ARB;

		[Extension("GL_ARB_matrix_palette")]
		public bool MatrixPalette_ARB;

		[Extension("GL_ARB_texture_env_combine")]
		public bool TextureEnvCombine_ARB;

		[Extension("GL_ARB_texture_env_crossbar")]
		public bool TextureEnvCrossbar_ARB;

		[Extension("GL_ARB_texture_env_dot3")]
		public bool TextureEnvDot3_ARB;

		[Extension("GL_ARB_texture_mirrored_repeat", Api = "gl|glcore")]
		public bool TextureMirroredRepeat_ARB;

		[Extension("GL_ARB_depth_texture")]
		public bool DepthTexture_ARB;

		[Extension("GL_ARB_shadow")]
		public bool Shadow_ARB;

		[Extension("GL_ARB_shadow_ambient")]
		public bool ShadowAmbient_ARB;

		[Extension("GL_ARB_window_pos")]
		public bool WindowPos_ARB;

		[Extension("GL_ARB_vertex_program")]
		public bool VertexProgram_ARB;

		[Extension("GL_ARB_fragment_program")]
		public bool FragmentProgram_ARB;

		[Extension("GL_ARB_vertex_buffer_object")]
		public bool VertexBufferObject_ARB;

		[Extension("GL_ARB_occlusion_query")]
		public bool OcclusionQuery_ARB;

		[Extension("GL_ARB_shader_objects")]
		public bool ShaderObjects_ARB;

		[Extension("GL_ARB_vertex_shader")]
		public bool VertexShader_ARB;

		[Extension("GL_ARB_fragment_shader")]
		public bool FragmentShader_ARB;

		[Extension("GL_ARB_shading_language_100")]
		public bool ShadingLanguage100_ARB;

		[Extension("GL_ARB_texture_non_power_of_two", Api = "gl|glcore")]
		public bool TextureNonPowerOfTwo_ARB;

		[Extension("GL_ARB_point_sprite")]
		public bool PointSprite_ARB;

		[Extension("GL_ARB_fragment_program_shadow")]
		public bool FragmentProgramShadow_ARB;

		[Extension("GL_ARB_draw_buffers")]
		public bool DrawBuffers_ARB;

		[Extension("GL_ARB_texture_rectangle")]
		public bool TextureRectangle_ARB;

		[Extension("GL_ARB_color_buffer_float")]
		public bool ColorBufferFloat_ARB;

		[Extension("GL_ARB_half_float_pixel")]
		public bool HalfFloatPixel_ARB;

		[Extension("GL_ARB_texture_float")]
		public bool TextureFloat_ARB;

		[Extension("GL_ARB_pixel_buffer_object", Api = "gl|glcore")]
		public bool PixelBufferObject_ARB;

		[Extension("GL_ARB_depth_buffer_float", Api = "gl|glcore")]
		public bool DepthBufferFloat_ARB;

		[Extension("GL_ARB_draw_instanced", Api = "gl|glcore")]
		public bool DrawInstanced_ARB;

		[Extension("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		public bool FramebufferObject_ARB;

		[Extension("GL_ARB_framebuffer_sRGB", Api = "gl|glcore")]
		public bool FramebufferSRGB_ARB;

		[Extension("GL_ARB_geometry_shader4", Api = "gl|glcore")]
		public bool GeometryShader4_ARB;

		[Extension("GL_ARB_half_float_vertex", Api = "gl|glcore")]
		public bool HalfFloatVertex_ARB;

		[Extension("GL_ARB_instanced_arrays", Api = "gl|glcore")]
		public bool InstancedArrays_ARB;

		[Extension("GL_ARB_map_buffer_range", Api = "gl|glcore")]
		public bool MapBufferRange_ARB;

		[Extension("GL_ARB_texture_buffer_object", Api = "gl|glcore")]
		public bool TextureBufferObject_ARB;

		[Extension("GL_ARB_texture_compression_rgtc", Api = "gl|glcore")]
		public bool TextureCompressionRgtc_ARB;

		[Extension("GL_ARB_texture_rg", Api = "gl|glcore")]
		public bool TextureRg_ARB;

		[Extension("GL_ARB_vertex_array_object", Api = "gl|glcore")]
		public bool VertexArrayObject_ARB;

		[Extension("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		public bool UniformBufferObject_ARB;

		[Extension("GL_ARB_compatibility")]
		public bool Compatibility_ARB;

		[Extension("GL_ARB_copy_buffer", Api = "gl|glcore")]
		public bool CopyBuffer_ARB;

		[Extension("GL_ARB_shader_texture_lod")]
		public bool ShaderTextureLod_ARB;

		[Extension("GL_ARB_depth_clamp", Api = "gl|glcore")]
		public bool DepthClamp_ARB;

		[Extension("GL_ARB_draw_elements_base_vertex", Api = "gl|glcore")]
		public bool DrawElementsBaseVertex_ARB;

		[Extension("GL_ARB_fragment_coord_conventions", Api = "gl|glcore")]
		public bool FragmentCoordConventions_ARB;

		[Extension("GL_ARB_provoking_vertex", Api = "gl|glcore")]
		public bool ProvokingVertex_ARB;

		[Extension("GL_ARB_seamless_cube_map", Api = "gl|glcore")]
		public bool SeamlessCubeMap_ARB;

		[Extension("GL_ARB_sync", Api = "gl|glcore")]
		public bool Sync_ARB;

		[Extension("GL_ARB_texture_multisample", Api = "gl|glcore")]
		public bool TextureMultisample_ARB;

		[Extension("GL_ARB_vertex_array_bgra", Api = "gl|glcore")]
		public bool VertexArrayBgra_ARB;

		[Extension("GL_ARB_draw_buffers_blend", Api = "gl|glcore")]
		public bool DrawBuffersBlend_ARB;

		[Extension("GL_ARB_sample_shading", Api = "gl|glcore")]
		public bool SampleShading_ARB;

		[Extension("GL_ARB_texture_cube_map_array", Api = "gl|glcore")]
		public bool TextureCubeMapArray_ARB;

		[Extension("GL_ARB_texture_gather", Api = "gl|glcore")]
		public bool TextureGather_ARB;

		[Extension("GL_ARB_texture_query_lod", Api = "gl|glcore")]
		public bool TextureQueryLod_ARB;

		[Extension("GL_ARB_shading_language_include", Api = "gl|glcore")]
		public bool ShadingLanguageInclude_ARB;

		[Extension("GL_ARB_texture_compression_bptc", Api = "gl|glcore")]
		public bool TextureCompressionBptc_ARB;

		[Extension("GL_ARB_blend_func_extended", Api = "gl|glcore")]
		public bool BlendFuncExtended_ARB;

		[Extension("GL_ARB_explicit_attrib_location", Api = "gl|glcore")]
		public bool ExplicitAttribLocation_ARB;

		[Extension("GL_ARB_occlusion_query2", Api = "gl|glcore")]
		public bool OcclusionQuery2_ARB;

		[Extension("GL_ARB_sampler_objects", Api = "gl|glcore")]
		public bool SamplerObjects_ARB;

		[Extension("GL_ARB_shader_bit_encoding", Api = "gl|glcore")]
		public bool ShaderBitEncoding_ARB;

		[Extension("GL_ARB_texture_rgb10_a2ui", Api = "gl|glcore")]
		public bool TextureRgb10A2ui_ARB;

		[Extension("GL_ARB_texture_swizzle", Api = "gl|glcore")]
		public bool TextureSwizzle_ARB;

		[Extension("GL_ARB_timer_query", Api = "gl|glcore")]
		public bool TimerQuery_ARB;

		[Extension("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
		public bool VertexType2101010Rev_ARB;

		[Extension("GL_ARB_draw_indirect", Api = "gl|glcore")]
		public bool DrawIndirect_ARB;

		[Extension("GL_ARB_gpu_shader5", Api = "gl|glcore")]
		public bool GpuShader5_ARB;

		[Extension("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
		public bool GpuShaderFp64_ARB;

		[Extension("GL_ARB_shader_subroutine", Api = "gl|glcore")]
		public bool ShaderSubroutine_ARB;

		[Extension("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		public bool TessellationShader_ARB;

		[Extension("GL_ARB_texture_buffer_object_rgb32", Api = "gl|glcore")]
		public bool TextureBufferObjectRgb32_ARB;

		[Extension("GL_ARB_transform_feedback2", Api = "gl|glcore")]
		public bool TransformFeedback2_ARB;

		[Extension("GL_ARB_transform_feedback3", Api = "gl|glcore")]
		public bool TransformFeedback3_ARB;

		[Extension("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
		public bool ES2Compatibility_ARB;

		[Extension("GL_ARB_get_program_binary", Api = "gl|glcore")]
		public bool GetProgramBinary_ARB;

		[Extension("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
		public bool SeparateShaderObjects_ARB;

		[Extension("GL_ARB_shader_precision", Api = "gl|glcore")]
		public bool ShaderPrecision_ARB;

		[Extension("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
		public bool VertexAttrib64bit_ARB;

		[Extension("GL_ARB_viewport_array", Api = "gl|glcore")]
		public bool ViewportArray_ARB;

		[Extension("GL_ARB_cl_event", Api = "gl|glcore")]
		public bool ClEvent_ARB;

		[Extension("GL_ARB_debug_output", Api = "gl|glcore")]
		public bool DebugOutput_ARB;

		[Extension("GL_ARB_robustness", Api = "gl|glcore")]
		public bool Robustness_ARB;

		[Extension("GL_ARB_shader_stencil_export", Api = "gl|glcore")]
		public bool ShaderStencilExport_ARB;

		[Extension("GL_ARB_base_instance", Api = "gl|glcore")]
		public bool BaseInstance_ARB;

		[Extension("GL_ARB_shading_language_420pack", Api = "gl|glcore")]
		public bool ShadingLanguage420pack_ARB;

		[Extension("GL_ARB_transform_feedback_instanced", Api = "gl|glcore")]
		public bool TransformFeedbackInstanced_ARB;

		[Extension("GL_ARB_compressed_texture_pixel_storage", Api = "gl|glcore")]
		public bool CompressedTexturePixelStorage_ARB;

		[Extension("GL_ARB_conservative_depth", Api = "gl|glcore")]
		public bool ConservativeDepth_ARB;

		[Extension("GL_ARB_internalformat_query", Api = "gl|glcore")]
		public bool InternalformatQuery_ARB;

		[Extension("GL_ARB_map_buffer_alignment", Api = "gl|glcore")]
		public bool MapBufferAlignment_ARB;

		[Extension("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
		public bool ShaderAtomicCounters_ARB;

		[Extension("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
		public bool ShaderImageLoadStore_ARB;

		[Extension("GL_ARB_shading_language_packing", Api = "gl|glcore")]
		public bool ShadingLanguagePacking_ARB;

		[Extension("GL_ARB_texture_storage", Api = "gl|glcore")]
		public bool TextureStorage_ARB;

		[Extension("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
		[Extension("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
		public bool TextureCompressionAstcHdr_KHR;

		[Extension("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
		public bool Debug_KHR;

		[Extension("GL_ARB_arrays_of_arrays", Api = "gl|glcore")]
		public bool ArraysOfArrays_ARB;

		[Extension("GL_ARB_clear_buffer_object", Api = "gl|glcore")]
		public bool ClearBufferObject_ARB;

		[Extension("GL_ARB_compute_shader", Api = "gl|glcore")]
		public bool ComputeShader_ARB;

		[Extension("GL_ARB_copy_image", Api = "gl|glcore")]
		public bool CopyImage_ARB;

		[Extension("GL_ARB_texture_view", Api = "gl|glcore")]
		public bool TextureView_ARB;

		[Extension("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
		public bool VertexAttribBinding_ARB;

		[Extension("GL_ARB_robustness_isolation", Api = "gl|glcore")]
		public bool RobustnessIsolation_ARB;

		[Extension("GL_ARB_ES3_compatibility", Api = "gl|glcore")]
		public bool ES3Compatibility_ARB;

		[Extension("GL_ARB_explicit_uniform_location", Api = "gl|glcore")]
		public bool ExplicitUniformLocation_ARB;

		[Extension("GL_ARB_fragment_layer_viewport", Api = "gl|glcore")]
		public bool FragmentLayerViewport_ARB;

		[Extension("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
		public bool FramebufferNoAttachments_ARB;

		[Extension("GL_ARB_internalformat_query2", Api = "gl|glcore")]
		public bool InternalformatQuery2_ARB;

		[Extension("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
		public bool InvalidateSubdata_ARB;

		[Extension("GL_ARB_multi_draw_indirect", Api = "gl|glcore")]
		public bool MultiDrawIndirect_ARB;

		[Extension("GL_ARB_program_interface_query", Api = "gl|glcore")]
		public bool ProgramInterfaceQuery_ARB;

		[Extension("GL_ARB_robust_buffer_access_behavior", Api = "gl|glcore")]
		public bool RobustBufferAccessBehavior_ARB;

		[Extension("GL_ARB_shader_image_size", Api = "gl|glcore")]
		public bool ShaderImageSize_ARB;

		[Extension("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
		public bool ShaderStorageBufferObject_ARB;

		[Extension("GL_ARB_stencil_texturing", Api = "gl|glcore")]
		public bool StencilTexturing_ARB;

		[Extension("GL_ARB_texture_buffer_range", Api = "gl|glcore")]
		public bool TextureBufferRange_ARB;

		[Extension("GL_ARB_texture_query_levels", Api = "gl|glcore")]
		public bool TextureQueryLevels_ARB;

		[Extension("GL_ARB_texture_storage_multisample", Api = "gl|glcore")]
		public bool TextureStorageMultisample_ARB;

		[Extension("GL_ARB_buffer_storage", Api = "gl|glcore")]
		public bool BufferStorage_ARB;

		[Extension("GL_ARB_clear_texture", Api = "gl|glcore")]
		public bool ClearTexture_ARB;

		[Extension("GL_ARB_enhanced_layouts", Api = "gl|glcore")]
		public bool EnhancedLayouts_ARB;

		[Extension("GL_ARB_multi_bind", Api = "gl|glcore")]
		public bool MultiBind_ARB;

		[Extension("GL_ARB_query_buffer_object", Api = "gl|glcore")]
		public bool QueryBufferObject_ARB;

		[Extension("GL_ARB_texture_mirror_clamp_to_edge", Api = "gl|glcore")]
		public bool TextureMirrorClampToEdge_ARB;

		[Extension("GL_ARB_texture_stencil8", Api = "gl|glcore")]
		public bool TextureStencil8_ARB;

		[Extension("GL_ARB_vertex_type_10f_11f_11f_rev", Api = "gl|glcore")]
		public bool VertexType10f11f11fRev_ARB;

		[Extension("GL_ARB_bindless_texture", Api = "gl|glcore")]
		public bool BindlessTexture_ARB;

		[Extension("GL_ARB_compute_variable_group_size", Api = "gl|glcore")]
		public bool ComputeVariableGroupSize_ARB;

		[Extension("GL_ARB_indirect_parameters", Api = "gl|glcore")]
		public bool IndirectParameters_ARB;

		[Extension("GL_ARB_seamless_cubemap_per_texture", Api = "gl|glcore")]
		public bool SeamlessCubemapPerTexture_ARB;

		[Extension("GL_ARB_shader_draw_parameters", Api = "gl|glcore")]
		public bool ShaderDrawParameters_ARB;

		[Extension("GL_ARB_shader_group_vote", Api = "gl|glcore")]
		public bool ShaderGroupVote_ARB;

		[Extension("GL_ARB_sparse_texture", Api = "gl|glcore")]
		public bool SparseTexture_ARB;

		[Extension("GL_ARB_ES3_1_compatibility", Api = "gl|glcore")]
		public bool ES31Compatibility_ARB;

		[Extension("GL_ARB_clip_control", Api = "gl|glcore")]
		public bool ClipControl_ARB;

		[Extension("GL_ARB_conditional_render_inverted", Api = "gl|glcore")]
		public bool ConditionalRenderInverted_ARB;

		[Extension("GL_ARB_cull_distance", Api = "gl|glcore")]
		public bool CullDistance_ARB;

		[Extension("GL_ARB_derivative_control", Api = "gl|glcore")]
		public bool DerivativeControl_ARB;

		[Extension("GL_ARB_direct_state_access", Api = "gl|glcore")]
		public bool DirectStateAccess_ARB;

		[Extension("GL_ARB_get_texture_sub_image", Api = "gl|glcore")]
		public bool GetTextureSubImage_ARB;

		[Extension("GL_ARB_shader_texture_image_samples", Api = "gl|glcore")]
		public bool ShaderTextureImageSamples_ARB;

		[Extension("GL_ARB_texture_barrier", Api = "gl|glcore")]
		public bool TextureBarrier_ARB;

		[Extension("GL_KHR_context_flush_control", Api = "gl|glcore|gles2")]
		public bool ContextFlushControl_KHR;

		[Extension("GL_KHR_robust_buffer_access_behavior", Api = "gl|glcore|gles2")]
		public bool RobustBufferAccessBehavior_KHR;

		[Extension("GL_KHR_robustness", Api = "gl|glcore|gles2")]
		public bool Robustness_KHR;

		[Extension("GL_ARB_pipeline_statistics_query", Api = "gl|glcore")]
		public bool PipelineStatisticsQuery_ARB;

		[Extension("GL_ARB_sparse_buffer", Api = "gl|glcore")]
		public bool SparseBuffer_ARB;

		[Extension("GL_ARB_transform_feedback_overflow_query", Api = "gl|glcore")]
		public bool TransformFeedbackOverflowQuery_ARB;

		[Extension("GL_KHR_blend_equation_advanced", Api = "gl|glcore|gles2")]
		[Extension("GL_KHR_blend_equation_advanced_coherent", Api = "gl|glcore|gles2")]
		public bool BlendEquationAdvanced_KHR;

		[Extension("GL_KHR_no_error", Api = "gl|glcore|gles2")]
		public bool NoError_KHR;

		[Extension("GL_KHR_shader_subgroup", Api = "gl|glcore|gles2")]
		public bool ShaderSubgroup_KHR;

		[Extension("GL_KHR_texture_compression_astc_sliced_3d", Api = "gl|glcore|gles2")]
		public bool TextureCompressionAstcSliced3d_KHR;

		[Extension("GL_KHR_parallel_shader_compile", Api = "gl|glcore|gles2")]
		public bool ParallelShaderCompile_KHR;

		[Extension("GL_ARB_texture_filter_minmax", Api = "gl|glcore")]
		public bool TextureFilterMinmax_ARB;

		[Extension("GL_ARB_spirv_extensions", Api = "gl|glcore")]
		public bool SpirvExtensions_ARB;

		[Extension("GL_ARB_sparse_texture_clamp", Api = "gl|glcore")]
		public bool SparseTextureClamp_ARB;

		[Extension("GL_ARB_sparse_texture2", Api = "gl|glcore")]
		public bool SparseTexture2_ARB;

		[Extension("GL_ARB_shader_viewport_layer_array", Api = "gl|glcore")]
		public bool ShaderViewportLayerArray_ARB;

		[Extension("GL_ARB_shader_clock", Api = "gl|glcore")]
		public bool ShaderClock_ARB;

		[Extension("GL_ARB_shader_ballot", Api = "gl|glcore")]
		public bool ShaderBallot_ARB;

		[Extension("GL_ARB_shader_atomic_counter_ops", Api = "gl|glcore")]
		public bool ShaderAtomicCounterOps_ARB;

		[Extension("GL_ARB_sample_locations", Api = "gl|glcore")]
		public bool SampleLocations_ARB;

		[Extension("GL_ARB_ES3_2_compatibility", Api = "gl|glcore")]
		public bool ES32Compatibility_ARB;

		[Extension("GL_ARB_texture_filter_anisotropic", Api = "gl|glcore")]
		public bool TextureFilterAnisotropic_ARB;

		[Extension("GL_ARB_fragment_shader_interlock", Api = "gl|glcore")]
		public bool FragmentShaderInterlock_ARB;

		[Extension("GL_ARB_post_depth_coverage", Api = "gl|glcore")]
		public bool PostDepthCoverage_ARB;

		[Extension("GL_ARB_polygon_offset_clamp", Api = "gl|glcore")]
		public bool PolygonOffsetClamp_ARB;

		[Extension("GL_ARB_gl_spirv", Api = "gl|glcore")]
		public bool GlSpirv_ARB;

		[Extension("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
		public bool GpuShaderInt64_ARB;

		[Extension("GL_ARB_imaging", Api = "gl|glcore")]
		public bool Imaging_ARB;

		[Extension("GL_ARB_parallel_shader_compile", Api = "gl|glcore")]
		public bool ParallelShaderCompile_ARB;

		[Extension("GL_EXT_abgr")]
		public bool Abgr_EXT;

		[Extension("GL_EXT_blend_color")]
		public bool BlendColor_EXT;

		[Extension("GL_EXT_polygon_offset")]
		public bool PolygonOffset_EXT;

		[Extension("GL_EXT_texture")]
		public bool Texture_EXT;

		[Extension("GL_EXT_texture3D")]
		public bool Texture3D_EXT;

		[Extension("GL_SGIS_texture_filter4")]
		public bool TextureFilter4_SGIS;

		[Extension("GL_EXT_subtexture")]
		public bool Subtexture_EXT;

		[Extension("GL_EXT_copy_texture")]
		public bool CopyTexture_EXT;

		[Extension("GL_EXT_histogram")]
		public bool Histogram_EXT;

		[Extension("GL_EXT_convolution")]
		public bool Convolution_EXT;

		[Extension("GL_SGI_color_matrix")]
		public bool ColorMatrix_SGI;

		[Extension("GL_SGI_color_table")]
		public bool ColorTable_SGI;

		[Extension("GL_SGIS_pixel_texture")]
		[Extension("GL_SGIX_pixel_texture")]
		public bool PixelTexture_SGIS;

		[Extension("GL_SGIS_texture4D")]
		public bool Texture4D_SGIS;

		[Extension("GL_SGI_texture_color_table")]
		public bool TextureColorTable_SGI;

		[Extension("GL_EXT_cmyka")]
		public bool Cmyka_EXT;

		[Extension("GL_EXT_texture_object")]
		public bool TextureObject_EXT;

		[Extension("GL_SGIS_detail_texture")]
		public bool DetailTexture_SGIS;

		[Extension("GL_SGIS_sharpen_texture")]
		public bool SharpenTexture_SGIS;

		[Extension("GL_EXT_packed_pixels")]
		public bool PackedPixels_EXT;

		[Extension("GL_SGIS_texture_lod")]
		public bool TextureLod_SGIS;

		[Extension("GL_SGIS_multisample")]
		public bool Multisample_SGIS;

		[Extension("GL_EXT_rescale_normal")]
		public bool RescaleNormal_EXT;

		[Extension("GL_EXT_vertex_array")]
		public bool VertexArray_EXT;

		[Extension("GL_EXT_misc_attribute")]
		public bool MiscAttribute_EXT;

		[Extension("GL_SGIS_generate_mipmap")]
		public bool GenerateMipmap_SGIS;

		[Extension("GL_SGIX_clipmap")]
		public bool Clipmap_SGIX;

		[Extension("GL_SGIX_shadow")]
		public bool Shadow_SGIX;

		[Extension("GL_SGIS_texture_edge_clamp")]
		public bool TextureEdgeClamp_SGIS;

		[Extension("GL_SGIS_texture_border_clamp")]
		public bool TextureBorderClamp_SGIS;

		[Extension("GL_EXT_blend_minmax", Api = "gl|gles1|gles2")]
		public bool BlendMinmax_EXT;

		[Extension("GL_EXT_blend_subtract")]
		public bool BlendSubtract_EXT;

		[Extension("GL_EXT_blend_logic_op")]
		public bool BlendLogicOp_EXT;

		[Extension("GL_SGIX_interlace")]
		public bool Interlace_SGIX;

		[Extension("GL_SGIS_texture_select")]
		public bool TextureSelect_SGIS;

		[Extension("GL_SGIX_sprite")]
		public bool Sprite_SGIX;

		[Extension("GL_SGIX_texture_multi_buffer")]
		public bool TextureMultiBuffer_SGIX;

		[Extension("GL_EXT_point_parameters")]
		public bool PointParameters_EXT;

		[Extension("GL_SGIX_instruments")]
		public bool Instruments_SGIX;

		[Extension("GL_SGIX_texture_scale_bias")]
		public bool TextureScaleBias_SGIX;

		[Extension("GL_SGIX_framezoom")]
		public bool Framezoom_SGIX;

		[Extension("GL_SGIX_tag_sample_buffer")]
		public bool TagSampleBuffer_SGIX;

		[Extension("GL_SGIX_reference_plane")]
		public bool ReferencePlane_SGIX;

		[Extension("GL_SGIX_flush_raster")]
		public bool FlushRaster_SGIX;

		[Extension("GL_SGIX_depth_texture")]
		public bool DepthTexture_SGIX;

		[Extension("GL_SGIS_fog_function")]
		public bool FogFunction_SGIS;

		[Extension("GL_SGIX_fog_offset")]
		public bool FogOffset_SGIX;

		[Extension("GL_HP_image_transform")]
		public bool ImageTransform_HP;

		[Extension("GL_HP_convolution_border_modes")]
		public bool ConvolutionBorderModes_HP;

		[Extension("GL_SGIX_texture_add_env")]
		public bool TextureAddEnv_SGIX;

		[Extension("GL_EXT_color_subtable")]
		public bool ColorSubtable_EXT;

		[Extension("GL_PGI_vertex_hints")]
		public bool VertexHints_PGI;

		[Extension("GL_PGI_misc_hints")]
		public bool MiscHints_PGI;

		[Extension("GL_EXT_paletted_texture")]
		public bool PalettedTexture_EXT;

		[Extension("GL_EXT_clip_volume_hint")]
		public bool ClipVolumeHint_EXT;

		[Extension("GL_SGIX_list_priority")]
		public bool ListPriority_SGIX;

		[Extension("GL_SGIX_ir_instrument1")]
		public bool IrInstrument1_SGIX;

		[Extension("GL_SGIX_texture_lod_bias")]
		public bool TextureLodBias_SGIX;

		[Extension("GL_SGIX_shadow_ambient")]
		public bool ShadowAmbient_SGIX;

		[Extension("GL_EXT_index_texture")]
		public bool IndexTexture_EXT;

		[Extension("GL_EXT_index_material")]
		public bool IndexMaterial_EXT;

		[Extension("GL_EXT_index_func")]
		public bool IndexFunc_EXT;

		[Extension("GL_EXT_index_array_formats")]
		public bool IndexArrayFormats_EXT;

		[Extension("GL_EXT_compiled_vertex_array")]
		public bool CompiledVertexArray_EXT;

		[Extension("GL_EXT_cull_vertex")]
		public bool CullVertex_EXT;

		[Extension("GL_SGIX_ycrcb")]
		public bool Ycrcb_SGIX;

		[Extension("GL_IBM_rasterpos_clip")]
		public bool RasterposClip_IBM;

		[Extension("GL_HP_texture_lighting")]
		public bool TextureLighting_HP;

		[Extension("GL_EXT_draw_range_elements")]
		public bool DrawRangeElements_EXT;

		[Extension("GL_WIN_phong_shading")]
		public bool PhongShading_WIN;

		[Extension("GL_WIN_specular_fog")]
		public bool SpecularFog_WIN;

		[Extension("GL_EXT_light_texture")]
		public bool LightTexture_EXT;

		[Extension("GL_SGIX_blend_alpha_minmax")]
		public bool BlendAlphaMinmax_SGIX;

		[Extension("GL_EXT_bgra")]
		public bool Bgra_EXT;

		[Extension("GL_SGIX_async")]
		public bool Async_SGIX;

		[Extension("GL_SGIX_async_pixel")]
		public bool AsyncPixel_SGIX;

		[Extension("GL_SGIX_async_histogram")]
		public bool AsyncHistogram_SGIX;

		[Extension("GL_INTEL_parallel_arrays")]
		public bool ParallelArrays_INTEL;

		[Extension("GL_HP_occlusion_test")]
		public bool OcclusionTest_HP;

		[Extension("GL_EXT_pixel_transform")]
		public bool PixelTransform_EXT;

		[Extension("GL_EXT_pixel_transform_color_table")]
		public bool PixelTransformColorTable_EXT;

		[Extension("GL_EXT_shared_texture_palette")]
		public bool SharedTexturePalette_EXT;

		[Extension("GL_EXT_separate_specular_color")]
		public bool SeparateSpecularColor_EXT;

		[Extension("GL_EXT_secondary_color")]
		public bool SecondaryColor_EXT;

		[Extension("GL_EXT_texture_perturb_normal")]
		public bool TexturePerturbNormal_EXT;

		[Extension("GL_EXT_multi_draw_arrays", Api = "gl|gles1|gles2")]
		public bool MultiDrawArrays_EXT;

		[Extension("GL_EXT_fog_coord")]
		public bool FogCoord_EXT;

		[Extension("GL_REND_screen_coordinates")]
		public bool ScreenCoordinates_REND;

		[Extension("GL_EXT_coordinate_frame")]
		public bool CoordinateFrame_EXT;

		[Extension("GL_EXT_texture_env_combine")]
		public bool TextureEnvCombine_EXT;

		[Extension("GL_APPLE_specular_vector")]
		public bool SpecularVector_APPLE;

		[Extension("GL_APPLE_transform_hint")]
		public bool TransformHint_APPLE;

		[Extension("GL_SUNX_constant_data")]
		public bool ConstantData_SUNX;

		[Extension("GL_SUN_global_alpha")]
		public bool GlobalAlpha_SUN;

		[Extension("GL_SUN_triangle_list")]
		public bool TriangleList_SUN;

		[Extension("GL_SUN_vertex")]
		public bool Vertex_SUN;

		[Extension("GL_EXT_blend_func_separate")]
		public bool BlendFuncSeparate_EXT;

		[Extension("GL_INGR_color_clamp")]
		public bool ColorClamp_INGR;

		[Extension("GL_INGR_interlace_read")]
		public bool InterlaceRead_INGR;

		[Extension("GL_EXT_stencil_wrap")]
		public bool StencilWrap_EXT;

		[Extension("GL_EXT_422_pixels")]
		public bool _422Pixels_EXT;

		[Extension("GL_NV_texgen_reflection")]
		public bool TexgenReflection_NV;

		[Extension("GL_SUN_convolution_border_modes")]
		public bool ConvolutionBorderModes_SUN;

		[Extension("GL_EXT_texture_env_add")]
		public bool TextureEnvAdd_EXT;

		[Extension("GL_EXT_texture_lod_bias", Api = "gl|gles1")]
		public bool TextureLodBias_EXT;

		[Extension("GL_EXT_texture_filter_anisotropic", Api = "gl|gles1|gles2")]
		public bool TextureFilterAnisotropic_EXT;

		[Extension("GL_EXT_vertex_weighting")]
		public bool VertexWeighting_EXT;

		[Extension("GL_NV_light_max_exponent")]
		public bool LightMaxExponent_NV;

		[Extension("GL_NV_vertex_array_range")]
		public bool VertexArrayRange_NV;

		[Extension("GL_NV_register_combiners")]
		public bool RegisterCombiners_NV;

		[Extension("GL_NV_fog_distance")]
		public bool FogDistance_NV;

		[Extension("GL_NV_texgen_emboss")]
		public bool TexgenEmboss_NV;

		[Extension("GL_NV_blend_square")]
		public bool BlendSquare_NV;

		[Extension("GL_NV_texture_env_combine4")]
		public bool TextureEnvCombine4_NV;

		[Extension("GL_MESA_resize_buffers")]
		public bool ResizeBuffers_MESA;

		[Extension("GL_MESA_window_pos")]
		public bool WindowPos_MESA;

		[Extension("GL_EXT_texture_compression_s3tc", Api = "gl|glcore|gles2|glsc2")]
		public bool TextureCompressionS3tc_EXT;

		[Extension("GL_IBM_cull_vertex")]
		public bool CullVertex_IBM;

		[Extension("GL_IBM_multimode_draw_arrays")]
		public bool MultimodeDrawArrays_IBM;

		[Extension("GL_IBM_vertex_array_lists")]
		public bool VertexArrayLists_IBM;

		[Extension("GL_3DFX_texture_compression_FXT1")]
		public bool TextureCompressionFXT1_3DFX;

		[Extension("GL_3DFX_multisample")]
		public bool Multisample_3DFX;

		[Extension("GL_3DFX_tbuffer")]
		public bool Tbuffer_3DFX;

		[Extension("GL_EXT_multisample")]
		public bool Multisample_EXT;

		[Extension("GL_SGIX_vertex_preclip")]
		public bool VertexPreclip_SGIX;

		[Extension("GL_SGIX_convolution_accuracy")]
		public bool ConvolutionAccuracy_SGIX;

		[Extension("GL_SGIX_resample")]
		public bool Resample_SGIX;

		[Extension("GL_SGIS_point_line_texgen")]
		public bool PointLineTexgen_SGIS;

		[Extension("GL_SGIS_texture_color_mask")]
		public bool TextureColorMask_SGIS;

		[Extension("GL_EXT_texture_env_dot3")]
		public bool TextureEnvDot3_EXT;

		[Extension("GL_ATI_texture_mirror_once")]
		public bool TextureMirrorOnce_ATI;

		[Extension("GL_NV_fence", Api = "gl|gles1|gles2")]
		public bool Fence_NV;

		[Extension("GL_IBM_static_data")]
		public bool StaticData_IBM;

		[Extension("GL_IBM_texture_mirrored_repeat")]
		public bool TextureMirroredRepeat_IBM;

		[Extension("GL_NV_evaluators")]
		public bool Evaluators_NV;

		[Extension("GL_NV_packed_depth_stencil")]
		public bool PackedDepthStencil_NV;

		[Extension("GL_NV_register_combiners2")]
		public bool RegisterCombiners2_NV;

		[Extension("GL_NV_texture_compression_vtc")]
		public bool TextureCompressionVtc_NV;

		[Extension("GL_NV_texture_rectangle")]
		public bool TextureRectangle_NV;

		[Extension("GL_NV_texture_shader")]
		public bool TextureShader_NV;

		[Extension("GL_NV_texture_shader2")]
		public bool TextureShader2_NV;

		[Extension("GL_NV_vertex_array_range2")]
		public bool VertexArrayRange2_NV;

		[Extension("GL_NV_vertex_program")]
		public bool VertexProgram_NV;

		[Extension("GL_SGIX_texture_coordinate_clamp")]
		public bool TextureCoordinateClamp_SGIX;

		[Extension("GL_OML_interlace")]
		public bool Interlace_OML;

		[Extension("GL_OML_subsample")]
		public bool Subsample_OML;

		[Extension("GL_OML_resample")]
		public bool Resample_OML;

		[Extension("GL_NV_copy_depth_to_color")]
		public bool CopyDepthToColor_NV;

		[Extension("GL_ATI_envmap_bumpmap")]
		public bool EnvmapBumpmap_ATI;

		[Extension("GL_ATI_fragment_shader")]
		public bool FragmentShader_ATI;

		[Extension("GL_ATI_pn_triangles")]
		public bool PnTriangles_ATI;

		[Extension("GL_ATI_vertex_array_object")]
		public bool VertexArrayObject_ATI;

		[Extension("GL_EXT_vertex_shader")]
		public bool VertexShader_EXT;

		[Extension("GL_ATI_vertex_streams")]
		public bool VertexStreams_ATI;

		[Extension("GL_ATI_element_array")]
		public bool ElementArray_ATI;

		[Extension("GL_SUN_mesh_array")]
		public bool MeshArray_SUN;

		[Extension("GL_SUN_slice_accum")]
		public bool SliceAccum_SUN;

		[Extension("GL_NV_multisample_filter_hint")]
		public bool MultisampleFilterHint_NV;

		[Extension("GL_NV_depth_clamp")]
		public bool DepthClamp_NV;

		[Extension("GL_NV_occlusion_query")]
		public bool OcclusionQuery_NV;

		[Extension("GL_NV_point_sprite")]
		public bool PointSprite_NV;

		[Extension("GL_NV_texture_shader3")]
		public bool TextureShader3_NV;

		[Extension("GL_NV_vertex_program1_1")]
		public bool VertexProgram11_NV;

		[Extension("GL_EXT_shadow_funcs")]
		public bool ShadowFuncs_EXT;

		[Extension("GL_EXT_stencil_two_side")]
		public bool StencilTwoSide_EXT;

		[Extension("GL_ATI_text_fragment_shader")]
		public bool TextFragmentShader_ATI;

		[Extension("GL_APPLE_client_storage")]
		public bool ClientStorage_APPLE;

		[Extension("GL_APPLE_element_array")]
		public bool ElementArray_APPLE;

		[Extension("GL_APPLE_fence")]
		public bool Fence_APPLE;

		[Extension("GL_APPLE_vertex_array_object")]
		public bool VertexArrayObject_APPLE;

		[Extension("GL_APPLE_vertex_array_range")]
		public bool VertexArrayRange_APPLE;

		[Extension("GL_APPLE_ycbcr_422")]
		public bool Ycbcr422_APPLE;

		[Extension("GL_S3_s3tc")]
		public bool S3tc_S3;

		[Extension("GL_ATI_draw_buffers")]
		public bool DrawBuffers_ATI;

		[Extension("GL_ATI_texture_env_combine3")]
		public bool TextureEnvCombine3_ATI;

		[Extension("GL_ATI_texture_float")]
		public bool TextureFloat_ATI;

		[Extension("GL_NV_float_buffer")]
		public bool FloatBuffer_NV;

		[Extension("GL_NV_fragment_program")]
		public bool FragmentProgram_NV;

		[Extension("GL_NV_half_float")]
		public bool HalfFloat_NV;

		[Extension("GL_NV_pixel_data_range")]
		public bool PixelDataRange_NV;

		[Extension("GL_NV_primitive_restart")]
		public bool PrimitiveRestart_NV;

		[Extension("GL_NV_texture_expand_normal")]
		public bool TextureExpandNormal_NV;

		[Extension("GL_NV_vertex_program2")]
		public bool VertexProgram2_NV;

		[Extension("GL_ATI_map_object_buffer")]
		public bool MapObjectBuffer_ATI;

		[Extension("GL_ATI_separate_stencil")]
		public bool SeparateStencil_ATI;

		[Extension("GL_ATI_vertex_attrib_array_object")]
		public bool VertexAttribArrayObject_ATI;

		[Extension("GL_OES_byte_coordinates", Api = "gl|gles1")]
		public bool ByteCoordinates_OES;

		[Extension("GL_OES_fixed_point", Api = "gl|gles1")]
		public bool FixedPoint_OES;

		[Extension("GL_OES_single_precision", Api = "gl|gles1")]
		public bool SinglePrecision_OES;

		[Extension("GL_OES_compressed_paletted_texture", Api = "gl|gles1|gles2")]
		public bool CompressedPalettedTexture_OES;

		[Extension("GL_OES_read_format", Api = "gl|gles1")]
		public bool ReadFormat_OES;

		[Extension("GL_OES_query_matrix", Api = "gl|gles1")]
		public bool QueryMatrix_OES;

		[Extension("GL_EXT_depth_bounds_test")]
		public bool DepthBoundsTest_EXT;

		[Extension("GL_EXT_texture_mirror_clamp")]
		public bool TextureMirrorClamp_EXT;

		[Extension("GL_EXT_blend_equation_separate")]
		public bool BlendEquationSeparate_EXT;

		[Extension("GL_MESA_pack_invert")]
		public bool PackInvert_MESA;

		[Extension("GL_MESA_ycbcr_texture")]
		public bool YcbcrTexture_MESA;

		[Extension("GL_EXT_pixel_buffer_object")]
		public bool PixelBufferObject_EXT;

		[Extension("GL_NV_fragment_program_option")]
		public bool FragmentProgramOption_NV;

		[Extension("GL_NV_fragment_program2")]
		public bool FragmentProgram2_NV;

		[Extension("GL_NV_vertex_program2_option")]
		public bool VertexProgram2Option_NV;

		[Extension("GL_NV_vertex_program3")]
		public bool VertexProgram3_NV;

		[Extension("GL_EXT_texture_compression_dxt1", Api = "gles1|gles2")]
		public bool TextureCompressionDxt1_EXT;

		[Extension("GL_EXT_framebuffer_object")]
		public bool FramebufferObject_EXT;

		[Extension("GL_GREMEDY_string_marker")]
		public bool StringMarker_GREMEDY;

		[Extension("GL_EXT_packed_depth_stencil")]
		public bool PackedDepthStencil_EXT;

		[Extension("GL_EXT_stencil_clear_tag")]
		public bool StencilClearTag_EXT;

		[Extension("GL_EXT_texture_sRGB")]
		public bool TextureSRGB_EXT;

		[Extension("GL_EXT_framebuffer_blit")]
		public bool FramebufferBlit_EXT;

		[Extension("GL_EXT_framebuffer_multisample")]
		public bool FramebufferMultisample_EXT;

		[Extension("GL_MESAX_texture_stack")]
		public bool TextureStack_MESAX;

		[Extension("GL_EXT_timer_query")]
		public bool TimerQuery_EXT;

		[Extension("GL_EXT_gpu_program_parameters")]
		public bool GpuProgramParameters_EXT;

		[Extension("GL_APPLE_flush_buffer_range")]
		public bool FlushBufferRange_APPLE;

		[Extension("GL_NV_gpu_program4")]
		public bool GpuProgram4_NV;

		[Extension("GL_NV_geometry_program4")]
		public bool GeometryProgram4_NV;

		[Extension("GL_EXT_geometry_shader4")]
		public bool GeometryShader4_EXT;

		[Extension("GL_NV_vertex_program4")]
		public bool VertexProgram4_NV;

		[Extension("GL_EXT_gpu_shader4")]
		public bool GpuShader4_EXT;

		[Extension("GL_EXT_draw_instanced", Api = "gl|glcore|gles2")]
		public bool DrawInstanced_EXT;

		[Extension("GL_EXT_packed_float")]
		public bool PackedFloat_EXT;

		[Extension("GL_EXT_texture_array")]
		public bool TextureArray_EXT;

		[Extension("GL_EXT_texture_buffer_object")]
		public bool TextureBufferObject_EXT;

		[Extension("GL_EXT_texture_compression_latc")]
		public bool TextureCompressionLatc_EXT;

		[Extension("GL_EXT_texture_compression_rgtc", Api = "gl|gles2")]
		public bool TextureCompressionRgtc_EXT;

		[Extension("GL_EXT_texture_shared_exponent")]
		public bool TextureSharedExponent_EXT;

		[Extension("GL_NV_depth_buffer_float", Api = "gl|glcore")]
		public bool DepthBufferFloat_NV;

		[Extension("GL_NV_fragment_program4")]
		public bool FragmentProgram4_NV;

		[Extension("GL_NV_framebuffer_multisample_coverage", Api = "gl|glcore")]
		public bool FramebufferMultisampleCoverage_NV;

		[Extension("GL_EXT_framebuffer_sRGB")]
		public bool FramebufferSRGB_EXT;

		[Extension("GL_NV_geometry_shader4")]
		public bool GeometryShader4_NV;

		[Extension("GL_NV_parameter_buffer_object")]
		public bool ParameterBufferObject_NV;

		[Extension("GL_EXT_draw_buffers2")]
		public bool DrawBuffers2_EXT;

		[Extension("GL_NV_transform_feedback")]
		public bool TransformFeedback_NV;

		[Extension("GL_EXT_bindable_uniform")]
		public bool BindableUniform_EXT;

		[Extension("GL_EXT_texture_integer")]
		public bool TextureInteger_EXT;

		[Extension("GL_GREMEDY_frame_terminator")]
		public bool FrameTerminator_GREMEDY;

		[Extension("GL_NV_conditional_render", Api = "gl|glcore|gles2")]
		public bool ConditionalRender_NV;

		[Extension("GL_NV_present_video")]
		public bool PresentVideo_NV;

		[Extension("GL_EXT_transform_feedback")]
		public bool TransformFeedback_EXT;

		[Extension("GL_EXT_direct_state_access", Api = "gl|glcore")]
		public bool DirectStateAccess_EXT;

		[Extension("GL_EXT_vertex_array_bgra")]
		public bool VertexArrayBgra_EXT;

		[Extension("GL_EXT_texture_swizzle")]
		public bool TextureSwizzle_EXT;

		[Extension("GL_NV_explicit_multisample")]
		public bool ExplicitMultisample_NV;

		[Extension("GL_NV_transform_feedback2")]
		public bool TransformFeedback2_NV;

		[Extension("GL_ATI_meminfo")]
		public bool Meminfo_ATI;

		[Extension("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
		public bool PerformanceMonitor_AMD;

		[Extension("GL_AMD_texture_texture4")]
		public bool TextureTexture4_AMD;

		[Extension("GL_AMD_vertex_shader_tessellator")]
		public bool VertexShaderTessellator_AMD;

		[Extension("GL_EXT_provoking_vertex")]
		public bool ProvokingVertex_EXT;

		[Extension("GL_EXT_texture_snorm")]
		public bool TextureSnorm_EXT;

		[Extension("GL_AMD_draw_buffers_blend")]
		public bool DrawBuffersBlend_AMD;

		[Extension("GL_APPLE_texture_range")]
		public bool TextureRange_APPLE;

		[Extension("GL_APPLE_float_pixels")]
		public bool FloatPixels_APPLE;

		[Extension("GL_APPLE_vertex_program_evaluators")]
		public bool VertexProgramEvaluators_APPLE;

		[Extension("GL_APPLE_aux_depth_stencil")]
		public bool AuxDepthStencil_APPLE;

		[Extension("GL_APPLE_object_purgeable")]
		public bool ObjectPurgeable_APPLE;

		[Extension("GL_APPLE_row_bytes")]
		public bool RowBytes_APPLE;

		[Extension("GL_APPLE_rgb_422", Api = "gl|glcore|gles2")]
		public bool Rgb422_APPLE;

		[Extension("GL_NV_video_capture")]
		public bool VideoCapture_NV;

		[Extension("GL_NV_copy_image")]
		public bool CopyImage_NV;

		[Extension("GL_EXT_separate_shader_objects", Api = "gl|glcore|gles2")]
		public bool SeparateShaderObjects_EXT;

		[Extension("GL_NV_parameter_buffer_object2")]
		public bool ParameterBufferObject2_NV;

		[Extension("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		public bool ShaderBufferLoad_NV;

		[Extension("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
		public bool VertexBufferUnifiedMemory_NV;

		[Extension("GL_NV_texture_barrier", Api = "gl|glcore")]
		public bool TextureBarrier_NV;

		[Extension("GL_AMD_shader_stencil_export")]
		public bool ShaderStencilExport_AMD;

		[Extension("GL_AMD_seamless_cubemap_per_texture")]
		public bool SeamlessCubemapPerTexture_AMD;

		[Extension("GL_AMD_conservative_depth")]
		public bool ConservativeDepth_AMD;

		[Extension("GL_EXT_shader_image_load_store")]
		public bool ShaderImageLoadStore_EXT;

		[Extension("GL_EXT_vertex_attrib_64bit")]
		public bool VertexAttrib64bit_EXT;

		[Extension("GL_NV_gpu_program5")]
		public bool GpuProgram5_NV;

		[Extension("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
		public bool GpuShader5_NV;

		[Extension("GL_NV_shader_buffer_store", Api = "gl|glcore")]
		public bool ShaderBufferStore_NV;

		[Extension("GL_NV_tessellation_program5")]
		public bool TessellationProgram5_NV;

		[Extension("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
		public bool VertexAttribInteger64bit_NV;

		[Extension("GL_NV_multisample_coverage")]
		public bool MultisampleCoverage_NV;

		[Extension("GL_AMD_name_gen_delete")]
		public bool NameGenDelete_AMD;

		[Extension("GL_AMD_debug_output")]
		public bool DebugOutput_AMD;

		[Extension("GL_NV_vdpau_interop")]
		public bool VdpauInterop_NV;

		[Extension("GL_AMD_transform_feedback3_lines_triangles")]
		public bool TransformFeedback3LinesTriangles_AMD;

		[Extension("GL_AMD_depth_clamp_separate")]
		public bool DepthClampSeparate_AMD;

		[Extension("GL_EXT_texture_sRGB_decode", Api = "gl|glcore|gles2")]
		public bool TextureSRGBDecode_EXT;

		[Extension("GL_NV_texture_multisample")]
		public bool TextureMultisample_NV;

		[Extension("GL_AMD_blend_minmax_factor")]
		public bool BlendMinmaxFactor_AMD;

		[Extension("GL_AMD_sample_positions")]
		public bool SamplePositions_AMD;

		[Extension("GL_EXT_x11_sync_object")]
		public bool X11SyncObject_EXT;

		[Extension("GL_AMD_multi_draw_indirect")]
		public bool MultiDrawIndirect_AMD;

		[Extension("GL_EXT_framebuffer_multisample_blit_scaled")]
		public bool FramebufferMultisampleBlitScaled_EXT;

		[Extension("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public bool PathRendering_NV;

		[Extension("GL_AMD_pinned_memory")]
		public bool PinnedMemory_AMD;

		[Extension("GL_AMD_stencil_operation_extended")]
		public bool StencilOperationExtended_AMD;

		[Extension("GL_AMD_vertex_shader_viewport_index")]
		public bool VertexShaderViewportIndex_AMD;

		[Extension("GL_AMD_vertex_shader_layer")]
		public bool VertexShaderLayer_AMD;

		[Extension("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
		public bool BindlessTexture_NV;

		[Extension("GL_NV_shader_atomic_float", Api = "gl|glcore")]
		public bool ShaderAtomicFloat_NV;

		[Extension("GL_AMD_query_buffer_object")]
		public bool QueryBufferObject_AMD;

		[Extension("GL_NV_compute_program5")]
		public bool ComputeProgram5_NV;

		[Extension("GL_NV_shader_storage_buffer_object")]
		public bool ShaderStorageBufferObject_NV;

		[Extension("GL_NV_shader_atomic_counters", Api = "gl|glcore")]
		public bool ShaderAtomicCounters_NV;

		[Extension("GL_NV_deep_texture3D")]
		public bool DeepTexture3D_NV;

		[Extension("GL_NVX_conditional_render")]
		public bool ConditionalRender_NVX;

		[Extension("GL_AMD_sparse_texture")]
		public bool SparseTexture_AMD;

		[Extension("GL_AMD_shader_trinary_minmax")]
		public bool ShaderTrinaryMinmax_AMD;

		[Extension("GL_INTEL_map_texture")]
		public bool MapTexture_INTEL;

		[Extension("GL_NV_draw_texture")]
		public bool DrawTexture_NV;

		[Extension("GL_AMD_interleaved_elements")]
		public bool InterleavedElements_AMD;

		[Extension("GL_NV_bindless_multi_draw_indirect", Api = "gl|glcore")]
		public bool BindlessMultiDrawIndirect_NV;

		[Extension("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
		[Extension("GL_NV_blend_equation_advanced_coherent", Api = "gl|glcore|gles2")]
		public bool BlendEquationAdvanced_NV;

		[Extension("GL_NV_gpu_program5_mem_extended")]
		public bool GpuProgram5MemExtended_NV;

		[Extension("GL_AMD_shader_atomic_counter_ops")]
		public bool ShaderAtomicCounterOps_AMD;

		[Extension("GL_EXT_shader_integer_mix", Api = "gl|glcore|gles2")]
		public bool ShaderIntegerMix_EXT;

		[Extension("GL_NVX_gpu_memory_info")]
		public bool GpuMemoryInfo_NVX;

		[Extension("GL_EXT_debug_label", Api = "gl|glcore|gles2")]
		public bool DebugLabel_EXT;

		[Extension("GL_EXT_debug_marker", Api = "gl|glcore|gles1|gles2")]
		public bool DebugMarker_EXT;

		[Extension("GL_INTEL_fragment_shader_ordering")]
		public bool FragmentShaderOrdering_INTEL;

		[Extension("GL_AMD_occlusion_query_event")]
		public bool OcclusionQueryEvent_AMD;

		[Extension("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
		public bool PerformanceQuery_INTEL;

		[Extension("GL_NV_shader_thread_group", Api = "gl|glcore")]
		public bool ShaderThreadGroup_NV;

		[Extension("GL_NV_shader_thread_shuffle", Api = "gl|glcore")]
		public bool ShaderThreadShuffle_NV;

		[Extension("GL_EXT_shader_image_load_formatted")]
		public bool ShaderImageLoadFormatted_EXT;

		[Extension("GL_AMD_transform_feedback4")]
		public bool TransformFeedback4_AMD;

		[Extension("GL_AMD_gpu_shader_int64")]
		public bool GpuShaderInt64_AMD;

		[Extension("GL_AMD_gcn_shader")]
		public bool GcnShader_AMD;

		[Extension("GL_NV_shader_atomic_int64", Api = "gl|glcore")]
		public bool ShaderAtomicInt64_NV;

		[Extension("GL_NV_bindless_multi_draw_indirect_count", Api = "gl|glcore")]
		public bool BindlessMultiDrawIndirectCount_NV;

		[Extension("GL_NV_uniform_buffer_unified_memory", Api = "gl|glcore")]
		public bool UniformBufferUnifiedMemory_NV;

		[Extension("GL_EXT_polygon_offset_clamp", Api = "gl|glcore|gles2")]
		public bool PolygonOffsetClamp_EXT;

		[Extension("GL_EXT_post_depth_coverage", Api = "gl|glcore|gles2")]
		public bool PostDepthCoverage_EXT;

		[Extension("GL_EXT_raster_multisample", Api = "gl|glcore|gles2")]
		public bool RasterMultisample_EXT;

		[Extension("GL_EXT_sparse_texture2", Api = "gl|gles2")]
		public bool SparseTexture2_EXT;

		[Extension("GL_EXT_texture_filter_minmax", Api = "gl|glcore|gles2")]
		public bool TextureFilterMinmax_EXT;

		[Extension("GL_NV_conservative_raster", Api = "gl|glcore|gles2")]
		public bool ConservativeRaster_NV;

		[Extension("GL_NV_fill_rectangle", Api = "gl|glcore|gles2")]
		public bool FillRectangle_NV;

		[Extension("GL_NV_fragment_coverage_to_color", Api = "gl|glcore|gles2")]
		public bool FragmentCoverageToColor_NV;

		[Extension("GL_NV_fragment_shader_interlock", Api = "gl|glcore|gles2")]
		public bool FragmentShaderInterlock_NV;

		[Extension("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
		public bool FramebufferMixedSamples_NV;

		[Extension("GL_NV_geometry_shader_passthrough", Api = "gl|glcore|gles2")]
		public bool GeometryShaderPassthrough_NV;

		[Extension("GL_NV_path_rendering_shared_edge", Api = "gl|glcore|gles2")]
		public bool PathRenderingSharedEdge_NV;

		[Extension("GL_NV_sample_locations", Api = "gl|glcore|gles2")]
		public bool SampleLocations_NV;

		[Extension("GL_NV_sample_mask_override_coverage", Api = "gl|glcore|gles2")]
		public bool SampleMaskOverrideCoverage_NV;

		[Extension("GL_NV_shader_atomic_fp16_vector", Api = "gl|glcore|gles2")]
		public bool ShaderAtomicFp16Vector_NV;

		[Extension("GL_NV_internalformat_sample_query", Api = "gl|glcore|gles2")]
		public bool InternalformatSampleQuery_NV;

		[Extension("GL_NV_viewport_array2", Api = "gl|glcore|gles2")]
		public bool ViewportArray2_NV;

		[Extension("GL_EXT_texture_compression_s3tc_srgb", Api = "gles2")]
		public bool TextureCompressionS3tcSrgb_EXT;

		[Extension("GL_EXT_texture_shadow_lod", Api = "gl|glcore|gles2")]
		public bool TextureShadowLod_EXT;

		[Extension("GL_EXT_window_rectangles", Api = "gl|glcore|gles2")]
		public bool WindowRectangles_EXT;

		[Extension("GL_EXT_win32_keyed_mutex", Api = "gl|gles2")]
		public bool Win32KeyedMutex_EXT;

		[Extension("GL_EXT_unpack_subimage", Api = "gles2")]
		public bool UnpackSubimage_EXT;

		[Extension("GL_EXT_texture_view", Api = "gles2")]
		public bool TextureView_EXT;

		[Extension("GL_EXT_texture_type_2_10_10_10_REV", Api = "gles2")]
		public bool TextureType2101010REV_EXT;

		[Extension("GL_EXT_texture_storage_compression", Api = "gles2")]
		public bool TextureStorageCompression_EXT;

		[Extension("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
		public bool TextureStorage_EXT;

		[Extension("GL_EXT_texture_sRGB_RG8", Api = "gles2|gl|glcore")]
		public bool TextureSRGBRG8_EXT;

		[Extension("GL_EXT_texture_sRGB_R8", Api = "gles2|gl|glcore")]
		public bool TextureSRGBR8_EXT;

		[Extension("GL_EXT_texture_rg", Api = "gles2")]
		public bool TextureRg_EXT;

		[Extension("GL_EXT_texture_query_lod", Api = "gles2")]
		public bool TextureQueryLod_EXT;

		[Extension("GL_EXT_texture_norm16", Api = "gles2")]
		public bool TextureNorm16_EXT;

		[Extension("GL_EXT_texture_mirror_clamp_to_edge", Api = "gles2")]
		public bool TextureMirrorClampToEdge_EXT;

		[Extension("GL_EXT_texture_format_sRGB_override", Api = "gles2")]
		public bool TextureFormatSRGBOverride_EXT;

		[Extension("GL_EXT_texture_format_BGRA8888", Api = "gles1|gles2")]
		public bool TextureFormatBGRA8888_EXT;

		[Extension("GL_EXT_texture_cube_map_array", Api = "gles2")]
		public bool TextureCubeMapArray_EXT;

		[Extension("GL_EXT_texture_cube_map")]
		public bool TextureCubeMap_EXT;

		[Extension("GL_EXT_texture_compression_bptc", Api = "gles2")]
		public bool TextureCompressionBptc_EXT;

		[Extension("GL_EXT_texture_compression_astc_decode_mode", Api = "gles2")]
		public bool TextureCompressionAstcDecodeMode_EXT;

		[Extension("GL_EXT_texture_buffer", Api = "gles2")]
		public bool TextureBuffer_EXT;

		[Extension("GL_EXT_texture_border_clamp", Api = "gles2")]
		public bool TextureBorderClamp_EXT;

		[Extension("GL_EXT_tessellation_shader", Api = "gles2")]
		public bool TessellationShader_EXT;

		[Extension("GL_EXT_tessellation_point_size", Api = "gles2")]
		public bool TessellationPointSize_EXT;

		[Extension("GL_EXT_sparse_texture", Api = "gles2")]
		public bool SparseTexture_EXT;

		[Extension("GL_EXT_shadow_samplers", Api = "gles2")]
		public bool ShadowSamplers_EXT;

		[Extension("GL_EXT_shader_texture_lod", Api = "gles2")]
		public bool ShaderTextureLod_EXT;

		[Extension("GL_EXT_shader_samples_identical", Api = "gl|gles2")]
		public bool ShaderSamplesIdentical_EXT;

		[Extension("GL_EXT_shader_pixel_local_storage2", Api = "gles2")]
		public bool ShaderPixelLocalStorage2_EXT;

		[Extension("GL_EXT_shader_pixel_local_storage", Api = "gles2")]
		public bool ShaderPixelLocalStorage_EXT;

		[Extension("GL_EXT_shader_non_constant_global_initializers", Api = "gles2")]
		public bool ShaderNonConstantGlobalInitializers_EXT;

		[Extension("GL_EXT_shader_io_blocks", Api = "gles2")]
		public bool ShaderIoBlocks_EXT;

		[Extension("GL_EXT_shader_implicit_conversions", Api = "gles2")]
		public bool ShaderImplicitConversions_EXT;

		[Extension("GL_EXT_shader_group_vote", Api = "gles2")]
		public bool ShaderGroupVote_EXT;

		[Extension("GL_EXT_shader_framebuffer_fetch_non_coherent", Api = "gl|glcore|gles2")]
		public bool ShaderFramebufferFetchNonCoherent_EXT;

		[Extension("GL_EXT_shader_framebuffer_fetch", Api = "gl|glcore|gles2")]
		public bool ShaderFramebufferFetch_EXT;

		[Extension("GL_EXT_separate_depth_stencil", Api = "gles2")]
		public bool SeparateDepthStencil_EXT;

		[Extension("GL_EXT_sRGB_write_control", Api = "gles2")]
		public bool SRGBWriteControl_EXT;

		[Extension("GL_EXT_sRGB", Api = "gles1|gles2")]
		public bool SRGB_EXT;

		[Extension("GL_EXT_semaphore_win32", Api = "gl|gles2")]
		public bool SemaphoreWin32_EXT;

		[Extension("GL_EXT_semaphore_fd", Api = "gl|gles2")]
		public bool SemaphoreFd_EXT;

		[Extension("GL_EXT_semaphore", Api = "gl|gles2")]
		public bool Semaphore_EXT;

		[Extension("GL_EXT_robustness", Api = "gles1|gles2")]
		public bool Robustness_EXT;

		[Extension("GL_EXT_render_snorm", Api = "gles2")]
		public bool RenderSnorm_EXT;

		[Extension("GL_EXT_read_format_bgra", Api = "gles1|gles2")]
		public bool ReadFormatBgra_EXT;

		[Extension("GL_EXT_pvrtc_sRGB", Api = "gles2")]
		public bool PvrtcSRGB_EXT;

		[Extension("GL_EXT_protected_textures", Api = "gles2")]
		public bool ProtectedTextures_EXT;

		[Extension("GL_EXT_primitive_bounding_box", Api = "gles2")]
		public bool PrimitiveBoundingBox_EXT;

		[Extension("GL_EXT_occlusion_query_boolean", Api = "gles2")]
		public bool OcclusionQueryBoolean_EXT;

		[Extension("GL_EXT_multiview_timer_query", Api = "gl|glcore|gles2")]
		public bool MultiviewTimerQuery_EXT;

		[Extension("GL_EXT_multiview_texture_multisample", Api = "gl|glcore|gles2")]
		public bool MultiviewTextureMultisample_EXT;

		[Extension("GL_EXT_multiview_tessellation_geometry_shader", Api = "gl|glcore|gles2")]
		public bool MultiviewTessellationGeometryShader_EXT;

		[Extension("GL_EXT_multiview_draw_buffers", Api = "gles2")]
		public bool MultiviewDrawBuffers_EXT;

		[Extension("GL_EXT_multisampled_render_to_texture2", Api = "gles2")]
		public bool MultisampledRenderToTexture2_EXT;

		[Extension("GL_EXT_multisampled_render_to_texture", Api = "gles1|gles2")]
		public bool MultisampledRenderToTexture_EXT;

		[Extension("GL_EXT_multisampled_compatibility", Api = "gles2")]
		public bool MultisampledCompatibility_EXT;

		[Extension("GL_EXT_multi_draw_indirect", Api = "gles2")]
		public bool MultiDrawIndirect_EXT;

		[Extension("GL_EXT_memory_object_win32", Api = "gl|gles2")]
		public bool MemoryObjectWin32_EXT;

		[Extension("GL_EXT_memory_object_fd", Api = "gl|gles2")]
		public bool MemoryObjectFd_EXT;

		[Extension("GL_EXT_memory_object", Api = "gl|gles2")]
		public bool MemoryObject_EXT;

		[Extension("GL_EXT_map_buffer_range", Api = "gles1|gles2")]
		public bool MapBufferRange_EXT;

		[Extension("GL_EXT_instanced_arrays", Api = "gles2")]
		public bool InstancedArrays_EXT;

		[Extension("GL_EXT_gpu_shader5", Api = "gles2")]
		public bool GpuShader5_EXT;

		[Extension("GL_EXT_geometry_shader", Api = "gles2")]
		public bool GeometryShader_EXT;

		[Extension("GL_EXT_geometry_point_size", Api = "gles2")]
		public bool GeometryPointSize_EXT;

		[Extension("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public bool FragmentShadingRate_EXT;

		[Extension("GL_EXT_float_blend", Api = "gles2")]
		public bool FloatBlend_EXT;

		[Extension("GL_EXT_external_buffer", Api = "gl|gles2")]
		public bool ExternalBuffer_EXT;

		[Extension("GL_EXT_draw_transform_feedback", Api = "gles2")]
		public bool DrawTransformFeedback_EXT;

		[Extension("GL_EXT_draw_elements_base_vertex", Api = "gles2")]
		public bool DrawElementsBaseVertex_EXT;

		[Extension("GL_EXT_draw_buffers_indexed", Api = "gles2")]
		public bool DrawBuffersIndexed_EXT;

		[Extension("GL_EXT_draw_buffers", Api = "gles2")]
		public bool DrawBuffers_EXT;

		[Extension("GL_EXT_disjoint_timer_query", Api = "gles2")]
		public bool DisjointTimerQuery_EXT;

		[Extension("GL_EXT_discard_framebuffer", Api = "gles1|gles2")]
		public bool DiscardFramebuffer_EXT;

		[Extension("GL_EXT_depth_clamp", Api = "gles2")]
		public bool DepthClamp_EXT;

		[Extension("GL_EXT_copy_image", Api = "gles2")]
		public bool CopyImage_EXT;

		[Extension("GL_EXT_conservative_depth", Api = "gles2")]
		public bool ConservativeDepth_EXT;

		[Extension("GL_EXT_color_buffer_half_float", Api = "gles2")]
		public bool ColorBufferHalfFloat_EXT;

		[Extension("GL_EXT_color_buffer_float", Api = "gles2")]
		public bool ColorBufferFloat_EXT;

		[Extension("GL_EXT_clip_cull_distance", Api = "gles2")]
		public bool ClipCullDistance_EXT;

		[Extension("GL_EXT_clip_control", Api = "gles2")]
		public bool ClipControl_EXT;

		[Extension("GL_EXT_clear_texture", Api = "gles2")]
		public bool ClearTexture_EXT;

		[Extension("GL_EXT_buffer_storage", Api = "gles2")]
		public bool BufferStorage_EXT;

		[Extension("GL_EXT_blend_func_extended", Api = "gles2")]
		public bool BlendFuncExtended_EXT;

		[Extension("GL_EXT_base_instance", Api = "gles2")]
		public bool BaseInstance_EXT;

		[Extension("GL_EXT_YUV_target", Api = "gles2")]
		public bool YUVTarget_EXT;

		[Extension("GL_EXT_EGL_sync", Api = "gl|glcore")]
		public bool EGLSync_EXT;

		[Extension("GL_EXT_EGL_image_storage_compression", Api = "gles2")]
		public bool EGLImageStorageCompression_EXT;

		[Extension("GL_EXT_EGL_image_storage", Api = "gl|glcore|gles2")]
		public bool EGLImageStorage_EXT;

		[Extension("GL_EXT_EGL_image_array", Api = "gles2")]
		public bool EGLImageArray_EXT;

		[Extension("GL_DMP_program_binary", Api = "gles2")]
		public bool ProgramBinary_DMP;

		[Extension("GL_VIV_shader_binary", Api = "gles2")]
		public bool ShaderBinary_VIV;

		[Extension("GL_SGIX_ycrcba")]
		public bool Ycrcba_SGIX;

		[Extension("GL_SGIX_ycrcb_subsample")]
		public bool YcrcbSubsample_SGIX;

		[Extension("GL_ATI_pixel_format_float")]
		public bool PixelFormatFloat_ATI;

		[Extension("GL_SGIX_subsample")]
		public bool Subsample_SGIX;

		[Extension("GL_ARM_texture_unnormalized_coordinates", Api = "gles2")]
		public bool TextureUnnormalizedCoordinates_ARM;

		[Extension("GL_ARM_shader_framebuffer_fetch_depth_stencil", Api = "gles2")]
		public bool ShaderFramebufferFetchDepthStencil_ARM;

		[Extension("GL_SGIX_scalebias_hint")]
		public bool ScalebiasHint_SGIX;

		[Extension("GL_ARM_shader_framebuffer_fetch", Api = "gles2")]
		public bool ShaderFramebufferFetch_ARM;

		[Extension("GL_SGIX_polynomial_ffd")]
		public bool PolynomialFfd_SGIX;

		[Extension("GL_SGIX_pixel_tiles")]
		public bool PixelTiles_SGIX;

		[Extension("GL_ARM_rgba8", Api = "gles1|gles2")]
		public bool Rgba8_ARM;

		[Extension("GL_ARM_mali_shader_binary", Api = "gles2")]
		public bool MaliShaderBinary_ARM;

		[Extension("GL_ARM_mali_program_binary", Api = "gles2")]
		public bool MaliProgramBinary_ARM;

		[Extension("GL_SGIX_igloo_interface")]
		public bool IglooInterface_SGIX;

		[Extension("GL_SGIX_fragment_lighting")]
		public bool FragmentLighting_SGIX;

		[Extension("GL_APPLE_texture_packed_float", Api = "gles2")]
		public bool TexturePackedFloat_APPLE;

		[Extension("GL_SGIX_depth_pass_instrument")]
		public bool DepthPassInstrument_SGIX;

		[Extension("GL_APPLE_texture_max_level", Api = "gles1|gles2")]
		public bool TextureMaxLevel_APPLE;

		[Extension("GL_SGIX_calligraphic_fragment")]
		public bool CalligraphicFragment_SGIX;

		[Extension("GL_APPLE_texture_format_BGRA8888", Api = "gles1|gles2")]
		public bool TextureFormatBGRA8888_APPLE;

		[Extension("GL_APPLE_texture_2D_limited_npot", Api = "gles1")]
		public bool Texture2DLimitedNpot_APPLE;

		[Extension("GL_APPLE_sync", Api = "gles1|gles2")]
		public bool Sync_APPLE;

		[Extension("GL_APPLE_framebuffer_multisample", Api = "gles1|gles2")]
		public bool FramebufferMultisample_APPLE;

		[Extension("GL_SGIS_point_parameters")]
		public bool PointParameters_SGIS;

		[Extension("GL_APPLE_copy_texture_levels", Api = "gles1|gles2")]
		public bool CopyTextureLevels_APPLE;

		[Extension("GL_APPLE_color_buffer_packed_float", Api = "gles2")]
		public bool ColorBufferPackedFloat_APPLE;

		[Extension("GL_APPLE_clip_distance", Api = "gles2")]
		public bool ClipDistance_APPLE;

		[Extension("GL_ANGLE_translated_shader_source", Api = "gles2")]
		public bool TranslatedShaderSource_ANGLE;

		[Extension("GL_QCOM_YUV_texture_gather", Api = "gles2")]
		public bool YUVTextureGather_QCOM;

		[Extension("GL_QCOM_writeonly_rendering", Api = "gles1|gles2")]
		public bool WriteonlyRendering_QCOM;

		[Extension("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
		public bool TiledRendering_QCOM;

		[Extension("GL_QCOM_shading_rate", Api = "gles2")]
		public bool ShadingRate_QCOM;

		[Extension("GL_QCOM_shader_framebuffer_fetch_rate", Api = "gles2")]
		public bool ShaderFramebufferFetchRate_QCOM;

		[Extension("GL_QCOM_shader_framebuffer_fetch_noncoherent", Api = "gles2")]
		public bool ShaderFramebufferFetchNoncoherent_QCOM;

		[Extension("GL_QCOM_perfmon_global_mode", Api = "gles1|gles2")]
		public bool PerfmonGlobalMode_QCOM;

		[Extension("GL_QCOM_texture_foveated_subsampled_layout", Api = "gles2")]
		public bool TextureFoveatedSubsampledLayout_QCOM;

		[Extension("GL_QCOM_texture_foveated2", Api = "gles2")]
		public bool TextureFoveated2_QCOM;

		[Extension("GL_QCOM_texture_foveated", Api = "gles2")]
		public bool TextureFoveated_QCOM;

		[Extension("GL_QCOM_render_shared_exponent", Api = "gles2")]
		public bool RenderSharedExponent_QCOM;

		[Extension("GL_QCOM_frame_extrapolation", Api = "gles2")]
		public bool FrameExtrapolation_QCOM;

		[Extension("GL_QCOM_motion_estimation", Api = "gles2")]
		public bool MotionEstimation_QCOM;

		[Extension("GL_QCOM_framebuffer_foveated", Api = "gles2")]
		public bool FramebufferFoveated_QCOM;

		[Extension("GL_QCOM_extended_get2", Api = "gles1|gles2")]
		public bool ExtendedGet2_QCOM;

		[Extension("GL_QCOM_extended_get", Api = "gles1|gles2")]
		public bool ExtendedGet_QCOM;

		[Extension("GL_QCOM_driver_control", Api = "gles1|gles2")]
		public bool DriverControl_QCOM;

		[Extension("GL_QCOM_binning_control", Api = "gles2")]
		public bool BinningControl_QCOM;

		[Extension("GL_QCOM_alpha_test", Api = "gles2")]
		public bool AlphaTest_QCOM;

		[Extension("GL_ANGLE_texture_usage", Api = "gles2")]
		public bool TextureUsage_ANGLE;

		[Extension("GL_ANGLE_texture_compression_dxt5", Api = "gles2")]
		public bool TextureCompressionDxt5_ANGLE;

		[Extension("GL_OVR_multiview_multisampled_render_to_texture", Api = "gles2")]
		public bool MultiviewMultisampledRenderToTexture_OVR;

		[Extension("GL_OVR_multiview2", Api = "gl|glcore|gles2")]
		public bool Multiview2_OVR;

		[Extension("GL_OVR_multiview", Api = "gl|glcore|gles2")]
		public bool Multiview_OVR;

		[Extension("GL_ANGLE_texture_compression_dxt3", Api = "gles2")]
		public bool TextureCompressionDxt3_ANGLE;

		[Extension("GL_ANGLE_program_binary", Api = "gles2")]
		public bool ProgramBinary_ANGLE;

		[Extension("GL_ANGLE_pack_reverse_row_order", Api = "gles2")]
		public bool PackReverseRowOrder_ANGLE;

		[Extension("GL_ANGLE_instanced_arrays", Api = "gles2")]
		public bool InstancedArrays_ANGLE;

		[Extension("GL_ANGLE_framebuffer_multisample", Api = "gles2")]
		public bool FramebufferMultisample_ANGLE;

		[Extension("GL_ANGLE_framebuffer_blit", Api = "gles2")]
		public bool FramebufferBlit_ANGLE;

		[Extension("GL_ANGLE_depth_texture", Api = "gles2")]
		public bool DepthTexture_ANGLE;

		[Extension("GL_ANDROID_extension_pack_es31a", Api = "gles2")]
		public bool ExtensionPackEs31a_ANDROID;

		[Extension("GL_AMD_texture_gather_bias_lod")]
		public bool TextureGatherBiasLod_AMD;

		[Extension("GL_AMD_shader_explicit_vertex_parameter")]
		public bool ShaderExplicitVertexParameter_AMD;

		[Extension("GL_AMD_shader_image_load_store_lod")]
		public bool ShaderImageLoadStoreLod_AMD;

		[Extension("GL_AMD_shader_gpu_shader_half_float_fetch")]
		public bool ShaderGpuShaderHalfFloatFetch_AMD;

		[Extension("GL_AMD_shader_ballot")]
		public bool ShaderBallot_AMD;

		[Extension("GL_AMD_program_binary_Z400", Api = "gles2")]
		public bool ProgramBinaryZ400_AMD;

		[Extension("GL_AMD_gpu_shader_int16")]
		public bool GpuShaderInt16_AMD;

		[Extension("GL_AMD_gpu_shader_half_float")]
		public bool GpuShaderHalfFloat_AMD;

		[Extension("GL_AMD_framebuffer_sample_positions")]
		public bool FramebufferSamplePositions_AMD;

		[Extension("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
		public bool FramebufferMultisampleAdvanced_AMD;

		[Extension("GL_NV_timeline_semaphore", Api = "gl|gles2")]
		public bool TimelineSemaphore_NV;

		[Extension("GL_AMD_compressed_ATC_texture", Api = "gles1|gles2")]
		public bool CompressedATCTexture_AMD;

		[Extension("GL_AMD_compressed_3DC_texture", Api = "gles1|gles2")]
		public bool Compressed3DCTexture_AMD;

		[Extension("GL_FJ_shader_binary_GCCSO", Api = "gles2")]
		public bool ShaderBinaryGCCSO_FJ;

		[Extension("GL_IMG_bindless_texture", Api = "gles2")]
		public bool BindlessTexture_IMG;

		[Extension("GL_IMG_framebuffer_downsample", Api = "gles2")]
		public bool FramebufferDownsample_IMG;

		[Extension("GL_IMG_multisampled_render_to_texture", Api = "gles1|gles2")]
		public bool MultisampledRenderToTexture_IMG;

		[Extension("GL_IMG_program_binary", Api = "gles2")]
		public bool ProgramBinary_IMG;

		[Extension("GL_IMG_read_format", Api = "gles1|gles2")]
		public bool ReadFormat_IMG;

		[Extension("GL_IMG_shader_binary", Api = "gles2")]
		public bool ShaderBinary_IMG;

		[Extension("GL_IMG_texture_compression_pvrtc", Api = "gles1|gles2")]
		public bool TextureCompressionPvrtc_IMG;

		[Extension("GL_IMG_texture_compression_pvrtc2", Api = "gles2")]
		public bool TextureCompressionPvrtc2_IMG;

		[Extension("GL_IMG_texture_env_enhanced_fixed_function", Api = "gles1")]
		public bool TextureEnvEnhancedFixedFunction_IMG;

		[Extension("GL_IMG_texture_filter_cubic", Api = "gles2")]
		public bool TextureFilterCubic_IMG;

		[Extension("GL_IMG_user_clip_plane", Api = "gles1")]
		public bool UserClipPlane_IMG;

		[Extension("GL_IMG_tile_region_protection", Api = "glsc2")]
		public bool TileRegionProtection_IMG;

		[Extension("GL_INGR_blend_func_separate")]
		public bool BlendFuncSeparate_INGR;

		[Extension("GL_INTEL_conservative_rasterization", Api = "gl|glcore|gles2")]
		public bool ConservativeRasterization_INTEL;

		[Extension("GL_INTEL_framebuffer_CMAA", Api = "gl|glcore|gles2")]
		public bool FramebufferCMAA_INTEL;

		[Extension("GL_INTEL_blackhole_render", Api = "gl|glcore|gles2")]
		public bool BlackholeRender_INTEL;

		[Extension("GL_NV_viewport_swizzle", Api = "gl|glcore|gles2")]
		public bool ViewportSwizzle_NV;

		[Extension("GL_NV_viewport_array", Api = "gles2")]
		public bool ViewportArray_NV;

		[Extension("GL_NV_vdpau_interop2")]
		public bool VdpauInterop2_NV;

		[Extension("GL_NV_texture_rectangle_compressed", Api = "gl|glcore")]
		public bool TextureRectangleCompressed_NV;

		[Extension("GL_NV_texture_npot_2D_mipmap", Api = "gles2")]
		public bool TextureNpot2DMipmap_NV;

		[Extension("GL_NV_texture_compression_s3tc_update", Api = "gles2")]
		public bool TextureCompressionS3tcUpdate_NV;

		[Extension("GL_NV_texture_border_clamp", Api = "gles2")]
		public bool TextureBorderClamp_NV;

		[Extension("GL_NV_stereo_view_rendering", Api = "gl|glcore|gles2")]
		public bool StereoViewRendering_NV;

		[Extension("GL_NV_shadow_samplers_cube", Api = "gles2")]
		public bool ShadowSamplersCube_NV;

		[Extension("GL_NV_shadow_samplers_array", Api = "gles2")]
		public bool ShadowSamplersArray_NV;

		[Extension("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
		public bool ShadingRateImage_NV;

		[Extension("GL_NV_shader_texture_footprint", Api = "gl|glcore|gles2")]
		public bool ShaderTextureFootprint_NV;

		[Extension("GL_NV_shader_subgroup_partitioned", Api = "gl|glcore|gles2")]
		public bool ShaderSubgroupPartitioned_NV;

		[Extension("GL_NV_shader_noperspective_interpolation", Api = "gles2")]
		public bool ShaderNoperspectiveInterpolation_NV;

		[Extension("GL_NV_shader_atomic_float64", Api = "gl|glcore")]
		public bool ShaderAtomicFloat64_NV;

		[Extension("GL_NV_scissor_exclusive", Api = "gl|glcore|gles2")]
		public bool ScissorExclusive_NV;

		[Extension("GL_NV_sRGB_formats", Api = "gles2")]
		public bool SRGBFormats_NV;

		[Extension("GL_NV_robustness_video_memory_purge")]
		public bool RobustnessVideoMemoryPurge_NV;

		[Extension("GL_NV_representative_fragment_test", Api = "gl|glcore|gles2")]
		public bool RepresentativeFragmentTest_NV;

		[Extension("GL_NV_read_stencil", Api = "gles2")]
		public bool ReadStencil_NV;

		[Extension("GL_NV_read_depth_stencil", Api = "gles2")]
		public bool ReadDepthStencil_NV;

		[Extension("GL_NV_read_depth", Api = "gles2")]
		public bool ReadDepth_NV;

		[Extension("GL_NV_read_buffer_front", Api = "gles2")]
		public bool ReadBufferFront_NV;

		[Extension("GL_NV_read_buffer", Api = "gles2")]
		public bool ReadBuffer_NV;

		[Extension("GL_NV_query_resource_tag")]
		public bool QueryResourceTag_NV;

		[Extension("GL_NV_query_resource")]
		public bool QueryResource_NV;

		[Extension("GL_NV_primitive_shading_rate", Api = "gl|glcore|gles2")]
		public bool PrimitiveShadingRate_NV;

		[Extension("GL_NV_polygon_mode", Api = "gles2")]
		public bool PolygonMode_NV;

		[Extension("GL_NV_pixel_buffer_object", Api = "gles2")]
		public bool PixelBufferObject_NV;

		[Extension("GL_NV_non_square_matrices", Api = "gles2")]
		public bool NonSquareMatrices_NV;

		[Extension("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public bool MeshShader_NV;

		[Extension("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
		public bool MemoryObjectSparse_NV;

		[Extension("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
		public bool MemoryAttachment_NV;

		[Extension("GL_NVX_progress_fence")]
		public bool ProgressFence_NVX;

		[Extension("GL_NVX_gpu_multicast2")]
		public bool GpuMulticast2_NVX;

		[Extension("GL_NV_gpu_multicast")]
		public bool GpuMulticast_NV;

		[Extension("GL_NV_instanced_arrays", Api = "gles2")]
		public bool InstancedArrays_NV;

		[Extension("GL_NV_image_formats", Api = "gles2")]
		public bool ImageFormats_NV;

		[Extension("GL_NV_generate_mipmap_sRGB", Api = "gles2")]
		public bool GenerateMipmapSRGB_NV;

		[Extension("GL_NV_framebuffer_multisample", Api = "gles2")]
		public bool FramebufferMultisample_NV;

		[Extension("GL_NV_framebuffer_blit", Api = "gles2")]
		public bool FramebufferBlit_NV;

		[Extension("GL_NV_fragment_shader_barycentric", Api = "gl|glcore|gles2")]
		public bool FragmentShaderBarycentric_NV;

		[Extension("GL_NV_fbo_color_attachments", Api = "gles2")]
		public bool FboColorAttachments_NV;

		[Extension("GL_DMP_shader_binary", Api = "gles2")]
		public bool ShaderBinary_DMP;

		[Extension("GL_NV_explicit_attrib_location", Api = "gles2")]
		public bool ExplicitAttribLocation_NV;

		[Extension("GL_NV_draw_vulkan_image", Api = "gl|glcore|gles2")]
		public bool DrawVulkanImage_NV;

		[Extension("GL_NV_draw_instanced", Api = "gles2")]
		public bool DrawInstanced_NV;

		[Extension("GL_NV_draw_buffers", Api = "gles2")]
		public bool DrawBuffers_NV;

		[Extension("GL_NV_depth_nonlinear", Api = "gles2")]
		public bool DepthNonlinear_NV;

		[Extension("GL_NV_coverage_sample", Api = "gles2")]
		public bool CoverageSample_NV;

		[Extension("GL_NV_copy_buffer", Api = "gles2")]
		public bool CopyBuffer_NV;

		[Extension("GL_NV_conservative_raster_underestimation", Api = "gl|glcore")]
		public bool ConservativeRasterUnderestimation_NV;

		[Extension("GL_NV_conservative_raster_pre_snap_triangles", Api = "gl|glcore|gles2")]
		public bool ConservativeRasterPreSnapTriangles_NV;

		[Extension("GL_NV_conservative_raster_pre_snap", Api = "gl|glcore|gles2")]
		public bool ConservativeRasterPreSnap_NV;

		[Extension("GL_NV_conservative_raster_dilate", Api = "gl|glcore")]
		public bool ConservativeRasterDilate_NV;

		[Extension("GL_NV_compute_shader_derivatives", Api = "gl|glcore|gles2")]
		public bool ComputeShaderDerivatives_NV;

		[Extension("GL_NV_command_list", Api = "gl|glcore")]
		public bool CommandList_NV;

		[Extension("GL_NV_clip_space_w_scaling", Api = "gl|glcore|gles2")]
		public bool ClipSpaceWScaling_NV;

		[Extension("GL_NV_blend_minmax_factor", Api = "gl|glcore|gles2")]
		public bool BlendMinmaxFactor_NV;

		[Extension("GL_NV_alpha_to_coverage_dither_control")]
		public bool AlphaToCoverageDitherControl_NV;

		[Extension("GL_NVX_linked_gpu_multicast")]
		public bool LinkedGpuMulticast_NVX;

		[Extension("GL_NVX_blend_equation_advanced_multi_draw_buffers", Api = "gl|gles2")]
		public bool BlendEquationAdvancedMultiDrawBuffers_NVX;

		[Extension("GL_MESA_bgra", Api = "gles2")]
		public bool Bgra_MESA;

		[Extension("GL_MESA_tile_raster_order")]
		public bool TileRasterOrder_MESA;

		[Extension("GL_MESA_shader_integer_functions", Api = "gl|gles2")]
		public bool ShaderIntegerFunctions_MESA;

		[Extension("GL_MESA_framebuffer_flip_x", Api = "gl|glcore|gles2")]
		public bool FramebufferFlipX_MESA;

		[Extension("GL_MESA_program_binary_formats", Api = "gl|gles2")]
		public bool ProgramBinaryFormats_MESA;

		[Extension("GL_MESA_framebuffer_swap_xy", Api = "gl|glcore|gles2")]
		public bool FramebufferSwapXy_MESA;

		[Extension("GL_MESA_framebuffer_flip_y", Api = "gl|glcore|gles2")]
		public bool FramebufferFlipY_MESA;

		[Extension("GL_OES_texture_float_linear", Api = "gles2")]
		public bool TextureFloatLinear_OES;

		[Extension("GL_OES_EGL_image", Api = "gles1|gles2")]
		public bool EGLImage_OES;

		[Extension("GL_OES_EGL_image_external", Api = "gles1|gles2")]
		public bool EGLImageExternal_OES;

		[Extension("GL_OES_EGL_image_external_essl3", Api = "gles2")]
		public bool EGLImageExternalEssl3_OES;

		[Extension("GL_OES_blend_equation_separate", Api = "gles1")]
		public bool BlendEquationSeparate_OES;

		[Extension("GL_OES_blend_func_separate", Api = "gles1")]
		public bool BlendFuncSeparate_OES;

		[Extension("GL_OES_blend_subtract", Api = "gles1")]
		public bool BlendSubtract_OES;

		[Extension("GL_OES_compressed_ETC1_RGB8_sub_texture", Api = "gles1|gles2")]
		public bool CompressedETC1RGB8SubTexture_OES;

		[Extension("GL_OES_compressed_ETC1_RGB8_texture", Api = "gles1|gles2")]
		public bool CompressedETC1RGB8Texture_OES;

		[Extension("GL_OES_copy_image", Api = "gles2")]
		public bool CopyImage_OES;

		[Extension("GL_OES_depth24", Api = "gles1|gles2|glsc2")]
		public bool Depth24_OES;

		[Extension("GL_OES_depth32", Api = "gles1|gles2|glsc2")]
		public bool Depth32_OES;

		[Extension("GL_OES_depth_texture", Api = "gles2")]
		public bool DepthTexture_OES;

		[Extension("GL_OES_draw_buffers_indexed", Api = "gles2")]
		public bool DrawBuffersIndexed_OES;

		[Extension("GL_OES_draw_elements_base_vertex", Api = "gles2")]
		public bool DrawElementsBaseVertex_OES;

		[Extension("GL_OES_draw_texture", Api = "gles1")]
		public bool DrawTexture_OES;

		[Extension("GL_OES_element_index_uint", Api = "gles1|gles2")]
		public bool ElementIndexUint_OES;

		[Extension("GL_OES_extended_matrix_palette", Api = "gles1")]
		public bool ExtendedMatrixPalette_OES;

		[Extension("GL_OES_fbo_render_mipmap", Api = "gles1|gles2")]
		public bool FboRenderMipmap_OES;

		[Extension("GL_OES_fragment_precision_high", Api = "gles2")]
		public bool FragmentPrecisionHigh_OES;

		[Extension("GL_OES_framebuffer_object", Api = "gles1")]
		public bool FramebufferObject_OES;

		[Extension("GL_OES_geometry_point_size", Api = "gles2")]
		public bool GeometryPointSize_OES;

		[Extension("GL_OES_geometry_shader", Api = "gles2")]
		public bool GeometryShader_OES;

		[Extension("GL_OES_get_program_binary", Api = "gles2")]
		public bool GetProgramBinary_OES;

		[Extension("GL_OES_gpu_shader5", Api = "gles2")]
		public bool GpuShader5_OES;

		[Extension("GL_OES_mapbuffer", Api = "gles1|gles2")]
		public bool Mapbuffer_OES;

		[Extension("GL_OES_matrix_get", Api = "gles1")]
		public bool MatrixGet_OES;

		[Extension("GL_OES_matrix_palette", Api = "gles1")]
		public bool MatrixPalette_OES;

		[Extension("GL_OES_packed_depth_stencil", Api = "gles1|gles2")]
		public bool PackedDepthStencil_OES;

		[Extension("GL_OES_point_size_array", Api = "gles1")]
		public bool PointSizeArray_OES;

		[Extension("GL_OES_point_sprite", Api = "gles1")]
		public bool PointSprite_OES;

		[Extension("GL_OES_primitive_bounding_box", Api = "gles2")]
		public bool PrimitiveBoundingBox_OES;

		[Extension("GL_OES_required_internalformat", Api = "gles1|gles2")]
		public bool RequiredInternalformat_OES;

		[Extension("GL_OES_rgb8_rgba8", Api = "gles1|gles2|glsc2")]
		public bool Rgb8Rgba8_OES;

		[Extension("GL_OES_sample_shading", Api = "gles2")]
		public bool SampleShading_OES;

		[Extension("GL_OES_sample_variables", Api = "gles2")]
		public bool SampleVariables_OES;

		[Extension("GL_OES_shader_image_atomic", Api = "gles2")]
		public bool ShaderImageAtomic_OES;

		[Extension("GL_OES_shader_io_blocks", Api = "gles2")]
		public bool ShaderIoBlocks_OES;

		[Extension("GL_OES_shader_multisample_interpolation", Api = "gles2")]
		public bool ShaderMultisampleInterpolation_OES;

		[Extension("GL_OES_standard_derivatives", Api = "gles2|glsc2")]
		public bool StandardDerivatives_OES;

		[Extension("GL_OES_stencil1", Api = "gles1|gles2")]
		public bool Stencil1_OES;

		[Extension("GL_OES_stencil4", Api = "gles1|gles2")]
		public bool Stencil4_OES;

		[Extension("GL_OES_stencil8", Api = "gles1")]
		public bool Stencil8_OES;

		[Extension("GL_OES_stencil_wrap", Api = "gles1")]
		public bool StencilWrap_OES;

		[Extension("GL_OES_surfaceless_context", Api = "gles1|gles2")]
		public bool SurfacelessContext_OES;

		[Extension("GL_OES_tessellation_point_size", Api = "gles2")]
		public bool TessellationPointSize_OES;

		[Extension("GL_OES_tessellation_shader", Api = "gles2")]
		public bool TessellationShader_OES;

		[Extension("GL_OES_texture_3D", Api = "gles2")]
		public bool Texture3D_OES;

		[Extension("GL_OES_texture_border_clamp", Api = "gles2")]
		public bool TextureBorderClamp_OES;

		[Extension("GL_OES_texture_buffer", Api = "gles2")]
		public bool TextureBuffer_OES;

		[Extension("GL_OES_texture_compression_astc", Api = "gles2")]
		public bool TextureCompressionAstc_OES;

		[Extension("GL_OES_texture_cube_map", Api = "gles1")]
		public bool TextureCubeMap_OES;

		[Extension("GL_OES_texture_cube_map_array", Api = "gles2")]
		public bool TextureCubeMapArray_OES;

		[Extension("GL_OES_texture_env_crossbar", Api = "gles1")]
		public bool TextureEnvCrossbar_OES;

		[Extension("GL_OES_texture_float", Api = "gles2")]
		public bool TextureFloat_OES;

		[Extension("GL_OES_texture_half_float", Api = "gles2")]
		public bool TextureHalfFloat_OES;

		[Extension("GL_OES_texture_half_float_linear", Api = "gles2")]
		public bool TextureHalfFloatLinear_OES;

		[Extension("GL_OES_texture_mirrored_repeat", Api = "gles1")]
		public bool TextureMirroredRepeat_OES;

		[Extension("GL_OES_texture_npot", Api = "gles1|gles2")]
		public bool TextureNpot_OES;

		[Extension("GL_OES_texture_stencil8", Api = "gles2")]
		public bool TextureStencil8_OES;

		[Extension("GL_OES_texture_storage_multisample_2d_array", Api = "gles2")]
		public bool TextureStorageMultisample2dArray_OES;

		[Extension("GL_OES_viewport_array", Api = "gles2")]
		public bool ViewportArray_OES;

		[Extension("GL_OES_texture_view", Api = "gles2")]
		public bool TextureView_OES;

		[Extension("GL_OES_vertex_type_10_10_10_2", Api = "gles2")]
		public bool VertexType1010102_OES;

		[Extension("GL_OES_vertex_array_object", Api = "gles1|gles2")]
		public bool VertexArrayObject_OES;

		[Extension("GL_OES_vertex_half_float", Api = "gles2")]
		public bool VertexHalfFloat_OES;

		[Extension("GL_NVX_cross_process_interop", Api = "disabled")]
		public bool CrossProcessInterop_NVX;

		public void Query()
		{
			Khronos.KhronosApi.LogComment("Query GL extensions.");
			KhronosVersion khronosVersion = KhronosVersion.Parse(GetString(StringName.Version) ?? throw new InvalidOperationException("unable to determine OpenGL version"));
			if (khronosVersion.Major >= 3 && Delegates.pglGetStringi != null)
			{
				Get(GetPName.NumExtensions, out int data);
				List<string> list = new List<string>();
				for (uint num = 0u; num < (uint)data; num++)
				{
					list.Add(GetString(StringName.Extensions, num));
				}
				Query(khronosVersion, list.ToArray());
			}
			else
			{
				Query(khronosVersion, GetString(StringName.Extensions));
			}
		}

		public Extensions Clone()
		{
			return (Extensions)MemberwiseClone();
		}
	}

	public sealed class Limits
	{
		[Limit(2865)]
		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2")]
		public int MaxListNesting;

		[Limit(3376)]
		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2")]
		public int MaxEvalOrder;

		[Limit(3377)]
		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2")]
		public int MaxLights;

		[Limit(3378)]
		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_IMG_user_clip_plane", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2")]
		public int MaxClipPlanes;

		[Limit(3379)]
		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		public int MaxTextureSize;

		[Limit(3380)]
		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2")]
		public int MaxPixelMapTable;

		[Limit(3381)]
		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2")]
		public int MaxAttribStackDepth;

		[Limit(3382)]
		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2")]
		public int MaxModelviewStackDepth;

		[Limit(3383)]
		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2")]
		public int MaxNameStackDepth;

		[Limit(3384)]
		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2")]
		public int MaxProjectionStackDepth;

		[Limit(3385)]
		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RemovedByFeature("GL_VERSION_3_2")]
		public int MaxTextureStackDepth;

		[Limit(3386, ArrayLength = 2u)]
		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		public int[] MaxViewportDims = new int[2];

		[Limit(3387)]
		[RequiredByFeature("GL_VERSION_1_1")]
		[RemovedByFeature("GL_VERSION_3_2")]
		public int MaxClientAttribStackDepth;

		[Limit(32883)]
		[RequiredByFeature("GL_VERSION_1_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture3D")]
		[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
		public int Max3dTextureSize;

		[Limit(32947)]
		[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
		[RequiredByFeature("GL_SGI_color_matrix")]
		public int MaxColorMatrixStackDepth;

		[Limit(33000)]
		[RequiredByFeature("GL_VERSION_1_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_draw_range_elements")]
		public int MaxElementsVertices;

		[Limit(33001)]
		[RequiredByFeature("GL_VERSION_1_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_draw_range_elements")]
		public int MaxElementsIndices;

		[Limit(33371)]
		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
		public int MaxViewports;

		[Limit(33378)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
		public int MaxComputeSharedMemorySize;

		[Limit(33379)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
		public int MaxComputeUniformComponents;

		[Limit(33380)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
		public int MaxComputeAtomicCounterBuffers;

		[Limit(33381)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
		public int MaxComputeAtomicCounters;

		[Limit(33382)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
		public int MaxCombinedComputeUniformComponents;

		[Limit(33388)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
		public int MaxDebugGroupStackDepth;

		[Limit(33390)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_explicit_uniform_location", Api = "gl|glcore")]
		public int MaxUniformLocations;

		[Limit(33497)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
		public int MaxVertexAttribRelativeOffset;

		[Limit(33498)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
		public int MaxVertexAttribBindings;

		[Limit(33509)]
		[RequiredByFeature("GL_VERSION_4_4")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		public int MaxVertexAttribStride;

		[Limit(33512)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
		public int MaxLabelLength;

		[Limit(33529)]
		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_cull_distance", Api = "gl|glcore")]
		public int MaxCullDistances;

		[Limit(33530)]
		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_cull_distance", Api = "gl|glcore")]
		public int MaxCombinedClipAndCullDistances;

		[Limit(33591)]
		[RequiredByFeature("GL_EXT_pixel_transform")]
		public int MaxPixelTransform2dStackDepthEXT;

		[Limit(34018)]
		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ARB_multitexture")]
		[RemovedByFeature("GL_VERSION_3_2")]
		public int MaxTextureUnits;

		[Limit(34024)]
		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
		public int MaxRenderbufferSize;

		[Limit(34040)]
		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ARB_texture_rectangle")]
		[RequiredByFeature("GL_NV_texture_rectangle")]
		public int MaxRectangleTextureSize;

		[Limit(34045)]
		[RequiredByFeature("GL_VERSION_1_4")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture_lod_bias", Api = "gl|gles1")]
		public int MaxTextureLodBias;

		[Limit(34047)]
		[RequiredByFeature("GL_VERSION_4_6")]
		[RequiredByFeature("GL_ARB_texture_filter_anisotropic", Api = "gl|glcore")]
		public int MaxTextureMaxAnisotropy;

		[Limit(34052)]
		[RequiredByFeature("GL_NV_light_max_exponent")]
		public int MaxShininessNV;

		[Limit(34053)]
		[RequiredByFeature("GL_NV_light_max_exponent")]
		public int MaxSpotExponentNV;

		[Limit(34076)]
		[RequiredByFeature("GL_VERSION_1_3")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_cube_map")]
		[RequiredByFeature("GL_EXT_texture_cube_map")]
		[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
		public int MaxCubeMapTextureSize;

		[Limit(34080)]
		[RequiredByFeature("GL_NV_vertex_array_range")]
		public int MaxVertexArrayRangeElementNV;

		[Limit(34125)]
		[RequiredByFeature("GL_NV_register_combiners")]
		public int MaxGeneralCombinersNV;

		[Limit(34350)]
		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		public int MaxProgramMatrixStackDepthARB;

		[Limit(34350)]
		[RequiredByFeature("GL_NV_vertex_program")]
		public int MaxTrackMatrixStackDepthNV;

		[Limit(34351)]
		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		public int MaxProgramMatricesARB;

		[Limit(34351)]
		[RequiredByFeature("GL_NV_vertex_program")]
		public int MaxTrackMatricesNV;

		[Limit(34468)]
		[RequiredByFeature("GL_ARB_vertex_blend")]
		[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
		public int MaxVertexUnitsARB;

		[Limit(34518)]
		[RequiredByFeature("GL_NV_evaluators")]
		public int MaxMapTessellationNV;

		[Limit(34519)]
		[RequiredByFeature("GL_NV_evaluators")]
		public int MaxRationalEvalOrderNV;

		[Limit(34520)]
		[RequiredByFeature("GL_NV_tessellation_program5")]
		public int MaxProgramPatchAttribsNV;

		[Limit(34667)]
		[RequiredByFeature("GL_ATI_vertex_streams")]
		public int MaxVertexStreamsATI;

		[Limit(34757)]
		[RequiredByFeature("GL_EXT_vertex_shader")]
		public int MaxVertexShaderInstructionsEXT;

		[Limit(34758)]
		[RequiredByFeature("GL_EXT_vertex_shader")]
		public int MaxVertexShaderVariantsEXT;

		[Limit(34759)]
		[RequiredByFeature("GL_EXT_vertex_shader")]
		public int MaxVertexShaderInvariantsEXT;

		[Limit(34760)]
		[RequiredByFeature("GL_EXT_vertex_shader")]
		public int MaxVertexShaderLocalConstantsEXT;

		[Limit(34761)]
		[RequiredByFeature("GL_EXT_vertex_shader")]
		public int MaxVertexShaderLocalsEXT;

		[Limit(34762)]
		[RequiredByFeature("GL_EXT_vertex_shader")]
		public int MaxOptimizedVertexShaderInstructionsEXT;

		[Limit(34763)]
		[RequiredByFeature("GL_EXT_vertex_shader")]
		public int MaxOptimizedVertexShaderVariantsEXT;

		[Limit(34764)]
		[RequiredByFeature("GL_EXT_vertex_shader")]
		public int MaxOptimizedVertexShaderLocalConstantsEXT;

		[Limit(34765)]
		[RequiredByFeature("GL_EXT_vertex_shader")]
		public int MaxOptimizedVertexShaderInvariantsEXT;

		[Limit(34766)]
		[RequiredByFeature("GL_EXT_vertex_shader")]
		public int MaxOptimizedVertexShaderLocalsEXT;

		[Limit(34801)]
		[RequiredByFeature("GL_ATI_pn_triangles")]
		public int MaxPnTrianglesTesselationLevelATI;

		[Limit(34827)]
		[RequiredByFeature("GL_ARB_fragment_program")]
		public int MaxProgramAluInstructionsARB;

		[Limit(34828)]
		[RequiredByFeature("GL_ARB_fragment_program")]
		public int MaxProgramTexInstructionsARB;

		[Limit(34829)]
		[RequiredByFeature("GL_ARB_fragment_program")]
		public int MaxProgramTexIndirectionsARB;

		[Limit(34830)]
		[RequiredByFeature("GL_ARB_fragment_program")]
		public int MaxProgramNativeAluInstructionsARB;

		[Limit(34831)]
		[RequiredByFeature("GL_ARB_fragment_program")]
		public int MaxProgramNativeTexInstructionsARB;

		[Limit(34832)]
		[RequiredByFeature("GL_ARB_fragment_program")]
		public int MaxProgramNativeTexIndirectionsARB;

		[Limit(34852)]
		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_draw_buffers")]
		[RequiredByFeature("GL_ATI_draw_buffers")]
		[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
		[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
		public int MaxDrawBuffers;

		[Limit(34881)]
		[RequiredByFeature("GL_ARB_matrix_palette")]
		public int MaxMatrixPaletteStackDepthARB;

		[Limit(34882)]
		[RequiredByFeature("GL_ARB_matrix_palette")]
		[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
		public int MaxPaletteMatricesARB;

		[Limit(34920)]
		[RequiredByFeature("GL_NV_fragment_program")]
		public int MaxFragmentProgramLocalParametersNV;

		[Limit(34921)]
		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		public int MaxVertexAttribs;

		[Limit(34924)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessControlInputComponents;

		[Limit(34925)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessEvaluationInputComponents;

		[Limit(34929)]
		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_fragment_program")]
		[RemovedByFeature("GL_VERSION_3_2")]
		public int MaxTextureCoords;

		[Limit(34930)]
		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_fragment_program")]
		public int MaxTextureImageUnits;

		[Limit(34977)]
		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		public int MaxProgramInstructionsARB;

		[Limit(34979)]
		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		public int MaxProgramNativeInstructionsARB;

		[Limit(34981)]
		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		public int MaxProgramTemporariesARB;

		[Limit(34983)]
		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		public int MaxProgramNativeTemporariesARB;

		[Limit(34985)]
		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		public int MaxProgramParametersARB;

		[Limit(34987)]
		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		public int MaxProgramNativeParametersARB;

		[Limit(34989)]
		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		public int MaxProgramAttribsARB;

		[Limit(34991)]
		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		public int MaxProgramNativeAttribsARB;

		[Limit(34993)]
		[RequiredByFeature("GL_ARB_vertex_program")]
		public int MaxProgramAddressRegistersARB;

		[Limit(34995)]
		[RequiredByFeature("GL_ARB_vertex_program")]
		public int MaxProgramNativeAddressRegistersARB;

		[Limit(34996)]
		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		public int MaxProgramLocalParametersARB;

		[Limit(34997)]
		[RequiredByFeature("GL_ARB_fragment_program")]
		[RequiredByFeature("GL_ARB_vertex_program")]
		public int MaxProgramEnvParametersARB;

		[Limit(35060)]
		[RequiredByFeature("GL_NV_fragment_program2")]
		[RequiredByFeature("GL_NV_vertex_program2_option")]
		public int MaxProgramExecInstructionsNV;

		[Limit(35061)]
		[RequiredByFeature("GL_NV_fragment_program2")]
		[RequiredByFeature("GL_NV_vertex_program2_option")]
		public int MaxProgramCallDepthNV;

		[Limit(35062)]
		[RequiredByFeature("GL_NV_fragment_program2")]
		public int MaxProgramIfDepthNV;

		[Limit(35063)]
		[RequiredByFeature("GL_NV_fragment_program2")]
		public int MaxProgramLoopDepthNV;

		[Limit(35064)]
		[RequiredByFeature("GL_NV_fragment_program2")]
		public int MaxProgramLoopCountNV;

		[Limit(35068)]
		[RequiredByFeature("GL_VERSION_3_3")]
		[RequiredByFeature("GL_ARB_blend_func_extended", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_blend_func_extended", Api = "gles2")]
		public int MaxDualSourceDrawBuffers;

		[Limit(35071)]
		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture_array")]
		public int MaxArrayTextureLayers;

		[Limit(35076)]
		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_gpu_program4")]
		public int MinProgramTexelOffset;

		[Limit(35077)]
		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_gpu_shader4")]
		[RequiredByFeature("GL_NV_gpu_program4")]
		public int MaxProgramTexelOffset;

		[Limit(35080)]
		[RequiredByFeature("GL_NV_gpu_program4")]
		public int MaxProgramAttribComponentsNV;

		[Limit(35081)]
		[RequiredByFeature("GL_NV_gpu_program4")]
		public int MaxProgramResultComponentsNV;

		[Limit(35371)]
		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		public int MaxVertexUniformBlocks;

		[Limit(35372)]
		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
		public int MaxGeometryUniformBlocks;

		[Limit(35373)]
		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		public int MaxFragmentUniformBlocks;

		[Limit(35374)]
		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		public int MaxCombinedUniformBlocks;

		[Limit(35375)]
		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		public int MaxUniformBufferBindings;

		[Limit(35376)]
		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		public int MaxUniformBlockSize;

		[Limit(35377)]
		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		public int MaxCombinedVertexUniformComponents;

		[Limit(35378)]
		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
		public int MaxCombinedGeometryUniformComponents;

		[Limit(35379)]
		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		public int MaxCombinedFragmentUniformComponents;

		[Limit(35657)]
		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_fragment_shader")]
		public int MaxFragmentUniformComponents;

		[Limit(35658)]
		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		public int MaxVertexUniformComponents;

		[Limit(35659)]
		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		public int MaxVaryingFloats;

		[Limit(35660)]
		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		[RequiredByFeature("GL_NV_vertex_program3")]
		public int MaxVertexTextureImageUnits;

		[Limit(35661)]
		[RequiredByFeature("GL_VERSION_2_0")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_vertex_shader")]
		public int MaxCombinedTextureImageUnits;

		[Limit(35879)]
		[RequiredByFeature("GL_NV_geometry_program4")]
		public int MaxProgramOutputVerticesNV;

		[Limit(35880)]
		[RequiredByFeature("GL_NV_geometry_program4")]
		public int MaxProgramTotalOutputComponentsNV;

		[Limit(35881)]
		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
		[RequiredByFeature("GL_EXT_geometry_shader4")]
		[RequiredByFeature("GL_NV_geometry_program4")]
		[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
		public int MaxGeometryTextureImageUnits;

		[Limit(35883)]
		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_buffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture_buffer_object")]
		[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2")]
		public int MaxTextureBufferSize;

		[Limit(35895)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sample_shading", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_sample_shading", Api = "gles2")]
		public int MinSampleShadingValue;

		[Limit(35968)]
		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_transform_feedback")]
		[RequiredByFeature("GL_NV_transform_feedback")]
		public int MaxTransformFeedbackSeparateComponents;

		[Limit(35978)]
		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_transform_feedback")]
		[RequiredByFeature("GL_NV_transform_feedback")]
		public int MaxTransformFeedbackInterleavedComponents;

		[Limit(35979)]
		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_EXT_transform_feedback")]
		[RequiredByFeature("GL_NV_transform_feedback")]
		public int MaxTransformFeedbackSeparateAttribs;

		[Limit(36063)]
		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
		[RequiredByFeature("GL_EXT_framebuffer_object")]
		[RequiredByFeature("GL_NV_fbo_color_attachments", Api = "gles2")]
		public int MaxColorAttachments;

		[Limit(36183)]
		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_ANGLE_framebuffer_multisample", Api = "gles2")]
		[RequiredByFeature("GL_APPLE_framebuffer_multisample", Api = "gles1|gles2")]
		[RequiredByFeature("GL_EXT_framebuffer_multisample")]
		[RequiredByFeature("GL_EXT_multisampled_render_to_texture", Api = "gles1|gles2")]
		[RequiredByFeature("GL_NV_framebuffer_multisample", Api = "gles2")]
		public int MaxSamples;

		[Limit(36203)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_ES3_compatibility", Api = "gl|glcore")]
		public int MaxElementIndex;

		[Limit(36256)]
		[RequiredByFeature("GL_NV_parameter_buffer_object")]
		public int MaxProgramParameterBufferBindingsNV;

		[Limit(36257)]
		[RequiredByFeature("GL_NV_parameter_buffer_object")]
		public int MaxProgramParameterBufferSizeNV;

		[Limit(36261)]
		[RequiredByFeature("GL_NV_gpu_program4")]
		public int MaxProgramGenericAttribsNV;

		[Limit(36262)]
		[RequiredByFeature("GL_NV_gpu_program4")]
		public int MaxProgramGenericResultsNV;

		[Limit(36317)]
		[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_geometry_shader4")]
		public int MaxGeometryVaryingComponentsARB;

		[Limit(36318)]
		[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_geometry_shader4")]
		public int MaxVertexVaryingComponentsARB;

		[Limit(36319)]
		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
		[RequiredByFeature("GL_EXT_geometry_shader4")]
		[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
		public int MaxGeometryUniformComponents;

		[Limit(36320)]
		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
		[RequiredByFeature("GL_EXT_geometry_shader4")]
		[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
		public int MaxGeometryOutputVertices;

		[Limit(36321)]
		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
		[RequiredByFeature("GL_EXT_geometry_shader4")]
		[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
		public int MaxGeometryTotalOutputComponents;

		[Limit(36322)]
		[RequiredByFeature("GL_EXT_bindable_uniform")]
		public int MaxVertexBindableUniformsEXT;

		[Limit(36323)]
		[RequiredByFeature("GL_EXT_bindable_uniform")]
		public int MaxFragmentBindableUniformsEXT;

		[Limit(36324)]
		[RequiredByFeature("GL_EXT_bindable_uniform")]
		public int MaxGeometryBindableUniformsEXT;

		[Limit(36327)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
		public int MaxSubroutines;

		[Limit(36328)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
		public int MaxSubroutineUniformLocations;

		[Limit(36333)]
		[RequiredByFeature("GL_EXT_bindable_uniform")]
		public int MaxBindableUniformSizeEXT;

		[Limit(36347)]
		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
		public int MaxVertexUniformVectors;

		[Limit(36348)]
		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
		public int MaxVaryingVectors;

		[Limit(36349)]
		[RequiredByFeature("GL_VERSION_4_1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
		public int MaxFragmentUniformVectors;

		[Limit(36369)]
		[RequiredByFeature("GL_NV_framebuffer_multisample_coverage", Api = "gl|glcore")]
		public int MaxMultisampleCoverageModesNV;

		[Limit(36382)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxCombinedTessControlUniformComponents;

		[Limit(36383)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxCombinedTessEvaluationUniformComponents;

		[Limit(36441)]
		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_explicit_multisample")]
		public int MaxSampleMaskWords;

		[Limit(36442)]
		[RequiredByFeature("GL_NV_gpu_program5")]
		public int MaxGeometryProgramInvocationsNV;

		[Limit(36442)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_gpu_shader5", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
		public int MaxGeometryShaderInvocations;

		[Limit(36443)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_gpu_shader5", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_shader_multisample_interpolation", Api = "gles2")]
		[RequiredByFeature("GL_NV_gpu_program5")]
		public int MinFragmentInterpolationOffset;

		[Limit(36444)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_gpu_shader5", Api = "gl|glcore")]
		[RequiredByFeature("GL_OES_shader_multisample_interpolation", Api = "gles2")]
		[RequiredByFeature("GL_NV_gpu_program5")]
		public int MaxFragmentInterpolationOffset;

		[Limit(36446)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_gather", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_gpu_program5")]
		public int MinProgramTextureGatherOffset;

		[Limit(36447)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_gather", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_gpu_program5")]
		public int MaxProgramTextureGatherOffset;

		[Limit(36448)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxMeshUniformBlocksNV;

		[Limit(36449)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxMeshTextureImageUnitsNV;

		[Limit(36450)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxMeshImageUniformsNV;

		[Limit(36451)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxMeshUniformComponentsNV;

		[Limit(36452)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxMeshAtomicCounterBuffersNV;

		[Limit(36453)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxMeshAtomicCountersNV;

		[Limit(36454)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxMeshShaderStorageBlocksNV;

		[Limit(36455)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxCombinedMeshUniformComponentsNV;

		[Limit(36456)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxTaskUniformBlocksNV;

		[Limit(36457)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxTaskTextureImageUnitsNV;

		[Limit(36458)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxTaskImageUniformsNV;

		[Limit(36459)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxTaskUniformComponentsNV;

		[Limit(36460)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxTaskAtomicCounterBuffersNV;

		[Limit(36461)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxTaskAtomicCountersNV;

		[Limit(36462)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxTaskShaderStorageBlocksNV;

		[Limit(36463)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxCombinedTaskUniformComponentsNV;

		[Limit(36464)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_transform_feedback3", Api = "gl|glcore")]
		public int MaxTransformFeedbackBuffers;

		[Limit(36465)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ARB_gpu_shader5", Api = "gl|glcore")]
		[RequiredByFeature("GL_ARB_transform_feedback3", Api = "gl|glcore")]
		public int MaxVertexStreams;

		[Limit(36477)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxPatchVertices;

		[Limit(36478)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessGenLevel;

		[Limit(36479)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessControlUniformComponents;

		[Limit(36480)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessEvaluationUniformComponents;

		[Limit(36481)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessControlTextureImageUnits;

		[Limit(36482)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessEvaluationTextureImageUnits;

		[Limit(36483)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessControlOutputComponents;

		[Limit(36484)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessPatchComponents;

		[Limit(36485)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessControlTotalOutputComponents;

		[Limit(36486)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessEvaluationOutputComponents;

		[Limit(36489)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessControlUniformBlocks;

		[Limit(36490)]
		[RequiredByFeature("GL_VERSION_4_0")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessEvaluationUniformBlocks;

		[Limit(36628)]
		[RequiredByFeature("GL_EXT_window_rectangles", Api = "gl|glcore|gles2")]
		public int MaxWindowRectanglesEXT;

		[Limit(36661)]
		[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
		public int MaxShaderBufferAddressNV;

		[Limit(36664)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_shader_image_load_store")]
		public int MaxImageUnits;

		[Limit(36665)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
		[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_shader_image_load_store")]
		public int MaxCombinedImageUnitsAndFragmentOutputs;

		[Limit(36676)]
		[RequiredByFeature("GL_NV_gpu_program5")]
		public int MaxProgramSubroutineParametersNV;

		[Limit(36677)]
		[RequiredByFeature("GL_NV_gpu_program5")]
		public int MaxProgramSubroutineNumNV;

		[Limit(36707)]
		[RequiredByFeature("GL_EXT_shader_pixel_local_storage", Api = "gles2")]
		public int MaxShaderPixelLocalStorageFastSizeEXT;

		[Limit(36711)]
		[RequiredByFeature("GL_EXT_shader_pixel_local_storage", Api = "gles2")]
		public int MaxShaderPixelLocalStorageSizeEXT;

		[Limit(36767)]
		[RequiredByFeature("GL_ARB_texture_gather", Api = "gl|glcore")]
		public int MaxProgramTextureGatherComponentsARB;

		[Limit(36769)]
		[RequiredByFeature("GL_QCOM_texture_foveated_subsampled_layout", Api = "gles2")]
		public int MaxShaderSubsampledImageUnitsQCOM;

		[Limit(36973)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_shader_image_load_store")]
		public int MaxImageSamples;

		[Limit(37052)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ARB_map_buffer_alignment", Api = "gl|glcore")]
		public int MinMapBufferAlignment;

		[Limit(37066)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
		public int MaxVertexImageUniforms;

		[Limit(37067)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessControlImageUniforms;

		[Limit(37068)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessEvaluationImageUniforms;

		[Limit(37069)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
		public int MaxGeometryImageUniforms;

		[Limit(37070)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
		public int MaxFragmentImageUniforms;

		[Limit(37071)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
		public int MaxCombinedImageUniforms;

		[Limit(37072)]
		[RequiredByFeature("GL_NV_deep_texture3D")]
		public int MaxDeep3dTextureWidthHeightNV;

		[Limit(37073)]
		[RequiredByFeature("GL_NV_deep_texture3D")]
		public int MaxDeep3dTextureDepthNV;

		[Limit(37078)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
		public int MaxVertexShaderStorageBlocks;

		[Limit(37079)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
		public int MaxGeometryShaderStorageBlocks;

		[Limit(37080)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessControlShaderStorageBlocks;

		[Limit(37081)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessEvaluationShaderStorageBlocks;

		[Limit(37082)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
		public int MaxFragmentShaderStorageBlocks;

		[Limit(37083)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
		public int MaxComputeShaderStorageBlocks;

		[Limit(37084)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
		public int MaxCombinedShaderStorageBlocks;

		[Limit(37085)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
		public int MaxShaderStorageBufferBindings;

		[Limit(37086)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
		public int MaxShaderStorageBlockSize;

		[Limit(37099)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
		public int MaxComputeWorkGroupInvocations;

		[Limit(37106)]
		[RequiredByFeature("GL_EXT_multiview_draw_buffers", Api = "gles2")]
		public int MaxMultiviewBuffersEXT;

		[Limit(37134)]
		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
		public int MaxColorTextureSamples;

		[Limit(37136)]
		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
		public int MaxIntegerSamples;

		[Limit(37137)]
		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
		[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
		public int MaxServerWaitTimeout;

		[Limit(37154)]
		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		public int MaxVertexOutputComponents;

		[Limit(37155)]
		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
		public int MaxGeometryInputComponents;

		[Limit(37156)]
		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
		public int MaxGeometryOutputComponents;

		[Limit(37157)]
		[RequiredByFeature("GL_VERSION_3_2")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		public int MaxFragmentInputComponents;

		[Limit(37173)]
		[RequiredByFeature("GL_IMG_multisampled_render_to_texture", Api = "gles1|gles2")]
		public int MaxSamplesIMG;

		[Limit(37187)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
		[RequiredByFeature("GL_AMD_debug_output")]
		[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
		public int MaxDebugMessageLength;

		[Limit(37188)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
		[RequiredByFeature("GL_AMD_debug_output")]
		[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
		public int MaxDebugLoggedMessages;

		[Limit(37272)]
		[RequiredByFeature("GL_ARB_sparse_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
		[RequiredByFeature("GL_AMD_sparse_texture")]
		public int MaxSparseTextureSizeARB;

		[Limit(37273)]
		[RequiredByFeature("GL_ARB_sparse_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
		[RequiredByFeature("GL_AMD_sparse_texture")]
		public int MaxSparse3dTextureSizeARB;

		[Limit(37274)]
		[RequiredByFeature("GL_AMD_sparse_texture")]
		[RequiredByFeature("GL_ARB_sparse_texture", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
		public int MaxSparseArrayTextureLayers;

		[Limit(37275)]
		[RequiredByFeature("GL_AMD_sparse_texture")]
		public int MinSparseLevelAMD;

		[Limit(37276)]
		[RequiredByFeature("GL_AMD_sparse_texture")]
		public int MinLodWarningAMD;

		[Limit(37299)]
		[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
		public int MaxColorFramebufferSamplesAMD;

		[Limit(37300)]
		[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
		public int MaxColorFramebufferStorageSamplesAMD;

		[Limit(37307)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
		public int MaxComputeUniformBlocks;

		[Limit(37308)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
		public int MaxComputeTextureImageUnits;

		[Limit(37309)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
		public int MaxComputeImageUniforms;

		[Limit(37562)]
		[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
		public int MaxLgpuGpusNVX;

		[Limit(37580)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
		public int MaxVertexAtomicCounterBuffers;

		[Limit(37581)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessControlAtomicCounterBuffers;

		[Limit(37582)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessEvaluationAtomicCounterBuffers;

		[Limit(37583)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
		public int MaxGeometryAtomicCounterBuffers;

		[Limit(37584)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
		public int MaxFragmentAtomicCounterBuffers;

		[Limit(37585)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
		public int MaxCombinedAtomicCounterBuffers;

		[Limit(37586)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
		public int MaxVertexAtomicCounters;

		[Limit(37587)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessControlAtomicCounters;

		[Limit(37588)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
		public int MaxTessEvaluationAtomicCounters;

		[Limit(37589)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
		public int MaxGeometryAtomicCounters;

		[Limit(37590)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
		public int MaxFragmentAtomicCounters;

		[Limit(37591)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
		public int MaxCombinedAtomicCounters;

		[Limit(37592)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
		public int MaxAtomicCounterBufferSize;

		[Limit(37596)]
		[RequiredByFeature("GL_VERSION_4_2")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
		public int MaxAtomicCounterBufferBindings;

		[Limit(37653)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
		public int MaxFramebufferWidth;

		[Limit(37654)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
		public int MaxFramebufferHeight;

		[Limit(37655)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
		[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
		public int MaxFramebufferLayers;

		[Limit(37656)]
		[RequiredByFeature("GL_VERSION_4_3")]
		[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
		[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
		public int MaxFramebufferSamples;

		[Limit(37673)]
		[RequiredByFeature("GL_EXT_raster_multisample", Api = "gl|glcore|gles2")]
		[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
		public int MaxRasterSamplesEXT;

		[Limit(37700)]
		[RequiredByFeature("GL_ARB_compute_variable_group_size", Api = "gl|glcore")]
		public int MaxComputeVariableGroupInvocationsARB;

		[Limit(37701)]
		[RequiredByFeature("GL_ARB_compute_variable_group_size", Api = "gl|glcore")]
		public int MaxComputeVariableGroupSizeARB;

		[Limit(37705)]
		[RequiredByFeature("GL_NV_conservative_raster", Api = "gl|glcore|gles2")]
		public int MaxSubpixelPrecisionBiasBitsNV;

		[Limit(38198)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxMeshTotalMemorySizeNV;

		[Limit(38199)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxTaskTotalMemorySizeNV;

		[Limit(38200)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxMeshOutputVerticesNV;

		[Limit(38201)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxMeshOutputPrimitivesNV;

		[Limit(38202)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxTaskOutputCountNV;

		[Limit(38203)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxMeshWorkGroupSizeNV;

		[Limit(38204)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxTaskWorkGroupSizeNV;

		[Limit(38205)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxDrawMeshTasksCountNV;

		[Limit(38231)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxMeshViewsNV;

		[Limit(38239)]
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
		public int MaxCoarseFragmentSamplesNV;

		[Limit(38306)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxMeshWorkGroupInvocationsNV;

		[Limit(38307)]
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
		public int MaxTaskWorkGroupInvocationsNV;

		[Limit(38316)]
		[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
		public int MaxDetachedTexturesNV;

		[Limit(38317)]
		[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
		public int MaxDetachedBuffersNV;

		[Limit(38326)]
		[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
		public int MaxTimelineSemaphoreValueDifferenceNV;

		[Limit(38449)]
		[RequiredByFeature("GL_OVR_multiview", Api = "gl|glcore|gles2")]
		public int MaxViewsOVR;

		[Limit(38480)]
		[RequiredByFeature("GL_EXT_shader_pixel_local_storage2", Api = "gles2")]
		public int MaxShaderCombinedLocalStorageFastSizeEXT;

		[Limit(38481)]
		[RequiredByFeature("GL_EXT_shader_pixel_local_storage2", Api = "gles2")]
		public int MaxShaderCombinedLocalStorageSizeEXT;

		[Limit(38615)]
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public int MinFragmentShadingRateAttachmentTexelWidthEXT;

		[Limit(38616)]
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public int MaxFragmentShadingRateAttachmentTexelWidthEXT;

		[Limit(38617)]
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public int MinFragmentShadingRateAttachmentTexelHeightEXT;

		[Limit(38618)]
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public int MaxFragmentShadingRateAttachmentTexelHeightEXT;

		[Limit(38619)]
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public int MaxFragmentShadingRateAttachmentTexelAspectRatioEXT;

		[Limit(38620)]
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public int MaxFragmentShadingRateAttachmentLayersEXT;

		[Limit(107053)]
		[RequiredByFeature("GL_PGI_vertex_hints")]
		public int MaxVertexHintPGI;

		[Limit(2850, ArrayLength = 2u)]
		[RequiredByFeature("GL_VERSION_1_0")]
		public float[] LineWidthRange = new float[2];

		[Limit(2851)]
		[RequiredByFeature("GL_VERSION_1_0")]
		public float LineWidthGranularity;

		[Limit(33902, ArrayLength = 2u)]
		[RequiredByFeature("GL_VERSION_1_2")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		public float[] AliasedLineWidthRange = new float[2];

		[Limit(35380)]
		[RequiredByFeature("GL_VERSION_3_1")]
		[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
		[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
		public int UniformBufferOffsetAlignment;

		public static Limits Query(KhronosVersion version, Extensions glExtensions)
		{
			if (glExtensions == null)
			{
				throw new ArgumentNullException("glExtensions");
			}
			Khronos.KhronosApi.LogComment("Query OpenGL implementation limits.");
			Limits limits = new Limits();
			foreach (FieldInfo item in (IEnumerable<FieldInfo>)typeof(Limits).GetFields(BindingFlags.Instance | BindingFlags.Public))
			{
				LimitAttribute limitAttribute = (LimitAttribute)item.GetCustomAttribute(typeof(LimitAttribute));
				Attribute[] array = new List<Attribute>(item.GetCustomAttributes(typeof(RequiredByFeatureAttribute))).ToArray();
				if (limitAttribute == null || (array != null && array.Length != 0 && !Array.Exists(array, (Attribute item) => ((RequiredByFeatureAttribute)item).IsSupported(version, glExtensions))))
				{
					continue;
				}
				MethodInfo methodInfo = ((!(item.FieldType != typeof(string))) ? typeof(Gl).GetMethod("GetString", new Type[1] { typeof(int) }) : ((!item.FieldType.IsArray) ? typeof(Gl).GetMethod("Get", new Type[2]
				{
					typeof(int),
					item.FieldType.MakeByRefType()
				}) : typeof(Gl).GetMethod("Get", new Type[2]
				{
					typeof(int),
					item.FieldType
				})));
				if (methodInfo != null)
				{
					if (item.FieldType != typeof(string))
					{
						object obj = (item.FieldType.IsArray ? Array.CreateInstance(item.FieldType.GetElementType(), (int)limitAttribute.ArrayLength) : Activator.CreateInstance(item.FieldType));
						try
						{
							object[] array2 = new object[2] { limitAttribute.EnumValue, obj };
							methodInfo.Invoke(null, array2);
							item.SetValue(limits, array2[1]);
						}
						catch (TargetInvocationException ex)
						{
							Khronos.KhronosApi.LogComment($"Getting {item.Name} (0x{limitAttribute.EnumValue:X4}): {ex.InnerException.Message}");
						}
					}
					else
					{
						try
						{
							string value = (string)methodInfo.Invoke(null, new object[1] { limitAttribute.EnumValue });
							item.SetValue(limits, value);
						}
						catch (TargetInvocationException ex2)
						{
							Khronos.KhronosApi.LogComment($"Getting {item.Name} (0x{limitAttribute.EnumValue}): {ex2.InnerException.Message}");
						}
					}
					continue;
				}
				throw new InvalidOperationException("GraphicsLimits field " + item.Name + " doesn't have a OpenGL compatible type");
			}
			ClearErrors();
			return limits;
		}
	}

	public sealed class PlatformExtensionsCollection
	{
		public bool CreateContext_ARB
		{
			get
			{
				if (!Egl.IsRequired)
				{
					switch (Platform.CurrentPlatformId)
					{
					case Platform.Id.WindowsNT:
						if (Wgl.CurrentExtensions != null)
						{
							return Wgl.CurrentExtensions.CreateContext_ARB;
						}
						return false;
					case Platform.Id.Linux:
						if (Glx.CurrentExtensions != null)
						{
							return Glx.CurrentExtensions.CreateContext_ARB;
						}
						return false;
					case Platform.Id.MacOS:
						if (Glx.IsRequired)
						{
							if (Glx.CurrentExtensions != null)
							{
								return Glx.CurrentExtensions.CreateContext_ARB;
							}
							return false;
						}
						throw new NotSupportedException("platform MacOS not supported without Glx.IsRequired=true");
					default:
						return false;
					}
				}
				return false;
			}
		}

		public bool CreateContextProfile_ARB
		{
			get
			{
				if (!Egl.IsRequired)
				{
					switch (Platform.CurrentPlatformId)
					{
					case Platform.Id.WindowsNT:
						if (Wgl.CurrentExtensions != null)
						{
							return Wgl.CurrentExtensions.CreateContextProfile_ARB;
						}
						return false;
					case Platform.Id.Linux:
						if (Glx.CurrentExtensions != null)
						{
							return Glx.CurrentExtensions.CreateContextProfile_ARB;
						}
						return false;
					case Platform.Id.MacOS:
						if (Glx.IsRequired)
						{
							if (Glx.CurrentExtensions != null)
							{
								return Glx.CurrentExtensions.CreateContextProfile_ARB;
							}
							return false;
						}
						throw new NotSupportedException("platform MacOS not supported without Glx.IsRequired=true");
					default:
						return false;
					}
				}
				return false;
			}
		}

		public bool CreateContextRobustness_ARB
		{
			get
			{
				if (!Egl.IsRequired)
				{
					switch (Platform.CurrentPlatformId)
					{
					case Platform.Id.WindowsNT:
						if (Wgl.CurrentExtensions != null)
						{
							return Wgl.CurrentExtensions.CreateContextRobustness_ARB;
						}
						return false;
					case Platform.Id.Linux:
						if (Glx.CurrentExtensions != null)
						{
							return Glx.CurrentExtensions.CreateContextRobustness_ARB;
						}
						return false;
					case Platform.Id.MacOS:
						if (Glx.IsRequired)
						{
							if (Glx.CurrentExtensions != null)
							{
								return Glx.CurrentExtensions.CreateContextRobustness_ARB;
							}
							return false;
						}
						throw new NotSupportedException("platform MacOS not supported without Glx.IsRequired=true");
					default:
						return false;
					}
				}
				return false;
			}
		}

		public bool CreateContextEsProfile_EXT
		{
			get
			{
				if (!Egl.IsRequired)
				{
					switch (Platform.CurrentPlatformId)
					{
					case Platform.Id.WindowsNT:
						if (Wgl.CurrentExtensions != null)
						{
							return Wgl.CurrentExtensions.CreateContextEsProfile_EXT;
						}
						return false;
					case Platform.Id.Linux:
						if (Glx.CurrentExtensions != null)
						{
							return Glx.CurrentExtensions.CreateContextEsProfile_EXT;
						}
						return false;
					case Platform.Id.MacOS:
						if (Glx.IsRequired)
						{
							if (Glx.CurrentExtensions != null)
							{
								return Glx.CurrentExtensions.CreateContextEsProfile_EXT;
							}
							return false;
						}
						throw new NotSupportedException("platform MacOS not supported without Glx.IsRequired=true");
					default:
						return false;
					}
				}
				return false;
			}
		}

		public bool Multisample_ARB
		{
			get
			{
				if (!Egl.IsRequired)
				{
					switch (Platform.CurrentPlatformId)
					{
					case Platform.Id.WindowsNT:
						if (Wgl.CurrentExtensions != null)
						{
							return Wgl.CurrentExtensions.Multisample_ARB;
						}
						return false;
					case Platform.Id.Linux:
						if (Glx.CurrentExtensions != null)
						{
							return Glx.CurrentExtensions.Multisample_ARB;
						}
						return false;
					case Platform.Id.MacOS:
						if (Glx.IsRequired)
						{
							if (Glx.CurrentExtensions != null)
							{
								return Glx.CurrentExtensions.Multisample_ARB;
							}
							return false;
						}
						throw new NotSupportedException("platform MacOS not supported without Glx.IsRequired=true");
					default:
						return false;
					}
				}
				return false;
			}
		}

		public bool SwapControl
		{
			get
			{
				if (!Egl.IsRequired)
				{
					switch (Platform.CurrentPlatformId)
					{
					case Platform.Id.WindowsNT:
						if (Wgl.CurrentExtensions != null)
						{
							return Wgl.CurrentExtensions.SwapControl_EXT;
						}
						return false;
					case Platform.Id.Linux:
						if (Glx.CurrentExtensions != null)
						{
							return Glx.CurrentExtensions.SwapControl_EXT;
						}
						return false;
					case Platform.Id.MacOS:
						if (Glx.IsRequired)
						{
							if (Glx.CurrentExtensions != null)
							{
								return Glx.CurrentExtensions.SwapControl_EXT;
							}
							return false;
						}
						throw new NotSupportedException("platform MacOS not supported without Glx.IsRequired=true");
					default:
						return false;
					}
				}
				return false;
			}
		}

		public bool SwapControlTear
		{
			get
			{
				if (!Egl.IsRequired)
				{
					switch (Platform.CurrentPlatformId)
					{
					case Platform.Id.WindowsNT:
						if (Wgl.CurrentExtensions != null)
						{
							return Wgl.CurrentExtensions.SwapControlTear_EXT;
						}
						return false;
					case Platform.Id.Linux:
						if (Glx.CurrentExtensions != null)
						{
							return Glx.CurrentExtensions.SwapControlTear_EXT;
						}
						return false;
					case Platform.Id.MacOS:
						if (Glx.IsRequired)
						{
							if (Glx.CurrentExtensions != null)
							{
								return Glx.CurrentExtensions.SwapControlTear_EXT;
							}
							return false;
						}
						throw new NotSupportedException("platform MacOS not supported without Glx.IsRequired=true");
					default:
						return false;
					}
				}
				return false;
			}
		}
	}

	public static class VB
	{
		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		public static void Clear(ClearBufferMask mask)
		{
			Delegates.pglClear((uint)mask);
		}

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		public static void Viewport(int x, int y, int width, int height)
		{
			Delegates.pglViewport(x, y, width, height);
		}

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		public unsafe static void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte[] bitmap)
		{
			fixed (byte* bitmap2 = bitmap)
			{
				Delegates.pglBitmap(width, height, xorig, yorig, xmove, ymove, bitmap2);
			}
		}

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		public static void Index(double c)
		{
			Delegates.pglIndexd(c);
		}

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		public unsafe static void Index(double[] c)
		{
			fixed (double* c2 = c)
			{
				Delegates.pglIndexdv(c2);
			}
		}

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		public static void Index(float c)
		{
			Delegates.pglIndexf(c);
		}

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		public unsafe static void Index(float[] c)
		{
			fixed (float* c2 = c)
			{
				Delegates.pglIndexfv(c2);
			}
		}

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		public static void Index(int c)
		{
			Delegates.pglIndexi(c);
		}

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		public unsafe static void Index(int[] c)
		{
			fixed (int* c2 = c)
			{
				Delegates.pglIndexiv(c2);
			}
		}

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		public static void Index(short c)
		{
			Delegates.pglIndexs(c);
		}

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		public unsafe static void Index(short[] c)
		{
			fixed (short* c2 = c)
			{
				Delegates.pglIndexsv(c2);
			}
		}

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		public static void Fog(FogParameter pname, float param)
		{
			Delegates.pglFogf((int)pname, param);
		}

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		public unsafe static void Fog(FogParameter pname, float[] @params)
		{
			fixed (float* params2 = @params)
			{
				Delegates.pglFogfv((int)pname, params2);
			}
		}

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		public static void Fog(FogParameter pname, int param)
		{
			Delegates.pglFogi((int)pname, param);
		}

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		public unsafe static void Fog(FogParameter pname, int[] @params)
		{
			fixed (int* params2 = @params)
			{
				Delegates.pglFogiv((int)pname, params2);
			}
		}

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		public static void Accum(AccumOp op, float value)
		{
			Delegates.pglAccum((int)op, value);
		}

		[RequiredByFeature("GL_VERSION_1_1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		public static void Index(byte c)
		{
			Delegates.pglIndexub(c);
		}

		[RequiredByFeature("GL_VERSION_1_1")]
		[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
		public unsafe static void Index(byte[] c)
		{
			fixed (byte* c2 = c)
			{
				Delegates.pglIndexubv(c2);
			}
		}

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		public static void Fog(FogPName pname, nint param)
		{
			Delegates.pglFogx((int)pname, param);
		}

		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		public unsafe static void Fog(FogPName pname, nint[] param)
		{
			fixed (nint* param2 = param)
			{
				Delegates.pglFogxv((int)pname, param2);
			}
		}

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_histogram")]
		public static void Histogram(HistogramTargetEXT target, int width, InternalFormat internalformat, bool sink)
		{
			Delegates.pglHistogram((int)target, width, (int)internalformat, sink);
		}

		[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
		[RequiredByFeature("GL_EXT_histogram")]
		public static void Minmax(MinmaxTargetEXT target, InternalFormat internalformat, bool sink)
		{
			Delegates.pglMinmax((int)target, (int)internalformat, sink);
		}
	}

	public static class VBEnum
	{
		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		public const int CLEAR = 5376;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
		[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
		[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
		[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
		[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
		public const int VIEWPORT = 2978;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2")]
		public const int BITMAP = 6656;

		[RequiredByFeature("GL_VERSION_3_0")]
		[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
		[RemovedByFeature("GL_VERSION_3_2")]
		public const int INDEX = 33314;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
		[RequiredByFeature("GL_NV_register_combiners")]
		[RemovedByFeature("GL_VERSION_3_2")]
		public const int FOG = 2912;

		[RequiredByFeature("GL_VERSION_1_0")]
		[RemovedByFeature("GL_VERSION_3_2")]
		public const int ACCUM = 256;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_histogram")]
		public const int HISTOGRAM = 32804;

		[RequiredByFeature("GL_VERSION_4_5")]
		[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
		[RequiredByFeature("GL_EXT_histogram")]
		public const int MINMAX = 32814;
	}

	[RequiredByFeature("GL_3DFX_multisample")]
	public const int MULTISAMPLE_3DFX = 34482;

	[RequiredByFeature("GL_3DFX_multisample")]
	public const int SAMPLE_BUFFERS_3DFX = 34483;

	[RequiredByFeature("GL_3DFX_multisample")]
	public const int SAMPLES_3DFX = 34484;

	[RequiredByFeature("GL_3DFX_texture_compression_FXT1")]
	public const int COMPRESSED_RGB_FXT1_3DFX = 34480;

	[RequiredByFeature("GL_3DFX_texture_compression_FXT1")]
	public const int COMPRESSED_RGBA_FXT1_3DFX = 34481;

	[RequiredByFeature("GL_AMD_blend_minmax_factor")]
	[RequiredByFeature("GL_NV_blend_minmax_factor", Api = "gl|glcore|gles2")]
	public const int FACTOR_MIN_AMD = 36892;

	[RequiredByFeature("GL_AMD_blend_minmax_factor")]
	[RequiredByFeature("GL_NV_blend_minmax_factor", Api = "gl|glcore|gles2")]
	public const int FACTOR_MAX_AMD = 36893;

	[RequiredByFeature("GL_AMD_compressed_3DC_texture", Api = "gles1|gles2")]
	public const int _3DC_X_AMD = 34809;

	[RequiredByFeature("GL_AMD_compressed_3DC_texture", Api = "gles1|gles2")]
	public const int _3DC_XY_AMD = 34810;

	[RequiredByFeature("GL_AMD_compressed_ATC_texture", Api = "gles1|gles2")]
	public const int ATC_RGB_AMD = 35986;

	[RequiredByFeature("GL_AMD_compressed_ATC_texture", Api = "gles1|gles2")]
	public const int ATC_RGBA_EXPLICIT_ALPHA_AMD = 35987;

	[RequiredByFeature("GL_AMD_compressed_ATC_texture", Api = "gles1|gles2")]
	public const int ATC_RGBA_INTERPOLATED_ALPHA_AMD = 34798;

	[RequiredByFeature("GL_AMD_debug_output")]
	public const int DEBUG_CATEGORY_API_ERROR_AMD = 37193;

	[RequiredByFeature("GL_AMD_debug_output")]
	public const int DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 37194;

	[RequiredByFeature("GL_AMD_debug_output")]
	public const int DEBUG_CATEGORY_DEPRECATION_AMD = 37195;

	[RequiredByFeature("GL_AMD_debug_output")]
	public const int DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 37196;

	[RequiredByFeature("GL_AMD_debug_output")]
	public const int DEBUG_CATEGORY_PERFORMANCE_AMD = 37197;

	[RequiredByFeature("GL_AMD_debug_output")]
	public const int DEBUG_CATEGORY_SHADER_COMPILER_AMD = 37198;

	[RequiredByFeature("GL_AMD_debug_output")]
	public const int DEBUG_CATEGORY_APPLICATION_AMD = 37199;

	[RequiredByFeature("GL_AMD_debug_output")]
	public const int DEBUG_CATEGORY_OTHER_AMD = 37200;

	[RequiredByFeature("GL_AMD_depth_clamp_separate")]
	public const int DEPTH_CLAMP_NEAR_AMD = 36894;

	[RequiredByFeature("GL_AMD_depth_clamp_separate")]
	public const int DEPTH_CLAMP_FAR_AMD = 36895;

	[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
	public const int RENDERBUFFER_STORAGE_SAMPLES_AMD = 37298;

	[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
	public const int MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD = 37299;

	[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
	public const int MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD = 37300;

	[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
	public const int MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD = 37301;

	[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
	public const int NUM_SUPPORTED_MULTISAMPLE_MODES_AMD = 37302;

	[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
	public const int SUPPORTED_MULTISAMPLE_MODES_AMD = 37303;

	[RequiredByFeature("GL_AMD_framebuffer_sample_positions")]
	public const int PIXELS_PER_SAMPLE_PATTERN_X_AMD = 37294;

	[RequiredByFeature("GL_AMD_framebuffer_sample_positions")]
	public const int PIXELS_PER_SAMPLE_PATTERN_Y_AMD = 37295;

	[RequiredByFeature("GL_AMD_framebuffer_sample_positions")]
	public const uint ALL_PIXELS_AMD = uint.MaxValue;

	[RequiredByFeature("GL_AMD_gpu_shader_half_float")]
	public const int FLOAT16_MAT2_AMD = 37317;

	[RequiredByFeature("GL_AMD_gpu_shader_half_float")]
	public const int FLOAT16_MAT3_AMD = 37318;

	[RequiredByFeature("GL_AMD_gpu_shader_half_float")]
	public const int FLOAT16_MAT4_AMD = 37319;

	[RequiredByFeature("GL_AMD_gpu_shader_half_float")]
	public const int FLOAT16_MAT2x3_AMD = 37320;

	[RequiredByFeature("GL_AMD_gpu_shader_half_float")]
	public const int FLOAT16_MAT2x4_AMD = 37321;

	[RequiredByFeature("GL_AMD_gpu_shader_half_float")]
	public const int FLOAT16_MAT3x2_AMD = 37322;

	[RequiredByFeature("GL_AMD_gpu_shader_half_float")]
	public const int FLOAT16_MAT3x4_AMD = 37323;

	[RequiredByFeature("GL_AMD_gpu_shader_half_float")]
	public const int FLOAT16_MAT4x2_AMD = 37324;

	[RequiredByFeature("GL_AMD_gpu_shader_half_float")]
	public const int FLOAT16_MAT4x3_AMD = 37325;

	[RequiredByFeature("GL_AMD_interleaved_elements")]
	public const int VERTEX_ELEMENT_SWIZZLE_AMD = 37284;

	[RequiredByFeature("GL_AMD_interleaved_elements")]
	public const int VERTEX_ID_SWIZZLE_AMD = 37285;

	[RequiredByFeature("GL_AMD_name_gen_delete")]
	public const int DATA_BUFFER_AMD = 37201;

	[RequiredByFeature("GL_AMD_name_gen_delete")]
	public const int PERFORMANCE_MONITOR_AMD = 37202;

	[RequiredByFeature("GL_AMD_name_gen_delete")]
	public const int SAMPLER_OBJECT_AMD = 37205;

	[RequiredByFeature("GL_AMD_occlusion_query_event")]
	public const int OCCLUSION_QUERY_EVENT_MASK_AMD = 34639;

	[RequiredByFeature("GL_AMD_occlusion_query_event")]
	[Log(BitmaskName = "GL")]
	public const uint QUERY_DEPTH_PASS_EVENT_BIT_AMD = 1u;

	[RequiredByFeature("GL_AMD_occlusion_query_event")]
	[Log(BitmaskName = "GL")]
	public const uint QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 2u;

	[RequiredByFeature("GL_AMD_occlusion_query_event")]
	[Log(BitmaskName = "GL")]
	public const uint QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 4u;

	[RequiredByFeature("GL_AMD_occlusion_query_event")]
	[Log(BitmaskName = "GL")]
	public const uint QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 8u;

	[RequiredByFeature("GL_AMD_occlusion_query_event")]
	[Log(BitmaskName = "GL")]
	public const uint QUERY_ALL_EVENT_BITS_AMD = uint.MaxValue;

	[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
	public const int COUNTER_TYPE_AMD = 35776;

	[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
	public const int COUNTER_RANGE_AMD = 35777;

	[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
	public const int UNSIGNED_INT64_AMD = 35778;

	[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
	public const int PERCENTAGE_AMD = 35779;

	[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
	public const int PERFMON_RESULT_AVAILABLE_AMD = 35780;

	[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
	public const int PERFMON_RESULT_SIZE_AMD = 35781;

	[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
	public const int PERFMON_RESULT_AMD = 35782;

	[RequiredByFeature("GL_AMD_pinned_memory")]
	public const int EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 37216;

	[RequiredByFeature("GL_AMD_program_binary_Z400", Api = "gles2")]
	public const int Z400_BINARY_AMD = 34624;

	[RequiredByFeature("GL_AMD_framebuffer_sample_positions")]
	[RequiredByFeature("GL_AMD_sample_positions")]
	public const int SUBSAMPLE_DISTANCE_AMD = 34879;

	[RequiredByFeature("GL_AMD_sparse_texture")]
	[RequiredByFeature("GL_ARB_sparse_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
	public const int MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 37274;

	[RequiredByFeature("GL_AMD_sparse_texture")]
	public const int MIN_SPARSE_LEVEL_AMD = 37275;

	[RequiredByFeature("GL_AMD_sparse_texture")]
	public const int MIN_LOD_WARNING_AMD = 37276;

	[RequiredByFeature("GL_AMD_sparse_texture")]
	[Log(BitmaskName = "GL")]
	public const uint TEXTURE_STORAGE_SPARSE_BIT_AMD = 1u;

	[RequiredByFeature("GL_AMD_stencil_operation_extended")]
	public const int SET_AMD = 34634;

	[RequiredByFeature("GL_AMD_stencil_operation_extended")]
	public const int REPLACE_VALUE_AMD = 34635;

	[RequiredByFeature("GL_AMD_stencil_operation_extended")]
	public const int STENCIL_OP_VALUE_AMD = 34636;

	[RequiredByFeature("GL_AMD_stencil_operation_extended")]
	public const int STENCIL_BACK_OP_VALUE_AMD = 34637;

	[RequiredByFeature("GL_AMD_transform_feedback4")]
	public const int STREAM_RASTERIZATION_AMD = 37280;

	[RequiredByFeature("GL_AMD_vertex_shader_tessellator")]
	public const int SAMPLER_BUFFER_AMD = 36865;

	[RequiredByFeature("GL_AMD_vertex_shader_tessellator")]
	public const int INT_SAMPLER_BUFFER_AMD = 36866;

	[RequiredByFeature("GL_AMD_vertex_shader_tessellator")]
	public const int UNSIGNED_INT_SAMPLER_BUFFER_AMD = 36867;

	[RequiredByFeature("GL_AMD_vertex_shader_tessellator")]
	public const int TESSELLATION_MODE_AMD = 36868;

	[RequiredByFeature("GL_AMD_vertex_shader_tessellator")]
	public const int TESSELLATION_FACTOR_AMD = 36869;

	[RequiredByFeature("GL_AMD_vertex_shader_tessellator")]
	public const int DISCRETE_AMD = 36870;

	[RequiredByFeature("GL_AMD_vertex_shader_tessellator")]
	public const int CONTINUOUS_AMD = 36871;

	[RequiredByFeature("GL_ANGLE_pack_reverse_row_order", Api = "gles2")]
	public const int PACK_REVERSE_ROW_ORDER_ANGLE = 37796;

	[RequiredByFeature("GL_ANGLE_program_binary", Api = "gles2")]
	public const int PROGRAM_BINARY_ANGLE = 37798;

	[RequiredByFeature("GL_ANGLE_texture_usage", Api = "gles2")]
	public const int TEXTURE_USAGE_ANGLE = 37794;

	[RequiredByFeature("GL_ANGLE_texture_usage", Api = "gles2")]
	public const int FRAMEBUFFER_ATTACHMENT_ANGLE = 37795;

	[RequiredByFeature("GL_ANGLE_translated_shader_source", Api = "gles2")]
	public const int TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = 37792;

	[RequiredByFeature("GL_APPLE_aux_depth_stencil")]
	public const int AUX_DEPTH_STENCIL_APPLE = 35348;

	[RequiredByFeature("GL_APPLE_client_storage")]
	public const int UNPACK_CLIENT_STORAGE_APPLE = 34226;

	[RequiredByFeature("GL_APPLE_element_array")]
	public const int ELEMENT_ARRAY_APPLE = 35340;

	[RequiredByFeature("GL_APPLE_element_array")]
	public const int ELEMENT_ARRAY_TYPE_APPLE = 35341;

	[RequiredByFeature("GL_APPLE_element_array")]
	public const int ELEMENT_ARRAY_POINTER_APPLE = 35342;

	[RequiredByFeature("GL_APPLE_fence")]
	public const int DRAW_PIXELS_APPLE = 35338;

	[RequiredByFeature("GL_APPLE_fence")]
	public const int FENCE_APPLE = 35339;

	[RequiredByFeature("GL_APPLE_float_pixels")]
	public const int HALF_APPLE = 5131;

	[RequiredByFeature("GL_APPLE_float_pixels")]
	public const int RGBA_FLOAT32_APPLE = 34836;

	[RequiredByFeature("GL_APPLE_float_pixels")]
	public const int RGB_FLOAT32_APPLE = 34837;

	[RequiredByFeature("GL_APPLE_float_pixels")]
	public const int ALPHA_FLOAT32_APPLE = 34838;

	[RequiredByFeature("GL_APPLE_float_pixels")]
	public const int INTENSITY_FLOAT32_APPLE = 34839;

	[RequiredByFeature("GL_APPLE_float_pixels")]
	public const int LUMINANCE_FLOAT32_APPLE = 34840;

	[RequiredByFeature("GL_APPLE_float_pixels")]
	public const int LUMINANCE_ALPHA_FLOAT32_APPLE = 34841;

	[RequiredByFeature("GL_APPLE_float_pixels")]
	public const int RGBA_FLOAT16_APPLE = 34842;

	[RequiredByFeature("GL_APPLE_float_pixels")]
	public const int RGB_FLOAT16_APPLE = 34843;

	[RequiredByFeature("GL_APPLE_float_pixels")]
	public const int ALPHA_FLOAT16_APPLE = 34844;

	[RequiredByFeature("GL_APPLE_float_pixels")]
	public const int INTENSITY_FLOAT16_APPLE = 34845;

	[RequiredByFeature("GL_APPLE_float_pixels")]
	public const int LUMINANCE_FLOAT16_APPLE = 34846;

	[RequiredByFeature("GL_APPLE_float_pixels")]
	public const int LUMINANCE_ALPHA_FLOAT16_APPLE = 34847;

	[RequiredByFeature("GL_APPLE_float_pixels")]
	public const int COLOR_FLOAT_APPLE = 35343;

	[RequiredByFeature("GL_APPLE_flush_buffer_range")]
	public const int BUFFER_SERIALIZED_MODIFY_APPLE = 35346;

	[RequiredByFeature("GL_APPLE_flush_buffer_range")]
	public const int BUFFER_FLUSHING_UNMAP_APPLE = 35347;

	[RequiredByFeature("GL_APPLE_object_purgeable")]
	public const int BUFFER_OBJECT_APPLE = 34227;

	[RequiredByFeature("GL_APPLE_object_purgeable")]
	public const int RELEASED_APPLE = 35353;

	[RequiredByFeature("GL_APPLE_object_purgeable")]
	public const int VOLATILE_APPLE = 35354;

	[RequiredByFeature("GL_APPLE_object_purgeable")]
	public const int RETAINED_APPLE = 35355;

	[RequiredByFeature("GL_APPLE_object_purgeable")]
	public const int UNDEFINED_APPLE = 35356;

	[RequiredByFeature("GL_APPLE_object_purgeable")]
	public const int PURGEABLE_APPLE = 35357;

	[RequiredByFeature("GL_APPLE_rgb_422", Api = "gl|glcore|gles2")]
	public const int RGB_422_APPLE = 35359;

	[RequiredByFeature("GL_APPLE_rgb_422", Api = "gl|glcore|gles2")]
	public const int RGB_RAW_422_APPLE = 35409;

	[RequiredByFeature("GL_APPLE_row_bytes")]
	public const int PACK_ROW_BYTES_APPLE = 35349;

	[RequiredByFeature("GL_APPLE_row_bytes")]
	public const int UNPACK_ROW_BYTES_APPLE = 35350;

	[RequiredByFeature("GL_APPLE_specular_vector")]
	public const int LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 34224;

	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	public const int SYNC_OBJECT_APPLE = 35411;

	[RequiredByFeature("GL_APPLE_texture_range")]
	public const int TEXTURE_RANGE_LENGTH_APPLE = 34231;

	[RequiredByFeature("GL_APPLE_texture_range")]
	public const int TEXTURE_RANGE_POINTER_APPLE = 34232;

	[RequiredByFeature("GL_APPLE_texture_range")]
	public const int TEXTURE_STORAGE_HINT_APPLE = 34236;

	[RequiredByFeature("GL_APPLE_texture_range")]
	public const int STORAGE_PRIVATE_APPLE = 34237;

	[RequiredByFeature("GL_APPLE_transform_hint")]
	public const int TRANSFORM_HINT_APPLE = 34225;

	[RequiredByFeature("GL_APPLE_vertex_array_range")]
	public const int VERTEX_ARRAY_RANGE_APPLE = 34077;

	[RequiredByFeature("GL_APPLE_vertex_array_range")]
	public const int VERTEX_ARRAY_RANGE_LENGTH_APPLE = 34078;

	[RequiredByFeature("GL_APPLE_vertex_array_range")]
	public const int VERTEX_ARRAY_STORAGE_HINT_APPLE = 34079;

	[RequiredByFeature("GL_APPLE_vertex_array_range")]
	public const int VERTEX_ARRAY_RANGE_POINTER_APPLE = 34081;

	[RequiredByFeature("GL_APPLE_vertex_array_range")]
	public const int STORAGE_CLIENT_APPLE = 34228;

	[RequiredByFeature("GL_APPLE_texture_range")]
	[RequiredByFeature("GL_APPLE_vertex_array_range")]
	public const int STORAGE_CACHED_APPLE = 34238;

	[RequiredByFeature("GL_APPLE_texture_range")]
	[RequiredByFeature("GL_APPLE_vertex_array_range")]
	public const int STORAGE_SHARED_APPLE = 34239;

	[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
	public const int VERTEX_ATTRIB_MAP1_APPLE = 35328;

	[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
	public const int VERTEX_ATTRIB_MAP2_APPLE = 35329;

	[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
	public const int VERTEX_ATTRIB_MAP1_SIZE_APPLE = 35330;

	[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
	public const int VERTEX_ATTRIB_MAP1_COEFF_APPLE = 35331;

	[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
	public const int VERTEX_ATTRIB_MAP1_ORDER_APPLE = 35332;

	[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
	public const int VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 35333;

	[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
	public const int VERTEX_ATTRIB_MAP2_SIZE_APPLE = 35334;

	[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
	public const int VERTEX_ATTRIB_MAP2_COEFF_APPLE = 35335;

	[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
	public const int VERTEX_ATTRIB_MAP2_ORDER_APPLE = 35336;

	[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
	public const int VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 35337;

	[RequiredByFeature("GL_APPLE_ycbcr_422")]
	public const int YCBCR_422_APPLE = 34233;

	[RequiredByFeature("GL_APPLE_rgb_422", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_APPLE_ycbcr_422")]
	public const int UNSIGNED_SHORT_8_8_APPLE = 34234;

	[RequiredByFeature("GL_APPLE_rgb_422", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_APPLE_ycbcr_422")]
	public const int UNSIGNED_SHORT_8_8_REV_APPLE = 34235;

	[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public const int UNSIGNED_INT64_ARB = 5135;

	[RequiredByFeature("GL_ARB_cl_event", Api = "gl|glcore")]
	public const int SYNC_CL_EVENT_ARB = 33344;

	[RequiredByFeature("GL_ARB_cl_event", Api = "gl|glcore")]
	public const int SYNC_CL_EVENT_COMPLETE_ARB = 33345;

	[RequiredByFeature("GL_ARB_color_buffer_float")]
	[RequiredByFeature("GL_ATI_pixel_format_float")]
	public const int RGBA_FLOAT_MODE_ARB = 34848;

	[RequiredByFeature("GL_ARB_compute_variable_group_size", Api = "gl|glcore")]
	public const int MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 37700;

	[RequiredByFeature("GL_ARB_compute_variable_group_size", Api = "gl|glcore")]
	public const int MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 37701;

	[RequiredByFeature("GL_ARB_fragment_program")]
	public const int FRAGMENT_PROGRAM_ARB = 34820;

	[RequiredByFeature("GL_ARB_fragment_program")]
	public const int PROGRAM_ALU_INSTRUCTIONS_ARB = 34821;

	[RequiredByFeature("GL_ARB_fragment_program")]
	public const int PROGRAM_TEX_INSTRUCTIONS_ARB = 34822;

	[RequiredByFeature("GL_ARB_fragment_program")]
	public const int PROGRAM_TEX_INDIRECTIONS_ARB = 34823;

	[RequiredByFeature("GL_ARB_fragment_program")]
	public const int PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 34824;

	[RequiredByFeature("GL_ARB_fragment_program")]
	public const int PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 34825;

	[RequiredByFeature("GL_ARB_fragment_program")]
	public const int PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 34826;

	[RequiredByFeature("GL_ARB_fragment_program")]
	public const int MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 34827;

	[RequiredByFeature("GL_ARB_fragment_program")]
	public const int MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 34828;

	[RequiredByFeature("GL_ARB_fragment_program")]
	public const int MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 34829;

	[RequiredByFeature("GL_ARB_fragment_program")]
	public const int MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 34830;

	[RequiredByFeature("GL_ARB_fragment_program")]
	public const int MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 34831;

	[RequiredByFeature("GL_ARB_fragment_program")]
	public const int MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 34832;

	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader4")]
	[RequiredByFeature("GL_NV_geometry_program4")]
	public const int FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 36265;

	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	public const int GEOMETRY_VERTICES_OUT_ARB = 36314;

	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	public const int GEOMETRY_INPUT_TYPE_ARB = 36315;

	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	public const int GEOMETRY_OUTPUT_TYPE_ARB = 36316;

	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader4")]
	public const int MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 36317;

	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader4")]
	public const int MAX_VERTEX_VARYING_COMPONENTS_ARB = 36318;

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public const int INT64_ARB = 5134;

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int INT64_VEC2_ARB = 36841;

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int INT64_VEC3_ARB = 36842;

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int INT64_VEC4_ARB = 36843;

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int UNSIGNED_INT64_VEC2_ARB = 36853;

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int UNSIGNED_INT64_VEC3_ARB = 36854;

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int UNSIGNED_INT64_VEC4_ARB = 36855;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_convolution")]
	public const int CONVOLUTION_BORDER_MODE = 32787;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_convolution")]
	public const int CONVOLUTION_FILTER_SCALE = 32788;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_convolution")]
	public const int CONVOLUTION_FILTER_BIAS = 32789;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_convolution")]
	public const int REDUCE = 32790;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_convolution")]
	public const int CONVOLUTION_FORMAT = 32791;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_convolution")]
	public const int CONVOLUTION_WIDTH = 32792;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_convolution")]
	public const int CONVOLUTION_HEIGHT = 32793;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_convolution")]
	public const int MAX_CONVOLUTION_WIDTH = 32794;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_convolution")]
	public const int MAX_CONVOLUTION_HEIGHT = 32795;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_convolution")]
	public const int POST_CONVOLUTION_RED_SCALE = 32796;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_convolution")]
	public const int POST_CONVOLUTION_GREEN_SCALE = 32797;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_convolution")]
	public const int POST_CONVOLUTION_BLUE_SCALE = 32798;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_convolution")]
	public const int POST_CONVOLUTION_ALPHA_SCALE = 32799;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_convolution")]
	public const int POST_CONVOLUTION_RED_BIAS = 32800;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_convolution")]
	public const int POST_CONVOLUTION_GREEN_BIAS = 32801;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_convolution")]
	public const int POST_CONVOLUTION_BLUE_BIAS = 32802;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_convolution")]
	public const int POST_CONVOLUTION_ALPHA_BIAS = 32803;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_histogram")]
	public const int HISTOGRAM_WIDTH = 32806;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_histogram")]
	public const int HISTOGRAM_FORMAT = 32807;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_histogram")]
	public const int HISTOGRAM_RED_SIZE = 32808;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_histogram")]
	public const int HISTOGRAM_GREEN_SIZE = 32809;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_histogram")]
	public const int HISTOGRAM_BLUE_SIZE = 32810;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_histogram")]
	public const int HISTOGRAM_ALPHA_SIZE = 32811;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_histogram")]
	public const int HISTOGRAM_LUMINANCE_SIZE = 32812;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_histogram")]
	public const int HISTOGRAM_SINK = 32813;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_histogram")]
	public const int MINMAX_FORMAT = 32815;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_histogram")]
	public const int MINMAX_SINK = 32816;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_histogram")]
	public const int TABLE_TOO_LARGE = 32817;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_matrix")]
	public const int COLOR_MATRIX = 32945;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_matrix")]
	public const int COLOR_MATRIX_STACK_DEPTH = 32946;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_matrix")]
	public const int MAX_COLOR_MATRIX_STACK_DEPTH = 32947;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_matrix")]
	public const int POST_COLOR_MATRIX_RED_SCALE = 32948;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_matrix")]
	public const int POST_COLOR_MATRIX_GREEN_SCALE = 32949;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_matrix")]
	public const int POST_COLOR_MATRIX_BLUE_SCALE = 32950;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_matrix")]
	public const int POST_COLOR_MATRIX_ALPHA_SCALE = 32951;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_matrix")]
	public const int POST_COLOR_MATRIX_RED_BIAS = 32952;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_matrix")]
	public const int POST_COLOR_MATRIX_GREEN_BIAS = 32953;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_matrix")]
	public const int POST_COLOR_MATRIX_BLUE_BIAS = 32954;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_matrix")]
	public const int POST_COLOR_MATRIX_ALPHA_BIAS = 32955;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_table")]
	public const int COLOR_TABLE_SCALE = 32982;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_table")]
	public const int COLOR_TABLE_BIAS = 32983;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_table")]
	public const int COLOR_TABLE_FORMAT = 32984;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_table")]
	public const int COLOR_TABLE_WIDTH = 32985;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_table")]
	public const int COLOR_TABLE_RED_SIZE = 32986;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_table")]
	public const int COLOR_TABLE_GREEN_SIZE = 32987;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_table")]
	public const int COLOR_TABLE_BLUE_SIZE = 32988;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_table")]
	public const int COLOR_TABLE_ALPHA_SIZE = 32989;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_table")]
	public const int COLOR_TABLE_LUMINANCE_SIZE = 32990;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_table")]
	public const int COLOR_TABLE_INTENSITY_SIZE = 32991;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_HP_convolution_border_modes")]
	public const int CONSTANT_BORDER = 33105;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_HP_convolution_border_modes")]
	public const int REPLICATE_BORDER = 33107;

	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_HP_convolution_border_modes")]
	public const int CONVOLUTION_BORDER_COLOR = 33108;

	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int SRGB_DECODE_ARB = 33433;

	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_EAC_R11 = 37763;

	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_EAC_RG11 = 37764;

	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_ETC2_RGB = 37765;

	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_ETC2_RGBA = 37766;

	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_ETC2_EAC_RGBA = 37767;

	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_ASTC_4x4_RGBA = 37768;

	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_ASTC_5x4_RGBA = 37769;

	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_ASTC_5x5_RGBA = 37770;

	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_ASTC_6x5_RGBA = 37771;

	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_ASTC_6x6_RGBA = 37772;

	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_ASTC_8x5_RGBA = 37773;

	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_ASTC_8x6_RGBA = 37774;

	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_ASTC_8x8_RGBA = 37775;

	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_ASTC_10x5_RGBA = 37776;

	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_ASTC_10x6_RGBA = 37777;

	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_ASTC_10x8_RGBA = 37778;

	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_ASTC_10x10_RGBA = 37779;

	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_ASTC_12x10_RGBA = 37780;

	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_ASTC_12x12_RGBA = 37781;

	[RequiredByFeature("GL_ARB_matrix_palette")]
	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public const int MATRIX_PALETTE_ARB = 34880;

	[RequiredByFeature("GL_ARB_matrix_palette")]
	public const int MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 34881;

	[RequiredByFeature("GL_ARB_matrix_palette")]
	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public const int MAX_PALETTE_MATRICES_ARB = 34882;

	[RequiredByFeature("GL_ARB_matrix_palette")]
	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public const int CURRENT_PALETTE_MATRIX_ARB = 34883;

	[RequiredByFeature("GL_ARB_matrix_palette")]
	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public const int MATRIX_INDEX_ARRAY_ARB = 34884;

	[RequiredByFeature("GL_ARB_matrix_palette")]
	public const int CURRENT_MATRIX_INDEX_ARB = 34885;

	[RequiredByFeature("GL_ARB_matrix_palette")]
	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public const int MATRIX_INDEX_ARRAY_SIZE_ARB = 34886;

	[RequiredByFeature("GL_ARB_matrix_palette")]
	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public const int MATRIX_INDEX_ARRAY_TYPE_ARB = 34887;

	[RequiredByFeature("GL_ARB_matrix_palette")]
	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public const int MATRIX_INDEX_ARRAY_STRIDE_ARB = 34888;

	[RequiredByFeature("GL_ARB_matrix_palette")]
	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public const int MATRIX_INDEX_ARRAY_POINTER_ARB = 34889;

	[RequiredByFeature("GL_ARB_sample_locations", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_sample_locations", Api = "gl|glcore|gles2")]
	public const int SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = 37693;

	[RequiredByFeature("GL_ARB_sample_locations", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_sample_locations", Api = "gl|glcore|gles2")]
	public const int SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = 37694;

	[RequiredByFeature("GL_ARB_sample_locations", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_sample_locations", Api = "gl|glcore|gles2")]
	public const int SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = 37695;

	[RequiredByFeature("GL_ARB_sample_locations", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_sample_locations", Api = "gl|glcore|gles2")]
	public const int PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = 37696;

	[RequiredByFeature("GL_ARB_sample_locations", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_sample_locations", Api = "gl|glcore|gles2")]
	public const int PROGRAMMABLE_SAMPLE_LOCATION_ARB = 37697;

	[RequiredByFeature("GL_ARB_sample_locations", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_sample_locations", Api = "gl|glcore|gles2")]
	public const int FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = 37698;

	[RequiredByFeature("GL_ARB_sample_locations", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_sample_locations", Api = "gl|glcore|gles2")]
	public const int FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = 37699;

	[RequiredByFeature("GL_ARB_shader_objects")]
	[RequiredByFeature("GL_EXT_debug_label", Api = "gl|glcore|gles2")]
	public const int PROGRAM_OBJECT_ARB = 35648;

	[RequiredByFeature("GL_ARB_shader_objects")]
	[RequiredByFeature("GL_EXT_debug_label", Api = "gl|glcore|gles2")]
	public const int SHADER_OBJECT_ARB = 35656;

	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int OBJECT_TYPE_ARB = 35662;

	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int OBJECT_SUBTYPE_ARB = 35663;

	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int OBJECT_DELETE_STATUS_ARB = 35712;

	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int OBJECT_COMPILE_STATUS_ARB = 35713;

	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int OBJECT_LINK_STATUS_ARB = 35714;

	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int OBJECT_VALIDATE_STATUS_ARB = 35715;

	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int OBJECT_INFO_LOG_LENGTH_ARB = 35716;

	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int OBJECT_ATTACHED_OBJECTS_ARB = 35717;

	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int OBJECT_ACTIVE_UNIFORMS_ARB = 35718;

	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 35719;

	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int OBJECT_SHADER_SOURCE_LENGTH_ARB = 35720;

	[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
	public const int SHADER_INCLUDE_ARB = 36270;

	[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
	public const int NAMED_STRING_LENGTH_ARB = 36329;

	[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
	public const int NAMED_STRING_TYPE_ARB = 36330;

	[RequiredByFeature("GL_ARB_shadow_ambient")]
	public const int TEXTURE_COMPARE_FAIL_VALUE_ARB = 32959;

	[RequiredByFeature("GL_ARB_sparse_buffer", Api = "gl|glcore")]
	[Log(BitmaskName = "GL")]
	public const int SPARSE_STORAGE_BIT_ARB = 1024;

	[RequiredByFeature("GL_ARB_sparse_buffer", Api = "gl|glcore")]
	public const int SPARSE_BUFFER_PAGE_SIZE_ARB = 33528;

	[RequiredByFeature("GL_ARB_sparse_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
	public const int TEXTURE_SPARSE_ARB = 37286;

	[RequiredByFeature("GL_ARB_sparse_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
	public const int VIRTUAL_PAGE_SIZE_INDEX_ARB = 37287;

	[RequiredByFeature("GL_ARB_sparse_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
	public const int NUM_SPARSE_LEVELS_ARB = 37290;

	[RequiredByFeature("GL_ARB_sparse_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
	public const int NUM_VIRTUAL_PAGE_SIZES_ARB = 37288;

	[RequiredByFeature("GL_ARB_sparse_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
	[RequiredByFeature("GL_AMD_sparse_texture")]
	public const int VIRTUAL_PAGE_SIZE_X_ARB = 37269;

	[RequiredByFeature("GL_ARB_sparse_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
	[RequiredByFeature("GL_AMD_sparse_texture")]
	public const int VIRTUAL_PAGE_SIZE_Y_ARB = 37270;

	[RequiredByFeature("GL_ARB_sparse_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
	[RequiredByFeature("GL_AMD_sparse_texture")]
	public const int VIRTUAL_PAGE_SIZE_Z_ARB = 37271;

	[RequiredByFeature("GL_ARB_sparse_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
	[RequiredByFeature("GL_AMD_sparse_texture")]
	public const int MAX_SPARSE_TEXTURE_SIZE_ARB = 37272;

	[RequiredByFeature("GL_ARB_sparse_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
	[RequiredByFeature("GL_AMD_sparse_texture")]
	public const int MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 37273;

	[RequiredByFeature("GL_ARB_sparse_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
	public const int SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 37289;

	[RequiredByFeature("GL_ARB_texture_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_buffer_object")]
	public const int TEXTURE_BUFFER_FORMAT_ARB = 35886;

	[RequiredByFeature("GL_ARB_texture_filter_minmax", Api = "gl|glcore")]
	public const int TEXTURE_REDUCTION_MODE_ARB = 37734;

	[RequiredByFeature("GL_ARB_texture_filter_minmax", Api = "gl|glcore")]
	public const int WEIGHTED_AVERAGE_ARB = 37735;

	[RequiredByFeature("GL_ARB_texture_float")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public const int ALPHA32F_ARB = 34838;

	[RequiredByFeature("GL_ARB_texture_float")]
	public const int INTENSITY32F_ARB = 34839;

	[RequiredByFeature("GL_ARB_texture_float")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public const int LUMINANCE32F_ARB = 34840;

	[RequiredByFeature("GL_ARB_texture_float")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public const int LUMINANCE_ALPHA32F_ARB = 34841;

	[RequiredByFeature("GL_ARB_texture_float")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public const int ALPHA16F_ARB = 34844;

	[RequiredByFeature("GL_ARB_texture_float")]
	public const int INTENSITY16F_ARB = 34845;

	[RequiredByFeature("GL_ARB_texture_float")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public const int LUMINANCE16F_ARB = 34846;

	[RequiredByFeature("GL_ARB_texture_float")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public const int LUMINANCE_ALPHA16F_ARB = 34847;

	[RequiredByFeature("GL_ARB_texture_gather", Api = "gl|glcore")]
	public const int MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 36767;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public const int MAX_VERTEX_UNITS_ARB = 34468;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int ACTIVE_VERTEX_UNITS_ARB = 34469;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int WEIGHT_SUM_UNITY_ARB = 34470;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int VERTEX_BLEND_ARB = 34471;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int CURRENT_WEIGHT_ARB = 34472;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public const int WEIGHT_ARRAY_TYPE_ARB = 34473;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public const int WEIGHT_ARRAY_STRIDE_ARB = 34474;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public const int WEIGHT_ARRAY_SIZE_ARB = 34475;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public const int WEIGHT_ARRAY_POINTER_ARB = 34476;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public const int WEIGHT_ARRAY_ARB = 34477;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	[RequiredByFeature("GL_EXT_vertex_weighting")]
	public const int MODELVIEW0_ARB = 5888;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	[RequiredByFeature("GL_EXT_vertex_weighting")]
	public const int MODELVIEW1_ARB = 34058;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW2_ARB = 34594;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW3_ARB = 34595;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW4_ARB = 34596;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW5_ARB = 34597;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW6_ARB = 34598;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW7_ARB = 34599;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW8_ARB = 34600;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW9_ARB = 34601;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW10_ARB = 34602;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW11_ARB = 34603;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW12_ARB = 34604;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW13_ARB = 34605;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW14_ARB = 34606;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW15_ARB = 34607;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW16_ARB = 34608;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW17_ARB = 34609;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW18_ARB = 34610;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW19_ARB = 34611;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW20_ARB = 34612;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW21_ARB = 34613;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW22_ARB = 34614;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW23_ARB = 34615;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW24_ARB = 34616;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW25_ARB = 34617;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW26_ARB = 34618;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW27_ARB = 34619;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW28_ARB = 34620;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW29_ARB = 34621;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW30_ARB = 34622;

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public const int MODELVIEW31_ARB = 34623;

	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public const int VERTEX_PROGRAM_ARB = 34336;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public const int PROGRAM_LENGTH_ARB = 34343;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public const int PROGRAM_STRING_ARB = 34344;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 34350;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MAX_PROGRAM_MATRICES_ARB = 34351;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public const int CURRENT_MATRIX_STACK_DEPTH_ARB = 34368;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public const int CURRENT_MATRIX_ARB = 34369;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public const int PROGRAM_ERROR_POSITION_ARB = 34379;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int PROGRAM_BINDING_ARB = 34423;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_NV_fragment_program")]
	public const int PROGRAM_ERROR_STRING_ARB = 34932;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int PROGRAM_FORMAT_ASCII_ARB = 34933;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int PROGRAM_FORMAT_ARB = 34934;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int PROGRAM_INSTRUCTIONS_ARB = 34976;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MAX_PROGRAM_INSTRUCTIONS_ARB = 34977;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int PROGRAM_NATIVE_INSTRUCTIONS_ARB = 34978;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 34979;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int PROGRAM_TEMPORARIES_ARB = 34980;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MAX_PROGRAM_TEMPORARIES_ARB = 34981;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int PROGRAM_NATIVE_TEMPORARIES_ARB = 34982;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 34983;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int PROGRAM_PARAMETERS_ARB = 34984;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MAX_PROGRAM_PARAMETERS_ARB = 34985;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int PROGRAM_NATIVE_PARAMETERS_ARB = 34986;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 34987;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int PROGRAM_ATTRIBS_ARB = 34988;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MAX_PROGRAM_ATTRIBS_ARB = 34989;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int PROGRAM_NATIVE_ATTRIBS_ARB = 34990;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 34991;

	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int PROGRAM_ADDRESS_REGISTERS_ARB = 34992;

	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 34993;

	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 34994;

	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 34995;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 34996;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MAX_PROGRAM_ENV_PARAMETERS_ARB = 34997;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int PROGRAM_UNDER_NATIVE_LIMITS_ARB = 34998;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int TRANSPOSE_CURRENT_MATRIX_ARB = 34999;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX0_ARB = 35008;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX1_ARB = 35009;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX2_ARB = 35010;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX3_ARB = 35011;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX4_ARB = 35012;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX5_ARB = 35013;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX6_ARB = 35014;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX7_ARB = 35015;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX8_ARB = 35016;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX9_ARB = 35017;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX10_ARB = 35018;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX11_ARB = 35019;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX12_ARB = 35020;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX13_ARB = 35021;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX14_ARB = 35022;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX15_ARB = 35023;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX16_ARB = 35024;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX17_ARB = 35025;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX18_ARB = 35026;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX19_ARB = 35027;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX20_ARB = 35028;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX21_ARB = 35029;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX22_ARB = 35030;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX23_ARB = 35031;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX24_ARB = 35032;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX25_ARB = 35033;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX26_ARB = 35034;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX27_ARB = 35035;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX28_ARB = 35036;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX29_ARB = 35037;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX30_ARB = 35038;

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public const int MATRIX31_ARB = 35039;

	[RequiredByFeature("GL_ARB_vertex_shader")]
	public const int OBJECT_ACTIVE_ATTRIBUTES_ARB = 35721;

	[RequiredByFeature("GL_ARB_vertex_shader")]
	public const int OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 35722;

	[RequiredByFeature("GL_ARM_mali_program_binary", Api = "gles2")]
	public const int MALI_PROGRAM_BINARY_ARM = 36705;

	[RequiredByFeature("GL_ARM_mali_shader_binary", Api = "gles2")]
	public const int MALI_SHADER_BINARY_ARM = 36704;

	[RequiredByFeature("GL_ARM_shader_framebuffer_fetch", Api = "gles2")]
	public const int FETCH_PER_SAMPLE_ARM = 36709;

	[RequiredByFeature("GL_ARM_shader_framebuffer_fetch", Api = "gles2")]
	public const int FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = 36710;

	[RequiredByFeature("GL_ARM_texture_unnormalized_coordinates", Api = "gles2")]
	public const int TEXTURE_UNNORMALIZED_COORDINATES_ARM = 36714;

	[RequiredByFeature("GL_ATI_element_array")]
	public const int ELEMENT_ARRAY_ATI = 34664;

	[RequiredByFeature("GL_ATI_element_array")]
	public const int ELEMENT_ARRAY_TYPE_ATI = 34665;

	[RequiredByFeature("GL_ATI_element_array")]
	public const int ELEMENT_ARRAY_POINTER_ATI = 34666;

	[RequiredByFeature("GL_ATI_envmap_bumpmap")]
	public const int BUMP_ROT_MATRIX_ATI = 34677;

	[RequiredByFeature("GL_ATI_envmap_bumpmap")]
	public const int BUMP_ROT_MATRIX_SIZE_ATI = 34678;

	[RequiredByFeature("GL_ATI_envmap_bumpmap")]
	public const int BUMP_NUM_TEX_UNITS_ATI = 34679;

	[RequiredByFeature("GL_ATI_envmap_bumpmap")]
	public const int BUMP_TEX_UNITS_ATI = 34680;

	[RequiredByFeature("GL_ATI_envmap_bumpmap")]
	public const int DUDV_ATI = 34681;

	[RequiredByFeature("GL_ATI_envmap_bumpmap")]
	public const int DU8DV8_ATI = 34682;

	[RequiredByFeature("GL_ATI_envmap_bumpmap")]
	public const int BUMP_ENVMAP_ATI = 34683;

	[RequiredByFeature("GL_ATI_envmap_bumpmap")]
	public const int BUMP_TARGET_ATI = 34684;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int FRAGMENT_SHADER_ATI = 35104;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_0_ATI = 35105;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_1_ATI = 35106;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_2_ATI = 35107;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_3_ATI = 35108;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_4_ATI = 35109;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_5_ATI = 35110;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_6_ATI = 35111;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_7_ATI = 35112;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_8_ATI = 35113;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_9_ATI = 35114;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_10_ATI = 35115;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_11_ATI = 35116;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_12_ATI = 35117;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_13_ATI = 35118;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_14_ATI = 35119;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_15_ATI = 35120;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_16_ATI = 35121;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_17_ATI = 35122;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_18_ATI = 35123;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_19_ATI = 35124;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_20_ATI = 35125;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_21_ATI = 35126;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_22_ATI = 35127;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_23_ATI = 35128;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_24_ATI = 35129;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_25_ATI = 35130;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_26_ATI = 35131;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_27_ATI = 35132;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_28_ATI = 35133;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_29_ATI = 35134;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_30_ATI = 35135;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int REG_31_ATI = 35136;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_0_ATI = 35137;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_1_ATI = 35138;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_2_ATI = 35139;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_3_ATI = 35140;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_4_ATI = 35141;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_5_ATI = 35142;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_6_ATI = 35143;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_7_ATI = 35144;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_8_ATI = 35145;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_9_ATI = 35146;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_10_ATI = 35147;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_11_ATI = 35148;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_12_ATI = 35149;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_13_ATI = 35150;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_14_ATI = 35151;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_15_ATI = 35152;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_16_ATI = 35153;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_17_ATI = 35154;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_18_ATI = 35155;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_19_ATI = 35156;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_20_ATI = 35157;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_21_ATI = 35158;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_22_ATI = 35159;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_23_ATI = 35160;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_24_ATI = 35161;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_25_ATI = 35162;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_26_ATI = 35163;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_27_ATI = 35164;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_28_ATI = 35165;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_29_ATI = 35166;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_30_ATI = 35167;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CON_31_ATI = 35168;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int MOV_ATI = 35169;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int ADD_ATI = 35171;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int MUL_ATI = 35172;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int SUB_ATI = 35173;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int DOT3_ATI = 35174;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int DOT4_ATI = 35175;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int MAD_ATI = 35176;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int LERP_ATI = 35177;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CND_ATI = 35178;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int CND0_ATI = 35179;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int DOT2_ADD_ATI = 35180;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int SECONDARY_INTERPOLATOR_ATI = 35181;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int NUM_FRAGMENT_REGISTERS_ATI = 35182;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int NUM_FRAGMENT_CONSTANTS_ATI = 35183;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int NUM_PASSES_ATI = 35184;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int NUM_INSTRUCTIONS_PER_PASS_ATI = 35185;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int NUM_INSTRUCTIONS_TOTAL_ATI = 35186;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 35187;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int NUM_LOOPBACK_COMPONENTS_ATI = 35188;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int COLOR_ALPHA_PAIRING_ATI = 35189;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int SWIZZLE_STR_ATI = 35190;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int SWIZZLE_STQ_ATI = 35191;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int SWIZZLE_STR_DR_ATI = 35192;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int SWIZZLE_STQ_DQ_ATI = 35193;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int SWIZZLE_STRQ_ATI = 35194;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public const int SWIZZLE_STRQ_DQ_ATI = 35195;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	[Log(BitmaskName = "GL")]
	public const uint RED_BIT_ATI = 1u;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	[Log(BitmaskName = "GL")]
	public const uint GREEN_BIT_ATI = 2u;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	[Log(BitmaskName = "GL")]
	public const uint BLUE_BIT_ATI = 4u;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	[Log(BitmaskName = "GL")]
	public const uint _2X_BIT_ATI = 1u;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	[Log(BitmaskName = "GL")]
	public const uint _4X_BIT_ATI = 2u;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	[Log(BitmaskName = "GL")]
	public const uint _8X_BIT_ATI = 4u;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	[Log(BitmaskName = "GL")]
	public const uint HALF_BIT_ATI = 8u;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	[Log(BitmaskName = "GL")]
	public const uint QUARTER_BIT_ATI = 16u;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	[Log(BitmaskName = "GL")]
	public const uint EIGHTH_BIT_ATI = 32u;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	[Log(BitmaskName = "GL")]
	public const uint SATURATE_BIT_ATI = 64u;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	[Log(BitmaskName = "GL")]
	public const uint COMP_BIT_ATI = 2u;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	[Log(BitmaskName = "GL")]
	public const uint NEGATE_BIT_ATI = 4u;

	[RequiredByFeature("GL_ATI_fragment_shader")]
	[Log(BitmaskName = "GL")]
	public const uint BIAS_BIT_ATI = 8u;

	[RequiredByFeature("GL_ATI_meminfo")]
	public const int VBO_FREE_MEMORY_ATI = 34811;

	[RequiredByFeature("GL_ATI_meminfo")]
	public const int TEXTURE_FREE_MEMORY_ATI = 34812;

	[RequiredByFeature("GL_ATI_meminfo")]
	public const int RENDERBUFFER_FREE_MEMORY_ATI = 34813;

	[RequiredByFeature("GL_ATI_pixel_format_float")]
	public const int COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 34869;

	[RequiredByFeature("GL_ATI_pn_triangles")]
	public const int PN_TRIANGLES_ATI = 34800;

	[RequiredByFeature("GL_ATI_pn_triangles")]
	public const int MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 34801;

	[RequiredByFeature("GL_ATI_pn_triangles")]
	public const int PN_TRIANGLES_POINT_MODE_ATI = 34802;

	[RequiredByFeature("GL_ATI_pn_triangles")]
	public const int PN_TRIANGLES_NORMAL_MODE_ATI = 34803;

	[RequiredByFeature("GL_ATI_pn_triangles")]
	public const int PN_TRIANGLES_TESSELATION_LEVEL_ATI = 34804;

	[RequiredByFeature("GL_ATI_pn_triangles")]
	public const int PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 34805;

	[RequiredByFeature("GL_ATI_pn_triangles")]
	public const int PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 34806;

	[RequiredByFeature("GL_ATI_pn_triangles")]
	public const int PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 34807;

	[RequiredByFeature("GL_ATI_pn_triangles")]
	public const int PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 34808;

	[RequiredByFeature("GL_ATI_texture_env_combine3")]
	public const int MODULATE_ADD_ATI = 34628;

	[RequiredByFeature("GL_ATI_texture_env_combine3")]
	public const int MODULATE_SIGNED_ADD_ATI = 34629;

	[RequiredByFeature("GL_ATI_texture_env_combine3")]
	public const int MODULATE_SUBTRACT_ATI = 34630;

	[RequiredByFeature("GL_ATI_texture_float")]
	public const int RGBA_FLOAT32_ATI = 34836;

	[RequiredByFeature("GL_ATI_texture_float")]
	public const int RGB_FLOAT32_ATI = 34837;

	[RequiredByFeature("GL_ATI_texture_float")]
	public const int ALPHA_FLOAT32_ATI = 34838;

	[RequiredByFeature("GL_ATI_texture_float")]
	public const int INTENSITY_FLOAT32_ATI = 34839;

	[RequiredByFeature("GL_ATI_texture_float")]
	public const int LUMINANCE_FLOAT32_ATI = 34840;

	[RequiredByFeature("GL_ATI_texture_float")]
	public const int LUMINANCE_ALPHA_FLOAT32_ATI = 34841;

	[RequiredByFeature("GL_ATI_texture_float")]
	public const int RGBA_FLOAT16_ATI = 34842;

	[RequiredByFeature("GL_ATI_texture_float")]
	public const int RGB_FLOAT16_ATI = 34843;

	[RequiredByFeature("GL_ATI_texture_float")]
	public const int ALPHA_FLOAT16_ATI = 34844;

	[RequiredByFeature("GL_ATI_texture_float")]
	public const int INTENSITY_FLOAT16_ATI = 34845;

	[RequiredByFeature("GL_ATI_texture_float")]
	public const int LUMINANCE_FLOAT16_ATI = 34846;

	[RequiredByFeature("GL_ATI_texture_float")]
	public const int LUMINANCE_ALPHA_FLOAT16_ATI = 34847;

	[RequiredByFeature("GL_ATI_text_fragment_shader")]
	public const int TEXT_FRAGMENT_SHADER_ATI = 33280;

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public const int STATIC_ATI = 34656;

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public const int DYNAMIC_ATI = 34657;

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public const int PRESERVE_ATI = 34658;

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public const int DISCARD_ATI = 34659;

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public const int OBJECT_BUFFER_SIZE_ATI = 34660;

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public const int OBJECT_BUFFER_USAGE_ATI = 34661;

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public const int ARRAY_OBJECT_BUFFER_ATI = 34662;

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public const int ARRAY_OBJECT_OFFSET_ATI = 34663;

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public const int MAX_VERTEX_STREAMS_ATI = 34667;

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public const int VERTEX_STREAM0_ATI = 34668;

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public const int VERTEX_STREAM1_ATI = 34669;

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public const int VERTEX_STREAM2_ATI = 34670;

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public const int VERTEX_STREAM3_ATI = 34671;

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public const int VERTEX_STREAM4_ATI = 34672;

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public const int VERTEX_STREAM5_ATI = 34673;

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public const int VERTEX_STREAM6_ATI = 34674;

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public const int VERTEX_STREAM7_ATI = 34675;

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public const int VERTEX_SOURCE_ATI = 34676;

	[RequiredByFeature("GL_DMP_program_binary", Api = "gles2")]
	public const int SMAPHS30_PROGRAM_BINARY_DMP = 37457;

	[RequiredByFeature("GL_DMP_program_binary", Api = "gles2")]
	public const int SMAPHS_PROGRAM_BINARY_DMP = 37458;

	[RequiredByFeature("GL_DMP_program_binary", Api = "gles2")]
	public const int DMP_PROGRAM_BINARY_DMP = 37459;

	[RequiredByFeature("GL_DMP_shader_binary", Api = "gles2")]
	public const int SHADER_BINARY_DMP = 37456;

	[RequiredByFeature("GL_EXT_422_pixels")]
	public const int _422_EXT = 32972;

	[RequiredByFeature("GL_EXT_422_pixels")]
	public const int _422_REV_EXT = 32973;

	[RequiredByFeature("GL_EXT_422_pixels")]
	public const int _422_AVERAGE_EXT = 32974;

	[RequiredByFeature("GL_EXT_422_pixels")]
	public const int _422_REV_AVERAGE_EXT = 32975;

	[RequiredByFeature("GL_EXT_abgr")]
	public const int ABGR_EXT = 32768;

	[RequiredByFeature("GL_EXT_bindable_uniform")]
	public const int MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 36322;

	[RequiredByFeature("GL_EXT_bindable_uniform")]
	public const int MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 36323;

	[RequiredByFeature("GL_EXT_bindable_uniform")]
	public const int MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 36324;

	[RequiredByFeature("GL_EXT_bindable_uniform")]
	public const int MAX_BINDABLE_UNIFORM_SIZE_EXT = 36333;

	[RequiredByFeature("GL_EXT_bindable_uniform")]
	public const int UNIFORM_BUFFER_EXT = 36334;

	[RequiredByFeature("GL_EXT_bindable_uniform")]
	public const int UNIFORM_BUFFER_BINDING_EXT = 36335;

	[RequiredByFeature("GL_EXT_clip_volume_hint")]
	public const int CLIP_VOLUME_CLIPPING_HINT_EXT = 33008;

	[RequiredByFeature("GL_EXT_cmyka")]
	public const int CMYK_EXT = 32780;

	[RequiredByFeature("GL_EXT_cmyka")]
	public const int CMYKA_EXT = 32781;

	[RequiredByFeature("GL_EXT_cmyka")]
	public const int PACK_CMYK_HINT_EXT = 32782;

	[RequiredByFeature("GL_EXT_cmyka")]
	public const int UNPACK_CMYK_HINT_EXT = 32783;

	[RequiredByFeature("GL_EXT_compiled_vertex_array")]
	public const int ARRAY_ELEMENT_LOCK_FIRST_EXT = 33192;

	[RequiredByFeature("GL_EXT_compiled_vertex_array")]
	public const int ARRAY_ELEMENT_LOCK_COUNT_EXT = 33193;

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public const int TANGENT_ARRAY_EXT = 33849;

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public const int BINORMAL_ARRAY_EXT = 33850;

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public const int CURRENT_TANGENT_EXT = 33851;

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public const int CURRENT_BINORMAL_EXT = 33852;

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public const int TANGENT_ARRAY_TYPE_EXT = 33854;

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public const int TANGENT_ARRAY_STRIDE_EXT = 33855;

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public const int BINORMAL_ARRAY_TYPE_EXT = 33856;

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public const int BINORMAL_ARRAY_STRIDE_EXT = 33857;

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public const int TANGENT_ARRAY_POINTER_EXT = 33858;

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public const int BINORMAL_ARRAY_POINTER_EXT = 33859;

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public const int MAP1_TANGENT_EXT = 33860;

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public const int MAP2_TANGENT_EXT = 33861;

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public const int MAP1_BINORMAL_EXT = 33862;

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public const int MAP2_BINORMAL_EXT = 33863;

	[RequiredByFeature("GL_EXT_cull_vertex")]
	public const int CULL_VERTEX_EXT = 33194;

	[RequiredByFeature("GL_EXT_cull_vertex")]
	public const int CULL_VERTEX_EYE_POSITION_EXT = 33195;

	[RequiredByFeature("GL_EXT_cull_vertex")]
	public const int CULL_VERTEX_OBJECT_POSITION_EXT = 33196;

	[RequiredByFeature("GL_EXT_debug_label", Api = "gl|glcore|gles2")]
	public const int PROGRAM_PIPELINE_OBJECT_EXT = 35407;

	[RequiredByFeature("GL_EXT_debug_label", Api = "gl|glcore|gles2")]
	public const int BUFFER_OBJECT_EXT = 37201;

	[RequiredByFeature("GL_EXT_debug_label", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_AMD_name_gen_delete")]
	public const int QUERY_OBJECT_EXT = 37203;

	[RequiredByFeature("GL_EXT_debug_label", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_AMD_name_gen_delete")]
	public const int VERTEX_ARRAY_OBJECT_EXT = 37204;

	[RequiredByFeature("GL_EXT_depth_bounds_test")]
	public const int DEPTH_BOUNDS_TEST_EXT = 34960;

	[RequiredByFeature("GL_EXT_depth_bounds_test")]
	public const int DEPTH_BOUNDS_EXT = 34961;

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public const int PROGRAM_MATRIX_EXT = 36397;

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public const int TRANSPOSE_PROGRAM_MATRIX_EXT = 36398;

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public const int PROGRAM_MATRIX_STACK_DEPTH_EXT = 36399;

	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	public const int GPU_DISJOINT_EXT = 36795;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	[RequiredByFeature("GL_QCOM_shading_rate", Api = "gles2")]
	public const int SHADING_RATE_1X1_PIXELS_EXT = 38566;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	[RequiredByFeature("GL_QCOM_shading_rate", Api = "gles2")]
	public const int SHADING_RATE_1X2_PIXELS_EXT = 38567;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	[RequiredByFeature("GL_QCOM_shading_rate", Api = "gles2")]
	public const int SHADING_RATE_2X1_PIXELS_EXT = 38568;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	[RequiredByFeature("GL_QCOM_shading_rate", Api = "gles2")]
	public const int SHADING_RATE_2X2_PIXELS_EXT = 38569;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public const int SHADING_RATE_1X4_PIXELS_EXT = 38570;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public const int SHADING_RATE_4X1_PIXELS_EXT = 38571;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	[RequiredByFeature("GL_QCOM_shading_rate", Api = "gles2")]
	public const int SHADING_RATE_4X2_PIXELS_EXT = 38572;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public const int SHADING_RATE_2X4_PIXELS_EXT = 38573;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	[RequiredByFeature("GL_QCOM_shading_rate", Api = "gles2")]
	public const int SHADING_RATE_4X4_PIXELS_EXT = 38574;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public const int SHADING_RATE_EXT = 38608;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public const int SHADING_RATE_ATTACHMENT_EXT = 38609;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public const int FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_EXT = 38610;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public const int FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_EXT = 38611;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public const int FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_EXT = 38612;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public const int FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_EXT = 38613;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public const int FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_EXT = 38614;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public const int MIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT = 38615;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public const int MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT = 38616;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public const int MIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT = 38617;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public const int MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT = 38618;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public const int MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_ASPECT_RATIO_EXT = 38619;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public const int MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_LAYERS_EXT = 38620;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public const int FRAGMENT_SHADING_RATE_WITH_SHADER_DEPTH_STENCIL_WRITES_SUPPORTED_EXT = 38621;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public const int FRAGMENT_SHADING_RATE_WITH_SAMPLE_MASK_SUPPORTED_EXT = 38622;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public const int FRAGMENT_SHADING_RATE_ATTACHMENT_WITH_DEFAULT_FRAMEBUFFER_SUPPORTED_EXT = 38623;

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public const int FRAGMENT_SHADING_RATE_NON_TRIVIAL_COMBINERS_SUPPORTED_EXT = 36719;

	[RequiredByFeature("GL_EXT_framebuffer_multisample_blit_scaled")]
	public const int SCALED_RESOLVE_FASTEST_EXT = 37050;

	[RequiredByFeature("GL_EXT_framebuffer_multisample_blit_scaled")]
	public const int SCALED_RESOLVE_NICEST_EXT = 37051;

	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
	public const int FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 36052;

	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 36058;

	[RequiredByFeature("GL_EXT_framebuffer_sRGB")]
	public const int FRAMEBUFFER_SRGB_CAPABLE_EXT = 36282;

	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int GEOMETRY_LINKED_VERTICES_OUT_EXT = 35094;

	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int GEOMETRY_LINKED_INPUT_TYPE_EXT = 35095;

	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int GEOMETRY_LINKED_OUTPUT_TYPE_EXT = 35096;

	[RequiredByFeature("GL_EXT_geometry_shader4")]
	[RequiredByFeature("GL_NV_geometry_program4")]
	public const int GEOMETRY_VERTICES_OUT_EXT = 36314;

	[RequiredByFeature("GL_EXT_geometry_shader4")]
	[RequiredByFeature("GL_NV_geometry_program4")]
	public const int GEOMETRY_INPUT_TYPE_EXT = 36315;

	[RequiredByFeature("GL_EXT_geometry_shader4")]
	[RequiredByFeature("GL_NV_geometry_program4")]
	public const int GEOMETRY_OUTPUT_TYPE_EXT = 36316;

	[RequiredByFeature("GL_EXT_index_array_formats")]
	public const int IUI_V2F_EXT = 33197;

	[RequiredByFeature("GL_EXT_index_array_formats")]
	public const int IUI_V3F_EXT = 33198;

	[RequiredByFeature("GL_EXT_index_array_formats")]
	public const int IUI_N3F_V2F_EXT = 33199;

	[RequiredByFeature("GL_EXT_index_array_formats")]
	public const int IUI_N3F_V3F_EXT = 33200;

	[RequiredByFeature("GL_EXT_index_array_formats")]
	public const int T2F_IUI_V2F_EXT = 33201;

	[RequiredByFeature("GL_EXT_index_array_formats")]
	public const int T2F_IUI_V3F_EXT = 33202;

	[RequiredByFeature("GL_EXT_index_array_formats")]
	public const int T2F_IUI_N3F_V2F_EXT = 33203;

	[RequiredByFeature("GL_EXT_index_array_formats")]
	public const int T2F_IUI_N3F_V3F_EXT = 33204;

	[RequiredByFeature("GL_EXT_index_func")]
	public const int INDEX_TEST_EXT = 33205;

	[RequiredByFeature("GL_EXT_index_func")]
	public const int INDEX_TEST_FUNC_EXT = 33206;

	[RequiredByFeature("GL_EXT_index_func")]
	public const int INDEX_TEST_REF_EXT = 33207;

	[RequiredByFeature("GL_EXT_index_material")]
	public const int INDEX_MATERIAL_EXT = 33208;

	[RequiredByFeature("GL_EXT_index_material")]
	public const int INDEX_MATERIAL_PARAMETER_EXT = 33209;

	[RequiredByFeature("GL_EXT_index_material")]
	public const int INDEX_MATERIAL_FACE_EXT = 33210;

	[RequiredByFeature("GL_EXT_light_texture")]
	public const int FRAGMENT_MATERIAL_EXT = 33609;

	[RequiredByFeature("GL_EXT_light_texture")]
	public const int FRAGMENT_NORMAL_EXT = 33610;

	[RequiredByFeature("GL_EXT_light_texture")]
	public const int FRAGMENT_COLOR_EXT = 33612;

	[RequiredByFeature("GL_EXT_light_texture")]
	public const int ATTENUATION_EXT = 33613;

	[RequiredByFeature("GL_EXT_light_texture")]
	public const int SHADOW_ATTENUATION_EXT = 33614;

	[RequiredByFeature("GL_EXT_light_texture")]
	public const int TEXTURE_APPLICATION_MODE_EXT = 33615;

	[RequiredByFeature("GL_EXT_light_texture")]
	public const int TEXTURE_LIGHT_EXT = 33616;

	[RequiredByFeature("GL_EXT_light_texture")]
	public const int TEXTURE_MATERIAL_FACE_EXT = 33617;

	[RequiredByFeature("GL_EXT_light_texture")]
	public const int TEXTURE_MATERIAL_PARAMETER_EXT = 33618;

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public const int TEXTURE_TILING_EXT = 38272;

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public const int DEDICATED_MEMORY_OBJECT_EXT = 38273;

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public const int PROTECTED_MEMORY_OBJECT_EXT = 38299;

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public const int NUM_TILING_TYPES_EXT = 38274;

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public const int TILING_TYPES_EXT = 38275;

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public const int OPTIMAL_TILING_EXT = 38276;

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public const int LINEAR_TILING_EXT = 38277;

	[RequiredByFeature("GL_EXT_memory_object_win32", Api = "gl|gles2")]
	public const int HANDLE_TYPE_D3D12_TILEPOOL_EXT = 38281;

	[RequiredByFeature("GL_EXT_memory_object_win32", Api = "gl|gles2")]
	public const int HANDLE_TYPE_D3D12_RESOURCE_EXT = 38282;

	[RequiredByFeature("GL_EXT_memory_object_win32", Api = "gl|gles2")]
	public const int HANDLE_TYPE_D3D11_IMAGE_EXT = 38283;

	[RequiredByFeature("GL_EXT_memory_object_win32", Api = "gl|gles2")]
	public const int HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = 38284;

	[RequiredByFeature("GL_EXT_multisample")]
	[RequiredByFeature("GL_SGIS_multisample")]
	public const int SAMPLE_ALPHA_TO_MASK_EXT = 32926;

	[RequiredByFeature("GL_EXT_multisample")]
	public const int SAMPLE_MASK_EXT = 32928;

	[RequiredByFeature("GL_EXT_multisample")]
	[RequiredByFeature("GL_SGIS_multisample")]
	public const int _1PASS_EXT = 32929;

	[RequiredByFeature("GL_EXT_multisample")]
	[RequiredByFeature("GL_SGIS_multisample")]
	public const int _2PASS_0_EXT = 32930;

	[RequiredByFeature("GL_EXT_multisample")]
	[RequiredByFeature("GL_SGIS_multisample")]
	public const int _2PASS_1_EXT = 32931;

	[RequiredByFeature("GL_EXT_multisample")]
	[RequiredByFeature("GL_SGIS_multisample")]
	public const int _4PASS_0_EXT = 32932;

	[RequiredByFeature("GL_EXT_multisample")]
	[RequiredByFeature("GL_SGIS_multisample")]
	public const int _4PASS_1_EXT = 32933;

	[RequiredByFeature("GL_EXT_multisample")]
	[RequiredByFeature("GL_SGIS_multisample")]
	public const int _4PASS_2_EXT = 32934;

	[RequiredByFeature("GL_EXT_multisample")]
	[RequiredByFeature("GL_SGIS_multisample")]
	public const int _4PASS_3_EXT = 32935;

	[RequiredByFeature("GL_EXT_multisample")]
	public const int SAMPLE_MASK_VALUE_EXT = 32938;

	[RequiredByFeature("GL_EXT_multisample")]
	[RequiredByFeature("GL_SGIS_multisample")]
	public const int SAMPLE_MASK_INVERT_EXT = 32939;

	[RequiredByFeature("GL_EXT_multisample")]
	[RequiredByFeature("GL_SGIS_multisample")]
	public const int SAMPLE_PATTERN_EXT = 32940;

	[RequiredByFeature("GL_EXT_multisampled_render_to_texture", Api = "gles1|gles2")]
	public const int FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 36204;

	[RequiredByFeature("GL_EXT_multiview_draw_buffers", Api = "gles2")]
	public const int COLOR_ATTACHMENT_EXT = 37104;

	[RequiredByFeature("GL_EXT_multiview_draw_buffers", Api = "gles2")]
	public const int MULTIVIEW_EXT = 37105;

	[RequiredByFeature("GL_EXT_multiview_draw_buffers", Api = "gles2")]
	public const int MAX_MULTIVIEW_BUFFERS_EXT = 37106;

	[RequiredByFeature("GL_EXT_packed_float")]
	public const int RGBA_SIGNED_COMPONENTS_EXT = 35900;

	[RequiredByFeature("GL_EXT_paletted_texture")]
	public const int COLOR_INDEX1_EXT = 32994;

	[RequiredByFeature("GL_EXT_paletted_texture")]
	public const int COLOR_INDEX2_EXT = 32995;

	[RequiredByFeature("GL_EXT_paletted_texture")]
	public const int COLOR_INDEX4_EXT = 32996;

	[RequiredByFeature("GL_EXT_paletted_texture")]
	public const int COLOR_INDEX8_EXT = 32997;

	[RequiredByFeature("GL_EXT_paletted_texture")]
	public const int COLOR_INDEX12_EXT = 32998;

	[RequiredByFeature("GL_EXT_paletted_texture")]
	public const int COLOR_INDEX16_EXT = 32999;

	[RequiredByFeature("GL_EXT_paletted_texture")]
	public const int TEXTURE_INDEX_SIZE_EXT = 33005;

	[RequiredByFeature("GL_EXT_pixel_transform")]
	public const int PIXEL_TRANSFORM_2D_EXT = 33584;

	[RequiredByFeature("GL_EXT_pixel_transform")]
	public const int PIXEL_MAG_FILTER_EXT = 33585;

	[RequiredByFeature("GL_EXT_pixel_transform")]
	public const int PIXEL_MIN_FILTER_EXT = 33586;

	[RequiredByFeature("GL_EXT_pixel_transform")]
	public const int PIXEL_CUBIC_WEIGHT_EXT = 33587;

	[RequiredByFeature("GL_EXT_pixel_transform")]
	public const int CUBIC_EXT = 33588;

	[RequiredByFeature("GL_EXT_pixel_transform")]
	public const int AVERAGE_EXT = 33589;

	[RequiredByFeature("GL_EXT_pixel_transform")]
	public const int PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 33590;

	[RequiredByFeature("GL_EXT_pixel_transform")]
	public const int MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 33591;

	[RequiredByFeature("GL_EXT_pixel_transform")]
	public const int PIXEL_TRANSFORM_2D_MATRIX_EXT = 33592;

	[RequiredByFeature("GL_EXT_point_parameters")]
	[RequiredByFeature("GL_SGIS_point_parameters")]
	public const int DISTANCE_ATTENUATION_EXT = 33065;

	[RequiredByFeature("GL_EXT_polygon_offset")]
	public const int POLYGON_OFFSET_EXT = 32823;

	[RequiredByFeature("GL_EXT_polygon_offset")]
	public const int POLYGON_OFFSET_BIAS_EXT = 32825;

	[RequiredByFeature("GL_EXT_protected_textures", Api = "gles2")]
	[Log(BitmaskName = "GL")]
	public const uint CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT = 16u;

	[RequiredByFeature("GL_EXT_protected_textures", Api = "gles2")]
	public const int TEXTURE_PROTECTED_EXT = 35834;

	[RequiredByFeature("GL_EXT_pvrtc_sRGB", Api = "gles2")]
	public const int COMPRESSED_SRGB_PVRTC_2BPPV1_EXT = 35412;

	[RequiredByFeature("GL_EXT_pvrtc_sRGB", Api = "gles2")]
	public const int COMPRESSED_SRGB_PVRTC_4BPPV1_EXT = 35413;

	[RequiredByFeature("GL_EXT_pvrtc_sRGB", Api = "gles2")]
	public const int COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT = 35414;

	[RequiredByFeature("GL_EXT_pvrtc_sRGB", Api = "gles2")]
	public const int COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT = 35415;

	[RequiredByFeature("GL_EXT_pvrtc_sRGB", Api = "gles2")]
	public const int COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG = 37872;

	[RequiredByFeature("GL_EXT_pvrtc_sRGB", Api = "gles2")]
	public const int COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG = 37873;

	[RequiredByFeature("GL_EXT_raster_multisample", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
	public const int RASTER_MULTISAMPLE_EXT = 37671;

	[RequiredByFeature("GL_EXT_raster_multisample", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
	public const int RASTER_SAMPLES_EXT = 37672;

	[RequiredByFeature("GL_EXT_raster_multisample", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
	public const int MAX_RASTER_SAMPLES_EXT = 37673;

	[RequiredByFeature("GL_EXT_raster_multisample", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
	public const int RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 37674;

	[RequiredByFeature("GL_EXT_raster_multisample", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
	public const int MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 37675;

	[RequiredByFeature("GL_EXT_raster_multisample", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
	public const int EFFECTIVE_RASTER_SAMPLES_EXT = 37676;

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public const int NUM_DEVICE_UUIDS_EXT = 38294;

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public const int DEVICE_UUID_EXT = 38295;

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public const int DRIVER_UUID_EXT = 38296;

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public const int UUID_SIZE_EXT = 16;

	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public const int LAYOUT_GENERAL_EXT = 38285;

	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public const int LAYOUT_COLOR_ATTACHMENT_EXT = 38286;

	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public const int LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = 38287;

	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public const int LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = 38288;

	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public const int LAYOUT_SHADER_READ_ONLY_EXT = 38289;

	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public const int LAYOUT_TRANSFER_SRC_EXT = 38290;

	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public const int LAYOUT_TRANSFER_DST_EXT = 38291;

	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public const int LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT = 38192;

	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public const int LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT = 38193;

	[RequiredByFeature("GL_EXT_memory_object_fd", Api = "gl|gles2")]
	[RequiredByFeature("GL_EXT_semaphore_fd", Api = "gl|gles2")]
	public const int HANDLE_TYPE_OPAQUE_FD_EXT = 38278;

	[RequiredByFeature("GL_EXT_memory_object_win32", Api = "gl|gles2")]
	[RequiredByFeature("GL_EXT_semaphore_win32", Api = "gl|gles2")]
	public const int HANDLE_TYPE_OPAQUE_WIN32_EXT = 38279;

	[RequiredByFeature("GL_EXT_memory_object_win32", Api = "gl|gles2")]
	[RequiredByFeature("GL_EXT_semaphore_win32", Api = "gl|gles2")]
	public const int HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = 38280;

	[RequiredByFeature("GL_EXT_memory_object_win32", Api = "gl|gles2")]
	[RequiredByFeature("GL_EXT_semaphore_win32", Api = "gl|gles2")]
	public const int DEVICE_LUID_EXT = 38297;

	[RequiredByFeature("GL_EXT_memory_object_win32", Api = "gl|gles2")]
	[RequiredByFeature("GL_EXT_semaphore_win32", Api = "gl|gles2")]
	public const int DEVICE_NODE_MASK_EXT = 38298;

	[RequiredByFeature("GL_EXT_memory_object_win32", Api = "gl|gles2")]
	[RequiredByFeature("GL_EXT_semaphore_win32", Api = "gl|gles2")]
	public const int LUID_SIZE_EXT = 8;

	[RequiredByFeature("GL_EXT_semaphore_win32", Api = "gl|gles2")]
	public const int HANDLE_TYPE_D3D12_FENCE_EXT = 38292;

	[RequiredByFeature("GL_EXT_semaphore_win32", Api = "gl|gles2")]
	public const int D3D12_FENCE_VALUE_EXT = 38293;

	[RequiredByFeature("GL_EXT_shader_framebuffer_fetch", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_EXT_shader_framebuffer_fetch_non_coherent", Api = "gl|glcore|gles2")]
	public const int FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = 35410;

	[RequiredByFeature("GL_EXT_shader_pixel_local_storage", Api = "gles2")]
	public const int MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT = 36707;

	[RequiredByFeature("GL_EXT_shader_pixel_local_storage", Api = "gles2")]
	public const int MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT = 36711;

	[RequiredByFeature("GL_EXT_shader_pixel_local_storage", Api = "gles2")]
	public const int SHADER_PIXEL_LOCAL_STORAGE_EXT = 36708;

	[RequiredByFeature("GL_EXT_shader_pixel_local_storage2", Api = "gles2")]
	public const int MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT = 38480;

	[RequiredByFeature("GL_EXT_shader_pixel_local_storage2", Api = "gles2")]
	public const int MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT = 38481;

	[RequiredByFeature("GL_EXT_shader_pixel_local_storage2", Api = "gles2")]
	public const int FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT = 38482;

	[RequiredByFeature("GL_EXT_shared_texture_palette")]
	public const int SHARED_TEXTURE_PALETTE_EXT = 33275;

	[RequiredByFeature("GL_EXT_stencil_clear_tag")]
	public const int STENCIL_TAG_BITS_EXT = 35058;

	[RequiredByFeature("GL_EXT_stencil_clear_tag")]
	public const int STENCIL_CLEAR_TAG_VALUE_EXT = 35059;

	[RequiredByFeature("GL_EXT_stencil_two_side")]
	public const int STENCIL_TEST_TWO_SIDE_EXT = 35088;

	[RequiredByFeature("GL_EXT_stencil_two_side")]
	public const int ACTIVE_STENCIL_FACE_EXT = 35089;

	[RequiredByFeature("GL_EXT_texture")]
	public const int RGB2_EXT = 32846;

	[RequiredByFeature("GL_EXT_texture")]
	public const int REPLACE_EXT = 32866;

	[RequiredByFeature("GL_EXT_texture")]
	public const int TEXTURE_TOO_LARGE_EXT = 32869;

	[RequiredByFeature("GL_EXT_texture_array")]
	public const int COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 34894;

	[RequiredByFeature("GL_EXT_texture_compression_astc_decode_mode", Api = "gles2")]
	public const int TEXTURE_ASTC_DECODE_PRECISION_EXT = 36713;

	[RequiredByFeature("GL_EXT_texture_compression_latc")]
	public const int COMPRESSED_LUMINANCE_LATC1_EXT = 35952;

	[RequiredByFeature("GL_EXT_texture_compression_latc")]
	public const int COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 35953;

	[RequiredByFeature("GL_EXT_texture_compression_latc")]
	public const int COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 35954;

	[RequiredByFeature("GL_EXT_texture_compression_latc")]
	public const int COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 35955;

	[RequiredByFeature("GL_EXT_texture_compression_rgtc", Api = "gl|gles2")]
	public const int COMPRESSED_RED_GREEN_RGTC2_EXT = 36285;

	[RequiredByFeature("GL_EXT_texture_compression_rgtc", Api = "gl|gles2")]
	public const int COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 36286;

	[RequiredByFeature("GL_EXT_texture_compression_dxt1", Api = "gles1|gles2")]
	[RequiredByFeature("GL_EXT_texture_compression_s3tc", Api = "gl|glcore|gles2|glsc2")]
	public const int COMPRESSED_RGB_S3TC_DXT1_EXT = 33776;

	[RequiredByFeature("GL_EXT_texture_compression_dxt1", Api = "gles1|gles2")]
	[RequiredByFeature("GL_EXT_texture_compression_s3tc", Api = "gl|glcore|gles2|glsc2")]
	public const int COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777;

	[RequiredByFeature("GL_EXT_texture_compression_s3tc", Api = "gl|glcore|gles2|glsc2")]
	[RequiredByFeature("GL_ANGLE_texture_compression_dxt3", Api = "gles2")]
	public const int COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778;

	[RequiredByFeature("GL_EXT_texture_compression_s3tc", Api = "gl|glcore|gles2|glsc2")]
	[RequiredByFeature("GL_ANGLE_texture_compression_dxt5", Api = "gles2")]
	public const int COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779;

	[RequiredByFeature("GL_EXT_texture_env_dot3")]
	public const int DOT3_RGB_EXT = 34624;

	[RequiredByFeature("GL_EXT_texture_env_dot3")]
	public const int DOT3_RGBA_EXT = 34625;

	[RequiredByFeature("GL_EXT_texture_format_sRGB_override", Api = "gles2")]
	public const int TEXTURE_FORMAT_SRGB_OVERRIDE_EXT = 36799;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int ALPHA32UI_EXT = 36210;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int INTENSITY32UI_EXT = 36211;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int LUMINANCE32UI_EXT = 36212;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int LUMINANCE_ALPHA32UI_EXT = 36213;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int ALPHA16UI_EXT = 36216;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int INTENSITY16UI_EXT = 36217;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int LUMINANCE16UI_EXT = 36218;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int LUMINANCE_ALPHA16UI_EXT = 36219;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int ALPHA8UI_EXT = 36222;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int INTENSITY8UI_EXT = 36223;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int LUMINANCE8UI_EXT = 36224;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int LUMINANCE_ALPHA8UI_EXT = 36225;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int ALPHA32I_EXT = 36228;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int INTENSITY32I_EXT = 36229;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int LUMINANCE32I_EXT = 36230;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int LUMINANCE_ALPHA32I_EXT = 36231;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int ALPHA16I_EXT = 36234;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int INTENSITY16I_EXT = 36235;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int LUMINANCE16I_EXT = 36236;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int LUMINANCE_ALPHA16I_EXT = 36237;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int ALPHA8I_EXT = 36240;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int INTENSITY8I_EXT = 36241;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int LUMINANCE8I_EXT = 36242;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int LUMINANCE_ALPHA8I_EXT = 36243;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int LUMINANCE_INTEGER_EXT = 36252;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int LUMINANCE_ALPHA_INTEGER_EXT = 36253;

	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int RGBA_INTEGER_MODE_EXT = 36254;

	[RequiredByFeature("GL_EXT_texture_mirror_clamp")]
	[RequiredByFeature("GL_ATI_texture_mirror_once")]
	public const int MIRROR_CLAMP_EXT = 34626;

	[RequiredByFeature("GL_EXT_texture_mirror_clamp")]
	public const int MIRROR_CLAMP_TO_BORDER_EXT = 35090;

	[RequiredByFeature("GL_EXT_texture_object")]
	public const int TEXTURE_1D_BINDING_EXT = 32872;

	[RequiredByFeature("GL_EXT_texture_object")]
	public const int TEXTURE_2D_BINDING_EXT = 32873;

	[RequiredByFeature("GL_EXT_texture_object")]
	public const int TEXTURE_3D_BINDING_EXT = 32874;

	[RequiredByFeature("GL_EXT_texture_perturb_normal")]
	public const int PERTURB_EXT = 34222;

	[RequiredByFeature("GL_EXT_texture_perturb_normal")]
	public const int TEXTURE_NORMAL_EXT = 34223;

	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int ALPHA_SNORM = 36880;

	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int LUMINANCE_SNORM = 36881;

	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int LUMINANCE_ALPHA_SNORM = 36882;

	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int INTENSITY_SNORM = 36883;

	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int ALPHA8_SNORM = 36884;

	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int LUMINANCE8_SNORM = 36885;

	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int LUMINANCE8_ALPHA8_SNORM = 36886;

	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int INTENSITY8_SNORM = 36887;

	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int ALPHA16_SNORM = 36888;

	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int LUMINANCE16_SNORM = 36889;

	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int LUMINANCE16_ALPHA16_SNORM = 36890;

	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int INTENSITY16_SNORM = 36891;

	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int RED_SNORM = 36752;

	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int RG_SNORM = 36753;

	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int RGB_SNORM = 36754;

	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int RGBA_SNORM = 36755;

	[RequiredByFeature("GL_EXT_texture_compression_s3tc_srgb", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_sRGB")]
	[RequiredByFeature("GL_NV_sRGB_formats", Api = "gles2")]
	public const int COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916;

	[RequiredByFeature("GL_EXT_texture_compression_s3tc_srgb", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_sRGB")]
	[RequiredByFeature("GL_NV_sRGB_formats", Api = "gles2")]
	public const int COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917;

	[RequiredByFeature("GL_EXT_texture_compression_s3tc_srgb", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_sRGB")]
	[RequiredByFeature("GL_NV_sRGB_formats", Api = "gles2")]
	public const int COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918;

	[RequiredByFeature("GL_EXT_texture_compression_s3tc_srgb", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_sRGB")]
	[RequiredByFeature("GL_NV_sRGB_formats", Api = "gles2")]
	public const int COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919;

	[RequiredByFeature("GL_EXT_texture_sRGB_decode", Api = "gl|glcore|gles2")]
	public const int TEXTURE_SRGB_DECODE_EXT = 35400;

	[RequiredByFeature("GL_EXT_texture_sRGB_decode", Api = "gl|glcore|gles2")]
	public const int DECODE_EXT = 35401;

	[RequiredByFeature("GL_EXT_texture_sRGB_decode", Api = "gl|glcore|gles2")]
	public const int SKIP_DECODE_EXT = 35402;

	[RequiredByFeature("GL_EXT_texture_sRGB_R8", Api = "gles2|gl|glcore")]
	public const int SR8_EXT = 36797;

	[RequiredByFeature("GL_EXT_texture_sRGB_RG8", Api = "gles2|gl|glcore")]
	public const int SRG8_EXT = 36798;

	[RequiredByFeature("GL_APPLE_texture_format_BGRA8888", Api = "gles1|gles2")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public const int BGRA8_EXT = 37793;

	[RequiredByFeature("GL_EXT_EGL_image_storage_compression", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
	public const int SURFACE_COMPRESSION_EXT = 38592;

	[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
	public const int NUM_SURFACE_COMPRESSION_FIXED_RATES_EXT = 36718;

	[RequiredByFeature("GL_EXT_EGL_image_storage_compression", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
	public const int SURFACE_COMPRESSION_FIXED_RATE_NONE_EXT = 38593;

	[RequiredByFeature("GL_EXT_EGL_image_storage_compression", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
	public const int SURFACE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = 38594;

	[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
	public const int SURFACE_COMPRESSION_FIXED_RATE_1BPC_EXT = 38596;

	[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
	public const int SURFACE_COMPRESSION_FIXED_RATE_2BPC_EXT = 38597;

	[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
	public const int SURFACE_COMPRESSION_FIXED_RATE_3BPC_EXT = 38598;

	[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
	public const int SURFACE_COMPRESSION_FIXED_RATE_4BPC_EXT = 38599;

	[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
	public const int SURFACE_COMPRESSION_FIXED_RATE_5BPC_EXT = 38600;

	[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
	public const int SURFACE_COMPRESSION_FIXED_RATE_6BPC_EXT = 38601;

	[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
	public const int SURFACE_COMPRESSION_FIXED_RATE_7BPC_EXT = 38602;

	[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
	public const int SURFACE_COMPRESSION_FIXED_RATE_8BPC_EXT = 38603;

	[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
	public const int SURFACE_COMPRESSION_FIXED_RATE_9BPC_EXT = 38604;

	[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
	public const int SURFACE_COMPRESSION_FIXED_RATE_10BPC_EXT = 38605;

	[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
	public const int SURFACE_COMPRESSION_FIXED_RATE_11BPC_EXT = 38606;

	[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
	public const int SURFACE_COMPRESSION_FIXED_RATE_12BPC_EXT = 38607;

	[RequiredByFeature("GL_EXT_vertex_array")]
	public const int VERTEX_ARRAY_COUNT_EXT = 32893;

	[RequiredByFeature("GL_EXT_vertex_array")]
	public const int NORMAL_ARRAY_COUNT_EXT = 32896;

	[RequiredByFeature("GL_EXT_vertex_array")]
	public const int COLOR_ARRAY_COUNT_EXT = 32900;

	[RequiredByFeature("GL_EXT_vertex_array")]
	public const int INDEX_ARRAY_COUNT_EXT = 32903;

	[RequiredByFeature("GL_EXT_vertex_array")]
	public const int TEXTURE_COORD_ARRAY_COUNT_EXT = 32907;

	[RequiredByFeature("GL_EXT_vertex_array")]
	public const int EDGE_FLAG_ARRAY_COUNT_EXT = 32909;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int VERTEX_SHADER_EXT = 34688;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int VERTEX_SHADER_BINDING_EXT = 34689;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_INDEX_EXT = 34690;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_NEGATE_EXT = 34691;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_DOT3_EXT = 34692;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_DOT4_EXT = 34693;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_MUL_EXT = 34694;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_ADD_EXT = 34695;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_MADD_EXT = 34696;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_FRAC_EXT = 34697;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_MAX_EXT = 34698;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_MIN_EXT = 34699;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_SET_GE_EXT = 34700;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_SET_LT_EXT = 34701;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_CLAMP_EXT = 34702;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_FLOOR_EXT = 34703;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_ROUND_EXT = 34704;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_EXP_BASE_2_EXT = 34705;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_LOG_BASE_2_EXT = 34706;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_POWER_EXT = 34707;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_RECIP_EXT = 34708;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_RECIP_SQRT_EXT = 34709;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_SUB_EXT = 34710;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_CROSS_PRODUCT_EXT = 34711;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_MULTIPLY_MATRIX_EXT = 34712;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OP_MOV_EXT = 34713;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_VERTEX_EXT = 34714;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_COLOR0_EXT = 34715;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_COLOR1_EXT = 34716;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD0_EXT = 34717;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD1_EXT = 34718;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD2_EXT = 34719;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD3_EXT = 34720;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD4_EXT = 34721;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD5_EXT = 34722;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD6_EXT = 34723;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD7_EXT = 34724;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD8_EXT = 34725;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD9_EXT = 34726;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD10_EXT = 34727;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD11_EXT = 34728;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD12_EXT = 34729;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD13_EXT = 34730;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD14_EXT = 34731;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD15_EXT = 34732;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD16_EXT = 34733;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD17_EXT = 34734;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD18_EXT = 34735;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD19_EXT = 34736;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD20_EXT = 34737;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD21_EXT = 34738;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD22_EXT = 34739;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD23_EXT = 34740;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD24_EXT = 34741;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD25_EXT = 34742;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD26_EXT = 34743;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD27_EXT = 34744;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD28_EXT = 34745;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD29_EXT = 34746;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD30_EXT = 34747;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_TEXTURE_COORD31_EXT = 34748;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int OUTPUT_FOG_EXT = 34749;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int SCALAR_EXT = 34750;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int VECTOR_EXT = 34751;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int MATRIX_EXT = 34752;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int VARIANT_EXT = 34753;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int INVARIANT_EXT = 34754;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int LOCAL_CONSTANT_EXT = 34755;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int LOCAL_EXT = 34756;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 34757;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int MAX_VERTEX_SHADER_VARIANTS_EXT = 34758;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int MAX_VERTEX_SHADER_INVARIANTS_EXT = 34759;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34760;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int MAX_VERTEX_SHADER_LOCALS_EXT = 34761;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 34762;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 34763;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34764;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 34765;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 34766;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int VERTEX_SHADER_INSTRUCTIONS_EXT = 34767;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int VERTEX_SHADER_VARIANTS_EXT = 34768;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int VERTEX_SHADER_INVARIANTS_EXT = 34769;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34770;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int VERTEX_SHADER_LOCALS_EXT = 34771;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int VERTEX_SHADER_OPTIMIZED_EXT = 34772;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int X_EXT = 34773;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int Y_EXT = 34774;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int Z_EXT = 34775;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int W_EXT = 34776;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int NEGATIVE_X_EXT = 34777;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int NEGATIVE_Y_EXT = 34778;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int NEGATIVE_Z_EXT = 34779;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int NEGATIVE_W_EXT = 34780;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int ZERO_EXT = 34781;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int ONE_EXT = 34782;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int NEGATIVE_ONE_EXT = 34783;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int NORMALIZED_RANGE_EXT = 34784;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int FULL_RANGE_EXT = 34785;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int CURRENT_VERTEX_EXT = 34786;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int MVP_MATRIX_EXT = 34787;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int VARIANT_VALUE_EXT = 34788;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int VARIANT_DATATYPE_EXT = 34789;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int VARIANT_ARRAY_STRIDE_EXT = 34790;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int VARIANT_ARRAY_TYPE_EXT = 34791;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int VARIANT_ARRAY_EXT = 34792;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int VARIANT_ARRAY_POINTER_EXT = 34793;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int INVARIANT_VALUE_EXT = 34794;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int INVARIANT_DATATYPE_EXT = 34795;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int LOCAL_CONSTANT_VALUE_EXT = 34796;

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public const int LOCAL_CONSTANT_DATATYPE_EXT = 34797;

	[RequiredByFeature("GL_EXT_vertex_weighting")]
	public const int MODELVIEW0_STACK_DEPTH_EXT = 2979;

	[RequiredByFeature("GL_EXT_vertex_weighting")]
	public const int MODELVIEW1_STACK_DEPTH_EXT = 34050;

	[RequiredByFeature("GL_EXT_vertex_weighting")]
	public const int MODELVIEW0_MATRIX_EXT = 2982;

	[RequiredByFeature("GL_EXT_vertex_weighting")]
	public const int MODELVIEW1_MATRIX_EXT = 34054;

	[RequiredByFeature("GL_EXT_vertex_weighting")]
	public const int VERTEX_WEIGHTING_EXT = 34057;

	[RequiredByFeature("GL_EXT_vertex_weighting")]
	public const int CURRENT_VERTEX_WEIGHT_EXT = 34059;

	[RequiredByFeature("GL_EXT_vertex_weighting")]
	public const int VERTEX_WEIGHT_ARRAY_EXT = 34060;

	[RequiredByFeature("GL_EXT_vertex_weighting")]
	public const int VERTEX_WEIGHT_ARRAY_SIZE_EXT = 34061;

	[RequiredByFeature("GL_EXT_vertex_weighting")]
	public const int VERTEX_WEIGHT_ARRAY_TYPE_EXT = 34062;

	[RequiredByFeature("GL_EXT_vertex_weighting")]
	public const int VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 34063;

	[RequiredByFeature("GL_EXT_vertex_weighting")]
	public const int VERTEX_WEIGHT_ARRAY_POINTER_EXT = 34064;

	[RequiredByFeature("GL_EXT_window_rectangles", Api = "gl|glcore|gles2")]
	public const int INCLUSIVE_EXT = 36624;

	[RequiredByFeature("GL_EXT_window_rectangles", Api = "gl|glcore|gles2")]
	public const int EXCLUSIVE_EXT = 36625;

	[RequiredByFeature("GL_EXT_window_rectangles", Api = "gl|glcore|gles2")]
	public const int WINDOW_RECTANGLE_EXT = 36626;

	[RequiredByFeature("GL_EXT_window_rectangles", Api = "gl|glcore|gles2")]
	public const int WINDOW_RECTANGLE_MODE_EXT = 36627;

	[RequiredByFeature("GL_EXT_window_rectangles", Api = "gl|glcore|gles2")]
	public const int MAX_WINDOW_RECTANGLES_EXT = 36628;

	[RequiredByFeature("GL_EXT_window_rectangles", Api = "gl|glcore|gles2")]
	public const int NUM_WINDOW_RECTANGLES_EXT = 36629;

	[RequiredByFeature("GL_EXT_x11_sync_object")]
	public const int SYNC_X11_FENCE_EXT = 37089;

	[RequiredByFeature("GL_EXT_YUV_target", Api = "gles2")]
	public const int SAMPLER_EXTERNAL_2D_Y2Y_EXT = 35815;

	[RequiredByFeature("GL_EXT_YUV_target", Api = "gles2")]
	[RequiredByFeature("GL_OES_EGL_image_external", Api = "gles1|gles2")]
	public const int TEXTURE_EXTERNAL_OES = 36197;

	[RequiredByFeature("GL_EXT_YUV_target", Api = "gles2")]
	[RequiredByFeature("GL_OES_EGL_image_external", Api = "gles1|gles2")]
	public const int TEXTURE_BINDING_EXTERNAL_OES = 36199;

	[RequiredByFeature("GL_EXT_YUV_target", Api = "gles2")]
	[RequiredByFeature("GL_OES_EGL_image_external", Api = "gles1|gles2")]
	public const int REQUIRED_TEXTURE_IMAGE_UNITS_OES = 36200;

	[RequiredByFeature("GL_FJ_shader_binary_GCCSO", Api = "gles2")]
	public const int GCCSO_SHADER_BINARY_FJ = 37472;

	private static bool _Initialized;

	internal static Exception InitializationException;

	internal static INativeWindow NativeWindow;

	private static KhronosVersion _CurrentVersion;

	private static GlslVersion _CurrentShadingVersion;

	private static string _Vendor;

	private static string _Renderer;

	private static Extensions _CurrentExtensions;

	private static Limits _CurrentLimits;

	private static readonly Stack<Extensions> _StackExtensions;

	private static GetAddressDelegate _GetAddressDelegate;

	internal const string Library = "opengl32.dll";

	internal const string LibraryEs = "libGLESv1_CM.dll";

	internal const string LibraryEs2 = "libGLESv2.dll";

	private static KhronosLogContext _LogContext;

	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES3_2_compatibility", Api = "gl|glcore")]
	public const int MULTISAMPLE_LINE_WIDTH_RANGE = 37761;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES3_2_compatibility", Api = "gl|glcore")]
	public const int MULTISAMPLE_LINE_WIDTH_GRANULARITY = 37762;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_blend_equation_advanced", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int MULTIPLY = 37524;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_blend_equation_advanced", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int SCREEN = 37525;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_blend_equation_advanced", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int OVERLAY = 37526;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_blend_equation_advanced", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int DARKEN = 37527;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_blend_equation_advanced", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int LIGHTEN = 37528;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_blend_equation_advanced", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int COLORDODGE = 37529;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_blend_equation_advanced", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int COLORBURN = 37530;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_blend_equation_advanced", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int HARDLIGHT = 37531;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_blend_equation_advanced", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int SOFTLIGHT = 37532;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_blend_equation_advanced", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int DIFFERENCE = 37534;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_blend_equation_advanced", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int EXCLUSION = 37536;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_blend_equation_advanced", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int HSL_HUE = 37549;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_blend_equation_advanced", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int HSL_SATURATION = 37550;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_blend_equation_advanced", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int HSL_COLOR = 37551;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_blend_equation_advanced", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int HSL_LUMINOSITY = 37552;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES3_2_compatibility", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_primitive_bounding_box", Api = "gles2")]
	[RequiredByFeature("GL_OES_primitive_bounding_box", Api = "gles2")]
	public const int PRIMITIVE_BOUNDING_BOX = 37566;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_4x4 = 37808;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_5x4 = 37809;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_5x5 = 37810;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_6x5 = 37811;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_6x6 = 37812;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_8x5 = 37813;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_8x6 = 37814;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_8x8 = 37815;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_10x5 = 37816;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_10x6 = 37817;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_10x8 = 37818;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_10x10 = 37819;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_12x10 = 37820;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_12x12 = 37821;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = 37840;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 = 37841;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 = 37842;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 = 37843;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 = 37844;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 = 37845;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 = 37846;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 = 37847;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 = 37848;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 = 37849;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 = 37850;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 = 37851;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 = 37852;

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_hdr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_texture_compression_astc_ldr", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 = 37853;

	public static readonly PlatformExtensionsCollection PlatformExtensions;

	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_KHR_robustness", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_EXT_robustness", Api = "gles1|gles2")]
	public const int CONTEXT_ROBUST_ACCESS = 37107;

	public static readonly KhronosVersion Version_100;

	public static readonly KhronosVersion Version_110;

	public static readonly KhronosVersion Version_120;

	public static readonly KhronosVersion Version_130;

	public static readonly KhronosVersion Version_140;

	public static readonly KhronosVersion Version_150;

	public static readonly KhronosVersion Version_200;

	public static readonly KhronosVersion Version_210;

	public static readonly KhronosVersion Version_300;

	public static readonly KhronosVersion Version_310;

	public static readonly KhronosVersion Version_320;

	public static readonly KhronosVersion Version_330;

	public static readonly KhronosVersion Version_400;

	public static readonly KhronosVersion Version_410;

	public static readonly KhronosVersion Version_420;

	public static readonly KhronosVersion Version_430;

	public static readonly KhronosVersion Version_440;

	public static readonly KhronosVersion Version_450;

	public static readonly KhronosVersion Version_460;

	public static readonly KhronosVersion Version_100_ES;

	public static readonly KhronosVersion Version_200_ES;

	public static readonly KhronosVersion Version_300_ES;

	public static readonly KhronosVersion Version_310_ES;

	public static readonly KhronosVersion Version_320_ES;

	public static readonly KhronosVersion Version_200_SC;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[Log(BitmaskName = "GL")]
	public const uint DEPTH_BUFFER_BIT = 256u;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[Log(BitmaskName = "GL")]
	public const uint STENCIL_BUFFER_BIT = 1024u;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[Log(BitmaskName = "GL")]
	public const uint COLOR_BUFFER_BIT = 16384u;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int FALSE = 0;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int TRUE = 1;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int POINTS = 0;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int LINES = 1;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int LINE_LOOP = 2;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int LINE_STRIP = 3;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int TRIANGLES = 4;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int TRIANGLE_STRIP = 5;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int TRIANGLE_FAN = 6;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int QUADS = 7;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int NEVER = 512;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int LESS = 513;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int EQUAL = 514;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int LEQUAL = 515;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int GREATER = 516;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int NOTEQUAL = 517;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int GEQUAL = 518;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int ALWAYS = 519;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_register_combiners")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	public const int ZERO = 0;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	public const int ONE = 1;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	public const int SRC_COLOR = 768;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	public const int ONE_MINUS_SRC_COLOR = 769;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	public const int SRC_ALPHA = 770;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	public const int ONE_MINUS_SRC_ALPHA = 771;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	public const int DST_ALPHA = 772;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	public const int ONE_MINUS_DST_ALPHA = 773;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	public const int DST_COLOR = 774;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	public const int ONE_MINUS_DST_COLOR = 775;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_EXT_blend_func_extended", Api = "gles2")]
	public const int SRC_ALPHA_SATURATE = 776;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_VERSION_4_6")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_KHR_context_flush_control", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_register_combiners")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int NONE = 0;

	[RequiredByFeature("GL_VERSION_1_0")]
	public const int FRONT_LEFT = 1024;

	[RequiredByFeature("GL_VERSION_1_0")]
	public const int FRONT_RIGHT = 1025;

	[RequiredByFeature("GL_VERSION_1_0")]
	public const int BACK_LEFT = 1026;

	[RequiredByFeature("GL_VERSION_1_0")]
	public const int BACK_RIGHT = 1027;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int FRONT = 1028;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_ES3_1_compatibility", Api = "gl|glcore")]
	public const int BACK = 1029;

	[RequiredByFeature("GL_VERSION_1_0")]
	public const int LEFT = 1030;

	[RequiredByFeature("GL_VERSION_1_0")]
	public const int RIGHT = 1031;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int FRONT_AND_BACK = 1032;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_robustness", Api = "gles1|gles2")]
	[RequiredByFeature("GL_KHR_robustness", Api = "gl|glcore|gles2")]
	public const int NO_ERROR = 0;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int INVALID_ENUM = 1280;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int INVALID_VALUE = 1281;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int INVALID_OPERATION = 1282;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int OUT_OF_MEMORY = 1285;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int CW = 2304;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int CCW = 2305;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int POINT_SIZE = 2833;

	[RequiredByFeature("GL_VERSION_1_0")]
	public const int POINT_SIZE_RANGE = 2834;

	[RequiredByFeature("GL_VERSION_1_0")]
	public const int POINT_SIZE_GRANULARITY = 2835;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int LINE_SMOOTH = 2848;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int LINE_WIDTH = 2849;

	[RequiredByFeature("GL_VERSION_1_0")]
	public const int LINE_WIDTH_RANGE = 2850;

	[RequiredByFeature("GL_VERSION_1_0")]
	public const int LINE_WIDTH_GRANULARITY = 2851;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_NV_polygon_mode", Api = "gles2")]
	public const int POLYGON_MODE = 2880;

	[RequiredByFeature("GL_VERSION_1_0")]
	public const int POLYGON_SMOOTH = 2881;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int CULL_FACE = 2884;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int CULL_FACE_MODE = 2885;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int FRONT_FACE = 2886;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public const int DEPTH_RANGE = 2928;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int DEPTH_TEST = 2929;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int DEPTH_WRITEMASK = 2930;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int DEPTH_CLEAR_VALUE = 2931;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int DEPTH_FUNC = 2932;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int STENCIL_TEST = 2960;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int STENCIL_CLEAR_VALUE = 2961;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int STENCIL_FUNC = 2962;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int STENCIL_VALUE_MASK = 2963;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int STENCIL_FAIL = 2964;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int STENCIL_PASS_DEPTH_FAIL = 2965;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int STENCIL_PASS_DEPTH_PASS = 2966;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int STENCIL_REF = 2967;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int STENCIL_WRITEMASK = 2968;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public const int VIEWPORT = 2978;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int DITHER = 3024;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int BLEND_DST = 3040;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int BLEND_SRC = 3041;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	public const int BLEND = 3042;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int LOGIC_OP_MODE = 3056;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_EXT_multiview_draw_buffers", Api = "gles2")]
	public const int DRAW_BUFFER = 3073;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_multiview_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_read_buffer", Api = "gles2")]
	public const int READ_BUFFER = 3074;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public const int SCISSOR_BOX = 3088;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public const int SCISSOR_TEST = 3089;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int COLOR_CLEAR_VALUE = 3106;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	public const int COLOR_WRITEMASK = 3107;

	[RequiredByFeature("GL_VERSION_1_0")]
	public const int DOUBLEBUFFER = 3122;

	[RequiredByFeature("GL_VERSION_1_0")]
	public const int STEREO = 3123;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int LINE_SMOOTH_HINT = 3154;

	[RequiredByFeature("GL_VERSION_1_0")]
	public const int POLYGON_SMOOTH_HINT = 3155;

	[RequiredByFeature("GL_VERSION_1_0")]
	public const int UNPACK_SWAP_BYTES = 3312;

	[RequiredByFeature("GL_VERSION_1_0")]
	public const int UNPACK_LSB_FIRST = 3313;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_unpack_subimage", Api = "gles2")]
	public const int UNPACK_ROW_LENGTH = 3314;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_unpack_subimage", Api = "gles2")]
	public const int UNPACK_SKIP_ROWS = 3315;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_unpack_subimage", Api = "gles2")]
	public const int UNPACK_SKIP_PIXELS = 3316;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int UNPACK_ALIGNMENT = 3317;

	[RequiredByFeature("GL_VERSION_1_0")]
	public const int PACK_SWAP_BYTES = 3328;

	[RequiredByFeature("GL_VERSION_1_0")]
	public const int PACK_LSB_FIRST = 3329;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int PACK_ROW_LENGTH = 3330;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int PACK_SKIP_ROWS = 3331;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int PACK_SKIP_PIXELS = 3332;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int PACK_ALIGNMENT = 3333;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int MAX_TEXTURE_SIZE = 3379;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int MAX_VIEWPORT_DIMS = 3386;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int SUBPIXEL_BITS = 3408;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int TEXTURE_1D = 3552;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
	public const int TEXTURE_2D = 3553;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	public const int TEXTURE_WIDTH = 4096;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	public const int TEXTURE_HEIGHT = 4097;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_NV_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public const int TEXTURE_BORDER_COLOR = 4100;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int DONT_CARE = 4352;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int FASTEST = 4353;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int NICEST = 4354;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_render_snorm", Api = "gles2")]
	[RequiredByFeature("GL_OES_byte_coordinates", Api = "gl|gles1")]
	public const int BYTE = 5120;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int UNSIGNED_BYTE = 5121;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_render_snorm", Api = "gles2")]
	public const int SHORT = 5122;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ANGLE_depth_texture", Api = "gles2")]
	[RequiredByFeature("GL_OES_depth_texture", Api = "gles2")]
	public const int UNSIGNED_SHORT = 5123;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int INT = 5124;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ANGLE_depth_texture", Api = "gles2")]
	[RequiredByFeature("GL_OES_depth_texture", Api = "gles2")]
	[RequiredByFeature("GL_OES_element_index_uint", Api = "gles1|gles2")]
	public const int UNSIGNED_INT = 5125;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_OES_texture_float", Api = "gles2")]
	public const int FLOAT = 5126;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int STACK_OVERFLOW = 1283;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int STACK_UNDERFLOW = 1284;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int CLEAR = 5376;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int AND = 5377;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int AND_REVERSE = 5378;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int COPY = 5379;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int AND_INVERTED = 5380;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int NOOP = 5381;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int XOR = 5382;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int OR = 5383;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int NOR = 5384;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int EQUIV = 5385;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int INVERT = 5386;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int OR_REVERSE = 5387;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int COPY_INVERTED = 5388;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int OR_INVERTED = 5389;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int NAND = 5390;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int SET = 5391;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int TEXTURE = 5890;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_discard_framebuffer", Api = "gles1|gles2")]
	public const int COLOR = 6144;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_discard_framebuffer", Api = "gles1|gles2")]
	public const int DEPTH = 6145;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_discard_framebuffer", Api = "gles1|gles2")]
	public const int STENCIL = 6146;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_stencil8", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_texture_stencil8", Api = "gles2")]
	public const int STENCIL_INDEX = 6401;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ANGLE_depth_texture", Api = "gles2")]
	[RequiredByFeature("GL_OES_depth_texture", Api = "gles2")]
	public const int DEPTH_COMPONENT = 6402;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_AMD_interleaved_elements")]
	[RequiredByFeature("GL_EXT_texture_rg", Api = "gles2")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int RED = 6403;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_AMD_interleaved_elements")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int GREEN = 6404;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_AMD_interleaved_elements")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int BLUE = 6405;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_AMD_interleaved_elements")]
	public const int ALPHA = 6406;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int RGB = 6407;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int RGBA = 6408;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_NV_polygon_mode", Api = "gles2")]
	public const int POINT = 6912;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_NV_polygon_mode", Api = "gles2")]
	public const int LINE = 6913;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_NV_polygon_mode", Api = "gles2")]
	public const int FILL = 6914;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int KEEP = 7680;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int REPLACE = 7681;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int INCR = 7682;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int DECR = 7683;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int VENDOR = 7936;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int RENDERER = 7937;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int VERSION = 7938;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int EXTENSIONS = 7939;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int NEAREST = 9728;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int LINEAR = 9729;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int NEAREST_MIPMAP_NEAREST = 9984;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int LINEAR_MIPMAP_NEAREST = 9985;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int NEAREST_MIPMAP_LINEAR = 9986;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int LINEAR_MIPMAP_LINEAR = 9987;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int TEXTURE_MAG_FILTER = 10240;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int TEXTURE_MIN_FILTER = 10241;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int TEXTURE_WRAP_S = 10242;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int TEXTURE_WRAP_T = 10243;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int REPEAT = 10497;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint CURRENT_BIT = 1u;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint POINT_BIT = 2u;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint LINE_BIT = 4u;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint POLYGON_BIT = 8u;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint POLYGON_STIPPLE_BIT = 16u;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint PIXEL_MODE_BIT = 32u;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint LIGHTING_BIT = 64u;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint FOG_BIT = 128u;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint ACCUM_BUFFER_BIT = 512u;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint VIEWPORT_BIT = 2048u;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint TRANSFORM_BIT = 4096u;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint ENABLE_BIT = 8192u;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint HINT_BIT = 32768u;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint EVAL_BIT = 65536u;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint LIST_BIT = 131072u;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint TEXTURE_BIT = 262144u;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint SCISSOR_BIT = 524288u;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint ALL_ATTRIB_BITS = uint.MaxValue;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int QUAD_STRIP = 8;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int POLYGON = 9;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ACCUM = 256;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LOAD = 257;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int RETURN = 258;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MULT = 259;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ADD = 260;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int AUX0 = 1033;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int AUX1 = 1034;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int AUX2 = 1035;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int AUX3 = 1036;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int _2D = 1536;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int _3D = 1537;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int _3D_COLOR = 1538;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int _3D_COLOR_TEXTURE = 1539;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int _4D_COLOR_TEXTURE = 1540;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PASS_THROUGH_TOKEN = 1792;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int POINT_TOKEN = 1793;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LINE_TOKEN = 1794;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int POLYGON_TOKEN = 1795;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int BITMAP_TOKEN = 1796;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int DRAW_PIXEL_TOKEN = 1797;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COPY_PIXEL_TOKEN = 1798;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LINE_RESET_TOKEN = 1799;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int EXP = 2048;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int EXP2 = 2049;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COEFF = 2560;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ORDER = 2561;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int DOMAIN = 2562;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PIXEL_MAP_I_TO_I = 3184;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PIXEL_MAP_S_TO_S = 3185;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PIXEL_MAP_I_TO_R = 3186;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PIXEL_MAP_I_TO_G = 3187;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PIXEL_MAP_I_TO_B = 3188;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PIXEL_MAP_I_TO_A = 3189;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PIXEL_MAP_R_TO_R = 3190;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PIXEL_MAP_G_TO_G = 3191;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PIXEL_MAP_B_TO_B = 3192;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PIXEL_MAP_A_TO_A = 3193;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CURRENT_COLOR = 2816;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CURRENT_INDEX = 2817;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CURRENT_NORMAL = 2818;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CURRENT_TEXTURE_COORDS = 2819;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CURRENT_RASTER_COLOR = 2820;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CURRENT_RASTER_INDEX = 2821;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CURRENT_RASTER_TEXTURE_COORDS = 2822;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CURRENT_RASTER_POSITION = 2823;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CURRENT_RASTER_POSITION_VALID = 2824;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CURRENT_RASTER_DISTANCE = 2825;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int POINT_SMOOTH = 2832;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LINE_STIPPLE = 2852;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LINE_STIPPLE_PATTERN = 2853;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LINE_STIPPLE_REPEAT = 2854;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LIST_MODE = 2864;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAX_LIST_NESTING = 2865;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LIST_BASE = 2866;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LIST_INDEX = 2867;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int POLYGON_STIPPLE = 2882;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int EDGE_FLAG = 2883;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LIGHTING = 2896;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LIGHT_MODEL_LOCAL_VIEWER = 2897;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LIGHT_MODEL_TWO_SIDE = 2898;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LIGHT_MODEL_AMBIENT = 2899;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SHADE_MODEL = 2900;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COLOR_MATERIAL_FACE = 2901;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COLOR_MATERIAL_PARAMETER = 2902;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COLOR_MATERIAL = 2903;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_NV_register_combiners")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FOG = 2912;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FOG_INDEX = 2913;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FOG_DENSITY = 2914;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FOG_START = 2915;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FOG_END = 2916;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FOG_MODE = 2917;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FOG_COLOR = 2918;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ACCUM_CLEAR_VALUE = 2944;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MATRIX_MODE = 2976;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int NORMALIZE = 2977;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MODELVIEW_STACK_DEPTH = 2979;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PROJECTION_STACK_DEPTH = 2980;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_STACK_DEPTH = 2981;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MODELVIEW_MATRIX = 2982;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PROJECTION_MATRIX = 2983;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_MATRIX = 2984;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ATTRIB_STACK_DEPTH = 2992;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_QCOM_alpha_test", Api = "gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ALPHA_TEST = 3008;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_QCOM_alpha_test", Api = "gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ALPHA_TEST_FUNC = 3009;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_QCOM_alpha_test", Api = "gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ALPHA_TEST_REF = 3010;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LOGIC_OP = 3057;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int AUX_BUFFERS = 3072;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int INDEX_CLEAR_VALUE = 3104;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int INDEX_WRITEMASK = 3105;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int INDEX_MODE = 3120;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int RGBA_MODE = 3121;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int RENDER_MODE = 3136;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PERSPECTIVE_CORRECTION_HINT = 3152;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int POINT_SMOOTH_HINT = 3153;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FOG_HINT = 3156;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_GEN_S = 3168;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_GEN_T = 3169;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_GEN_R = 3170;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_GEN_Q = 3171;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PIXEL_MAP_I_TO_I_SIZE = 3248;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PIXEL_MAP_S_TO_S_SIZE = 3249;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PIXEL_MAP_I_TO_R_SIZE = 3250;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PIXEL_MAP_I_TO_G_SIZE = 3251;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PIXEL_MAP_I_TO_B_SIZE = 3252;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PIXEL_MAP_I_TO_A_SIZE = 3253;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PIXEL_MAP_R_TO_R_SIZE = 3254;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PIXEL_MAP_G_TO_G_SIZE = 3255;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PIXEL_MAP_B_TO_B_SIZE = 3256;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PIXEL_MAP_A_TO_A_SIZE = 3257;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP_COLOR = 3344;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP_STENCIL = 3345;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int INDEX_SHIFT = 3346;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int INDEX_OFFSET = 3347;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int RED_SCALE = 3348;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int RED_BIAS = 3349;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ZOOM_X = 3350;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ZOOM_Y = 3351;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int GREEN_SCALE = 3352;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int GREEN_BIAS = 3353;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int BLUE_SCALE = 3354;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int BLUE_BIAS = 3355;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ALPHA_SCALE = 3356;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ALPHA_BIAS = 3357;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int DEPTH_SCALE = 3358;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int DEPTH_BIAS = 3359;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAX_EVAL_ORDER = 3376;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAX_LIGHTS = 3377;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_IMG_user_clip_plane", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAX_CLIP_PLANES = 3378;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAX_PIXEL_MAP_TABLE = 3380;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAX_ATTRIB_STACK_DEPTH = 3381;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAX_MODELVIEW_STACK_DEPTH = 3382;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAX_NAME_STACK_DEPTH = 3383;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAX_PROJECTION_STACK_DEPTH = 3384;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAX_TEXTURE_STACK_DEPTH = 3385;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int INDEX_BITS = 3409;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int RED_BITS = 3410;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int GREEN_BITS = 3411;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int BLUE_BITS = 3412;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ALPHA_BITS = 3413;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int DEPTH_BITS = 3414;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int STENCIL_BITS = 3415;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ACCUM_RED_BITS = 3416;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ACCUM_GREEN_BITS = 3417;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ACCUM_BLUE_BITS = 3418;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ACCUM_ALPHA_BITS = 3419;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int NAME_STACK_DEPTH = 3440;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int AUTO_NORMAL = 3456;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP1_COLOR_4 = 3472;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP1_INDEX = 3473;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP1_NORMAL = 3474;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP1_TEXTURE_COORD_1 = 3475;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP1_TEXTURE_COORD_2 = 3476;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP1_TEXTURE_COORD_3 = 3477;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP1_TEXTURE_COORD_4 = 3478;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP1_VERTEX_3 = 3479;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP1_VERTEX_4 = 3480;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP2_COLOR_4 = 3504;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP2_INDEX = 3505;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP2_NORMAL = 3506;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP2_TEXTURE_COORD_1 = 3507;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP2_TEXTURE_COORD_2 = 3508;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP2_TEXTURE_COORD_3 = 3509;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP2_TEXTURE_COORD_4 = 3510;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP2_VERTEX_3 = 3511;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP2_VERTEX_4 = 3512;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP1_GRID_DOMAIN = 3536;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP1_GRID_SEGMENTS = 3537;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP2_GRID_DOMAIN = 3538;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAP2_GRID_SEGMENTS = 3539;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_COMPONENTS = 4099;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_BORDER = 4101;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int AMBIENT = 4608;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int DIFFUSE = 4609;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SPECULAR = 4610;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int POSITION = 4611;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SPOT_DIRECTION = 4612;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SPOT_EXPONENT = 4613;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SPOT_CUTOFF = 4614;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CONSTANT_ATTENUATION = 4615;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LINEAR_ATTENUATION = 4616;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int QUADRATIC_ATTENUATION = 4617;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COMPILE = 4864;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COMPILE_AND_EXECUTE = 4865;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int _2_BYTES = 5127;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int _3_BYTES = 5128;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int _4_BYTES = 5129;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int EMISSION = 5632;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SHININESS = 5633;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int AMBIENT_AND_DIFFUSE = 5634;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COLOR_INDEXES = 5635;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MODELVIEW = 5888;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PROJECTION = 5889;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COLOR_INDEX = 6400;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LUMINANCE = 6409;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LUMINANCE_ALPHA = 6410;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int BITMAP = 6656;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int RENDER = 7168;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FEEDBACK = 7169;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SELECT = 7170;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FLAT = 7424;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SMOOTH = 7425;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int S = 8192;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int T = 8193;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int R = 8194;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int Q = 8195;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MODULATE = 8448;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int DECAL = 8449;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_ENV_MODE = 8704;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_ENV_COLOR = 8705;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_ENV = 8960;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int EYE_LINEAR = 9216;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int OBJECT_LINEAR = 9217;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SPHERE_MAP = 9218;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_GEN_MODE = 9472;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int OBJECT_PLANE = 9473;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_NV_fog_distance")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int EYE_PLANE = 9474;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CLAMP = 10496;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_IMG_user_clip_plane", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CLIP_PLANE0 = 12288;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_IMG_user_clip_plane", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CLIP_PLANE1 = 12289;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_IMG_user_clip_plane", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CLIP_PLANE2 = 12290;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_IMG_user_clip_plane", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CLIP_PLANE3 = 12291;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_IMG_user_clip_plane", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CLIP_PLANE4 = 12292;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_IMG_user_clip_plane", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CLIP_PLANE5 = 12293;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LIGHT0 = 16384;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LIGHT1 = 16385;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LIGHT2 = 16386;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LIGHT3 = 16387;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LIGHT4 = 16388;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LIGHT5 = 16389;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LIGHT6 = 16390;

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LIGHT7 = 16391;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int COLOR_LOGIC_OP = 3058;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int POLYGON_OFFSET_UNITS = 10752;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_NV_polygon_mode", Api = "gles2")]
	public const int POLYGON_OFFSET_POINT = 10753;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_NV_polygon_mode", Api = "gles2")]
	public const int POLYGON_OFFSET_LINE = 10754;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int POLYGON_OFFSET_FILL = 32823;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_polygon_offset")]
	public const int POLYGON_OFFSET_FACTOR = 32824;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public const int TEXTURE_BINDING_1D = 32872;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public const int TEXTURE_BINDING_2D = 32873;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	public const int TEXTURE_INTERNAL_FORMAT = 4099;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture")]
	public const int TEXTURE_RED_SIZE = 32860;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture")]
	public const int TEXTURE_GREEN_SIZE = 32861;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture")]
	public const int TEXTURE_BLUE_SIZE = 32862;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture")]
	public const int TEXTURE_ALPHA_SIZE = 32863;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public const int DOUBLE = 5130;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	public const int PROXY_TEXTURE_1D = 32867;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	public const int PROXY_TEXTURE_2D = 32868;

	[RequiredByFeature("GL_VERSION_1_1")]
	public const int R3_G3_B2 = 10768;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	public const int RGB4 = 32847;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	public const int RGB5 = 32848;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_texture")]
	[RequiredByFeature("GL_OES_required_internalformat", Api = "gles1|gles2")]
	[RequiredByFeature("GL_OES_rgb8_rgba8", Api = "gles1|gles2|glsc2")]
	public const int RGB8 = 32849;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	[RequiredByFeature("GL_OES_required_internalformat", Api = "gles1|gles2")]
	public const int RGB10 = 32850;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	public const int RGB12 = 32851;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RequiredByFeature("GL_EXT_texture_norm16", Api = "gles2")]
	public const int RGB16 = 32852;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	public const int RGBA2 = 32853;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_texture")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	[RequiredByFeature("GL_OES_required_internalformat", Api = "gles1|gles2")]
	public const int RGBA4 = 32854;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_texture")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	[RequiredByFeature("GL_OES_required_internalformat", Api = "gles1|gles2")]
	public const int RGB5_A1 = 32855;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_texture")]
	[RequiredByFeature("GL_OES_required_internalformat", Api = "gles1|gles2")]
	[RequiredByFeature("GL_OES_rgb8_rgba8", Api = "gles1|gles2|glsc2")]
	public const int RGBA8 = 32856;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	[RequiredByFeature("GL_OES_required_internalformat", Api = "gles1|gles2")]
	public const int RGB10_A2 = 32857;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	public const int RGBA12 = 32858;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RequiredByFeature("GL_EXT_texture_norm16", Api = "gles2")]
	public const int RGBA16 = 32859;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint CLIENT_PIXEL_STORE_BIT = 1u;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint CLIENT_VERTEX_ARRAY_BIT = 2u;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint CLIENT_ALL_ATTRIB_BITS = uint.MaxValue;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int VERTEX_ARRAY_POINTER = 32910;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int NORMAL_ARRAY_POINTER = 32911;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COLOR_ARRAY_POINTER = 32912;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int INDEX_ARRAY_POINTER = 32913;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_COORD_ARRAY_POINTER = 32914;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int EDGE_FLAG_ARRAY_POINTER = 32915;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FEEDBACK_BUFFER_POINTER = 3568;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SELECTION_BUFFER_POINTER = 3571;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CLIENT_ATTRIB_STACK_DEPTH = 2993;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int INDEX_LOGIC_OP = 3057;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAX_CLIENT_ATTRIB_STACK_DEPTH = 3387;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FEEDBACK_BUFFER_SIZE = 3569;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FEEDBACK_BUFFER_TYPE = 3570;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SELECTION_BUFFER_SIZE = 3572;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int VERTEX_ARRAY = 32884;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int NORMAL_ARRAY = 32885;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COLOR_ARRAY = 32886;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int INDEX_ARRAY = 32887;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_COORD_ARRAY = 32888;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int EDGE_FLAG_ARRAY = 32889;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int VERTEX_ARRAY_SIZE = 32890;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int VERTEX_ARRAY_TYPE = 32891;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int VERTEX_ARRAY_STRIDE = 32892;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int NORMAL_ARRAY_TYPE = 32894;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int NORMAL_ARRAY_STRIDE = 32895;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COLOR_ARRAY_SIZE = 32897;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COLOR_ARRAY_TYPE = 32898;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COLOR_ARRAY_STRIDE = 32899;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int INDEX_ARRAY_TYPE = 32901;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int INDEX_ARRAY_STRIDE = 32902;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_COORD_ARRAY_SIZE = 32904;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_COORD_ARRAY_TYPE = 32905;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_COORD_ARRAY_STRIDE = 32906;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int EDGE_FLAG_ARRAY_STRIDE = 32908;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_LUMINANCE_SIZE = 32864;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_INTENSITY_SIZE = 32865;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture_object")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_PRIORITY = 32870;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture_object")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_RESIDENT = 32871;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ALPHA4 = 32827;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	[RequiredByFeature("GL_OES_required_internalformat", Api = "gles1|gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ALPHA8 = 32828;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ALPHA12 = 32829;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ALPHA16 = 32830;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LUMINANCE4 = 32831;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	[RequiredByFeature("GL_OES_required_internalformat", Api = "gles1|gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LUMINANCE8 = 32832;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LUMINANCE12 = 32833;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LUMINANCE16 = 32834;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RequiredByFeature("GL_OES_required_internalformat", Api = "gles1|gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LUMINANCE4_ALPHA4 = 32835;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LUMINANCE6_ALPHA2 = 32836;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	[RequiredByFeature("GL_OES_required_internalformat", Api = "gles1|gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LUMINANCE8_ALPHA8 = 32837;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LUMINANCE12_ALPHA4 = 32838;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LUMINANCE12_ALPHA12 = 32839;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LUMINANCE16_ALPHA16 = 32840;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int INTENSITY = 32841;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int INTENSITY4 = 32842;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int INTENSITY8 = 32843;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int INTENSITY12 = 32844;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int INTENSITY16 = 32845;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int V2F = 10784;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int V3F = 10785;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int C4UB_V2F = 10786;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int C4UB_V3F = 10787;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int C3F_V3F = 10788;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int N3F_V3F = 10789;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int C4F_N3F_V3F = 10790;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int T2F_V3F = 10791;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int T4F_V4F = 10792;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int T2F_C4UB_V3F = 10793;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int T2F_C3F_V3F = 10794;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int T2F_N3F_V3F = 10795;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int T2F_C4F_N3F_V3F = 10796;

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int T4F_C4F_N3F_V4F = 10797;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_EXT_packed_pixels")]
	public const int UNSIGNED_BYTE_3_3_2 = 32818;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_packed_pixels")]
	public const int UNSIGNED_SHORT_4_4_4_4 = 32819;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_packed_pixels")]
	public const int UNSIGNED_SHORT_5_5_5_1 = 32820;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_EXT_packed_pixels")]
	public const int UNSIGNED_INT_8_8_8_8 = 32821;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_EXT_packed_pixels")]
	public const int UNSIGNED_INT_10_10_10_2 = 32822;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
	public const int TEXTURE_BINDING_3D = 32874;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_EXT_texture3D")]
	public const int PACK_SKIP_IMAGES = 32875;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_EXT_texture3D")]
	public const int PACK_IMAGE_HEIGHT = 32876;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture3D")]
	public const int UNPACK_SKIP_IMAGES = 32877;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture3D")]
	public const int UNPACK_IMAGE_HEIGHT = 32878;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture3D")]
	[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
	public const int TEXTURE_3D = 32879;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_EXT_texture3D")]
	public const int PROXY_TEXTURE_3D = 32880;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture3D")]
	public const int TEXTURE_DEPTH = 32881;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture3D")]
	[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
	public const int TEXTURE_WRAP_R = 32882;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture3D")]
	[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
	public const int MAX_3D_TEXTURE_SIZE = 32883;

	[RequiredByFeature("GL_VERSION_1_2")]
	public const int UNSIGNED_BYTE_2_3_3_REV = 33634;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int UNSIGNED_SHORT_5_6_5 = 33635;

	[RequiredByFeature("GL_VERSION_1_2")]
	public const int UNSIGNED_SHORT_5_6_5_REV = 33636;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_EXT_read_format_bgra", Api = "gles1|gles2")]
	[RequiredByFeature("GL_IMG_read_format", Api = "gles1|gles2")]
	public const int UNSIGNED_SHORT_4_4_4_4_REV = 33637;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_EXT_read_format_bgra", Api = "gles1|gles2")]
	public const int UNSIGNED_SHORT_1_5_5_5_REV = 33638;

	[RequiredByFeature("GL_VERSION_1_2")]
	public const int UNSIGNED_INT_8_8_8_8_REV = 33639;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_type_2_10_10_10_REV", Api = "gles2")]
	public const int UNSIGNED_INT_2_10_10_10_REV = 33640;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_EXT_bgra")]
	[RequiredByFeature("GL_MESA_bgra", Api = "gles2")]
	public const int BGR = 32992;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ARB_vertex_array_bgra", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_array_bgra")]
	[RequiredByFeature("GL_APPLE_texture_format_BGRA8888", Api = "gles1|gles2")]
	[RequiredByFeature("GL_EXT_bgra")]
	[RequiredByFeature("GL_EXT_read_format_bgra", Api = "gles1|gles2")]
	[RequiredByFeature("GL_EXT_texture_format_BGRA8888", Api = "gles1|gles2")]
	[RequiredByFeature("GL_MESA_bgra", Api = "gles2")]
	[RequiredByFeature("GL_IMG_read_format", Api = "gles1|gles2")]
	public const int BGRA = 32993;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_draw_range_elements")]
	public const int MAX_ELEMENTS_VERTICES = 33000;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_draw_range_elements")]
	public const int MAX_ELEMENTS_INDICES = 33001;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_SGIS_texture_edge_clamp")]
	public const int CLAMP_TO_EDGE = 33071;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_SGIS_texture_lod")]
	public const int TEXTURE_MIN_LOD = 33082;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_SGIS_texture_lod")]
	public const int TEXTURE_MAX_LOD = 33083;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_SGIS_texture_lod")]
	public const int TEXTURE_BASE_LEVEL = 33084;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_texture_max_level", Api = "gles1|gles2")]
	[RequiredByFeature("GL_SGIS_texture_lod")]
	public const int TEXTURE_MAX_LEVEL = 33085;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int ALIASED_LINE_WIDTH_RANGE = 33902;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_EXT_rescale_normal")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int RESCALE_NORMAL = 32826;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_EXT_separate_specular_color")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int LIGHT_MODEL_COLOR_CONTROL = 33272;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_EXT_separate_specular_color")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SINGLE_COLOR = 33273;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_EXT_separate_specular_color")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SEPARATE_SPECULAR_COLOR = 33274;

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ALIASED_POINT_SIZE_RANGE = 33901;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RequiredByFeature("GL_NV_register_combiners")]
	public const int TEXTURE0 = 33984;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RequiredByFeature("GL_NV_register_combiners")]
	public const int TEXTURE1 = 33985;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE2 = 33986;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE3 = 33987;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE4 = 33988;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE5 = 33989;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE6 = 33990;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE7 = 33991;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE8 = 33992;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE9 = 33993;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE10 = 33994;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE11 = 33995;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE12 = 33996;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE13 = 33997;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE14 = 33998;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE15 = 33999;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE16 = 34000;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE17 = 34001;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE18 = 34002;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE19 = 34003;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE20 = 34004;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE21 = 34005;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE22 = 34006;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE23 = 34007;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE24 = 34008;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE25 = 34009;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE26 = 34010;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE27 = 34011;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE28 = 34012;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE29 = 34013;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE30 = 34014;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int TEXTURE31 = 34015;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public const int ACTIVE_TEXTURE = 34016;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_multisample")]
	[RequiredByFeature("GL_EXT_multisample")]
	[RequiredByFeature("GL_EXT_multisampled_compatibility", Api = "gles2")]
	[RequiredByFeature("GL_SGIS_multisample")]
	public const int MULTISAMPLE = 32925;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multisample")]
	public const int SAMPLE_ALPHA_TO_COVERAGE = 32926;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_multisample")]
	[RequiredByFeature("GL_EXT_multisample")]
	[RequiredByFeature("GL_EXT_multisampled_compatibility", Api = "gles2")]
	[RequiredByFeature("GL_SGIS_multisample")]
	public const int SAMPLE_ALPHA_TO_ONE = 32927;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multisample")]
	public const int SAMPLE_COVERAGE = 32928;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multisample")]
	[RequiredByFeature("GL_EXT_multisample")]
	[RequiredByFeature("GL_SGIS_multisample")]
	public const int SAMPLE_BUFFERS = 32936;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_multisample")]
	[RequiredByFeature("GL_NV_multisample_coverage")]
	[RequiredByFeature("GL_EXT_multisample")]
	[RequiredByFeature("GL_SGIS_multisample")]
	public const int SAMPLES = 32937;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multisample")]
	public const int SAMPLE_COVERAGE_VALUE = 32938;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multisample")]
	public const int SAMPLE_COVERAGE_INVERT = 32939;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_cube_map")]
	[RequiredByFeature("GL_EXT_texture_cube_map")]
	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	public const int TEXTURE_CUBE_MAP = 34067;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_texture_cube_map")]
	[RequiredByFeature("GL_EXT_texture_cube_map")]
	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	public const int TEXTURE_BINDING_CUBE_MAP = 34068;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_cube_map")]
	[RequiredByFeature("GL_EXT_texture_cube_map")]
	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	public const int TEXTURE_CUBE_MAP_POSITIVE_X = 34069;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_cube_map")]
	[RequiredByFeature("GL_EXT_texture_cube_map")]
	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	public const int TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_cube_map")]
	[RequiredByFeature("GL_EXT_texture_cube_map")]
	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	public const int TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_cube_map")]
	[RequiredByFeature("GL_EXT_texture_cube_map")]
	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	public const int TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_cube_map")]
	[RequiredByFeature("GL_EXT_texture_cube_map")]
	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	public const int TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_cube_map")]
	[RequiredByFeature("GL_EXT_texture_cube_map")]
	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	public const int TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_cube_map")]
	[RequiredByFeature("GL_EXT_texture_cube_map")]
	public const int PROXY_TEXTURE_CUBE_MAP = 34075;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_cube_map")]
	[RequiredByFeature("GL_EXT_texture_cube_map")]
	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	public const int MAX_CUBE_MAP_TEXTURE_SIZE = 34076;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public const int COMPRESSED_RGB = 34029;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public const int COMPRESSED_RGBA = 34030;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public const int TEXTURE_COMPRESSION_HINT = 34031;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public const int TEXTURE_COMPRESSED_IMAGE_SIZE = 34464;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public const int TEXTURE_COMPRESSED = 34465;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public const int NUM_COMPRESSED_TEXTURE_FORMATS = 34466;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public const int COMPRESSED_TEXTURE_FORMATS = 34467;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_border_clamp", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_NV_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_SGIS_texture_border_clamp")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public const int CLAMP_TO_BORDER = 33069;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CLIENT_ACTIVE_TEXTURE = 34017;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAX_TEXTURE_UNITS = 34018;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_transpose_matrix")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TRANSPOSE_MODELVIEW_MATRIX = 34019;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_transpose_matrix")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TRANSPOSE_PROJECTION_MATRIX = 34020;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_transpose_matrix")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TRANSPOSE_TEXTURE_MATRIX = 34021;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_transpose_matrix")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TRANSPOSE_COLOR_MATRIX = 34022;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multisample")]
	[RequiredByFeature("GL_EXT_multisample")]
	[RequiredByFeature("GL_3DFX_multisample")]
	[RemovedByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint MULTISAMPLE_BIT = 536870912u;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_cube_map")]
	[RequiredByFeature("GL_EXT_texture_cube_map")]
	[RequiredByFeature("GL_NV_texgen_reflection")]
	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int NORMAL_MAP = 34065;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_cube_map")]
	[RequiredByFeature("GL_EXT_texture_cube_map")]
	[RequiredByFeature("GL_NV_texgen_reflection")]
	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int REFLECTION_MAP = 34066;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COMPRESSED_ALPHA = 34025;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COMPRESSED_LUMINANCE = 34026;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COMPRESSED_LUMINANCE_ALPHA = 34027;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COMPRESSED_INTENSITY = 34028;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COMBINE = 34160;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COMBINE_RGB = 34161;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COMBINE_ALPHA = 34162;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SOURCE0_RGB = 34176;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SOURCE1_RGB = 34177;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SOURCE2_RGB = 34178;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SOURCE0_ALPHA = 34184;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SOURCE1_ALPHA = 34185;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SOURCE2_ALPHA = 34186;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int OPERAND0_RGB = 34192;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int OPERAND1_RGB = 34193;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int OPERAND2_RGB = 34194;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int OPERAND0_ALPHA = 34200;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int OPERAND1_ALPHA = 34201;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int OPERAND2_ALPHA = 34202;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int RGB_SCALE = 34163;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ADD_SIGNED = 34164;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int INTERPOLATE = 34165;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SUBTRACT = 34023;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CONSTANT = 34166;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PRIMARY_COLOR = 34167;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_texture_env_combine")]
	[RequiredByFeature("GL_EXT_texture_env_combine")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int PREVIOUS = 34168;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_texture_env_dot3")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int DOT3_RGB = 34478;

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_texture_env_dot3")]
	[RequiredByFeature("GL_IMG_texture_env_enhanced_fixed_function", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int DOT3_RGBA = 34479;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_EXT_blend_func_separate")]
	[RequiredByFeature("GL_OES_blend_func_separate", Api = "gles1")]
	public const int BLEND_DST_RGB = 32968;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_EXT_blend_func_separate")]
	[RequiredByFeature("GL_OES_blend_func_separate", Api = "gles1")]
	public const int BLEND_SRC_RGB = 32969;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_EXT_blend_func_separate")]
	[RequiredByFeature("GL_OES_blend_func_separate", Api = "gles1")]
	public const int BLEND_DST_ALPHA = 32970;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_EXT_blend_func_separate")]
	[RequiredByFeature("GL_OES_blend_func_separate", Api = "gles1")]
	public const int BLEND_SRC_ALPHA = 32971;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_point_parameters")]
	[RequiredByFeature("GL_EXT_point_parameters")]
	[RequiredByFeature("GL_SGIS_point_parameters")]
	public const int POINT_FADE_THRESHOLD_SIZE = 33064;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ANGLE_depth_texture", Api = "gles2")]
	[RequiredByFeature("GL_ARB_depth_texture")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	[RequiredByFeature("GL_OES_required_internalformat", Api = "gles1|gles2")]
	[RequiredByFeature("GL_SGIX_depth_texture")]
	public const int DEPTH_COMPONENT16 = 33189;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_depth_texture")]
	[RequiredByFeature("GL_OES_depth24", Api = "gles1|gles2|glsc2")]
	[RequiredByFeature("GL_OES_required_internalformat", Api = "gles1|gles2")]
	[RequiredByFeature("GL_SGIX_depth_texture")]
	public const int DEPTH_COMPONENT24 = 33190;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ARB_depth_texture")]
	[RequiredByFeature("GL_ANGLE_depth_texture", Api = "gles2")]
	[RequiredByFeature("GL_OES_depth32", Api = "gles1|gles2|glsc2")]
	[RequiredByFeature("GL_OES_required_internalformat", Api = "gles1|gles2")]
	[RequiredByFeature("GL_SGIX_depth_texture")]
	public const int DEPTH_COMPONENT32 = 33191;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_texture_mirrored_repeat", Api = "gl|glcore")]
	[RequiredByFeature("GL_IBM_texture_mirrored_repeat")]
	[RequiredByFeature("GL_OES_texture_mirrored_repeat", Api = "gles1")]
	public const int MIRRORED_REPEAT = 33648;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_lod_bias", Api = "gl|gles1")]
	public const int MAX_TEXTURE_LOD_BIAS = 34045;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_texture_lod_bias", Api = "gl|gles1")]
	public const int TEXTURE_LOD_BIAS = 34049;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_stencil_wrap")]
	[RequiredByFeature("GL_OES_stencil_wrap", Api = "gles1")]
	public const int INCR_WRAP = 34055;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_stencil_wrap")]
	[RequiredByFeature("GL_OES_stencil_wrap", Api = "gles1")]
	public const int DECR_WRAP = 34056;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_depth_texture")]
	public const int TEXTURE_DEPTH_SIZE = 34890;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shadow")]
	[RequiredByFeature("GL_EXT_shadow_samplers", Api = "gles2")]
	public const int TEXTURE_COMPARE_MODE = 34892;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shadow")]
	[RequiredByFeature("GL_EXT_shadow_samplers", Api = "gles2")]
	public const int TEXTURE_COMPARE_FUNC = 34893;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_point_parameters")]
	[RequiredByFeature("GL_EXT_point_parameters")]
	[RequiredByFeature("GL_SGIS_point_parameters")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int POINT_SIZE_MIN = 33062;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_point_parameters")]
	[RequiredByFeature("GL_EXT_point_parameters")]
	[RequiredByFeature("GL_SGIS_point_parameters")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int POINT_SIZE_MAX = 33063;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_point_parameters")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int POINT_DISTANCE_ATTENUATION = 33065;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_SGIS_generate_mipmap")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int GENERATE_MIPMAP = 33169;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_SGIS_generate_mipmap")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int GENERATE_MIPMAP_HINT = 33170;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_fog_coord")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FOG_COORDINATE_SOURCE = 33872;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_fog_coord")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FOG_COORDINATE = 33873;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_fog_coord")]
	[RequiredByFeature("GL_EXT_light_texture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FRAGMENT_DEPTH = 33874;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_fog_coord")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CURRENT_FOG_COORDINATE = 33875;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_fog_coord")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FOG_COORDINATE_ARRAY_TYPE = 33876;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_fog_coord")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FOG_COORDINATE_ARRAY_STRIDE = 33877;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_fog_coord")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FOG_COORDINATE_ARRAY_POINTER = 33878;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_fog_coord")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FOG_COORDINATE_ARRAY = 33879;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COLOR_SUM = 33880;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CURRENT_SECONDARY_COLOR = 33881;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SECONDARY_COLOR_ARRAY_SIZE = 33882;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SECONDARY_COLOR_ARRAY_TYPE = 33883;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SECONDARY_COLOR_ARRAY_STRIDE = 33884;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SECONDARY_COLOR_ARRAY_POINTER = 33885;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SECONDARY_COLOR_ARRAY = 33886;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_texture_lod_bias", Api = "gl|gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_FILTER_CONTROL = 34048;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ARB_depth_texture")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int DEPTH_TEXTURE_MODE = 34891;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ARB_shadow")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COMPARE_R_TO_TEXTURE = 34894;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_blend_color")]
	public const int BLEND_COLOR = 32773;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_blend_minmax", Api = "gl|gles1|gles2")]
	[RequiredByFeature("GL_OES_blend_subtract", Api = "gles1")]
	public const int BLEND_EQUATION = 32777;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_EXT_blend_color")]
	public const int CONSTANT_COLOR = 32769;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_EXT_blend_color")]
	public const int ONE_MINUS_CONSTANT_COLOR = 32770;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_EXT_blend_color")]
	public const int CONSTANT_ALPHA = 32771;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_EXT_blend_color")]
	public const int ONE_MINUS_CONSTANT_ALPHA = 32772;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_EXT_blend_minmax", Api = "gl|gles1|gles2")]
	[RequiredByFeature("GL_OES_blend_subtract", Api = "gles1")]
	public const int FUNC_ADD = 32774;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_EXT_blend_subtract")]
	[RequiredByFeature("GL_OES_blend_subtract", Api = "gles1")]
	public const int FUNC_REVERSE_SUBTRACT = 32779;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_EXT_blend_subtract")]
	[RequiredByFeature("GL_OES_blend_subtract", Api = "gles1")]
	public const int FUNC_SUBTRACT = 32778;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_EXT_blend_minmax", Api = "gl|gles1|gles2")]
	public const int MIN = 32775;

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_EXT_blend_minmax", Api = "gl|gles1|gles2")]
	public const int MAX = 32776;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public const int BUFFER_SIZE = 34660;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public const int BUFFER_USAGE = 34661;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ARB_occlusion_query")]
	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	public const int QUERY_COUNTER_BITS = 34916;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_occlusion_query")]
	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
	public const int CURRENT_QUERY = 34917;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_occlusion_query")]
	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
	public const int QUERY_RESULT = 34918;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_occlusion_query")]
	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
	public const int QUERY_RESULT_AVAILABLE = 34919;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public const int ARRAY_BUFFER = 34962;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public const int ELEMENT_ARRAY_BUFFER = 34963;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public const int ARRAY_BUFFER_BINDING = 34964;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public const int ELEMENT_ARRAY_BUFFER_BINDING = 34965;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public const int VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public const int READ_ONLY = 35000;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_NV_shader_buffer_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	[RequiredByFeature("GL_OES_mapbuffer", Api = "gles1|gles2")]
	public const int WRITE_ONLY = 35001;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_NV_shader_buffer_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public const int READ_WRITE = 35002;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	[RequiredByFeature("GL_OES_mapbuffer", Api = "gles1|gles2")]
	public const int BUFFER_ACCESS = 35003;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	[RequiredByFeature("GL_OES_mapbuffer", Api = "gles1|gles2")]
	public const int BUFFER_MAPPED = 35004;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	[RequiredByFeature("GL_OES_mapbuffer", Api = "gles1|gles2")]
	public const int BUFFER_MAP_POINTER = 35005;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public const int STREAM_DRAW = 35040;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public const int STREAM_READ = 35041;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public const int STREAM_COPY = 35042;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public const int STATIC_DRAW = 35044;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public const int STATIC_READ = 35045;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public const int STATIC_COPY = 35046;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public const int DYNAMIC_DRAW = 35048;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public const int DYNAMIC_READ = 35049;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public const int DYNAMIC_COPY = 35050;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ARB_occlusion_query")]
	public const int SAMPLES_PASSED = 35092;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int VERTEX_ARRAY_BUFFER_BINDING = 34966;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int NORMAL_ARRAY_BUFFER_BINDING = 34967;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COLOR_ARRAY_BUFFER_BINDING = 34968;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int INDEX_ARRAY_BUFFER_BINDING = 34969;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_COORD_ARRAY_BUFFER_BINDING = 34970;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int EDGE_FLAG_ARRAY_BUFFER_BINDING = 34971;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 34972;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int FOG_COORDINATE_ARRAY_BUFFER_BINDING = 34973;

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int WEIGHT_ARRAY_BUFFER_BINDING = 34974;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_EXT_blend_equation_separate")]
	[RequiredByFeature("GL_OES_blend_equation_separate", Api = "gles1")]
	public const int BLEND_EQUATION_RGB = 32777;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public const int VERTEX_ATTRIB_ARRAY_ENABLED = 34338;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public const int VERTEX_ATTRIB_ARRAY_SIZE = 34339;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public const int VERTEX_ATTRIB_ARRAY_STRIDE = 34340;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public const int VERTEX_ATTRIB_ARRAY_TYPE = 34341;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public const int CURRENT_VERTEX_ATTRIB = 34342;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public const int VERTEX_PROGRAM_POINT_SIZE = 34370;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public const int VERTEX_ATTRIB_ARRAY_POINTER = 34373;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ATI_separate_stencil")]
	public const int STENCIL_BACK_FUNC = 34816;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ATI_separate_stencil")]
	public const int STENCIL_BACK_FAIL = 34817;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ATI_separate_stencil")]
	public const int STENCIL_BACK_PASS_DEPTH_FAIL = 34818;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ATI_separate_stencil")]
	public const int STENCIL_BACK_PASS_DEPTH_PASS = 34819;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_buffers")]
	[RequiredByFeature("GL_ATI_draw_buffers")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	public const int MAX_DRAW_BUFFERS = 34852;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_buffers")]
	[RequiredByFeature("GL_ATI_draw_buffers")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	public const int DRAW_BUFFER0 = 34853;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_buffers")]
	[RequiredByFeature("GL_ATI_draw_buffers")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	public const int DRAW_BUFFER1 = 34854;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_buffers")]
	[RequiredByFeature("GL_ATI_draw_buffers")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	public const int DRAW_BUFFER2 = 34855;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_buffers")]
	[RequiredByFeature("GL_ATI_draw_buffers")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	public const int DRAW_BUFFER3 = 34856;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_buffers")]
	[RequiredByFeature("GL_ATI_draw_buffers")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	public const int DRAW_BUFFER4 = 34857;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_buffers")]
	[RequiredByFeature("GL_ATI_draw_buffers")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	public const int DRAW_BUFFER5 = 34858;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_buffers")]
	[RequiredByFeature("GL_ATI_draw_buffers")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	public const int DRAW_BUFFER6 = 34859;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_buffers")]
	[RequiredByFeature("GL_ATI_draw_buffers")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	public const int DRAW_BUFFER7 = 34860;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_buffers")]
	[RequiredByFeature("GL_ATI_draw_buffers")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	public const int DRAW_BUFFER8 = 34861;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_buffers")]
	[RequiredByFeature("GL_ATI_draw_buffers")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	public const int DRAW_BUFFER9 = 34862;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_buffers")]
	[RequiredByFeature("GL_ATI_draw_buffers")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	public const int DRAW_BUFFER10 = 34863;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_buffers")]
	[RequiredByFeature("GL_ATI_draw_buffers")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	public const int DRAW_BUFFER11 = 34864;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_buffers")]
	[RequiredByFeature("GL_ATI_draw_buffers")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	public const int DRAW_BUFFER12 = 34865;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_buffers")]
	[RequiredByFeature("GL_ATI_draw_buffers")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	public const int DRAW_BUFFER13 = 34866;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_buffers")]
	[RequiredByFeature("GL_ATI_draw_buffers")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	public const int DRAW_BUFFER14 = 34867;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_buffers")]
	[RequiredByFeature("GL_ATI_draw_buffers")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	public const int DRAW_BUFFER15 = 34868;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_EXT_blend_equation_separate")]
	[RequiredByFeature("GL_OES_blend_equation_separate", Api = "gles1")]
	public const int BLEND_EQUATION_ALPHA = 34877;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public const int MAX_VERTEX_ATTRIBS = 34921;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public const int VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_fragment_program")]
	public const int MAX_TEXTURE_IMAGE_UNITS = 34930;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_fragment_shader")]
	public const int FRAGMENT_SHADER = 35632;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public const int VERTEX_SHADER = 35633;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_fragment_shader")]
	public const int MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public const int MAX_VERTEX_UNIFORM_COMPONENTS = 35658;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public const int MAX_VARYING_FLOATS = 35659;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program3")]
	public const int MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public const int MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public const int SHADER_TYPE = 35663;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public const int FLOAT_VEC2 = 35664;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public const int FLOAT_VEC3 = 35665;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public const int FLOAT_VEC4 = 35666;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int INT_VEC2 = 35667;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int INT_VEC3 = 35668;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int INT_VEC4 = 35669;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int BOOL = 35670;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int BOOL_VEC2 = 35671;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int BOOL_VEC3 = 35672;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int BOOL_VEC4 = 35673;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public const int FLOAT_MAT2 = 35674;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public const int FLOAT_MAT3 = 35675;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public const int FLOAT_MAT4 = 35676;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int SAMPLER_1D = 35677;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int SAMPLER_2D = 35678;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
	public const int SAMPLER_3D = 35679;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int SAMPLER_CUBE = 35680;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int SAMPLER_1D_SHADOW = 35681;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	[RequiredByFeature("GL_EXT_shadow_samplers", Api = "gles2")]
	public const int SAMPLER_2D_SHADOW = 35682;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public const int DELETE_STATUS = 35712;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public const int COMPILE_STATUS = 35713;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int LINK_STATUS = 35714;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public const int VALIDATE_STATUS = 35715;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public const int INFO_LOG_LENGTH = 35716;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public const int ATTACHED_SHADERS = 35717;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public const int ACTIVE_UNIFORMS = 35718;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public const int ACTIVE_UNIFORM_MAX_LENGTH = 35719;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public const int SHADER_SOURCE_LENGTH = 35720;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public const int ACTIVE_ATTRIBUTES = 35721;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public const int ACTIVE_ATTRIBUTE_MAX_LENGTH = 35722;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_fragment_shader")]
	[RequiredByFeature("GL_OES_standard_derivatives", Api = "gles2|glsc2")]
	public const int FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shading_language_100")]
	public const int SHADING_LANGUAGE_VERSION = 35724;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int CURRENT_PROGRAM = 35725;

	[RequiredByFeature("GL_VERSION_2_0")]
	public const int POINT_SPRITE_COORD_ORIGIN = 36000;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_clip_control", Api = "gl|glcore")]
	public const int LOWER_LEFT = 36001;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_clip_control", Api = "gl|glcore")]
	public const int UPPER_LEFT = 36002;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int STENCIL_BACK_REF = 36003;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int STENCIL_BACK_VALUE_MASK = 36004;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public const int STENCIL_BACK_WRITEMASK = 36005;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int VERTEX_PROGRAM_TWO_SIDE = 34371;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_point_sprite")]
	[RequiredByFeature("GL_NV_point_sprite")]
	[RequiredByFeature("GL_OES_point_sprite", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int POINT_SPRITE = 34913;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_point_sprite")]
	[RequiredByFeature("GL_NV_point_sprite")]
	[RequiredByFeature("GL_OES_point_sprite", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COORD_REPLACE = 34914;

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_fragment_program")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int MAX_TEXTURE_COORDS = 34929;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_pixel_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_pixel_buffer_object")]
	[RequiredByFeature("GL_NV_pixel_buffer_object", Api = "gles2")]
	public const int PIXEL_PACK_BUFFER = 35051;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_pixel_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_pixel_buffer_object")]
	[RequiredByFeature("GL_NV_pixel_buffer_object", Api = "gles2")]
	public const int PIXEL_UNPACK_BUFFER = 35052;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_pixel_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_pixel_buffer_object")]
	[RequiredByFeature("GL_NV_pixel_buffer_object", Api = "gles2")]
	public const int PIXEL_PACK_BUFFER_BINDING = 35053;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_pixel_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_pixel_buffer_object")]
	[RequiredByFeature("GL_NV_pixel_buffer_object", Api = "gles2")]
	public const int PIXEL_UNPACK_BUFFER_BINDING = 35055;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public const int FLOAT_MAT2x3 = 35685;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public const int FLOAT_MAT2x4 = 35686;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public const int FLOAT_MAT3x2 = 35687;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public const int FLOAT_MAT3x4 = 35688;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public const int FLOAT_MAT4x2 = 35689;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public const int FLOAT_MAT4x3 = 35690;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_sRGB", Api = "gles1|gles2")]
	[RequiredByFeature("GL_EXT_texture_sRGB")]
	public const int SRGB = 35904;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_sRGB")]
	[RequiredByFeature("GL_NV_sRGB_formats", Api = "gles2")]
	public const int SRGB8 = 35905;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_EXT_sRGB", Api = "gles1|gles2")]
	[RequiredByFeature("GL_EXT_texture_sRGB")]
	public const int SRGB_ALPHA = 35906;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_sRGB", Api = "gles1|gles2")]
	[RequiredByFeature("GL_EXT_texture_sRGB")]
	public const int SRGB8_ALPHA8 = 35907;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_EXT_texture_sRGB")]
	public const int COMPRESSED_SRGB = 35912;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_EXT_texture_sRGB")]
	public const int COMPRESSED_SRGB_ALPHA = 35913;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CURRENT_RASTER_SECONDARY_COLOR = 33887;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_EXT_texture_sRGB")]
	[RequiredByFeature("GL_NV_sRGB_formats", Api = "gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SLUMINANCE_ALPHA = 35908;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_EXT_texture_sRGB")]
	[RequiredByFeature("GL_NV_sRGB_formats", Api = "gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SLUMINANCE8_ALPHA8 = 35909;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_EXT_texture_sRGB")]
	[RequiredByFeature("GL_NV_sRGB_formats", Api = "gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SLUMINANCE = 35910;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_EXT_texture_sRGB")]
	[RequiredByFeature("GL_NV_sRGB_formats", Api = "gles2")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int SLUMINANCE8 = 35911;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_EXT_texture_sRGB")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COMPRESSED_SLUMINANCE = 35914;

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_EXT_texture_sRGB")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int COMPRESSED_SLUMINANCE_ALPHA = 35915;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_APPLE_clip_distance", Api = "gles2")]
	public const int CLIP_DISTANCE6 = 12294;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_APPLE_clip_distance", Api = "gles2")]
	public const int CLIP_DISTANCE7 = 12295;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int MAJOR_VERSION = 33307;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int MINOR_VERSION = 33308;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int NUM_EXTENSIONS = 33309;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	public const int CONTEXT_FLAGS = 33310;

	[RequiredByFeature("GL_VERSION_3_0")]
	public const int COMPRESSED_RED = 33317;

	[RequiredByFeature("GL_VERSION_3_0")]
	public const int COMPRESSED_RG = 33318;

	[RequiredByFeature("GL_VERSION_3_0")]
	[Log(BitmaskName = "GL")]
	public const uint CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 1u;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_float")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public const int RGBA32F = 34836;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_buffer_object_rgb32", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_texture_float")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public const int RGB32F = 34837;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_float")]
	[RequiredByFeature("GL_EXT_color_buffer_half_float", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public const int RGBA16F = 34842;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_float")]
	[RequiredByFeature("GL_EXT_color_buffer_half_float", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public const int RGB16F = 34843;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public const int VERTEX_ATTRIB_ARRAY_INTEGER = 35069;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_array")]
	public const int MAX_ARRAY_TEXTURE_LAYERS = 35071;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_gpu_program4")]
	public const int MIN_PROGRAM_TEXEL_OFFSET = 35076;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_gpu_program4")]
	public const int MAX_PROGRAM_TEXEL_OFFSET = 35077;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_color_buffer_float")]
	public const int CLAMP_READ_COLOR = 35100;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_color_buffer_float")]
	public const int FIXED_ONLY = 35101;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_array")]
	public const int TEXTURE_1D_ARRAY = 35864;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_texture_array")]
	public const int PROXY_TEXTURE_1D_ARRAY = 35865;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_array")]
	public const int TEXTURE_2D_ARRAY = 35866;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_texture_array")]
	public const int PROXY_TEXTURE_2D_ARRAY = 35867;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_array")]
	public const int TEXTURE_BINDING_1D_ARRAY = 35868;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_array")]
	public const int TEXTURE_BINDING_2D_ARRAY = 35869;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_texture_packed_float", Api = "gles2")]
	[RequiredByFeature("GL_EXT_packed_float")]
	public const int R11F_G11F_B10F = 35898;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_type_10f_11f_11f_rev", Api = "gl|glcore")]
	[RequiredByFeature("GL_APPLE_texture_packed_float", Api = "gles2")]
	[RequiredByFeature("GL_EXT_packed_float")]
	public const int UNSIGNED_INT_10F_11F_11F_REV = 35899;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_texture_packed_float", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_shared_exponent")]
	public const int RGB9_E5 = 35901;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_texture_packed_float", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_shared_exponent")]
	public const int UNSIGNED_INT_5_9_9_9_REV = 35902;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_shared_exponent")]
	public const int TEXTURE_SHARED_SIZE = 35903;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	public const int TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 35958;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int TRANSFORM_FEEDBACK_VARYINGS = 35971;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int TRANSFORM_FEEDBACK_BUFFER_START = 35972;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	[RequiredByFeature("GL_NV_transform_feedback")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int PRIMITIVES_GENERATED = 35975;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int RASTERIZER_DISCARD = 35977;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int INTERLEAVED_ATTRIBS = 35980;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int SEPARATE_ATTRIBS = 35981;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_enhanced_layouts", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int TRANSFORM_FEEDBACK_BUFFER = 35982;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int RGBA32UI = 36208;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_buffer_object_rgb32", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int RGB32UI = 36209;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int RGBA16UI = 36214;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int RGB16UI = 36215;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_AMD_interleaved_elements")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int RGBA8UI = 36220;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int RGB8UI = 36221;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int RGBA32I = 36226;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_buffer_object_rgb32", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int RGB32I = 36227;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int RGBA16I = 36232;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int RGB16I = 36233;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int RGBA8I = 36238;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int RGB8I = 36239;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int RED_INTEGER = 36244;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int GREEN_INTEGER = 36245;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int BLUE_INTEGER = 36246;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int RGB_INTEGER = 36248;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int RGBA_INTEGER = 36249;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int BGR_INTEGER = 36250;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	public const int BGRA_INTEGER = 36251;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public const int SAMPLER_1D_ARRAY = 36288;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public const int SAMPLER_2D_ARRAY = 36289;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public const int SAMPLER_1D_ARRAY_SHADOW = 36291;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_shadow_samplers_array", Api = "gles2")]
	public const int SAMPLER_2D_ARRAY_SHADOW = 36292;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_shadow_samplers_cube", Api = "gles2")]
	public const int SAMPLER_CUBE_SHADOW = 36293;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public const int UNSIGNED_INT_VEC2 = 36294;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public const int UNSIGNED_INT_VEC3 = 36295;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public const int UNSIGNED_INT_VEC4 = 36296;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public const int INT_SAMPLER_1D = 36297;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public const int INT_SAMPLER_2D = 36298;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public const int INT_SAMPLER_3D = 36299;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public const int INT_SAMPLER_CUBE = 36300;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public const int INT_SAMPLER_1D_ARRAY = 36302;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public const int INT_SAMPLER_2D_ARRAY = 36303;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public const int UNSIGNED_INT_SAMPLER_1D = 36305;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public const int UNSIGNED_INT_SAMPLER_2D = 36306;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public const int UNSIGNED_INT_SAMPLER_3D = 36307;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public const int UNSIGNED_INT_SAMPLER_CUBE = 36308;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public const int UNSIGNED_INT_SAMPLER_1D_ARRAY = 36310;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public const int UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_NV_conditional_render", Api = "gl|glcore|gles2")]
	public const int QUERY_WAIT = 36371;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_NV_conditional_render", Api = "gl|glcore|gles2")]
	public const int QUERY_NO_WAIT = 36372;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_NV_conditional_render", Api = "gl|glcore|gles2")]
	public const int QUERY_BY_REGION_WAIT = 36373;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_NV_conditional_render", Api = "gl|glcore|gles2")]
	public const int QUERY_BY_REGION_NO_WAIT = 36374;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int BUFFER_ACCESS_FLAGS = 37151;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int BUFFER_MAP_LENGTH = 37152;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int BUFFER_MAP_OFFSET = 37153;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_depth_buffer_float", Api = "gl|glcore")]
	public const int DEPTH_COMPONENT32F = 36012;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_depth_buffer_float", Api = "gl|glcore")]
	public const int DEPTH32F_STENCIL8 = 36013;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_depth_buffer_float", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_depth_buffer_float", Api = "gl|glcore")]
	public const int FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int INVALID_FRAMEBUFFER_OPERATION = 1286;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_sRGB", Api = "gles1|gles2")]
	public const int FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_color_buffer_half_float", Api = "gles2")]
	public const int FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	public const int FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	public const int FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	public const int FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	public const int FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	public const int FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	public const int FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	public const int FRAMEBUFFER_DEFAULT = 33304;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_surfaceless_context", Api = "gles1|gles2")]
	public const int FRAMEBUFFER_UNDEFINED = 33305;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	public const int DEPTH_STENCIL_ATTACHMENT = 33306;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int MAX_RENDERBUFFER_SIZE = 34024;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_packed_depth_stencil")]
	[RequiredByFeature("GL_NV_packed_depth_stencil")]
	[RequiredByFeature("GL_ANGLE_depth_texture", Api = "gles2")]
	[RequiredByFeature("GL_OES_packed_depth_stencil", Api = "gles1|gles2")]
	public const int DEPTH_STENCIL = 34041;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_packed_depth_stencil")]
	[RequiredByFeature("GL_NV_packed_depth_stencil")]
	[RequiredByFeature("GL_ANGLE_depth_texture", Api = "gles2")]
	[RequiredByFeature("GL_OES_packed_depth_stencil", Api = "gles1|gles2")]
	public const int UNSIGNED_INT_24_8 = 34042;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_packed_depth_stencil")]
	[RequiredByFeature("GL_ANGLE_depth_texture", Api = "gles2")]
	[RequiredByFeature("GL_OES_packed_depth_stencil", Api = "gles1|gles2")]
	[RequiredByFeature("GL_OES_required_internalformat", Api = "gles1|gles2")]
	public const int DEPTH24_STENCIL8 = 35056;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_packed_depth_stencil")]
	public const int TEXTURE_STENCIL_SIZE = 35057;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_float")]
	public const int TEXTURE_RED_TYPE = 35856;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_float")]
	public const int TEXTURE_GREEN_TYPE = 35857;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_float")]
	public const int TEXTURE_BLUE_TYPE = 35858;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_float")]
	public const int TEXTURE_ALPHA_TYPE = 35859;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_float")]
	public const int TEXTURE_DEPTH_TYPE = 35862;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_texture_float")]
	[RequiredByFeature("GL_EXT_color_buffer_half_float", Api = "gles2")]
	public const int UNSIGNED_NORMALIZED = 35863;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int FRAMEBUFFER_BINDING = 36006;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_ANGLE_framebuffer_blit", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_framebuffer_multisample", Api = "gles1|gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_blit")]
	[RequiredByFeature("GL_NV_framebuffer_blit", Api = "gles2")]
	public const int DRAW_FRAMEBUFFER_BINDING = 36006;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int RENDERBUFFER_BINDING = 36007;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_ANGLE_framebuffer_blit", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_framebuffer_multisample", Api = "gles1|gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_blit")]
	[RequiredByFeature("GL_NV_framebuffer_blit", Api = "gles2")]
	public const int READ_FRAMEBUFFER = 36008;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_ANGLE_framebuffer_blit", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_framebuffer_multisample", Api = "gles1|gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_blit")]
	[RequiredByFeature("GL_NV_framebuffer_blit", Api = "gles2")]
	public const int DRAW_FRAMEBUFFER = 36009;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_ANGLE_framebuffer_blit", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_framebuffer_multisample", Api = "gles1|gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_blit")]
	[RequiredByFeature("GL_NV_framebuffer_blit", Api = "gles2")]
	public const int READ_FRAMEBUFFER_BINDING = 36010;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_ANGLE_framebuffer_multisample", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_framebuffer_multisample", Api = "gles1|gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_multisample")]
	[RequiredByFeature("GL_EXT_multisampled_render_to_texture", Api = "gles1|gles2")]
	[RequiredByFeature("GL_NV_framebuffer_multisample", Api = "gles2")]
	public const int RENDERBUFFER_SAMPLES = 36011;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader4")]
	[RequiredByFeature("GL_EXT_texture_array")]
	[RequiredByFeature("GL_NV_geometry_program4")]
	public const int FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int FRAMEBUFFER_COMPLETE = 36053;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public const int FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 36059;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public const int FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 36060;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int FRAMEBUFFER_UNSUPPORTED = 36061;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_NV_fbo_color_attachments", Api = "gles2")]
	public const int MAX_COLOR_ATTACHMENTS = 36063;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_fbo_color_attachments", Api = "gles2")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int COLOR_ATTACHMENT0 = 36064;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_fbo_color_attachments", Api = "gles2")]
	public const int COLOR_ATTACHMENT1 = 36065;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_fbo_color_attachments", Api = "gles2")]
	public const int COLOR_ATTACHMENT2 = 36066;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_fbo_color_attachments", Api = "gles2")]
	public const int COLOR_ATTACHMENT3 = 36067;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_fbo_color_attachments", Api = "gles2")]
	public const int COLOR_ATTACHMENT4 = 36068;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_fbo_color_attachments", Api = "gles2")]
	public const int COLOR_ATTACHMENT5 = 36069;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_fbo_color_attachments", Api = "gles2")]
	public const int COLOR_ATTACHMENT6 = 36070;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_fbo_color_attachments", Api = "gles2")]
	public const int COLOR_ATTACHMENT7 = 36071;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_fbo_color_attachments", Api = "gles2")]
	public const int COLOR_ATTACHMENT8 = 36072;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_fbo_color_attachments", Api = "gles2")]
	public const int COLOR_ATTACHMENT9 = 36073;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_fbo_color_attachments", Api = "gles2")]
	public const int COLOR_ATTACHMENT10 = 36074;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_fbo_color_attachments", Api = "gles2")]
	public const int COLOR_ATTACHMENT11 = 36075;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_fbo_color_attachments", Api = "gles2")]
	public const int COLOR_ATTACHMENT12 = 36076;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_fbo_color_attachments", Api = "gles2")]
	public const int COLOR_ATTACHMENT13 = 36077;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_fbo_color_attachments", Api = "gles2")]
	public const int COLOR_ATTACHMENT14 = 36078;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	[RequiredByFeature("GL_NV_fbo_color_attachments", Api = "gles2")]
	public const int COLOR_ATTACHMENT15 = 36079;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int COLOR_ATTACHMENT16 = 36080;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int COLOR_ATTACHMENT17 = 36081;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int COLOR_ATTACHMENT18 = 36082;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int COLOR_ATTACHMENT19 = 36083;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int COLOR_ATTACHMENT20 = 36084;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int COLOR_ATTACHMENT21 = 36085;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int COLOR_ATTACHMENT22 = 36086;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int COLOR_ATTACHMENT23 = 36087;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int COLOR_ATTACHMENT24 = 36088;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int COLOR_ATTACHMENT25 = 36089;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int COLOR_ATTACHMENT26 = 36090;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int COLOR_ATTACHMENT27 = 36091;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int COLOR_ATTACHMENT28 = 36092;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int COLOR_ATTACHMENT29 = 36093;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int COLOR_ATTACHMENT30 = 36094;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int COLOR_ATTACHMENT31 = 36095;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int DEPTH_ATTACHMENT = 36096;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int STENCIL_ATTACHMENT = 36128;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int FRAMEBUFFER = 36160;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_internalformat_sample_query", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int RENDERBUFFER = 36161;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int RENDERBUFFER_WIDTH = 36162;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int RENDERBUFFER_HEIGHT = 36163;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int RENDERBUFFER_INTERNAL_FORMAT = 36164;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_stencil1", Api = "gles1|gles2")]
	public const int STENCIL_INDEX1 = 36166;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_stencil4", Api = "gles1|gles2")]
	public const int STENCIL_INDEX4 = 36167;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_texture_stencil8", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_stencil8", Api = "gles1")]
	[RequiredByFeature("GL_OES_texture_stencil8", Api = "gles2")]
	public const int STENCIL_INDEX8 = 36168;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public const int STENCIL_INDEX16 = 36169;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int RENDERBUFFER_RED_SIZE = 36176;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int RENDERBUFFER_GREEN_SIZE = 36177;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int RENDERBUFFER_BLUE_SIZE = 36178;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int RENDERBUFFER_ALPHA_SIZE = 36179;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int RENDERBUFFER_DEPTH_SIZE = 36180;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public const int RENDERBUFFER_STENCIL_SIZE = 36181;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_ANGLE_framebuffer_multisample", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_framebuffer_multisample", Api = "gles1|gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_multisample")]
	[RequiredByFeature("GL_EXT_multisampled_render_to_texture", Api = "gles1|gles2")]
	[RequiredByFeature("GL_NV_framebuffer_multisample", Api = "gles2")]
	public const int FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_ANGLE_framebuffer_multisample", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_framebuffer_multisample", Api = "gles1|gles2")]
	[RequiredByFeature("GL_EXT_framebuffer_multisample")]
	[RequiredByFeature("GL_EXT_multisampled_render_to_texture", Api = "gles1|gles2")]
	[RequiredByFeature("GL_NV_framebuffer_multisample", Api = "gles2")]
	public const int MAX_SAMPLES = 36183;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int INDEX = 33314;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_texture_float")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_LUMINANCE_TYPE = 35860;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_texture_float")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int TEXTURE_INTENSITY_TYPE = 35861;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_framebuffer_sRGB", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_sRGB")]
	[RequiredByFeature("GL_EXT_sRGB_write_control", Api = "gles2")]
	public const int FRAMEBUFFER_SRGB = 36281;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_half_float_vertex", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_half_float_pixel")]
	[RequiredByFeature("GL_NV_half_float")]
	public const int HALF_FLOAT = 5131;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_buffer_storage", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_map_buffer_range", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_buffer_storage", Api = "gles2")]
	[RequiredByFeature("GL_EXT_map_buffer_range", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const int MAP_READ_BIT = 1;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_buffer_storage", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_map_buffer_range", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_buffer_storage", Api = "gles2")]
	[RequiredByFeature("GL_EXT_map_buffer_range", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const int MAP_WRITE_BIT = 2;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_map_buffer_range", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_map_buffer_range", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const int MAP_INVALIDATE_RANGE_BIT = 4;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_map_buffer_range", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_map_buffer_range", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const int MAP_INVALIDATE_BUFFER_BIT = 8;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_map_buffer_range", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_map_buffer_range", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const int MAP_FLUSH_EXPLICIT_BIT = 16;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_map_buffer_range", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_map_buffer_range", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const int MAP_UNSYNCHRONIZED_BIT = 32;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_texture_compression_rgtc", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_compression_rgtc", Api = "gl|gles2")]
	public const int COMPRESSED_RED_RGTC1 = 36283;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_texture_compression_rgtc", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_compression_rgtc", Api = "gl|gles2")]
	public const int COMPRESSED_SIGNED_RED_RGTC1 = 36284;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_texture_compression_rgtc", Api = "gl|glcore")]
	public const int COMPRESSED_RG_RGTC2 = 36285;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_texture_compression_rgtc", Api = "gl|glcore")]
	public const int COMPRESSED_SIGNED_RG_RGTC2 = 36286;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_rg", Api = "gles2")]
	public const int RG = 33319;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	public const int RG_INTEGER = 33320;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_rg", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public const int R8 = 33321;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_norm16", Api = "gles2")]
	public const int R16 = 33322;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_rg", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public const int RG8 = 33323;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_norm16", Api = "gles2")]
	public const int RG16 = 33324;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_color_buffer_half_float", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public const int R16F = 33325;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public const int R32F = 33326;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_color_buffer_half_float", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public const int RG16F = 33327;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public const int RG32F = 33328;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	public const int R8I = 33329;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	public const int R8UI = 33330;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	public const int R16I = 33331;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	public const int R16UI = 33332;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	public const int R32I = 33333;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	public const int R32UI = 33334;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	public const int RG8I = 33335;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_AMD_interleaved_elements")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	public const int RG8UI = 33336;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	public const int RG16I = 33337;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_AMD_interleaved_elements")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	public const int RG16UI = 33338;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	public const int RG32I = 33339;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_rg", Api = "gl|glcore")]
	public const int RG32UI = 33340;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_array_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_APPLE_vertex_array_object")]
	[RequiredByFeature("GL_OES_vertex_array_object", Api = "gles1|gles2")]
	public const int VERTEX_ARRAY_BINDING = 34229;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_color_buffer_float")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CLAMP_VERTEX_COLOR = 35098;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_color_buffer_float")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int CLAMP_FRAGMENT_COLOR = 35099;

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	[RemovedByFeature("GL_VERSION_3_2")]
	public const int ALPHA_INTEGER = 36247;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int SAMPLER_2D_RECT = 35683;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public const int SAMPLER_2D_RECT_SHADOW = 35684;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2")]
	public const int SAMPLER_BUFFER = 36290;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public const int INT_SAMPLER_2D_RECT = 36301;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2")]
	public const int INT_SAMPLER_BUFFER = 36304;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public const int UNSIGNED_INT_SAMPLER_2D_RECT = 36309;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2")]
	public const int UNSIGNED_INT_SAMPLER_BUFFER = 36312;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_texture_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_buffer_object")]
	[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2")]
	public const int TEXTURE_BUFFER = 35882;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_buffer_object")]
	[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2")]
	public const int MAX_TEXTURE_BUFFER_SIZE = 35883;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_texture_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_buffer_object")]
	[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2")]
	public const int TEXTURE_BINDING_BUFFER = 35884;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_buffer_object")]
	[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2")]
	public const int TEXTURE_BUFFER_DATA_STORE_BINDING = 35885;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_texture_rectangle")]
	[RequiredByFeature("GL_NV_texture_rectangle")]
	public const int TEXTURE_RECTANGLE = 34037;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_texture_rectangle")]
	[RequiredByFeature("GL_NV_texture_rectangle")]
	public const int TEXTURE_BINDING_RECTANGLE = 34038;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ARB_texture_rectangle")]
	[RequiredByFeature("GL_NV_texture_rectangle")]
	public const int PROXY_TEXTURE_RECTANGLE = 34039;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ARB_texture_rectangle")]
	[RequiredByFeature("GL_NV_texture_rectangle")]
	public const int MAX_RECTANGLE_TEXTURE_SIZE = 34040;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_render_snorm", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int R8_SNORM = 36756;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_render_snorm", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int RG8_SNORM = 36757;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int RGB8_SNORM = 36758;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_render_snorm", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int RGBA8_SNORM = 36759;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_EXT_texture_snorm")]
	[RequiredByFeature("GL_EXT_render_snorm", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_norm16", Api = "gles2")]
	public const int R16_SNORM = 36760;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_EXT_texture_snorm")]
	[RequiredByFeature("GL_EXT_render_snorm", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_norm16", Api = "gles2")]
	public const int RG16_SNORM = 36761;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_EXT_texture_snorm")]
	[RequiredByFeature("GL_EXT_texture_norm16", Api = "gles2")]
	public const int RGB16_SNORM = 36762;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_EXT_texture_snorm")]
	[RequiredByFeature("GL_EXT_render_snorm", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_norm16", Api = "gles2")]
	public const int RGBA16_SNORM = 36763;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_snorm")]
	public const int SIGNED_NORMALIZED = 36764;

	[RequiredByFeature("GL_VERSION_3_1")]
	public const int PRIMITIVE_RESTART = 36765;

	[RequiredByFeature("GL_VERSION_3_1")]
	public const int PRIMITIVE_RESTART_INDEX = 36766;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_copy_buffer", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_copy_buffer", Api = "gles2")]
	public const int COPY_READ_BUFFER = 36662;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_copy_buffer", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_copy_buffer", Api = "gles2")]
	public const int COPY_WRITE_BUFFER = 36663;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_BUFFER = 35345;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_BUFFER_BINDING = 35368;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_BUFFER_START = 35369;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_BUFFER_SIZE = 35370;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int MAX_VERTEX_UNIFORM_BLOCKS = 35371;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int MAX_GEOMETRY_UNIFORM_BLOCKS = 35372;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int MAX_COMBINED_UNIFORM_BLOCKS = 35374;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int MAX_UNIFORM_BUFFER_BINDINGS = 35375;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int MAX_UNIFORM_BLOCK_SIZE = 35376;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 35378;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 35381;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int ACTIVE_UNIFORM_BLOCKS = 35382;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_TYPE = 35383;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_SIZE = 35384;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_NAME_LENGTH = 35385;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_BLOCK_INDEX = 35386;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_OFFSET = 35387;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_ARRAY_STRIDE = 35388;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_MATRIX_STRIDE = 35389;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_IS_ROW_MAJOR = 35390;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_BLOCK_BINDING = 35391;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_BLOCK_DATA_SIZE = 35392;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_BLOCK_NAME_LENGTH = 35393;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 35397;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const int UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public const uint INVALID_INDEX = uint.MaxValue;

	[RequiredByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint CONTEXT_CORE_PROFILE_BIT = 1u;

	[RequiredByFeature("GL_VERSION_3_2")]
	[Log(BitmaskName = "GL")]
	public const uint CONTEXT_COMPATIBILITY_PROFILE_BIT = 2u;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_EXT_geometry_shader4")]
	[RequiredByFeature("GL_NV_geometry_program4")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int LINES_ADJACENCY = 10;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_EXT_geometry_shader4")]
	[RequiredByFeature("GL_NV_geometry_program4")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int LINE_STRIP_ADJACENCY = 11;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_EXT_geometry_shader4")]
	[RequiredByFeature("GL_NV_geometry_program4")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int TRIANGLES_ADJACENCY = 12;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_EXT_geometry_shader4")]
	[RequiredByFeature("GL_NV_geometry_program4")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int TRIANGLE_STRIP_ADJACENCY = 13;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_EXT_geometry_shader4")]
	[RequiredByFeature("GL_NV_geometry_program4")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 35881;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_EXT_geometry_shader4")]
	[RequiredByFeature("GL_NV_geometry_program4")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int FRAMEBUFFER_ATTACHMENT_LAYERED = 36263;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_EXT_geometry_shader4")]
	[RequiredByFeature("GL_NV_geometry_program4")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 36264;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_EXT_geometry_shader4")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int GEOMETRY_SHADER = 36313;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	public const int GEOMETRY_VERTICES_OUT = 35094;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	public const int GEOMETRY_INPUT_TYPE = 35095;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	public const int GEOMETRY_OUTPUT_TYPE = 35096;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_EXT_geometry_shader4")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int MAX_GEOMETRY_UNIFORM_COMPONENTS = 36319;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_EXT_geometry_shader4")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int MAX_GEOMETRY_OUTPUT_VERTICES = 36320;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_EXT_geometry_shader4")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 36321;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int MAX_VERTEX_OUTPUT_COMPONENTS = 37154;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int MAX_GEOMETRY_INPUT_COMPONENTS = 37155;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int MAX_GEOMETRY_OUTPUT_COMPONENTS = 37156;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public const int MAX_FRAGMENT_INPUT_COMPONENTS = 37157;

	[RequiredByFeature("GL_VERSION_3_2")]
	public const int CONTEXT_PROFILE_MASK = 37158;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ARB_depth_clamp", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_depth_clamp")]
	[RequiredByFeature("GL_EXT_depth_clamp", Api = "gles2")]
	public const int DEPTH_CLAMP = 34383;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ARB_provoking_vertex", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_provoking_vertex")]
	public const int QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 36428;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_provoking_vertex", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_EXT_provoking_vertex")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int FIRST_VERTEX_CONVENTION = 36429;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_provoking_vertex", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_EXT_provoking_vertex")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int LAST_VERTEX_CONVENTION = 36430;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ARB_provoking_vertex", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_provoking_vertex")]
	public const int PROVOKING_VERTEX = 36431;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_AMD_seamless_cubemap_per_texture")]
	[RequiredByFeature("GL_ARB_seamless_cube_map", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_seamless_cubemap_per_texture", Api = "gl|glcore")]
	public const int TEXTURE_CUBE_MAP_SEAMLESS = 34895;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	public const int MAX_SERVER_WAIT_TIMEOUT = 37137;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	public const int OBJECT_TYPE = 37138;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	public const int SYNC_CONDITION = 37139;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	public const int SYNC_STATUS = 37140;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	public const int SYNC_FLAGS = 37141;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	public const int SYNC_FENCE = 37142;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	public const int SYNC_GPU_COMMANDS_COMPLETE = 37143;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	public const int UNSIGNALED = 37144;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	public const int SIGNALED = 37145;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	public const int ALREADY_SIGNALED = 37146;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	public const int TIMEOUT_EXPIRED = 37147;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	public const int CONDITION_SATISFIED = 37148;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	public const int WAIT_FAILED = 37149;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	public const ulong TIMEOUT_IGNORED = 4503599627370495uL;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint SYNC_FLUSH_COMMANDS_BIT = 1u;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_explicit_multisample")]
	public const int SAMPLE_POSITION = 36432;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_explicit_multisample")]
	public const int SAMPLE_MASK = 36433;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_explicit_multisample")]
	public const int SAMPLE_MASK_VALUE = 36434;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_explicit_multisample")]
	public const int MAX_SAMPLE_MASK_WORDS = 36441;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_internalformat_sample_query", Api = "gl|glcore|gles2")]
	public const int TEXTURE_2D_MULTISAMPLE = 37120;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	public const int PROXY_TEXTURE_2D_MULTISAMPLE = 37121;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_internalformat_sample_query", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_OES_texture_storage_multisample_2d_array", Api = "gles2")]
	public const int TEXTURE_2D_MULTISAMPLE_ARRAY = 37122;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	public const int PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 37123;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	public const int TEXTURE_BINDING_2D_MULTISAMPLE = 37124;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_texture_storage_multisample_2d_array", Api = "gles2")]
	public const int TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 37125;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	public const int TEXTURE_SAMPLES = 37126;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	public const int TEXTURE_FIXED_SAMPLE_LOCATIONS = 37127;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	public const int SAMPLER_2D_MULTISAMPLE = 37128;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	public const int INT_SAMPLER_2D_MULTISAMPLE = 37129;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	public const int UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 37130;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_texture_storage_multisample_2d_array", Api = "gles2")]
	public const int SAMPLER_2D_MULTISAMPLE_ARRAY = 37131;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_texture_storage_multisample_2d_array", Api = "gles2")]
	public const int INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 37132;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_texture_storage_multisample_2d_array", Api = "gles2")]
	public const int UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 37133;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	public const int MAX_COLOR_TEXTURE_SAMPLES = 37134;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	public const int MAX_DEPTH_TEXTURE_SAMPLES = 37135;

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	public const int MAX_INTEGER_SAMPLES = 37136;

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ANGLE_instanced_arrays", Api = "gles2")]
	[RequiredByFeature("GL_ARB_instanced_arrays", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_instanced_arrays", Api = "gles2")]
	[RequiredByFeature("GL_NV_instanced_arrays", Api = "gles2")]
	public const int VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_blend_func_extended", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_blend_func_extended", Api = "gles2")]
	public const int SRC1_COLOR = 35065;

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_blend_func_extended", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_blend_func_extended", Api = "gles2")]
	public const int ONE_MINUS_SRC1_COLOR = 35066;

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_blend_func_extended", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_blend_func_extended", Api = "gles2")]
	public const int ONE_MINUS_SRC1_ALPHA = 35067;

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_blend_func_extended", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_blend_func_extended", Api = "gles2")]
	public const int MAX_DUAL_SOURCE_DRAW_BUFFERS = 35068;

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_occlusion_query2", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
	public const int ANY_SAMPLES_PASSED = 35887;

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public const int SAMPLER_BINDING = 35097;

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_rgb10_a2ui", Api = "gl|glcore")]
	public const int RGB10_A2UI = 36975;

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_swizzle", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_swizzle")]
	public const int TEXTURE_SWIZZLE_R = 36418;

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_swizzle", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_swizzle")]
	public const int TEXTURE_SWIZZLE_G = 36419;

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_swizzle", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_swizzle")]
	public const int TEXTURE_SWIZZLE_B = 36420;

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_swizzle", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_swizzle")]
	public const int TEXTURE_SWIZZLE_A = 36421;

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_texture_swizzle", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_swizzle")]
	public const int TEXTURE_SWIZZLE_RGBA = 36422;

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_timer_query", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	[RequiredByFeature("GL_EXT_timer_query")]
	public const int TIME_ELAPSED = 35007;

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_timer_query", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	public const int TIMESTAMP = 36392;

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
	public const int INT_2_10_10_10_REV = 36255;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sample_shading", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_sample_shading", Api = "gles2")]
	public const int SAMPLE_SHADING = 35894;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sample_shading", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_sample_shading", Api = "gles2")]
	public const int MIN_SAMPLE_SHADING_VALUE = 35895;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_gather", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_gpu_program5")]
	public const int MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 36446;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_gather", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_gpu_program5")]
	public const int MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 36447;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_texture_cube_map_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_cube_map_array", Api = "gles2")]
	[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_cube_map_array", Api = "gles2")]
	public const int TEXTURE_CUBE_MAP_ARRAY = 36873;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_texture_cube_map_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_cube_map_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_cube_map_array", Api = "gles2")]
	public const int TEXTURE_BINDING_CUBE_MAP_ARRAY = 36874;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_texture_cube_map_array", Api = "gl|glcore")]
	public const int PROXY_TEXTURE_CUBE_MAP_ARRAY = 36875;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_cube_map_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_cube_map_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_cube_map_array", Api = "gles2")]
	public const int SAMPLER_CUBE_MAP_ARRAY = 36876;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_cube_map_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_cube_map_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_cube_map_array", Api = "gles2")]
	public const int SAMPLER_CUBE_MAP_ARRAY_SHADOW = 36877;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_cube_map_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_cube_map_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_cube_map_array", Api = "gles2")]
	public const int INT_SAMPLER_CUBE_MAP_ARRAY = 36878;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_cube_map_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_cube_map_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_cube_map_array", Api = "gles2")]
	public const int UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 36879;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_indirect", Api = "gl|glcore")]
	public const int DRAW_INDIRECT_BUFFER = 36671;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_indirect", Api = "gl|glcore")]
	public const int DRAW_INDIRECT_BUFFER_BINDING = 36675;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_VERSION_4_6")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_gpu_shader5", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_pipeline_statistics_query", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int GEOMETRY_SHADER_INVOCATIONS = 34943;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_gpu_shader5", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int MAX_GEOMETRY_SHADER_INVOCATIONS = 36442;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_gpu_shader5", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_shader_multisample_interpolation", Api = "gles2")]
	[RequiredByFeature("GL_NV_gpu_program5")]
	public const int MIN_FRAGMENT_INTERPOLATION_OFFSET = 36443;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_gpu_shader5", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_shader_multisample_interpolation", Api = "gles2")]
	[RequiredByFeature("GL_NV_gpu_program5")]
	public const int MAX_FRAGMENT_INTERPOLATION_OFFSET = 36444;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_gpu_shader5", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_shader_multisample_interpolation", Api = "gles2")]
	public const int FRAGMENT_INTERPOLATION_OFFSET_BITS = 36445;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader5", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_transform_feedback3", Api = "gl|glcore")]
	public const int MAX_VERTEX_STREAMS = 36465;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public const int DOUBLE_VEC2 = 36860;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public const int DOUBLE_VEC3 = 36861;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public const int DOUBLE_VEC4 = 36862;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public const int DOUBLE_MAT2 = 36678;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public const int DOUBLE_MAT3 = 36679;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public const int DOUBLE_MAT4 = 36680;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public const int DOUBLE_MAT2x3 = 36681;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public const int DOUBLE_MAT2x4 = 36682;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public const int DOUBLE_MAT3x2 = 36683;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public const int DOUBLE_MAT3x4 = 36684;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public const int DOUBLE_MAT4x2 = 36685;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public const int DOUBLE_MAT4x3 = 36686;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	public const int ACTIVE_SUBROUTINES = 36325;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	public const int ACTIVE_SUBROUTINE_UNIFORMS = 36326;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	public const int ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 36423;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	public const int ACTIVE_SUBROUTINE_MAX_LENGTH = 36424;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	public const int ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 36425;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	public const int MAX_SUBROUTINES = 36327;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	public const int MAX_SUBROUTINE_UNIFORM_LOCATIONS = 36328;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	public const int NUM_COMPATIBLE_SUBROUTINES = 36426;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	public const int COMPATIBLE_SUBROUTINES = 36427;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int PATCHES = 14;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int PATCH_VERTICES = 36466;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	public const int PATCH_DEFAULT_INNER_LEVEL = 36467;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	public const int PATCH_DEFAULT_OUTER_LEVEL = 36468;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int TESS_CONTROL_OUTPUT_VERTICES = 36469;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int TESS_GEN_MODE = 36470;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int TESS_GEN_SPACING = 36471;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int TESS_GEN_VERTEX_ORDER = 36472;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int TESS_GEN_POINT_MODE = 36473;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int ISOLINES = 36474;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int FRACTIONAL_ODD = 36475;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int FRACTIONAL_EVEN = 36476;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_PATCH_VERTICES = 36477;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_GEN_LEVEL = 36478;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 36479;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 36480;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 36481;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 36482;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 36483;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_PATCH_COMPONENTS = 36484;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 36485;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 36486;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_CONTROL_UNIFORM_BLOCKS = 36489;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 36490;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_CONTROL_INPUT_COMPONENTS = 34924;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_EVALUATION_INPUT_COMPONENTS = 34925;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 36382;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 36383;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	public const int UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 34032;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	public const int UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 34033;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int TESS_EVALUATION_SHADER = 36487;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int TESS_CONTROL_SHADER = 36488;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_debug_label", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_transform_feedback2")]
	public const int TRANSFORM_FEEDBACK = 36386;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_transform_feedback2")]
	public const int TRANSFORM_FEEDBACK_BUFFER_PAUSED = 36387;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_transform_feedback2")]
	public const int TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 36388;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_transform_feedback2")]
	public const int TRANSFORM_FEEDBACK_BINDING = 36389;

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_transform_feedback3", Api = "gl|glcore")]
	public const int MAX_TRANSFORM_FEEDBACK_BUFFERS = 36464;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public const int FIXED = 5132;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_read_format", Api = "gl|gles1")]
	public const int IMPLEMENTATION_COLOR_READ_TYPE = 35738;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_read_format", Api = "gl|gles1")]
	public const int IMPLEMENTATION_COLOR_READ_FORMAT = 35739;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	public const int LOW_FLOAT = 36336;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	public const int MEDIUM_FLOAT = 36337;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	public const int HIGH_FLOAT = 36338;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	public const int LOW_INT = 36339;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	public const int MEDIUM_INT = 36340;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	public const int HIGH_INT = 36341;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	public const int SHADER_COMPILER = 36346;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	public const int SHADER_BINARY_FORMATS = 36344;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	public const int NUM_SHADER_BINARY_FORMATS = 36345;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	public const int MAX_VERTEX_UNIFORM_VECTORS = 36347;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	public const int MAX_VARYING_VECTORS = 36348;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	public const int MAX_FRAGMENT_UNIFORM_VECTORS = 36349;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	[RequiredByFeature("GL_OES_required_internalformat", Api = "gles1|gles2")]
	public const int RGB565 = 36194;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_get_program_binary", Api = "gl|glcore")]
	public const int PROGRAM_BINARY_RETRIEVABLE_HINT = 33367;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_get_program_binary", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_get_program_binary", Api = "gles2")]
	public const int PROGRAM_BINARY_LENGTH = 34625;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_get_program_binary", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_get_program_binary", Api = "gles2")]
	public const int NUM_PROGRAM_BINARY_FORMATS = 34814;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_get_program_binary", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_get_program_binary", Api = "gles2")]
	public const int PROGRAM_BINARY_FORMATS = 34815;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint VERTEX_SHADER_BIT = 1u;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint FRAGMENT_SHADER_BIT = 2u;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	[Log(BitmaskName = "GL")]
	public const uint GEOMETRY_SHADER_BIT = 4u;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	[Log(BitmaskName = "GL")]
	public const uint TESS_CONTROL_SHADER_BIT = 8u;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	[Log(BitmaskName = "GL")]
	public const uint TESS_EVALUATION_SHADER_BIT = 16u;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint ALL_SHADER_BITS = uint.MaxValue;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gl|glcore|gles2")]
	public const int PROGRAM_SEPARABLE = 33368;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gl|glcore|gles2")]
	public const int ACTIVE_PROGRAM = 33369;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gl|glcore|gles2")]
	public const int PROGRAM_PIPELINE_BINDING = 33370;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public const int MAX_VIEWPORTS = 33371;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public const int VIEWPORT_SUBPIXEL_BITS = 33372;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public const int VIEWPORT_BOUNDS_RANGE = 33373;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int LAYER_PROVOKING_VERTEX = 33374;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public const int VIEWPORT_INDEX_PROVOKING_VERTEX = 33375;

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int UNDEFINED_VERTEX = 33376;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_compressed_texture_pixel_storage", Api = "gl|glcore")]
	public const int UNPACK_COMPRESSED_BLOCK_WIDTH = 37159;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_compressed_texture_pixel_storage", Api = "gl|glcore")]
	public const int UNPACK_COMPRESSED_BLOCK_HEIGHT = 37160;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_compressed_texture_pixel_storage", Api = "gl|glcore")]
	public const int UNPACK_COMPRESSED_BLOCK_DEPTH = 37161;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_compressed_texture_pixel_storage", Api = "gl|glcore")]
	public const int UNPACK_COMPRESSED_BLOCK_SIZE = 37162;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_compressed_texture_pixel_storage", Api = "gl|glcore")]
	public const int PACK_COMPRESSED_BLOCK_WIDTH = 37163;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_compressed_texture_pixel_storage", Api = "gl|glcore")]
	public const int PACK_COMPRESSED_BLOCK_HEIGHT = 37164;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_compressed_texture_pixel_storage", Api = "gl|glcore")]
	public const int PACK_COMPRESSED_BLOCK_DEPTH = 37165;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_compressed_texture_pixel_storage", Api = "gl|glcore")]
	public const int PACK_COMPRESSED_BLOCK_SIZE = 37166;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_internalformat_query", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int NUM_SAMPLE_COUNTS = 37760;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_map_buffer_alignment", Api = "gl|glcore")]
	public const int MIN_MAP_BUFFER_ALIGNMENT = 37052;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int ATOMIC_COUNTER_BUFFER = 37568;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int ATOMIC_COUNTER_BUFFER_BINDING = 37569;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int ATOMIC_COUNTER_BUFFER_START = 37570;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int ATOMIC_COUNTER_BUFFER_SIZE = 37571;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int ATOMIC_COUNTER_BUFFER_DATA_SIZE = 37572;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 37573;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 37574;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 37575;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 37576;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 37577;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 37578;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 37579;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 37580;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 37581;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 37582;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 37583;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 37584;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 37585;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int MAX_VERTEX_ATOMIC_COUNTERS = 37586;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_CONTROL_ATOMIC_COUNTERS = 37587;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 37588;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int MAX_GEOMETRY_ATOMIC_COUNTERS = 37589;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int MAX_FRAGMENT_ATOMIC_COUNTERS = 37590;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int MAX_COMBINED_ATOMIC_COUNTERS = 37591;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int MAX_ATOMIC_COUNTER_BUFFER_SIZE = 37592;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 37596;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int ACTIVE_ATOMIC_COUNTER_BUFFERS = 37593;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 37594;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public const int UNSIGNED_INT_ATOMIC_COUNTER = 37595;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	[Log(BitmaskName = "GL")]
	public const uint VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 1u;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	[Log(BitmaskName = "GL")]
	public const uint ELEMENT_ARRAY_BARRIER_BIT = 2u;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	[Log(BitmaskName = "GL")]
	public const uint UNIFORM_BARRIER_BIT = 4u;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	[Log(BitmaskName = "GL")]
	public const uint TEXTURE_FETCH_BARRIER_BIT = 8u;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	[Log(BitmaskName = "GL")]
	public const uint SHADER_IMAGE_ACCESS_BARRIER_BIT = 32u;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	[Log(BitmaskName = "GL")]
	public const uint COMMAND_BARRIER_BIT = 64u;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	[Log(BitmaskName = "GL")]
	public const uint PIXEL_BUFFER_BARRIER_BIT = 128u;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	[Log(BitmaskName = "GL")]
	public const uint TEXTURE_UPDATE_BARRIER_BIT = 256u;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	[Log(BitmaskName = "GL")]
	public const uint BUFFER_UPDATE_BARRIER_BIT = 512u;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	[Log(BitmaskName = "GL")]
	public const uint FRAMEBUFFER_BARRIER_BIT = 1024u;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	[Log(BitmaskName = "GL")]
	public const uint TRANSFORM_FEEDBACK_BARRIER_BIT = 2048u;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	[Log(BitmaskName = "GL")]
	public const uint ATOMIC_COUNTER_BARRIER_BIT = 4096u;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	[Log(BitmaskName = "GL")]
	public const uint ALL_BARRIER_BITS = uint.MaxValue;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int MAX_IMAGE_UNITS = 36664;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 36665;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int IMAGE_BINDING_NAME = 36666;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int IMAGE_BINDING_LEVEL = 36667;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int IMAGE_BINDING_LAYERED = 36668;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int IMAGE_BINDING_LAYER = 36669;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int IMAGE_BINDING_ACCESS = 36670;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int IMAGE_1D = 36940;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int IMAGE_2D = 36941;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int IMAGE_3D = 36942;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int IMAGE_2D_RECT = 36943;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int IMAGE_CUBE = 36944;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2")]
	public const int IMAGE_BUFFER = 36945;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int IMAGE_1D_ARRAY = 36946;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int IMAGE_2D_ARRAY = 36947;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	[RequiredByFeature("GL_EXT_texture_cube_map_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_cube_map_array", Api = "gles2")]
	public const int IMAGE_CUBE_MAP_ARRAY = 36948;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int IMAGE_2D_MULTISAMPLE = 36949;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int IMAGE_2D_MULTISAMPLE_ARRAY = 36950;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int INT_IMAGE_1D = 36951;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int INT_IMAGE_2D = 36952;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int INT_IMAGE_3D = 36953;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int INT_IMAGE_2D_RECT = 36954;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int INT_IMAGE_CUBE = 36955;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2")]
	public const int INT_IMAGE_BUFFER = 36956;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int INT_IMAGE_1D_ARRAY = 36957;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int INT_IMAGE_2D_ARRAY = 36958;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	[RequiredByFeature("GL_EXT_texture_cube_map_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_cube_map_array", Api = "gles2")]
	public const int INT_IMAGE_CUBE_MAP_ARRAY = 36959;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int INT_IMAGE_2D_MULTISAMPLE = 36960;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int INT_IMAGE_2D_MULTISAMPLE_ARRAY = 36961;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int UNSIGNED_INT_IMAGE_1D = 36962;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int UNSIGNED_INT_IMAGE_2D = 36963;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int UNSIGNED_INT_IMAGE_3D = 36964;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int UNSIGNED_INT_IMAGE_2D_RECT = 36965;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int UNSIGNED_INT_IMAGE_CUBE = 36966;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2")]
	public const int UNSIGNED_INT_IMAGE_BUFFER = 36967;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int UNSIGNED_INT_IMAGE_1D_ARRAY = 36968;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int UNSIGNED_INT_IMAGE_2D_ARRAY = 36969;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	[RequiredByFeature("GL_EXT_texture_cube_map_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_cube_map_array", Api = "gles2")]
	public const int UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 36970;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 36971;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 36972;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int MAX_IMAGE_SAMPLES = 36973;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public const int IMAGE_BINDING_FORMAT = 36974;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	public const int IMAGE_FORMAT_COMPATIBILITY_TYPE = 37063;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	public const int IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 37064;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	public const int IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 37065;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	public const int MAX_VERTEX_IMAGE_UNIFORMS = 37066;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_CONTROL_IMAGE_UNIFORMS = 37067;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 37068;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int MAX_GEOMETRY_IMAGE_UNIFORMS = 37069;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	public const int MAX_FRAGMENT_IMAGE_UNIFORMS = 37070;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	public const int MAX_COMBINED_IMAGE_UNIFORMS = 37071;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_texture_compression_bptc", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_compression_bptc", Api = "gles2")]
	public const int COMPRESSED_RGBA_BPTC_UNORM = 36492;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_texture_compression_bptc", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_compression_bptc", Api = "gles2")]
	public const int COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 36493;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_texture_compression_bptc", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_compression_bptc", Api = "gles2")]
	public const int COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 36494;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_texture_compression_bptc", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_compression_bptc", Api = "gles2")]
	public const int COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 36495;

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_texture_storage", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public const int TEXTURE_IMMUTABLE_FORMAT = 37167;

	[RequiredByFeature("GL_VERSION_4_3")]
	public const int NUM_SHADING_LANGUAGE_VERSIONS = 33513;

	[RequiredByFeature("GL_VERSION_4_3")]
	public const int VERTEX_ATTRIB_ARRAY_LONG = 34638;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES3_compatibility", Api = "gl|glcore")]
	public const int COMPRESSED_RGB8_ETC2 = 37492;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES3_compatibility", Api = "gl|glcore")]
	public const int COMPRESSED_SRGB8_ETC2 = 37493;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES3_compatibility", Api = "gl|glcore")]
	public const int COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37494;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES3_compatibility", Api = "gl|glcore")]
	public const int COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37495;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES3_compatibility", Api = "gl|glcore")]
	public const int COMPRESSED_RGBA8_ETC2_EAC = 37496;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES3_compatibility", Api = "gl|glcore")]
	public const int COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 37497;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES3_compatibility", Api = "gl|glcore")]
	public const int COMPRESSED_R11_EAC = 37488;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES3_compatibility", Api = "gl|glcore")]
	public const int COMPRESSED_SIGNED_R11_EAC = 37489;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES3_compatibility", Api = "gl|glcore")]
	public const int COMPRESSED_RG11_EAC = 37490;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES3_compatibility", Api = "gl|glcore")]
	public const int COMPRESSED_SIGNED_RG11_EAC = 37491;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES3_compatibility", Api = "gl|glcore")]
	public const int PRIMITIVE_RESTART_FIXED_INDEX = 36201;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES3_compatibility", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
	public const int ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES3_compatibility", Api = "gl|glcore")]
	public const int MAX_ELEMENT_INDEX = 36203;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
	public const int COMPUTE_SHADER = 37305;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
	public const int MAX_COMPUTE_UNIFORM_BLOCKS = 37307;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
	public const int MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 37308;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
	public const int MAX_COMPUTE_IMAGE_UNIFORMS = 37309;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
	public const int MAX_COMPUTE_SHARED_MEMORY_SIZE = 33378;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
	public const int MAX_COMPUTE_UNIFORM_COMPONENTS = 33379;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
	public const int MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 33380;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
	public const int MAX_COMPUTE_ATOMIC_COUNTERS = 33381;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
	public const int MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 33382;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
	public const int MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 37099;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
	public const int MAX_COMPUTE_WORK_GROUP_COUNT = 37310;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
	public const int MAX_COMPUTE_WORK_GROUP_SIZE = 37311;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
	public const int COMPUTE_WORK_GROUP_SIZE = 33383;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
	public const int UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 37100;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
	public const int ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 37101;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
	public const int DISPATCH_INDIRECT_BUFFER = 37102;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
	public const int DISPATCH_INDIRECT_BUFFER_BINDING = 37103;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
	[Log(BitmaskName = "GL")]
	public const uint COMPUTE_SHADER_BIT = 32u;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int DEBUG_OUTPUT_SYNCHRONOUS = 33346;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 33347;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int DEBUG_CALLBACK_FUNCTION = 33348;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int DEBUG_CALLBACK_USER_PARAM = 33349;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int DEBUG_SOURCE_API = 33350;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int DEBUG_SOURCE_WINDOW_SYSTEM = 33351;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int DEBUG_SOURCE_SHADER_COMPILER = 33352;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int DEBUG_SOURCE_THIRD_PARTY = 33353;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int DEBUG_SOURCE_APPLICATION = 33354;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int DEBUG_SOURCE_OTHER = 33355;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int DEBUG_TYPE_ERROR = 33356;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int DEBUG_TYPE_DEPRECATED_BEHAVIOR = 33357;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int DEBUG_TYPE_UNDEFINED_BEHAVIOR = 33358;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int DEBUG_TYPE_PORTABILITY = 33359;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int DEBUG_TYPE_PERFORMANCE = 33360;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int DEBUG_TYPE_OTHER = 33361;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_AMD_debug_output")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int MAX_DEBUG_MESSAGE_LENGTH = 37187;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_AMD_debug_output")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int MAX_DEBUG_LOGGED_MESSAGES = 37188;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_AMD_debug_output")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int DEBUG_LOGGED_MESSAGES = 37189;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_AMD_debug_output")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int DEBUG_SEVERITY_HIGH = 37190;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_AMD_debug_output")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int DEBUG_SEVERITY_MEDIUM = 37191;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[RequiredByFeature("GL_AMD_debug_output")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	public const int DEBUG_SEVERITY_LOW = 37192;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	public const int DEBUG_TYPE_MARKER = 33384;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	public const int DEBUG_TYPE_PUSH_GROUP = 33385;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	public const int DEBUG_TYPE_POP_GROUP = 33386;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	public const int DEBUG_SEVERITY_NOTIFICATION = 33387;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	public const int MAX_DEBUG_GROUP_STACK_DEPTH = 33388;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	public const int DEBUG_GROUP_STACK_DEPTH = 33389;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	public const int BUFFER = 33504;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	public const int SHADER = 33505;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	public const int PROGRAM = 33506;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	public const int QUERY = 33507;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	public const int PROGRAM_PIPELINE = 33508;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_debug_label", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	public const int SAMPLER = 33510;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	public const int MAX_LABEL_LENGTH = 33512;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	public const int DEBUG_OUTPUT = 37600;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint CONTEXT_FLAG_DEBUG_BIT = 2u;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_explicit_uniform_location", Api = "gl|glcore")]
	public const int MAX_UNIFORM_LOCATIONS = 33390;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
	public const int FRAMEBUFFER_DEFAULT_WIDTH = 37648;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
	public const int FRAMEBUFFER_DEFAULT_HEIGHT = 37649;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int FRAMEBUFFER_DEFAULT_LAYERS = 37650;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
	public const int FRAMEBUFFER_DEFAULT_SAMPLES = 37651;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
	public const int FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 37652;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
	public const int MAX_FRAMEBUFFER_WIDTH = 37653;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
	public const int MAX_FRAMEBUFFER_HEIGHT = 37654;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int MAX_FRAMEBUFFER_LAYERS = 37655;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
	public const int MAX_FRAMEBUFFER_SAMPLES = 37656;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int INTERNALFORMAT_SUPPORTED = 33391;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int INTERNALFORMAT_PREFERRED = 33392;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int INTERNALFORMAT_RED_SIZE = 33393;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int INTERNALFORMAT_GREEN_SIZE = 33394;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int INTERNALFORMAT_BLUE_SIZE = 33395;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int INTERNALFORMAT_ALPHA_SIZE = 33396;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int INTERNALFORMAT_DEPTH_SIZE = 33397;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int INTERNALFORMAT_STENCIL_SIZE = 33398;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int INTERNALFORMAT_SHARED_SIZE = 33399;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int INTERNALFORMAT_RED_TYPE = 33400;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int INTERNALFORMAT_GREEN_TYPE = 33401;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int INTERNALFORMAT_BLUE_TYPE = 33402;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int INTERNALFORMAT_ALPHA_TYPE = 33403;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int INTERNALFORMAT_DEPTH_TYPE = 33404;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int INTERNALFORMAT_STENCIL_TYPE = 33405;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int MAX_WIDTH = 33406;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int MAX_HEIGHT = 33407;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int MAX_DEPTH = 33408;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int MAX_LAYERS = 33409;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int MAX_COMBINED_DIMENSIONS = 33410;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int COLOR_COMPONENTS = 33411;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int DEPTH_COMPONENTS = 33412;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int STENCIL_COMPONENTS = 33413;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int COLOR_RENDERABLE = 33414;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int DEPTH_RENDERABLE = 33415;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int STENCIL_RENDERABLE = 33416;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int FRAMEBUFFER_RENDERABLE = 33417;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int FRAMEBUFFER_RENDERABLE_LAYERED = 33418;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int FRAMEBUFFER_BLEND = 33419;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int READ_PIXELS = 33420;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int READ_PIXELS_FORMAT = 33421;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int READ_PIXELS_TYPE = 33422;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int TEXTURE_IMAGE_FORMAT = 33423;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int TEXTURE_IMAGE_TYPE = 33424;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int GET_TEXTURE_IMAGE_FORMAT = 33425;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int GET_TEXTURE_IMAGE_TYPE = 33426;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int MIPMAP = 33427;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int MANUAL_GENERATE_MIPMAP = 33428;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int AUTO_GENERATE_MIPMAP = 33429;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int COLOR_ENCODING = 33430;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int SRGB_READ = 33431;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int SRGB_WRITE = 33432;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int FILTER = 33434;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VERTEX_TEXTURE = 33435;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int TESS_CONTROL_TEXTURE = 33436;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int TESS_EVALUATION_TEXTURE = 33437;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int GEOMETRY_TEXTURE = 33438;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int FRAGMENT_TEXTURE = 33439;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int COMPUTE_TEXTURE = 33440;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int TEXTURE_SHADOW = 33441;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int TEXTURE_GATHER = 33442;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int TEXTURE_GATHER_SHADOW = 33443;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int SHADER_IMAGE_LOAD = 33444;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int SHADER_IMAGE_STORE = 33445;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int SHADER_IMAGE_ATOMIC = 33446;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int IMAGE_TEXEL_SIZE = 33447;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int IMAGE_COMPATIBILITY_CLASS = 33448;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int IMAGE_PIXEL_FORMAT = 33449;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int IMAGE_PIXEL_TYPE = 33450;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 33452;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 33453;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 33454;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 33455;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int TEXTURE_COMPRESSED_BLOCK_WIDTH = 33457;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int TEXTURE_COMPRESSED_BLOCK_HEIGHT = 33458;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int TEXTURE_COMPRESSED_BLOCK_SIZE = 33459;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int CLEAR_BUFFER = 33460;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int TEXTURE_VIEW = 33461;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_COMPATIBILITY_CLASS = 33462;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int FULL_SUPPORT = 33463;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int CAVEAT_SUPPORT = 33464;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int IMAGE_CLASS_4_X_32 = 33465;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int IMAGE_CLASS_2_X_32 = 33466;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int IMAGE_CLASS_1_X_32 = 33467;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int IMAGE_CLASS_4_X_16 = 33468;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int IMAGE_CLASS_2_X_16 = 33469;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int IMAGE_CLASS_1_X_16 = 33470;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int IMAGE_CLASS_4_X_8 = 33471;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int IMAGE_CLASS_2_X_8 = 33472;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int IMAGE_CLASS_1_X_8 = 33473;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int IMAGE_CLASS_11_11_10 = 33474;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int IMAGE_CLASS_10_10_10_2 = 33475;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_128_BITS = 33476;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_96_BITS = 33477;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_64_BITS = 33478;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_48_BITS = 33479;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_32_BITS = 33480;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_24_BITS = 33481;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_16_BITS = 33482;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_8_BITS = 33483;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_S3TC_DXT1_RGB = 33484;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_S3TC_DXT1_RGBA = 33485;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_S3TC_DXT3_RGBA = 33486;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_S3TC_DXT5_RGBA = 33487;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_RGTC1_RED = 33488;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_RGTC2_RG = 33489;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_BPTC_UNORM = 33490;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public const int VIEW_CLASS_BPTC_FLOAT = 33491;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int UNIFORM = 37601;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int UNIFORM_BLOCK = 37602;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int PROGRAM_INPUT = 37603;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int PROGRAM_OUTPUT = 37604;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int BUFFER_VARIABLE = 37605;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int SHADER_STORAGE_BLOCK = 37606;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int VERTEX_SUBROUTINE = 37608;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int TESS_CONTROL_SUBROUTINE = 37609;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int TESS_EVALUATION_SUBROUTINE = 37610;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int GEOMETRY_SUBROUTINE = 37611;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int FRAGMENT_SUBROUTINE = 37612;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int COMPUTE_SUBROUTINE = 37613;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int VERTEX_SUBROUTINE_UNIFORM = 37614;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int TESS_CONTROL_SUBROUTINE_UNIFORM = 37615;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int TESS_EVALUATION_SUBROUTINE_UNIFORM = 37616;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int GEOMETRY_SUBROUTINE_UNIFORM = 37617;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int FRAGMENT_SUBROUTINE_UNIFORM = 37618;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int COMPUTE_SUBROUTINE_UNIFORM = 37619;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int TRANSFORM_FEEDBACK_VARYING = 37620;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int ACTIVE_RESOURCES = 37621;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int MAX_NAME_LENGTH = 37622;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int MAX_NUM_ACTIVE_VARIABLES = 37623;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int MAX_NUM_COMPATIBLE_SUBROUTINES = 37624;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int NAME_LENGTH = 37625;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int TYPE = 37626;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int ARRAY_SIZE = 37627;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int OFFSET = 37628;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int BLOCK_INDEX = 37629;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int ARRAY_STRIDE = 37630;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int MATRIX_STRIDE = 37631;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int IS_ROW_MAJOR = 37632;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int ATOMIC_COUNTER_BUFFER_INDEX = 37633;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int BUFFER_BINDING = 37634;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int BUFFER_DATA_SIZE = 37635;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int NUM_ACTIVE_VARIABLES = 37636;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int ACTIVE_VARIABLES = 37637;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int REFERENCED_BY_VERTEX_SHADER = 37638;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int REFERENCED_BY_TESS_CONTROL_SHADER = 37639;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int REFERENCED_BY_TESS_EVALUATION_SHADER = 37640;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int REFERENCED_BY_GEOMETRY_SHADER = 37641;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int REFERENCED_BY_FRAGMENT_SHADER = 37642;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int REFERENCED_BY_COMPUTE_SHADER = 37643;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int TOP_LEVEL_ARRAY_SIZE = 37644;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int TOP_LEVEL_ARRAY_STRIDE = 37645;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public const int LOCATION = 37646;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_blend_func_extended", Api = "gles2")]
	public const int LOCATION_INDEX = 37647;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int IS_PER_PATCH = 37607;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
	public const int SHADER_STORAGE_BUFFER = 37074;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
	public const int SHADER_STORAGE_BUFFER_BINDING = 37075;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
	public const int SHADER_STORAGE_BUFFER_START = 37076;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
	public const int SHADER_STORAGE_BUFFER_SIZE = 37077;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
	public const int MAX_VERTEX_SHADER_STORAGE_BLOCKS = 37078;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public const int MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 37079;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 37080;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 37081;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
	public const int MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 37082;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
	public const int MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 37083;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
	public const int MAX_COMBINED_SHADER_STORAGE_BLOCKS = 37084;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
	public const int MAX_SHADER_STORAGE_BUFFER_BINDINGS = 37085;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
	public const int MAX_SHADER_STORAGE_BLOCK_SIZE = 37086;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
	public const int SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 37087;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
	[Log(BitmaskName = "GL")]
	public const uint SHADER_STORAGE_BARRIER_BIT = 8192u;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_stencil_texturing", Api = "gl|glcore")]
	public const int DEPTH_STENCIL_TEXTURE_MODE = 37098;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_buffer_range", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2")]
	public const int TEXTURE_BUFFER_OFFSET = 37277;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_buffer_range", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2")]
	public const int TEXTURE_BUFFER_SIZE = 37278;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_buffer_range", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2")]
	public const int TEXTURE_BUFFER_OFFSET_ALIGNMENT = 37279;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_texture_view", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_view", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_view", Api = "gles2")]
	public const int TEXTURE_VIEW_MIN_LEVEL = 33499;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_texture_view", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_view", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_view", Api = "gles2")]
	public const int TEXTURE_VIEW_NUM_LEVELS = 33500;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_texture_view", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_view", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_view", Api = "gles2")]
	public const int TEXTURE_VIEW_MIN_LAYER = 33501;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_texture_view", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_view", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_view", Api = "gles2")]
	public const int TEXTURE_VIEW_NUM_LAYERS = 33502;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_view", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_view", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_view", Api = "gles2")]
	public const int TEXTURE_IMMUTABLE_LEVELS = 33503;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
	public const int VERTEX_ATTRIB_BINDING = 33492;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
	public const int VERTEX_ATTRIB_RELATIVE_OFFSET = 33493;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
	public const int VERTEX_BINDING_DIVISOR = 33494;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
	public const int VERTEX_BINDING_OFFSET = 33495;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
	public const int VERTEX_BINDING_STRIDE = 33496;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
	public const int MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 33497;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
	public const int MAX_VERTEX_ATTRIB_BINDINGS = 33498;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	public const int VERTEX_BINDING_BUFFER = 36687;

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_KHR_debug", Api = "gl|glcore|gles1|gles2")]
	public const int DISPLAY_LIST = 33511;

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	public const int MAX_VERTEX_ATTRIB_STRIDE = 33509;

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public const int PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 33313;

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2")]
	public const int TEXTURE_BUFFER_BINDING = 35882;

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_buffer_storage", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_buffer_storage", Api = "gles2")]
	[Log(BitmaskName = "GL")]
	public const int MAP_PERSISTENT_BIT = 64;

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_buffer_storage", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_buffer_storage", Api = "gles2")]
	[Log(BitmaskName = "GL")]
	public const int MAP_COHERENT_BIT = 128;

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_buffer_storage", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_buffer_storage", Api = "gles2")]
	[Log(BitmaskName = "GL")]
	public const int DYNAMIC_STORAGE_BIT = 256;

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_buffer_storage", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_buffer_storage", Api = "gles2")]
	[Log(BitmaskName = "GL")]
	public const int CLIENT_STORAGE_BIT = 512;

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_buffer_storage", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_buffer_storage", Api = "gles2")]
	[Log(BitmaskName = "GL")]
	public const uint CLIENT_MAPPED_BUFFER_BARRIER_BIT = 16384u;

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_buffer_storage", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_buffer_storage", Api = "gles2")]
	public const int BUFFER_IMMUTABLE_STORAGE = 33311;

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_buffer_storage", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_buffer_storage", Api = "gles2")]
	public const int BUFFER_STORAGE_FLAGS = 33312;

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_clear_texture", Api = "gl|glcore")]
	public const int CLEAR_TEXTURE = 37733;

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_enhanced_layouts", Api = "gl|glcore")]
	public const int LOCATION_COMPONENT = 37706;

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_enhanced_layouts", Api = "gl|glcore")]
	public const int TRANSFORM_FEEDBACK_BUFFER_INDEX = 37707;

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_enhanced_layouts", Api = "gl|glcore")]
	public const int TRANSFORM_FEEDBACK_BUFFER_STRIDE = 37708;

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_query_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_AMD_query_buffer_object")]
	public const int QUERY_BUFFER = 37266;

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_query_buffer_object", Api = "gl|glcore")]
	[Log(BitmaskName = "GL")]
	public const uint QUERY_BUFFER_BARRIER_BIT = 32768u;

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_query_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_AMD_query_buffer_object")]
	public const int QUERY_BUFFER_BINDING = 37267;

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_query_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_AMD_query_buffer_object")]
	public const int QUERY_RESULT_NO_WAIT = 37268;

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_texture_mirror_clamp_to_edge", Api = "gl|glcore")]
	[RequiredByFeature("GL_ATI_texture_mirror_once")]
	[RequiredByFeature("GL_EXT_texture_mirror_clamp")]
	[RequiredByFeature("GL_EXT_texture_mirror_clamp_to_edge", Api = "gles2")]
	public const int MIRROR_CLAMP_TO_EDGE = 34627;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_KHR_robustness", Api = "gl|glcore|gles2")]
	public const int CONTEXT_LOST = 1287;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_clip_control", Api = "gl|glcore")]
	public const int NEGATIVE_ONE_TO_ONE = 37726;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_clip_control", Api = "gl|glcore")]
	public const int ZERO_TO_ONE = 37727;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_clip_control", Api = "gl|glcore")]
	public const int CLIP_ORIGIN = 37724;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_clip_control", Api = "gl|glcore")]
	public const int CLIP_DEPTH_MODE = 37725;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_conditional_render_inverted", Api = "gl|glcore")]
	public const int QUERY_WAIT_INVERTED = 36375;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_conditional_render_inverted", Api = "gl|glcore")]
	public const int QUERY_NO_WAIT_INVERTED = 36376;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_conditional_render_inverted", Api = "gl|glcore")]
	public const int QUERY_BY_REGION_WAIT_INVERTED = 36377;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_conditional_render_inverted", Api = "gl|glcore")]
	public const int QUERY_BY_REGION_NO_WAIT_INVERTED = 36378;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_cull_distance", Api = "gl|glcore")]
	public const int MAX_CULL_DISTANCES = 33529;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_cull_distance", Api = "gl|glcore")]
	public const int MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 33530;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public const int TEXTURE_TARGET = 4102;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public const int QUERY_TARGET = 33514;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_KHR_robustness", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_robustness", Api = "gles1|gles2")]
	public const int GUILTY_CONTEXT_RESET = 33363;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_KHR_robustness", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_robustness", Api = "gles1|gles2")]
	public const int INNOCENT_CONTEXT_RESET = 33364;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_KHR_robustness", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_robustness", Api = "gles1|gles2")]
	public const int UNKNOWN_CONTEXT_RESET = 33365;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_KHR_robustness", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_robustness", Api = "gles1|gles2")]
	public const int RESET_NOTIFICATION_STRATEGY = 33366;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_KHR_robustness", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_robustness", Api = "gles1|gles2")]
	public const int LOSE_CONTEXT_ON_RESET = 33362;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_robustness", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_robustness", Api = "gles1|gles2")]
	public const int NO_RESET_NOTIFICATION = 33377;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
	[Log(BitmaskName = "GL")]
	public const uint CONTEXT_FLAG_ROBUST_ACCESS_BIT = 4u;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_table")]
	public const int COLOR_TABLE = 32976;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_table")]
	public const int POST_CONVOLUTION_COLOR_TABLE = 32977;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_table")]
	public const int POST_COLOR_MATRIX_COLOR_TABLE = 32978;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_table")]
	public const int PROXY_COLOR_TABLE = 32979;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_table")]
	public const int PROXY_POST_CONVOLUTION_COLOR_TABLE = 32980;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_SGI_color_table")]
	public const int PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 32981;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_convolution")]
	public const int CONVOLUTION_1D = 32784;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_convolution")]
	public const int CONVOLUTION_2D = 32785;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_convolution")]
	public const int SEPARABLE_2D = 32786;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_histogram")]
	public const int HISTOGRAM = 32804;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_histogram")]
	public const int PROXY_HISTOGRAM = 32805;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_histogram")]
	public const int MINMAX = 32814;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_VERSION_4_6")]
	[RequiredByFeature("GL_KHR_context_flush_control", Api = "gl|glcore|gles2")]
	public const int CONTEXT_RELEASE_BEHAVIOR = 33531;

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_VERSION_4_6")]
	[RequiredByFeature("GL_KHR_context_flush_control", Api = "gl|glcore|gles2")]
	public const int CONTEXT_RELEASE_BEHAVIOR_FLUSH = 33532;

	[RequiredByFeature("GL_VERSION_4_6")]
	public const int SHADER_BINARY_FORMAT_SPIR_V = 38225;

	[RequiredByFeature("GL_VERSION_4_6")]
	public const int SPIR_V_BINARY = 38226;

	[RequiredByFeature("GL_VERSION_4_6")]
	public const int PARAMETER_BUFFER = 33006;

	[RequiredByFeature("GL_VERSION_4_6")]
	public const int PARAMETER_BUFFER_BINDING = 33007;

	[RequiredByFeature("GL_VERSION_4_6")]
	[Log(BitmaskName = "GL")]
	public const uint CONTEXT_FLAG_NO_ERROR_BIT = 8u;

	[RequiredByFeature("GL_VERSION_4_6")]
	public const int VERTICES_SUBMITTED = 33518;

	[RequiredByFeature("GL_VERSION_4_6")]
	public const int PRIMITIVES_SUBMITTED = 33519;

	[RequiredByFeature("GL_VERSION_4_6")]
	public const int VERTEX_SHADER_INVOCATIONS = 33520;

	[RequiredByFeature("GL_VERSION_4_6")]
	public const int TESS_CONTROL_SHADER_PATCHES = 33521;

	[RequiredByFeature("GL_VERSION_4_6")]
	public const int TESS_EVALUATION_SHADER_INVOCATIONS = 33522;

	[RequiredByFeature("GL_VERSION_4_6")]
	public const int GEOMETRY_SHADER_PRIMITIVES_EMITTED = 33523;

	[RequiredByFeature("GL_VERSION_4_6")]
	public const int FRAGMENT_SHADER_INVOCATIONS = 33524;

	[RequiredByFeature("GL_VERSION_4_6")]
	public const int COMPUTE_SHADER_INVOCATIONS = 33525;

	[RequiredByFeature("GL_VERSION_4_6")]
	public const int CLIPPING_INPUT_PRIMITIVES = 33526;

	[RequiredByFeature("GL_VERSION_4_6")]
	public const int CLIPPING_OUTPUT_PRIMITIVES = 33527;

	[RequiredByFeature("GL_VERSION_4_6")]
	[RequiredByFeature("GL_ARB_polygon_offset_clamp", Api = "gl|glcore")]
	public const int POLYGON_OFFSET_CLAMP = 36379;

	[RequiredByFeature("GL_VERSION_4_6")]
	[RequiredByFeature("GL_ARB_spirv_extensions", Api = "gl|glcore")]
	public const int SPIR_V_EXTENSIONS = 38227;

	[RequiredByFeature("GL_VERSION_4_6")]
	[RequiredByFeature("GL_ARB_spirv_extensions", Api = "gl|glcore")]
	public const int NUM_SPIR_V_EXTENSIONS = 38228;

	[RequiredByFeature("GL_VERSION_4_6")]
	[RequiredByFeature("GL_ARB_texture_filter_anisotropic", Api = "gl|glcore")]
	public const int TEXTURE_MAX_ANISOTROPY = 34046;

	[RequiredByFeature("GL_VERSION_4_6")]
	[RequiredByFeature("GL_ARB_texture_filter_anisotropic", Api = "gl|glcore")]
	public const int MAX_TEXTURE_MAX_ANISOTROPY = 34047;

	[RequiredByFeature("GL_VERSION_4_6")]
	public const int TRANSFORM_FEEDBACK_OVERFLOW = 33516;

	[RequiredByFeature("GL_VERSION_4_6")]
	public const int TRANSFORM_FEEDBACK_STREAM_OVERFLOW = 33517;

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int VERSION_ES_CL_1_0 = 1;

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int VERSION_ES_CM_1_1 = 1;

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public const int VERSION_ES_CL_1_1 = 1;

	[RequiredByFeature("GL_HP_convolution_border_modes")]
	public const int IGNORE_BORDER_HP = 33104;

	[RequiredByFeature("GL_HP_image_transform")]
	public const int IMAGE_SCALE_X_HP = 33109;

	[RequiredByFeature("GL_HP_image_transform")]
	public const int IMAGE_SCALE_Y_HP = 33110;

	[RequiredByFeature("GL_HP_image_transform")]
	public const int IMAGE_TRANSLATE_X_HP = 33111;

	[RequiredByFeature("GL_HP_image_transform")]
	public const int IMAGE_TRANSLATE_Y_HP = 33112;

	[RequiredByFeature("GL_HP_image_transform")]
	public const int IMAGE_ROTATE_ANGLE_HP = 33113;

	[RequiredByFeature("GL_HP_image_transform")]
	public const int IMAGE_ROTATE_ORIGIN_X_HP = 33114;

	[RequiredByFeature("GL_HP_image_transform")]
	public const int IMAGE_ROTATE_ORIGIN_Y_HP = 33115;

	[RequiredByFeature("GL_HP_image_transform")]
	public const int IMAGE_MAG_FILTER_HP = 33116;

	[RequiredByFeature("GL_HP_image_transform")]
	public const int IMAGE_MIN_FILTER_HP = 33117;

	[RequiredByFeature("GL_HP_image_transform")]
	public const int IMAGE_CUBIC_WEIGHT_HP = 33118;

	[RequiredByFeature("GL_HP_image_transform")]
	public const int CUBIC_HP = 33119;

	[RequiredByFeature("GL_HP_image_transform")]
	public const int AVERAGE_HP = 33120;

	[RequiredByFeature("GL_HP_image_transform")]
	public const int IMAGE_TRANSFORM_2D_HP = 33121;

	[RequiredByFeature("GL_HP_image_transform")]
	public const int POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 33122;

	[RequiredByFeature("GL_HP_image_transform")]
	public const int PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 33123;

	[RequiredByFeature("GL_HP_occlusion_test")]
	public const int OCCLUSION_TEST_HP = 33125;

	[RequiredByFeature("GL_HP_occlusion_test")]
	public const int OCCLUSION_TEST_RESULT_HP = 33126;

	[RequiredByFeature("GL_HP_texture_lighting")]
	public const int TEXTURE_LIGHTING_MODE_HP = 33127;

	[RequiredByFeature("GL_HP_texture_lighting")]
	public const int TEXTURE_POST_SPECULAR_HP = 33128;

	[RequiredByFeature("GL_HP_texture_lighting")]
	public const int TEXTURE_PRE_SPECULAR_HP = 33129;

	[RequiredByFeature("GL_IBM_cull_vertex")]
	public const int CULL_VERTEX_IBM = 103050;

	[RequiredByFeature("GL_IBM_rasterpos_clip")]
	public const int RASTER_POSITION_UNCLIPPED_IBM = 103010;

	[RequiredByFeature("GL_IBM_static_data")]
	public const int ALL_STATIC_DATA_IBM = 103060;

	[RequiredByFeature("GL_IBM_static_data")]
	public const int STATIC_VERTEX_ARRAY_IBM = 103061;

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public const int VERTEX_ARRAY_LIST_IBM = 103070;

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public const int NORMAL_ARRAY_LIST_IBM = 103071;

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public const int COLOR_ARRAY_LIST_IBM = 103072;

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public const int INDEX_ARRAY_LIST_IBM = 103073;

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public const int TEXTURE_COORD_ARRAY_LIST_IBM = 103074;

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public const int EDGE_FLAG_ARRAY_LIST_IBM = 103075;

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public const int FOG_COORDINATE_ARRAY_LIST_IBM = 103076;

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public const int SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public const int VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public const int NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public const int COLOR_ARRAY_LIST_STRIDE_IBM = 103082;

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public const int INDEX_ARRAY_LIST_STRIDE_IBM = 103083;

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public const int TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public const int EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public const int FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public const int SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;

	[RequiredByFeature("GL_IMG_framebuffer_downsample", Api = "gles2")]
	public const int FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG = 37180;

	[RequiredByFeature("GL_IMG_framebuffer_downsample", Api = "gles2")]
	public const int NUM_DOWNSAMPLE_SCALES_IMG = 37181;

	[RequiredByFeature("GL_IMG_framebuffer_downsample", Api = "gles2")]
	public const int DOWNSAMPLE_SCALES_IMG = 37182;

	[RequiredByFeature("GL_IMG_framebuffer_downsample", Api = "gles2")]
	public const int FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG = 37183;

	[RequiredByFeature("GL_IMG_multisampled_render_to_texture", Api = "gles1|gles2")]
	public const int RENDERBUFFER_SAMPLES_IMG = 37171;

	[RequiredByFeature("GL_IMG_multisampled_render_to_texture", Api = "gles1|gles2")]
	public const int FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = 37172;

	[RequiredByFeature("GL_IMG_multisampled_render_to_texture", Api = "gles1|gles2")]
	public const int MAX_SAMPLES_IMG = 37173;

	[RequiredByFeature("GL_IMG_multisampled_render_to_texture", Api = "gles1|gles2")]
	public const int TEXTURE_SAMPLES_IMG = 37174;

	[RequiredByFeature("GL_IMG_program_binary", Api = "gles2")]
	public const int SGX_PROGRAM_BINARY_IMG = 37168;

	[RequiredByFeature("GL_IMG_shader_binary", Api = "gles2")]
	public const int SGX_BINARY_IMG = 35850;

	[RequiredByFeature("GL_IMG_texture_compression_pvrtc", Api = "gles1|gles2")]
	public const int COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840;

	[RequiredByFeature("GL_IMG_texture_compression_pvrtc", Api = "gles1|gles2")]
	public const int COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841;

	[RequiredByFeature("GL_IMG_texture_compression_pvrtc", Api = "gles1|gles2")]
	public const int COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842;

	[RequiredByFeature("GL_IMG_texture_compression_pvrtc", Api = "gles1|gles2")]
	public const int COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843;

	[RequiredByFeature("GL_IMG_texture_compression_pvrtc2", Api = "gles2")]
	public const int COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = 37175;

	[RequiredByFeature("GL_IMG_texture_compression_pvrtc2", Api = "gles2")]
	public const int COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = 37176;

	[RequiredByFeature("GL_IMG_texture_env_enhanced_fixed_function", Api = "gles1")]
	public const int MODULATE_COLOR_IMG = 35844;

	[RequiredByFeature("GL_IMG_texture_env_enhanced_fixed_function", Api = "gles1")]
	public const int RECIP_ADD_SIGNED_ALPHA_IMG = 35845;

	[RequiredByFeature("GL_IMG_texture_env_enhanced_fixed_function", Api = "gles1")]
	public const int TEXTURE_ALPHA_MODULATE_IMG = 35846;

	[RequiredByFeature("GL_IMG_texture_env_enhanced_fixed_function", Api = "gles1")]
	public const int FACTOR_ALPHA_MODULATE_IMG = 35847;

	[RequiredByFeature("GL_IMG_texture_env_enhanced_fixed_function", Api = "gles1")]
	public const int FRAGMENT_ALPHA_MODULATE_IMG = 35848;

	[RequiredByFeature("GL_IMG_texture_env_enhanced_fixed_function", Api = "gles1")]
	public const int ADD_BLEND_IMG = 35849;

	[RequiredByFeature("GL_IMG_texture_filter_cubic", Api = "gles2")]
	public const int CUBIC_IMG = 37177;

	[RequiredByFeature("GL_IMG_texture_filter_cubic", Api = "gles2")]
	public const int CUBIC_MIPMAP_NEAREST_IMG = 37178;

	[RequiredByFeature("GL_IMG_texture_filter_cubic", Api = "gles2")]
	public const int CUBIC_MIPMAP_LINEAR_IMG = 37179;

	[RequiredByFeature("GL_IMG_tile_region_protection", Api = "glsc2")]
	public const int TRP_IMG = 36512;

	[RequiredByFeature("GL_IMG_tile_region_protection", Api = "glsc2")]
	public const int TRP_ERROR_CONTEXT_RESET_IMG = 36513;

	[RequiredByFeature("GL_IMG_tile_region_protection", Api = "glsc2")]
	public const int TRP_UNSUPPORTED_CONTEXT_IMG = 36514;

	[RequiredByFeature("GL_INGR_color_clamp")]
	public const int RED_MIN_CLAMP_INGR = 34144;

	[RequiredByFeature("GL_INGR_color_clamp")]
	public const int GREEN_MIN_CLAMP_INGR = 34145;

	[RequiredByFeature("GL_INGR_color_clamp")]
	public const int BLUE_MIN_CLAMP_INGR = 34146;

	[RequiredByFeature("GL_INGR_color_clamp")]
	public const int ALPHA_MIN_CLAMP_INGR = 34147;

	[RequiredByFeature("GL_INGR_color_clamp")]
	public const int RED_MAX_CLAMP_INGR = 34148;

	[RequiredByFeature("GL_INGR_color_clamp")]
	public const int GREEN_MAX_CLAMP_INGR = 34149;

	[RequiredByFeature("GL_INGR_color_clamp")]
	public const int BLUE_MAX_CLAMP_INGR = 34150;

	[RequiredByFeature("GL_INGR_color_clamp")]
	public const int ALPHA_MAX_CLAMP_INGR = 34151;

	[RequiredByFeature("GL_INGR_interlace_read")]
	public const int INTERLACE_READ_INGR = 34152;

	[RequiredByFeature("GL_INTEL_blackhole_render", Api = "gl|glcore|gles2")]
	public const int BLACKHOLE_RENDER_INTEL = 33788;

	[RequiredByFeature("GL_INTEL_conservative_rasterization", Api = "gl|glcore|gles2")]
	public const int CONSERVATIVE_RASTERIZATION_INTEL = 33790;

	[RequiredByFeature("GL_INTEL_map_texture")]
	public const int TEXTURE_MEMORY_LAYOUT_INTEL = 33791;

	[RequiredByFeature("GL_INTEL_map_texture")]
	public const int LAYOUT_DEFAULT_INTEL = 0;

	[RequiredByFeature("GL_INTEL_map_texture")]
	public const int LAYOUT_LINEAR_INTEL = 1;

	[RequiredByFeature("GL_INTEL_map_texture")]
	public const int LAYOUT_LINEAR_CPU_CACHED_INTEL = 2;

	[RequiredByFeature("GL_INTEL_parallel_arrays")]
	public const int PARALLEL_ARRAYS_INTEL = 33780;

	[RequiredByFeature("GL_INTEL_parallel_arrays")]
	public const int VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 33781;

	[RequiredByFeature("GL_INTEL_parallel_arrays")]
	public const int NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 33782;

	[RequiredByFeature("GL_INTEL_parallel_arrays")]
	public const int COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 33783;

	[RequiredByFeature("GL_INTEL_parallel_arrays")]
	public const int TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 33784;

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const int PERFQUERY_SINGLE_CONTEXT_INTEL = 0;

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const int PERFQUERY_GLOBAL_CONTEXT_INTEL = 1;

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public const int PERFQUERY_WAIT_INTEL = 33787;

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public const int PERFQUERY_FLUSH_INTEL = 33786;

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public const int PERFQUERY_DONOT_FLUSH_INTEL = 33785;

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public const int PERFQUERY_COUNTER_EVENT_INTEL = 38128;

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public const int PERFQUERY_COUNTER_DURATION_NORM_INTEL = 38129;

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public const int PERFQUERY_COUNTER_DURATION_RAW_INTEL = 38130;

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public const int PERFQUERY_COUNTER_THROUGHPUT_INTEL = 38131;

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public const int PERFQUERY_COUNTER_RAW_INTEL = 38132;

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public const int PERFQUERY_COUNTER_TIMESTAMP_INTEL = 38133;

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public const int PERFQUERY_COUNTER_DATA_UINT32_INTEL = 38136;

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public const int PERFQUERY_COUNTER_DATA_UINT64_INTEL = 38137;

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public const int PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 38138;

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public const int PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 38139;

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public const int PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 38140;

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public const int PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 38141;

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public const int PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 38142;

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public const int PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 38143;

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public const int PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 38144;

	[RequiredByFeature("GL_KHR_blend_equation_advanced_coherent", Api = "gl|glcore|gles2")]
	public const int BLEND_ADVANCED_COHERENT_KHR = 37509;

	[RequiredByFeature("GL_KHR_shader_subgroup", Api = "gl|glcore|gles2")]
	public const int SUBGROUP_SIZE_KHR = 38194;

	[RequiredByFeature("GL_KHR_shader_subgroup", Api = "gl|glcore|gles2")]
	public const int SUBGROUP_SUPPORTED_STAGES_KHR = 38195;

	[RequiredByFeature("GL_KHR_shader_subgroup", Api = "gl|glcore|gles2")]
	public const int SUBGROUP_SUPPORTED_FEATURES_KHR = 38196;

	[RequiredByFeature("GL_KHR_shader_subgroup", Api = "gl|glcore|gles2")]
	public const int SUBGROUP_QUAD_ALL_STAGES_KHR = 38197;

	[RequiredByFeature("GL_KHR_shader_subgroup", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint SUBGROUP_FEATURE_BASIC_BIT_KHR = 1u;

	[RequiredByFeature("GL_KHR_shader_subgroup", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint SUBGROUP_FEATURE_VOTE_BIT_KHR = 2u;

	[RequiredByFeature("GL_KHR_shader_subgroup", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR = 4u;

	[RequiredByFeature("GL_KHR_shader_subgroup", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint SUBGROUP_FEATURE_BALLOT_BIT_KHR = 8u;

	[RequiredByFeature("GL_KHR_shader_subgroup", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint SUBGROUP_FEATURE_SHUFFLE_BIT_KHR = 16u;

	[RequiredByFeature("GL_KHR_shader_subgroup", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR = 32u;

	[RequiredByFeature("GL_KHR_shader_subgroup", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint SUBGROUP_FEATURE_CLUSTERED_BIT_KHR = 64u;

	[RequiredByFeature("GL_KHR_shader_subgroup", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint SUBGROUP_FEATURE_QUAD_BIT_KHR = 128u;

	[RequiredByFeature("GL_MESAX_texture_stack")]
	public const int TEXTURE_1D_STACK_MESAX = 34649;

	[RequiredByFeature("GL_MESAX_texture_stack")]
	public const int TEXTURE_2D_STACK_MESAX = 34650;

	[RequiredByFeature("GL_MESAX_texture_stack")]
	public const int PROXY_TEXTURE_1D_STACK_MESAX = 34651;

	[RequiredByFeature("GL_MESAX_texture_stack")]
	public const int PROXY_TEXTURE_2D_STACK_MESAX = 34652;

	[RequiredByFeature("GL_MESAX_texture_stack")]
	public const int TEXTURE_1D_STACK_BINDING_MESAX = 34653;

	[RequiredByFeature("GL_MESAX_texture_stack")]
	public const int TEXTURE_2D_STACK_BINDING_MESAX = 34654;

	[RequiredByFeature("GL_MESA_framebuffer_flip_x", Api = "gl|glcore|gles2")]
	public const int FRAMEBUFFER_FLIP_X_MESA = 35772;

	[RequiredByFeature("GL_MESA_framebuffer_flip_y", Api = "gl|glcore|gles2")]
	public const int FRAMEBUFFER_FLIP_Y_MESA = 35771;

	[RequiredByFeature("GL_MESA_framebuffer_swap_xy", Api = "gl|glcore|gles2")]
	public const int FRAMEBUFFER_SWAP_XY_MESA = 35773;

	[RequiredByFeature("GL_MESA_pack_invert")]
	public const int PACK_INVERT_MESA = 34648;

	[RequiredByFeature("GL_MESA_program_binary_formats", Api = "gl|gles2")]
	public const int PROGRAM_BINARY_FORMAT_MESA = 34655;

	[RequiredByFeature("GL_MESA_tile_raster_order")]
	public const int TILE_RASTER_ORDER_FIXED_MESA = 35768;

	[RequiredByFeature("GL_MESA_tile_raster_order")]
	public const int TILE_RASTER_ORDER_INCREASING_X_MESA = 35769;

	[RequiredByFeature("GL_MESA_tile_raster_order")]
	public const int TILE_RASTER_ORDER_INCREASING_Y_MESA = 35770;

	[RequiredByFeature("GL_MESA_ycbcr_texture")]
	public const int UNSIGNED_SHORT_8_8_MESA = 34234;

	[RequiredByFeature("GL_MESA_ycbcr_texture")]
	public const int UNSIGNED_SHORT_8_8_REV_MESA = 34235;

	[RequiredByFeature("GL_MESA_ycbcr_texture")]
	public const int YCBCR_MESA = 34647;

	[RequiredByFeature("GL_NVX_gpu_memory_info")]
	public const int GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 36935;

	[RequiredByFeature("GL_NVX_gpu_memory_info")]
	public const int GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 36936;

	[RequiredByFeature("GL_NVX_gpu_memory_info")]
	public const int GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 36937;

	[RequiredByFeature("GL_NVX_gpu_memory_info")]
	public const int GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 36938;

	[RequiredByFeature("GL_NVX_gpu_memory_info")]
	public const int GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 36939;

	[RequiredByFeature("GL_NVX_gpu_multicast2")]
	public const int UPLOAD_GPU_MASK_NVX = 38218;

	[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
	[Log(BitmaskName = "GL")]
	public const int LGPU_SEPARATE_STORAGE_BIT_NVX = 2048;

	[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
	public const int MAX_LGPU_GPUS_NVX = 37562;

	[RequiredByFeature("GL_NV_alpha_to_coverage_dither_control")]
	public const int ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV = 37709;

	[RequiredByFeature("GL_NV_alpha_to_coverage_dither_control")]
	public const int ALPHA_TO_COVERAGE_DITHER_ENABLE_NV = 37710;

	[RequiredByFeature("GL_NV_alpha_to_coverage_dither_control")]
	public const int ALPHA_TO_COVERAGE_DITHER_DISABLE_NV = 37711;

	[RequiredByFeature("GL_NV_alpha_to_coverage_dither_control")]
	public const int ALPHA_TO_COVERAGE_DITHER_MODE_NV = 37567;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int BLEND_OVERLAP_NV = 37505;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int BLEND_PREMULTIPLIED_SRC_NV = 37504;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int CONJOINT_NV = 37508;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int CONTRAST_NV = 37537;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int DISJOINT_NV = 37507;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int DST_ATOP_NV = 37519;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int DST_IN_NV = 37515;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int DST_NV = 37511;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int DST_OUT_NV = 37517;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int DST_OVER_NV = 37513;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int HARDMIX_NV = 37545;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int INVERT_OVG_NV = 37556;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int INVERT_RGB_NV = 37539;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int LINEARBURN_NV = 37541;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int LINEARDODGE_NV = 37540;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int LINEARLIGHT_NV = 37543;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int MINUS_CLAMPED_NV = 37555;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int MINUS_NV = 37535;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int PINLIGHT_NV = 37544;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int PLUS_CLAMPED_ALPHA_NV = 37554;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int PLUS_CLAMPED_NV = 37553;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int PLUS_DARKER_NV = 37522;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int PLUS_NV = 37521;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int SRC_ATOP_NV = 37518;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int SRC_IN_NV = 37514;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int SRC_NV = 37510;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int SRC_OUT_NV = 37516;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int SRC_OVER_NV = 37512;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int UNCORRELATED_NV = 37506;

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public const int VIVIDLIGHT_NV = 37542;

	[RequiredByFeature("GL_NV_blend_equation_advanced_coherent", Api = "gl|glcore|gles2")]
	public const int BLEND_ADVANCED_COHERENT_NV = 37509;

	[RequiredByFeature("GL_NV_clip_space_w_scaling", Api = "gl|glcore|gles2")]
	public const int VIEWPORT_POSITION_W_SCALE_NV = 37756;

	[RequiredByFeature("GL_NV_clip_space_w_scaling", Api = "gl|glcore|gles2")]
	public const int VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = 37757;

	[RequiredByFeature("GL_NV_clip_space_w_scaling", Api = "gl|glcore|gles2")]
	public const int VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = 37758;

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public const int TERMINATE_SEQUENCE_COMMAND_NV = 0;

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public const int NOP_COMMAND_NV = 1;

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public const int DRAW_ELEMENTS_COMMAND_NV = 2;

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public const int DRAW_ARRAYS_COMMAND_NV = 3;

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public const int DRAW_ELEMENTS_STRIP_COMMAND_NV = 4;

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public const int DRAW_ARRAYS_STRIP_COMMAND_NV = 5;

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public const int DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 6;

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public const int DRAW_ARRAYS_INSTANCED_COMMAND_NV = 7;

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public const int ELEMENT_ADDRESS_COMMAND_NV = 8;

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public const int ATTRIBUTE_ADDRESS_COMMAND_NV = 9;

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public const int UNIFORM_ADDRESS_COMMAND_NV = 10;

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public const int BLEND_COLOR_COMMAND_NV = 11;

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public const int STENCIL_REF_COMMAND_NV = 12;

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public const int LINE_WIDTH_COMMAND_NV = 13;

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public const int POLYGON_OFFSET_COMMAND_NV = 14;

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public const int ALPHA_REF_COMMAND_NV = 15;

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public const int VIEWPORT_COMMAND_NV = 16;

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public const int SCISSOR_COMMAND_NV = 17;

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public const int FRONT_FACE_COMMAND_NV = 18;

	[RequiredByFeature("GL_NV_compute_program5")]
	public const int COMPUTE_PROGRAM_NV = 37115;

	[RequiredByFeature("GL_NV_compute_program5")]
	public const int COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 37116;

	[RequiredByFeature("GL_NV_conservative_raster", Api = "gl|glcore|gles2")]
	public const int CONSERVATIVE_RASTERIZATION_NV = 37702;

	[RequiredByFeature("GL_NV_conservative_raster", Api = "gl|glcore|gles2")]
	public const int SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 37703;

	[RequiredByFeature("GL_NV_conservative_raster", Api = "gl|glcore|gles2")]
	public const int SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 37704;

	[RequiredByFeature("GL_NV_conservative_raster", Api = "gl|glcore|gles2")]
	public const int MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 37705;

	[RequiredByFeature("GL_NV_conservative_raster_dilate", Api = "gl|glcore")]
	public const int CONSERVATIVE_RASTER_DILATE_NV = 37753;

	[RequiredByFeature("GL_NV_conservative_raster_dilate", Api = "gl|glcore")]
	public const int CONSERVATIVE_RASTER_DILATE_RANGE_NV = 37754;

	[RequiredByFeature("GL_NV_conservative_raster_dilate", Api = "gl|glcore")]
	public const int CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = 37755;

	[RequiredByFeature("GL_NV_conservative_raster_pre_snap", Api = "gl|glcore|gles2")]
	public const int CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV = 38224;

	[RequiredByFeature("GL_NV_conservative_raster_pre_snap_triangles", Api = "gl|glcore|gles2")]
	public const int CONSERVATIVE_RASTER_MODE_NV = 38221;

	[RequiredByFeature("GL_NV_conservative_raster_pre_snap_triangles", Api = "gl|glcore|gles2")]
	public const int CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = 38222;

	[RequiredByFeature("GL_NV_conservative_raster_pre_snap_triangles", Api = "gl|glcore|gles2")]
	public const int CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = 38223;

	[RequiredByFeature("GL_NV_copy_depth_to_color")]
	public const int DEPTH_STENCIL_TO_RGBA_NV = 34926;

	[RequiredByFeature("GL_NV_copy_depth_to_color")]
	public const int DEPTH_STENCIL_TO_BGRA_NV = 34927;

	[RequiredByFeature("GL_NV_coverage_sample", Api = "gles2")]
	public const int COVERAGE_COMPONENT_NV = 36560;

	[RequiredByFeature("GL_NV_coverage_sample", Api = "gles2")]
	public const int COVERAGE_COMPONENT4_NV = 36561;

	[RequiredByFeature("GL_NV_coverage_sample", Api = "gles2")]
	public const int COVERAGE_ATTACHMENT_NV = 36562;

	[RequiredByFeature("GL_NV_coverage_sample", Api = "gles2")]
	public const int COVERAGE_BUFFERS_NV = 36563;

	[RequiredByFeature("GL_NV_coverage_sample", Api = "gles2")]
	public const int COVERAGE_SAMPLES_NV = 36564;

	[RequiredByFeature("GL_NV_coverage_sample", Api = "gles2")]
	public const int COVERAGE_ALL_FRAGMENTS_NV = 36565;

	[RequiredByFeature("GL_NV_coverage_sample", Api = "gles2")]
	public const int COVERAGE_EDGE_FRAGMENTS_NV = 36566;

	[RequiredByFeature("GL_NV_coverage_sample", Api = "gles2")]
	public const int COVERAGE_AUTOMATIC_NV = 36567;

	[RequiredByFeature("GL_NV_coverage_sample", Api = "gles2")]
	[Log(BitmaskName = "GL")]
	public const uint COVERAGE_BUFFER_BIT_NV = 32768u;

	[RequiredByFeature("GL_NV_deep_texture3D")]
	public const int MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 37072;

	[RequiredByFeature("GL_NV_deep_texture3D")]
	public const int MAX_DEEP_3D_TEXTURE_DEPTH_NV = 37073;

	[RequiredByFeature("GL_NV_depth_buffer_float", Api = "gl|glcore")]
	public const int DEPTH_COMPONENT32F_NV = 36267;

	[RequiredByFeature("GL_NV_depth_buffer_float", Api = "gl|glcore")]
	public const int DEPTH32F_STENCIL8_NV = 36268;

	[RequiredByFeature("GL_NV_depth_buffer_float", Api = "gl|glcore")]
	public const int DEPTH_BUFFER_FLOAT_MODE_NV = 36271;

	[RequiredByFeature("GL_NV_depth_nonlinear", Api = "gles2")]
	public const int DEPTH_COMPONENT16_NONLINEAR_NV = 36396;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int EVAL_2D_NV = 34496;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int EVAL_TRIANGULAR_2D_NV = 34497;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int MAP_TESSELLATION_NV = 34498;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int MAP_ATTRIB_U_ORDER_NV = 34499;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int MAP_ATTRIB_V_ORDER_NV = 34500;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int EVAL_FRACTIONAL_TESSELLATION_NV = 34501;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int EVAL_VERTEX_ATTRIB0_NV = 34502;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int EVAL_VERTEX_ATTRIB1_NV = 34503;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int EVAL_VERTEX_ATTRIB2_NV = 34504;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int EVAL_VERTEX_ATTRIB3_NV = 34505;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int EVAL_VERTEX_ATTRIB4_NV = 34506;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int EVAL_VERTEX_ATTRIB5_NV = 34507;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int EVAL_VERTEX_ATTRIB6_NV = 34508;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int EVAL_VERTEX_ATTRIB7_NV = 34509;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int EVAL_VERTEX_ATTRIB8_NV = 34510;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int EVAL_VERTEX_ATTRIB9_NV = 34511;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int EVAL_VERTEX_ATTRIB10_NV = 34512;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int EVAL_VERTEX_ATTRIB11_NV = 34513;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int EVAL_VERTEX_ATTRIB12_NV = 34514;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int EVAL_VERTEX_ATTRIB13_NV = 34515;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int EVAL_VERTEX_ATTRIB14_NV = 34516;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int EVAL_VERTEX_ATTRIB15_NV = 34517;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int MAX_MAP_TESSELLATION_NV = 34518;

	[RequiredByFeature("GL_NV_evaluators")]
	public const int MAX_RATIONAL_EVAL_ORDER_NV = 34519;

	[RequiredByFeature("GL_NV_explicit_multisample")]
	public const int TEXTURE_BINDING_RENDERBUFFER_NV = 36435;

	[RequiredByFeature("GL_NV_explicit_multisample")]
	public const int TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 36436;

	[RequiredByFeature("GL_NV_explicit_multisample")]
	public const int TEXTURE_RENDERBUFFER_NV = 36437;

	[RequiredByFeature("GL_NV_explicit_multisample")]
	public const int SAMPLER_RENDERBUFFER_NV = 36438;

	[RequiredByFeature("GL_NV_explicit_multisample")]
	public const int INT_SAMPLER_RENDERBUFFER_NV = 36439;

	[RequiredByFeature("GL_NV_explicit_multisample")]
	public const int UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 36440;

	[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
	public const int ALL_COMPLETED_NV = 34034;

	[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
	public const int FENCE_STATUS_NV = 34035;

	[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
	public const int FENCE_CONDITION_NV = 34036;

	[RequiredByFeature("GL_NV_fill_rectangle", Api = "gl|glcore|gles2")]
	public const int FILL_RECTANGLE_NV = 37692;

	[RequiredByFeature("GL_NV_float_buffer")]
	public const int FLOAT_R_NV = 34944;

	[RequiredByFeature("GL_NV_float_buffer")]
	public const int FLOAT_RG_NV = 34945;

	[RequiredByFeature("GL_NV_float_buffer")]
	public const int FLOAT_RGB_NV = 34946;

	[RequiredByFeature("GL_NV_float_buffer")]
	public const int FLOAT_RGBA_NV = 34947;

	[RequiredByFeature("GL_NV_float_buffer")]
	public const int FLOAT_R16_NV = 34948;

	[RequiredByFeature("GL_NV_float_buffer")]
	public const int FLOAT_R32_NV = 34949;

	[RequiredByFeature("GL_NV_float_buffer")]
	public const int FLOAT_RG16_NV = 34950;

	[RequiredByFeature("GL_NV_float_buffer")]
	public const int FLOAT_RG32_NV = 34951;

	[RequiredByFeature("GL_NV_float_buffer")]
	public const int FLOAT_RGB16_NV = 34952;

	[RequiredByFeature("GL_NV_float_buffer")]
	public const int FLOAT_RGB32_NV = 34953;

	[RequiredByFeature("GL_NV_float_buffer")]
	public const int FLOAT_RGBA16_NV = 34954;

	[RequiredByFeature("GL_NV_float_buffer")]
	public const int FLOAT_RGBA32_NV = 34955;

	[RequiredByFeature("GL_NV_float_buffer")]
	public const int TEXTURE_FLOAT_COMPONENTS_NV = 34956;

	[RequiredByFeature("GL_NV_float_buffer")]
	public const int FLOAT_CLEAR_COLOR_VALUE_NV = 34957;

	[RequiredByFeature("GL_NV_float_buffer")]
	public const int FLOAT_RGBA_MODE_NV = 34958;

	[RequiredByFeature("GL_NV_fog_distance")]
	public const int FOG_DISTANCE_MODE_NV = 34138;

	[RequiredByFeature("GL_NV_fog_distance")]
	public const int EYE_RADIAL_NV = 34139;

	[RequiredByFeature("GL_NV_fog_distance")]
	public const int EYE_PLANE_ABSOLUTE_NV = 34140;

	[RequiredByFeature("GL_NV_fragment_coverage_to_color", Api = "gl|glcore|gles2")]
	public const int FRAGMENT_COVERAGE_TO_COLOR_NV = 37597;

	[RequiredByFeature("GL_NV_fragment_coverage_to_color", Api = "gl|glcore|gles2")]
	public const int FRAGMENT_COVERAGE_COLOR_NV = 37598;

	[RequiredByFeature("GL_NV_fragment_program")]
	public const int MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 34920;

	[RequiredByFeature("GL_NV_fragment_program")]
	public const int FRAGMENT_PROGRAM_NV = 34928;

	[RequiredByFeature("GL_NV_fragment_program")]
	public const int FRAGMENT_PROGRAM_BINDING_NV = 34931;

	[RequiredByFeature("GL_NV_fragment_program2")]
	[RequiredByFeature("GL_NV_vertex_program2_option")]
	public const int MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 35060;

	[RequiredByFeature("GL_NV_fragment_program2")]
	[RequiredByFeature("GL_NV_vertex_program2_option")]
	public const int MAX_PROGRAM_CALL_DEPTH_NV = 35061;

	[RequiredByFeature("GL_NV_fragment_program2")]
	public const int MAX_PROGRAM_IF_DEPTH_NV = 35062;

	[RequiredByFeature("GL_NV_fragment_program2")]
	public const int MAX_PROGRAM_LOOP_DEPTH_NV = 35063;

	[RequiredByFeature("GL_NV_fragment_program2")]
	public const int MAX_PROGRAM_LOOP_COUNT_NV = 35064;

	[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
	public const int COVERAGE_MODULATION_TABLE_NV = 37681;

	[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
	public const int DEPTH_SAMPLES_NV = 37677;

	[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
	public const int STENCIL_SAMPLES_NV = 37678;

	[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
	public const int MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 37679;

	[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
	public const int MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 37680;

	[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
	public const int COVERAGE_MODULATION_NV = 37682;

	[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
	public const int COVERAGE_MODULATION_TABLE_SIZE_NV = 37683;

	[RequiredByFeature("GL_NV_framebuffer_multisample_coverage", Api = "gl|glcore")]
	public const int RENDERBUFFER_COVERAGE_SAMPLES_NV = 36011;

	[RequiredByFeature("GL_NV_framebuffer_multisample_coverage", Api = "gl|glcore")]
	public const int RENDERBUFFER_COLOR_SAMPLES_NV = 36368;

	[RequiredByFeature("GL_NV_framebuffer_multisample_coverage", Api = "gl|glcore")]
	public const int MAX_MULTISAMPLE_COVERAGE_MODES_NV = 36369;

	[RequiredByFeature("GL_NV_framebuffer_multisample_coverage", Api = "gl|glcore")]
	public const int MULTISAMPLE_COVERAGE_MODES_NV = 36370;

	[RequiredByFeature("GL_NV_geometry_program4")]
	public const int GEOMETRY_PROGRAM_NV = 35878;

	[RequiredByFeature("GL_NV_geometry_program4")]
	public const int MAX_PROGRAM_OUTPUT_VERTICES_NV = 35879;

	[RequiredByFeature("GL_NV_geometry_program4")]
	public const int MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 35880;

	[RequiredByFeature("GL_NV_gpu_multicast")]
	[Log(BitmaskName = "GL")]
	public const int PER_GPU_STORAGE_BIT_NV = 2048;

	[RequiredByFeature("GL_NV_gpu_multicast")]
	public const int MULTICAST_GPUS_NV = 37562;

	[RequiredByFeature("GL_NV_gpu_multicast")]
	public const int RENDER_GPU_MASK_NV = 38232;

	[RequiredByFeature("GL_NV_gpu_multicast")]
	public const int PER_GPU_STORAGE_NV = 38216;

	[RequiredByFeature("GL_NV_gpu_multicast")]
	public const int MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV = 38217;

	[RequiredByFeature("GL_NV_gpu_program4")]
	public const int PROGRAM_ATTRIB_COMPONENTS_NV = 35078;

	[RequiredByFeature("GL_NV_gpu_program4")]
	public const int PROGRAM_RESULT_COMPONENTS_NV = 35079;

	[RequiredByFeature("GL_NV_gpu_program4")]
	public const int MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 35080;

	[RequiredByFeature("GL_NV_gpu_program4")]
	public const int MAX_PROGRAM_RESULT_COMPONENTS_NV = 35081;

	[RequiredByFeature("GL_NV_gpu_program4")]
	public const int MAX_PROGRAM_GENERIC_ATTRIBS_NV = 36261;

	[RequiredByFeature("GL_NV_gpu_program4")]
	public const int MAX_PROGRAM_GENERIC_RESULTS_NV = 36262;

	[RequiredByFeature("GL_NV_gpu_program5")]
	public const int MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 36442;

	[RequiredByFeature("GL_NV_gpu_program5")]
	public const int FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 36445;

	[RequiredByFeature("GL_NV_gpu_program5")]
	public const int MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 36676;

	[RequiredByFeature("GL_NV_gpu_program5")]
	public const int MAX_PROGRAM_SUBROUTINE_NUM_NV = 36677;

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int INT8_NV = 36832;

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int INT8_VEC2_NV = 36833;

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int INT8_VEC3_NV = 36834;

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int INT8_VEC4_NV = 36835;

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int INT16_NV = 36836;

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int INT16_VEC2_NV = 36837;

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int INT16_VEC3_NV = 36838;

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int INT16_VEC4_NV = 36839;

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int UNSIGNED_INT8_NV = 36844;

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int UNSIGNED_INT8_VEC2_NV = 36845;

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int UNSIGNED_INT8_VEC3_NV = 36846;

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int UNSIGNED_INT8_VEC4_NV = 36847;

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int UNSIGNED_INT16_NV = 36848;

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int UNSIGNED_INT16_VEC2_NV = 36849;

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int UNSIGNED_INT16_VEC3_NV = 36850;

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int UNSIGNED_INT16_VEC4_NV = 36851;

	[RequiredByFeature("GL_AMD_gpu_shader_half_float")]
	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int FLOAT16_NV = 36856;

	[RequiredByFeature("GL_AMD_gpu_shader_half_float")]
	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int FLOAT16_VEC2_NV = 36857;

	[RequiredByFeature("GL_AMD_gpu_shader_half_float")]
	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int FLOAT16_VEC3_NV = 36858;

	[RequiredByFeature("GL_AMD_gpu_shader_half_float")]
	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public const int FLOAT16_VEC4_NV = 36859;

	[RequiredByFeature("GL_NV_internalformat_sample_query", Api = "gl|glcore|gles2")]
	public const int MULTISAMPLES_NV = 37745;

	[RequiredByFeature("GL_NV_internalformat_sample_query", Api = "gl|glcore|gles2")]
	public const int SUPERSAMPLE_SCALE_X_NV = 37746;

	[RequiredByFeature("GL_NV_internalformat_sample_query", Api = "gl|glcore|gles2")]
	public const int SUPERSAMPLE_SCALE_Y_NV = 37747;

	[RequiredByFeature("GL_NV_internalformat_sample_query", Api = "gl|glcore|gles2")]
	public const int CONFORMANT_NV = 37748;

	[RequiredByFeature("GL_NV_light_max_exponent")]
	public const int MAX_SHININESS_NV = 34052;

	[RequiredByFeature("GL_NV_light_max_exponent")]
	public const int MAX_SPOT_EXPONENT_NV = 34053;

	[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
	public const int ATTACHED_MEMORY_OBJECT_NV = 38308;

	[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
	public const int ATTACHED_MEMORY_OFFSET_NV = 38309;

	[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
	public const int MEMORY_ATTACHABLE_ALIGNMENT_NV = 38310;

	[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
	public const int MEMORY_ATTACHABLE_SIZE_NV = 38311;

	[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
	public const int MEMORY_ATTACHABLE_NV = 38312;

	[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
	public const int DETACHED_MEMORY_INCARNATION_NV = 38313;

	[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
	public const int DETACHED_TEXTURES_NV = 38314;

	[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
	public const int DETACHED_BUFFERS_NV = 38315;

	[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
	public const int MAX_DETACHED_TEXTURES_NV = 38316;

	[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
	public const int MAX_DETACHED_BUFFERS_NV = 38317;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MESH_SHADER_NV = 38233;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int TASK_SHADER_NV = 38234;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_MESH_UNIFORM_BLOCKS_NV = 36448;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_MESH_TEXTURE_IMAGE_UNITS_NV = 36449;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_MESH_IMAGE_UNIFORMS_NV = 36450;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_MESH_UNIFORM_COMPONENTS_NV = 36451;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV = 36452;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_MESH_ATOMIC_COUNTERS_NV = 36453;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_MESH_SHADER_STORAGE_BLOCKS_NV = 36454;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV = 36455;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_TASK_UNIFORM_BLOCKS_NV = 36456;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_TASK_TEXTURE_IMAGE_UNITS_NV = 36457;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_TASK_IMAGE_UNIFORMS_NV = 36458;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_TASK_UNIFORM_COMPONENTS_NV = 36459;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV = 36460;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_TASK_ATOMIC_COUNTERS_NV = 36461;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_TASK_SHADER_STORAGE_BLOCKS_NV = 36462;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV = 36463;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_MESH_WORK_GROUP_INVOCATIONS_NV = 38306;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_TASK_WORK_GROUP_INVOCATIONS_NV = 38307;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_MESH_TOTAL_MEMORY_SIZE_NV = 38198;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_TASK_TOTAL_MEMORY_SIZE_NV = 38199;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_MESH_OUTPUT_VERTICES_NV = 38200;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_MESH_OUTPUT_PRIMITIVES_NV = 38201;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_TASK_OUTPUT_COUNT_NV = 38202;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_DRAW_MESH_TASKS_COUNT_NV = 38205;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_MESH_VIEWS_NV = 38231;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV = 37599;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV = 38211;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_MESH_WORK_GROUP_SIZE_NV = 38203;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MAX_TASK_WORK_GROUP_SIZE_NV = 38204;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MESH_WORK_GROUP_SIZE_NV = 38206;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int TASK_WORK_GROUP_SIZE_NV = 38207;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MESH_VERTICES_OUT_NV = 38265;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MESH_PRIMITIVES_OUT_NV = 38266;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MESH_OUTPUT_TYPE_NV = 38267;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV = 38300;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV = 38301;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int REFERENCED_BY_MESH_SHADER_NV = 38304;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int REFERENCED_BY_TASK_SHADER_NV = 38305;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint MESH_SHADER_BIT_NV = 64u;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint TASK_SHADER_BIT_NV = 128u;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MESH_SUBROUTINE_NV = 38268;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int TASK_SUBROUTINE_NV = 38269;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int MESH_SUBROUTINE_UNIFORM_NV = 38270;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int TASK_SUBROUTINE_UNIFORM_NV = 38271;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV = 38302;

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public const int ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV = 38303;

	[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_multisample_coverage")]
	public const int COLOR_SAMPLES_NV = 36384;

	[RequiredByFeature("GL_NV_multisample_filter_hint")]
	public const int MULTISAMPLE_FILTER_HINT_NV = 34100;

	[RequiredByFeature("GL_NV_occlusion_query")]
	public const int PIXEL_COUNTER_BITS_NV = 34916;

	[RequiredByFeature("GL_NV_occlusion_query")]
	public const int CURRENT_OCCLUSION_QUERY_ID_NV = 34917;

	[RequiredByFeature("GL_NV_occlusion_query")]
	public const int PIXEL_COUNT_NV = 34918;

	[RequiredByFeature("GL_NV_occlusion_query")]
	public const int PIXEL_COUNT_AVAILABLE_NV = 34919;

	[RequiredByFeature("GL_NV_parameter_buffer_object")]
	public const int MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 36256;

	[RequiredByFeature("GL_NV_parameter_buffer_object")]
	public const int MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 36257;

	[RequiredByFeature("GL_NV_parameter_buffer_object")]
	public const int VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 36258;

	[RequiredByFeature("GL_NV_parameter_buffer_object")]
	public const int GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 36259;

	[RequiredByFeature("GL_NV_parameter_buffer_object")]
	public const int FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 36260;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_FORMAT_SVG_NV = 36976;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_FORMAT_PS_NV = 36977;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int STANDARD_FONT_NAME_NV = 36978;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int SYSTEM_FONT_NAME_NV = 36979;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int FILE_NAME_NV = 36980;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_STROKE_WIDTH_NV = 36981;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_END_CAPS_NV = 36982;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_INITIAL_END_CAP_NV = 36983;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_TERMINAL_END_CAP_NV = 36984;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_JOIN_STYLE_NV = 36985;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_MITER_LIMIT_NV = 36986;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_DASH_CAPS_NV = 36987;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_INITIAL_DASH_CAP_NV = 36988;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_TERMINAL_DASH_CAP_NV = 36989;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_DASH_OFFSET_NV = 36990;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_CLIENT_LENGTH_NV = 36991;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_FILL_MODE_NV = 36992;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_FILL_MASK_NV = 36993;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_FILL_COVER_MODE_NV = 36994;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_STROKE_COVER_MODE_NV = 36995;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_STROKE_MASK_NV = 36996;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int COUNT_UP_NV = 37000;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int COUNT_DOWN_NV = 37001;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_OBJECT_BOUNDING_BOX_NV = 37002;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int CONVEX_HULL_NV = 37003;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int BOUNDING_BOX_NV = 37005;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int TRANSLATE_X_NV = 37006;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int TRANSLATE_Y_NV = 37007;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int TRANSLATE_2D_NV = 37008;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int TRANSLATE_3D_NV = 37009;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int AFFINE_2D_NV = 37010;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int AFFINE_3D_NV = 37012;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int TRANSPOSE_AFFINE_2D_NV = 37014;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int TRANSPOSE_AFFINE_3D_NV = 37016;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int UTF8_NV = 37018;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int UTF16_NV = 37019;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 37020;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_COMMAND_COUNT_NV = 37021;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_COORD_COUNT_NV = 37022;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_DASH_ARRAY_COUNT_NV = 37023;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_COMPUTED_LENGTH_NV = 37024;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_FILL_BOUNDING_BOX_NV = 37025;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_STROKE_BOUNDING_BOX_NV = 37026;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int SQUARE_NV = 37027;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int ROUND_NV = 37028;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int TRIANGULAR_NV = 37029;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int BEVEL_NV = 37030;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int MITER_REVERT_NV = 37031;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int MITER_TRUNCATE_NV = 37032;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int SKIP_MISSING_GLYPH_NV = 37033;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int USE_MISSING_GLYPH_NV = 37034;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_ERROR_POSITION_NV = 37035;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int ACCUM_ADJACENT_PAIRS_NV = 37037;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int ADJACENT_PAIRS_NV = 37038;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int FIRST_TO_REST_NV = 37039;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_GEN_MODE_NV = 37040;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_GEN_COEFF_NV = 37041;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_GEN_COMPONENTS_NV = 37043;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_STENCIL_FUNC_NV = 37047;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_STENCIL_REF_NV = 37048;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_STENCIL_VALUE_MASK_NV = 37049;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 37053;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 37054;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_COVER_DEPTH_FUNC_NV = 37055;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_DASH_OFFSET_RESET_NV = 37044;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int MOVE_TO_RESETS_NV = 37045;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int MOVE_TO_CONTINUES_NV = 37046;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int CLOSE_PATH_NV = 0;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int MOVE_TO_NV = 2;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RELATIVE_MOVE_TO_NV = 3;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int LINE_TO_NV = 4;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RELATIVE_LINE_TO_NV = 5;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int HORIZONTAL_LINE_TO_NV = 6;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RELATIVE_HORIZONTAL_LINE_TO_NV = 7;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int VERTICAL_LINE_TO_NV = 8;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RELATIVE_VERTICAL_LINE_TO_NV = 9;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int QUADRATIC_CURVE_TO_NV = 10;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RELATIVE_QUADRATIC_CURVE_TO_NV = 11;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int CUBIC_CURVE_TO_NV = 12;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RELATIVE_CUBIC_CURVE_TO_NV = 13;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int SMOOTH_QUADRATIC_CURVE_TO_NV = 14;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 15;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int SMOOTH_CUBIC_CURVE_TO_NV = 16;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 17;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int SMALL_CCW_ARC_TO_NV = 18;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RELATIVE_SMALL_CCW_ARC_TO_NV = 19;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int SMALL_CW_ARC_TO_NV = 20;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RELATIVE_SMALL_CW_ARC_TO_NV = 21;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int LARGE_CCW_ARC_TO_NV = 22;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RELATIVE_LARGE_CCW_ARC_TO_NV = 23;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int LARGE_CW_ARC_TO_NV = 24;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RELATIVE_LARGE_CW_ARC_TO_NV = 25;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RESTART_PATH_NV = 240;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int DUP_FIRST_CUBIC_CURVE_TO_NV = 242;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int DUP_LAST_CUBIC_CURVE_TO_NV = 244;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RECT_NV = 246;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int CIRCULAR_CCW_ARC_TO_NV = 248;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int CIRCULAR_CW_ARC_TO_NV = 250;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int CIRCULAR_TANGENT_ARC_TO_NV = 252;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int ARC_TO_NV = 254;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RELATIVE_ARC_TO_NV = 255;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const int BOLD_BIT_NV = 1;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const int ITALIC_BIT_NV = 2;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const int GLYPH_WIDTH_BIT_NV = 1;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const int GLYPH_HEIGHT_BIT_NV = 2;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const int GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 4;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const int GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 8;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const int GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 16;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const int GLYPH_VERTICAL_BEARING_X_BIT_NV = 32;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const int GLYPH_VERTICAL_BEARING_Y_BIT_NV = 64;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const int GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 128;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const int GLYPH_HAS_KERNING_BIT_NV = 256;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint FONT_X_MIN_BOUNDS_BIT_NV = 65536u;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint FONT_Y_MIN_BOUNDS_BIT_NV = 131072u;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint FONT_X_MAX_BOUNDS_BIT_NV = 262144u;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint FONT_Y_MAX_BOUNDS_BIT_NV = 524288u;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint FONT_UNITS_PER_EM_BIT_NV = 1048576u;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint FONT_ASCENDER_BIT_NV = 2097152u;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint FONT_DESCENDER_BIT_NV = 4194304u;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint FONT_HEIGHT_BIT_NV = 8388608u;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint FONT_MAX_ADVANCE_WIDTH_BIT_NV = 16777216u;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 33554432u;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint FONT_UNDERLINE_POSITION_BIT_NV = 67108864u;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint FONT_UNDERLINE_THICKNESS_BIT_NV = 134217728u;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint FONT_HAS_KERNING_BIT_NV = 268435456u;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int ROUNDED_RECT_NV = 232;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RELATIVE_ROUNDED_RECT_NV = 233;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int ROUNDED_RECT2_NV = 234;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RELATIVE_ROUNDED_RECT2_NV = 235;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int ROUNDED_RECT4_NV = 236;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RELATIVE_ROUNDED_RECT4_NV = 237;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int ROUNDED_RECT8_NV = 238;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RELATIVE_ROUNDED_RECT8_NV = 239;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RELATIVE_RECT_NV = 247;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int FONT_GLYPHS_AVAILABLE_NV = 37736;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int FONT_TARGET_UNAVAILABLE_NV = 37737;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int FONT_UNAVAILABLE_NV = 37738;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int FONT_UNINTELLIGIBLE_NV = 37739;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int CONIC_CURVE_TO_NV = 26;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int RELATIVE_CONIC_CURVE_TO_NV = 27;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint FONT_NUM_GLYPH_INDICES_BIT_NV = 536870912u;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int STANDARD_FONT_FORMAT_NV = 37740;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_FOG_GEN_MODE_NV = 37036;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_GEN_COLOR_FORMAT_NV = 37042;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_PROJECTION_NV = 5889;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_MODELVIEW_NV = 5888;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_MODELVIEW_STACK_DEPTH_NV = 2979;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_MODELVIEW_MATRIX_NV = 2982;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 3382;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 34019;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_PROJECTION_STACK_DEPTH_NV = 2980;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_PROJECTION_MATRIX_NV = 2983;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_MAX_PROJECTION_STACK_DEPTH_NV = 3384;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 34020;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public const int FRAGMENT_INPUT_NV = 37741;

	[RequiredByFeature("GL_NV_path_rendering_shared_edge", Api = "gl|glcore|gles2")]
	public const int SHARED_EDGE_NV = 192;

	[RequiredByFeature("GL_NV_pixel_data_range")]
	public const int WRITE_PIXEL_DATA_RANGE_NV = 34936;

	[RequiredByFeature("GL_NV_pixel_data_range")]
	public const int READ_PIXEL_DATA_RANGE_NV = 34937;

	[RequiredByFeature("GL_NV_pixel_data_range")]
	public const int WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 34938;

	[RequiredByFeature("GL_NV_pixel_data_range")]
	public const int READ_PIXEL_DATA_RANGE_LENGTH_NV = 34939;

	[RequiredByFeature("GL_NV_pixel_data_range")]
	public const int WRITE_PIXEL_DATA_RANGE_POINTER_NV = 34940;

	[RequiredByFeature("GL_NV_pixel_data_range")]
	public const int READ_PIXEL_DATA_RANGE_POINTER_NV = 34941;

	[RequiredByFeature("GL_NV_point_sprite")]
	public const int POINT_SPRITE_R_MODE_NV = 34915;

	[RequiredByFeature("GL_NV_present_video")]
	public const int FRAME_NV = 36390;

	[RequiredByFeature("GL_NV_present_video")]
	public const int FIELDS_NV = 36391;

	[RequiredByFeature("GL_NV_present_video")]
	public const int CURRENT_TIME_NV = 36392;

	[RequiredByFeature("GL_NV_present_video")]
	public const int NUM_FILL_STREAMS_NV = 36393;

	[RequiredByFeature("GL_NV_present_video")]
	public const int PRESENT_TIME_NV = 36394;

	[RequiredByFeature("GL_NV_present_video")]
	public const int PRESENT_DURATION_NV = 36395;

	[RequiredByFeature("GL_NV_primitive_restart")]
	public const int PRIMITIVE_RESTART_NV = 34136;

	[RequiredByFeature("GL_NV_primitive_restart")]
	public const int PRIMITIVE_RESTART_INDEX_NV = 34137;

	[RequiredByFeature("GL_NV_primitive_shading_rate", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_IMAGE_PER_PRIMITIVE_NV = 38321;

	[RequiredByFeature("GL_NV_primitive_shading_rate", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_IMAGE_PALETTE_COUNT_NV = 38322;

	[RequiredByFeature("GL_NV_query_resource")]
	public const int QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV = 38208;

	[RequiredByFeature("GL_NV_query_resource")]
	public const int QUERY_RESOURCE_MEMTYPE_VIDMEM_NV = 38210;

	[RequiredByFeature("GL_NV_query_resource")]
	public const int QUERY_RESOURCE_SYS_RESERVED_NV = 38212;

	[RequiredByFeature("GL_NV_query_resource")]
	public const int QUERY_RESOURCE_TEXTURE_NV = 38213;

	[RequiredByFeature("GL_NV_query_resource")]
	public const int QUERY_RESOURCE_RENDERBUFFER_NV = 38214;

	[RequiredByFeature("GL_NV_query_resource")]
	public const int QUERY_RESOURCE_BUFFEROBJECT_NV = 38215;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int REGISTER_COMBINERS_NV = 34082;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int VARIABLE_A_NV = 34083;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int VARIABLE_B_NV = 34084;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int VARIABLE_C_NV = 34085;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int VARIABLE_D_NV = 34086;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int VARIABLE_E_NV = 34087;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int VARIABLE_F_NV = 34088;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int VARIABLE_G_NV = 34089;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int CONSTANT_COLOR0_NV = 34090;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int CONSTANT_COLOR1_NV = 34091;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_register_combiners")]
	public const int PRIMARY_COLOR_NV = 34092;

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_register_combiners")]
	public const int SECONDARY_COLOR_NV = 34093;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int SPARE0_NV = 34094;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int SPARE1_NV = 34095;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int DISCARD_NV = 34096;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int E_TIMES_F_NV = 34097;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int SPARE0_PLUS_SECONDARY_COLOR_NV = 34098;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int UNSIGNED_IDENTITY_NV = 34102;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int UNSIGNED_INVERT_NV = 34103;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int EXPAND_NORMAL_NV = 34104;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int EXPAND_NEGATE_NV = 34105;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int HALF_BIAS_NORMAL_NV = 34106;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int HALF_BIAS_NEGATE_NV = 34107;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int SIGNED_IDENTITY_NV = 34108;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int SIGNED_NEGATE_NV = 34109;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int SCALE_BY_TWO_NV = 34110;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int SCALE_BY_FOUR_NV = 34111;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int SCALE_BY_ONE_HALF_NV = 34112;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int BIAS_BY_NEGATIVE_ONE_HALF_NV = 34113;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int COMBINER_INPUT_NV = 34114;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int COMBINER_MAPPING_NV = 34115;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int COMBINER_COMPONENT_USAGE_NV = 34116;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int COMBINER_AB_DOT_PRODUCT_NV = 34117;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int COMBINER_CD_DOT_PRODUCT_NV = 34118;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int COMBINER_MUX_SUM_NV = 34119;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int COMBINER_SCALE_NV = 34120;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int COMBINER_BIAS_NV = 34121;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int COMBINER_AB_OUTPUT_NV = 34122;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int COMBINER_CD_OUTPUT_NV = 34123;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int COMBINER_SUM_OUTPUT_NV = 34124;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int MAX_GENERAL_COMBINERS_NV = 34125;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int NUM_GENERAL_COMBINERS_NV = 34126;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int COLOR_SUM_CLAMP_NV = 34127;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int COMBINER0_NV = 34128;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int COMBINER1_NV = 34129;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int COMBINER2_NV = 34130;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int COMBINER3_NV = 34131;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int COMBINER4_NV = 34132;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int COMBINER5_NV = 34133;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int COMBINER6_NV = 34134;

	[RequiredByFeature("GL_NV_register_combiners")]
	public const int COMBINER7_NV = 34135;

	[RequiredByFeature("GL_NV_register_combiners2")]
	public const int PER_STAGE_CONSTANTS_NV = 34101;

	[RequiredByFeature("GL_NV_representative_fragment_test", Api = "gl|glcore|gles2")]
	public const int REPRESENTATIVE_FRAGMENT_TEST_NV = 37759;

	[RequiredByFeature("GL_NV_robustness_video_memory_purge")]
	public const int PURGED_CONTEXT_RESET_NV = 37563;

	[RequiredByFeature("GL_NV_scissor_exclusive", Api = "gl|glcore|gles2")]
	public const int SCISSOR_TEST_EXCLUSIVE_NV = 38229;

	[RequiredByFeature("GL_NV_scissor_exclusive", Api = "gl|glcore|gles2")]
	public const int SCISSOR_BOX_EXCLUSIVE_NV = 38230;

	[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
	public const int BUFFER_GPU_ADDRESS_NV = 36637;

	[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
	public const int GPU_ADDRESS_NV = 36660;

	[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
	public const int MAX_SHADER_BUFFER_ADDRESS_NV = 36661;

	[RequiredByFeature("GL_NV_shader_buffer_store", Api = "gl|glcore")]
	[Log(BitmaskName = "GL")]
	public const uint SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 16u;

	[RequiredByFeature("GL_NV_shader_subgroup_partitioned", Api = "gl|glcore|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256u;

	[RequiredByFeature("GL_NV_shader_thread_group", Api = "gl|glcore")]
	public const int WARP_SIZE_NV = 37689;

	[RequiredByFeature("GL_NV_shader_thread_group", Api = "gl|glcore")]
	public const int WARPS_PER_SM_NV = 37690;

	[RequiredByFeature("GL_NV_shader_thread_group", Api = "gl|glcore")]
	public const int SM_COUNT_NV = 37691;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_IMAGE_NV = 38243;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_NO_INVOCATIONS_NV = 38244;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 38245;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 38246;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 38247;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 38248;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 38249;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 38250;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 38251;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 38252;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 38253;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 38254;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 38255;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_IMAGE_BINDING_NV = 38235;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_IMAGE_TEXEL_WIDTH_NV = 38236;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV = 38237;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_IMAGE_PALETTE_SIZE_NV = 38238;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int MAX_COARSE_FRAGMENT_SAMPLES_NV = 38239;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV = 38318;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV = 38319;

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public const int SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV = 38320;

	[RequiredByFeature("GL_NV_sRGB_formats", Api = "gles2")]
	public const int ETC1_SRGB8_NV = 35054;

	[RequiredByFeature("GL_NV_tessellation_program5")]
	public const int MAX_PROGRAM_PATCH_ATTRIBS_NV = 34520;

	[RequiredByFeature("GL_NV_tessellation_program5")]
	public const int TESS_CONTROL_PROGRAM_NV = 35102;

	[RequiredByFeature("GL_NV_tessellation_program5")]
	public const int TESS_EVALUATION_PROGRAM_NV = 35103;

	[RequiredByFeature("GL_NV_tessellation_program5")]
	public const int TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 35956;

	[RequiredByFeature("GL_NV_tessellation_program5")]
	public const int TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 35957;

	[RequiredByFeature("GL_NV_texgen_emboss")]
	public const int EMBOSS_LIGHT_NV = 34141;

	[RequiredByFeature("GL_NV_texgen_emboss")]
	public const int EMBOSS_CONSTANT_NV = 34142;

	[RequiredByFeature("GL_NV_texgen_emboss")]
	public const int EMBOSS_MAP_NV = 34143;

	[RequiredByFeature("GL_NV_texture_env_combine4")]
	public const int COMBINE4_NV = 34051;

	[RequiredByFeature("GL_NV_texture_env_combine4")]
	public const int SOURCE3_RGB_NV = 34179;

	[RequiredByFeature("GL_NV_texture_env_combine4")]
	public const int SOURCE3_ALPHA_NV = 34187;

	[RequiredByFeature("GL_NV_texture_env_combine4")]
	public const int OPERAND3_RGB_NV = 34195;

	[RequiredByFeature("GL_NV_texture_env_combine4")]
	public const int OPERAND3_ALPHA_NV = 34203;

	[RequiredByFeature("GL_NV_texture_expand_normal")]
	public const int TEXTURE_UNSIGNED_REMAP_MODE_NV = 34959;

	[RequiredByFeature("GL_NV_texture_multisample")]
	public const int TEXTURE_COVERAGE_SAMPLES_NV = 36933;

	[RequiredByFeature("GL_NV_texture_multisample")]
	public const int TEXTURE_COLOR_SAMPLES_NV = 36934;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int OFFSET_TEXTURE_RECTANGLE_NV = 34380;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 34381;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 34382;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 34521;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int UNSIGNED_INT_S8_S8_8_8_NV = 34522;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int UNSIGNED_INT_8_8_S8_S8_REV_NV = 34523;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DSDT_MAG_INTENSITY_NV = 34524;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int SHADER_CONSISTENT_NV = 34525;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int TEXTURE_SHADER_NV = 34526;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int SHADER_OPERATION_NV = 34527;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int CULL_MODES_NV = 34528;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int OFFSET_TEXTURE_MATRIX_NV = 34529;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int OFFSET_TEXTURE_SCALE_NV = 34530;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int OFFSET_TEXTURE_BIAS_NV = 34531;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int PREVIOUS_TEXTURE_INPUT_NV = 34532;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int CONST_EYE_NV = 34533;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int PASS_THROUGH_NV = 34534;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int CULL_FRAGMENT_NV = 34535;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int OFFSET_TEXTURE_2D_NV = 34536;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DEPENDENT_AR_TEXTURE_2D_NV = 34537;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DEPENDENT_GB_TEXTURE_2D_NV = 34538;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DOT_PRODUCT_NV = 34540;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DOT_PRODUCT_DEPTH_REPLACE_NV = 34541;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DOT_PRODUCT_TEXTURE_2D_NV = 34542;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 34544;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 34545;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 34546;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 34547;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int HILO_NV = 34548;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DSDT_NV = 34549;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DSDT_MAG_NV = 34550;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DSDT_MAG_VIB_NV = 34551;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int HILO16_NV = 34552;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int SIGNED_HILO_NV = 34553;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int SIGNED_HILO16_NV = 34554;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int SIGNED_RGBA_NV = 34555;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int SIGNED_RGBA8_NV = 34556;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int SIGNED_RGB_NV = 34558;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int SIGNED_RGB8_NV = 34559;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int SIGNED_LUMINANCE_NV = 34561;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int SIGNED_LUMINANCE8_NV = 34562;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int SIGNED_LUMINANCE_ALPHA_NV = 34563;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int SIGNED_LUMINANCE8_ALPHA8_NV = 34564;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int SIGNED_ALPHA_NV = 34565;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int SIGNED_ALPHA8_NV = 34566;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int SIGNED_INTENSITY_NV = 34567;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int SIGNED_INTENSITY8_NV = 34568;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DSDT8_NV = 34569;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DSDT8_MAG8_NV = 34570;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DSDT8_MAG8_INTENSITY8_NV = 34571;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int SIGNED_RGB_UNSIGNED_ALPHA_NV = 34572;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 34573;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int HI_SCALE_NV = 34574;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int LO_SCALE_NV = 34575;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DS_SCALE_NV = 34576;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DT_SCALE_NV = 34577;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int MAGNITUDE_SCALE_NV = 34578;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int VIBRANCE_SCALE_NV = 34579;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int HI_BIAS_NV = 34580;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int LO_BIAS_NV = 34581;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DS_BIAS_NV = 34582;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int DT_BIAS_NV = 34583;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int MAGNITUDE_BIAS_NV = 34584;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int VIBRANCE_BIAS_NV = 34585;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int TEXTURE_BORDER_VALUES_NV = 34586;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int TEXTURE_HI_SIZE_NV = 34587;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int TEXTURE_LO_SIZE_NV = 34588;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int TEXTURE_DS_SIZE_NV = 34589;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int TEXTURE_DT_SIZE_NV = 34590;

	[RequiredByFeature("GL_NV_texture_shader")]
	public const int TEXTURE_MAG_SIZE_NV = 34591;

	[RequiredByFeature("GL_NV_texture_shader2")]
	public const int DOT_PRODUCT_TEXTURE_3D_NV = 34543;

	[RequiredByFeature("GL_NV_texture_shader3")]
	public const int OFFSET_PROJECTIVE_TEXTURE_2D_NV = 34896;

	[RequiredByFeature("GL_NV_texture_shader3")]
	public const int OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 34897;

	[RequiredByFeature("GL_NV_texture_shader3")]
	public const int OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 34898;

	[RequiredByFeature("GL_NV_texture_shader3")]
	public const int OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 34899;

	[RequiredByFeature("GL_NV_texture_shader3")]
	public const int OFFSET_HILO_TEXTURE_2D_NV = 34900;

	[RequiredByFeature("GL_NV_texture_shader3")]
	public const int OFFSET_HILO_TEXTURE_RECTANGLE_NV = 34901;

	[RequiredByFeature("GL_NV_texture_shader3")]
	public const int OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 34902;

	[RequiredByFeature("GL_NV_texture_shader3")]
	public const int OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 34903;

	[RequiredByFeature("GL_NV_texture_shader3")]
	public const int DEPENDENT_HILO_TEXTURE_2D_NV = 34904;

	[RequiredByFeature("GL_NV_texture_shader3")]
	public const int DEPENDENT_RGB_TEXTURE_3D_NV = 34905;

	[RequiredByFeature("GL_NV_texture_shader3")]
	public const int DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 34906;

	[RequiredByFeature("GL_NV_texture_shader3")]
	public const int DOT_PRODUCT_PASS_THROUGH_NV = 34907;

	[RequiredByFeature("GL_NV_texture_shader3")]
	public const int DOT_PRODUCT_TEXTURE_1D_NV = 34908;

	[RequiredByFeature("GL_NV_texture_shader3")]
	public const int DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 34909;

	[RequiredByFeature("GL_NV_texture_shader3")]
	public const int HILO8_NV = 34910;

	[RequiredByFeature("GL_NV_texture_shader3")]
	public const int SIGNED_HILO8_NV = 34911;

	[RequiredByFeature("GL_NV_texture_shader3")]
	public const int FORCE_BLUE_TO_ONE_NV = 34912;

	[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
	public const int TIMELINE_SEMAPHORE_VALUE_NV = 38293;

	[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
	public const int SEMAPHORE_TYPE_NV = 38323;

	[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
	public const int SEMAPHORE_TYPE_BINARY_NV = 38324;

	[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
	public const int SEMAPHORE_TYPE_TIMELINE_NV = 38325;

	[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
	public const int MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV = 38326;

	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int BACK_PRIMARY_COLOR_NV = 35959;

	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int BACK_SECONDARY_COLOR_NV = 35960;

	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int TEXTURE_COORD_NV = 35961;

	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int CLIP_DISTANCE_NV = 35962;

	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int VERTEX_ID_NV = 35963;

	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int PRIMITIVE_ID_NV = 35964;

	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int GENERIC_ATTRIB_NV = 35965;

	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int TRANSFORM_FEEDBACK_ATTRIBS_NV = 35966;

	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int ACTIVE_VARYINGS_NV = 35969;

	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int ACTIVE_VARYING_MAX_LENGTH_NV = 35970;

	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int TRANSFORM_FEEDBACK_RECORD_NV = 35974;

	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int LAYER_NV = 36266;

	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int NEXT_BUFFER_NV = -2;

	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int SKIP_COMPONENTS4_NV = -3;

	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int SKIP_COMPONENTS3_NV = -4;

	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int SKIP_COMPONENTS2_NV = -5;

	[RequiredByFeature("GL_NV_transform_feedback")]
	public const int SKIP_COMPONENTS1_NV = -6;

	[RequiredByFeature("GL_NV_uniform_buffer_unified_memory", Api = "gl|glcore")]
	public const int UNIFORM_BUFFER_UNIFIED_NV = 37742;

	[RequiredByFeature("GL_NV_uniform_buffer_unified_memory", Api = "gl|glcore")]
	public const int UNIFORM_BUFFER_ADDRESS_NV = 37743;

	[RequiredByFeature("GL_NV_uniform_buffer_unified_memory", Api = "gl|glcore")]
	public const int UNIFORM_BUFFER_LENGTH_NV = 37744;

	[RequiredByFeature("GL_NV_vdpau_interop")]
	public const int SURFACE_STATE_NV = 34539;

	[RequiredByFeature("GL_NV_vdpau_interop")]
	public const int SURFACE_REGISTERED_NV = 34557;

	[RequiredByFeature("GL_NV_vdpau_interop")]
	public const int SURFACE_MAPPED_NV = 34560;

	[RequiredByFeature("GL_NV_vdpau_interop")]
	public const int WRITE_DISCARD_NV = 35006;

	[RequiredByFeature("GL_NV_vertex_array_range")]
	public const int VERTEX_ARRAY_RANGE_NV = 34077;

	[RequiredByFeature("GL_NV_vertex_array_range")]
	public const int VERTEX_ARRAY_RANGE_LENGTH_NV = 34078;

	[RequiredByFeature("GL_NV_vertex_array_range")]
	public const int VERTEX_ARRAY_RANGE_VALID_NV = 34079;

	[RequiredByFeature("GL_NV_vertex_array_range")]
	public const int MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 34080;

	[RequiredByFeature("GL_NV_vertex_array_range")]
	public const int VERTEX_ARRAY_RANGE_POINTER_NV = 34081;

	[RequiredByFeature("GL_NV_vertex_array_range2")]
	public const int VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 34099;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 36638;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int ELEMENT_ARRAY_UNIFIED_NV = 36639;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 36640;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int VERTEX_ARRAY_ADDRESS_NV = 36641;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int NORMAL_ARRAY_ADDRESS_NV = 36642;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int COLOR_ARRAY_ADDRESS_NV = 36643;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int INDEX_ARRAY_ADDRESS_NV = 36644;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int TEXTURE_COORD_ARRAY_ADDRESS_NV = 36645;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int EDGE_FLAG_ARRAY_ADDRESS_NV = 36646;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int SECONDARY_COLOR_ARRAY_ADDRESS_NV = 36647;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int FOG_COORD_ARRAY_ADDRESS_NV = 36648;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int ELEMENT_ARRAY_ADDRESS_NV = 36649;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int VERTEX_ATTRIB_ARRAY_LENGTH_NV = 36650;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int VERTEX_ARRAY_LENGTH_NV = 36651;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int NORMAL_ARRAY_LENGTH_NV = 36652;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int COLOR_ARRAY_LENGTH_NV = 36653;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int INDEX_ARRAY_LENGTH_NV = 36654;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int TEXTURE_COORD_ARRAY_LENGTH_NV = 36655;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int EDGE_FLAG_ARRAY_LENGTH_NV = 36656;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int SECONDARY_COLOR_ARRAY_LENGTH_NV = 36657;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int FOG_COORD_ARRAY_LENGTH_NV = 36658;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int ELEMENT_ARRAY_LENGTH_NV = 36659;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int DRAW_INDIRECT_UNIFIED_NV = 36672;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int DRAW_INDIRECT_ADDRESS_NV = 36673;

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public const int DRAW_INDIRECT_LENGTH_NV = 36674;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int VERTEX_STATE_PROGRAM_NV = 34337;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int ATTRIB_ARRAY_SIZE_NV = 34339;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int ATTRIB_ARRAY_STRIDE_NV = 34340;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int ATTRIB_ARRAY_TYPE_NV = 34341;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int CURRENT_ATTRIB_NV = 34342;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MODELVIEW_PROJECTION_NV = 34345;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int IDENTITY_NV = 34346;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int INVERSE_NV = 34347;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int TRANSPOSE_NV = 34348;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int INVERSE_TRANSPOSE_NV = 34349;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAX_TRACK_MATRIX_STACK_DEPTH_NV = 34350;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAX_TRACK_MATRICES_NV = 34351;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MATRIX0_NV = 34352;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MATRIX1_NV = 34353;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MATRIX2_NV = 34354;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MATRIX3_NV = 34355;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MATRIX4_NV = 34356;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MATRIX5_NV = 34357;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MATRIX6_NV = 34358;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MATRIX7_NV = 34359;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int PROGRAM_PARAMETER_NV = 34372;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int ATTRIB_ARRAY_POINTER_NV = 34373;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int PROGRAM_TARGET_NV = 34374;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int PROGRAM_RESIDENT_NV = 34375;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int TRACK_MATRIX_NV = 34376;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int TRACK_MATRIX_TRANSFORM_NV = 34377;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int VERTEX_PROGRAM_BINDING_NV = 34378;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int VERTEX_ATTRIB_ARRAY0_NV = 34384;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int VERTEX_ATTRIB_ARRAY1_NV = 34385;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int VERTEX_ATTRIB_ARRAY2_NV = 34386;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int VERTEX_ATTRIB_ARRAY3_NV = 34387;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int VERTEX_ATTRIB_ARRAY4_NV = 34388;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int VERTEX_ATTRIB_ARRAY5_NV = 34389;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int VERTEX_ATTRIB_ARRAY6_NV = 34390;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int VERTEX_ATTRIB_ARRAY7_NV = 34391;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int VERTEX_ATTRIB_ARRAY8_NV = 34392;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int VERTEX_ATTRIB_ARRAY9_NV = 34393;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int VERTEX_ATTRIB_ARRAY10_NV = 34394;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int VERTEX_ATTRIB_ARRAY11_NV = 34395;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int VERTEX_ATTRIB_ARRAY12_NV = 34396;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int VERTEX_ATTRIB_ARRAY13_NV = 34397;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int VERTEX_ATTRIB_ARRAY14_NV = 34398;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int VERTEX_ATTRIB_ARRAY15_NV = 34399;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP1_VERTEX_ATTRIB0_4_NV = 34400;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP1_VERTEX_ATTRIB1_4_NV = 34401;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP1_VERTEX_ATTRIB2_4_NV = 34402;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP1_VERTEX_ATTRIB3_4_NV = 34403;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP1_VERTEX_ATTRIB4_4_NV = 34404;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP1_VERTEX_ATTRIB5_4_NV = 34405;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP1_VERTEX_ATTRIB6_4_NV = 34406;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP1_VERTEX_ATTRIB7_4_NV = 34407;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP1_VERTEX_ATTRIB8_4_NV = 34408;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP1_VERTEX_ATTRIB9_4_NV = 34409;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP1_VERTEX_ATTRIB10_4_NV = 34410;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP1_VERTEX_ATTRIB11_4_NV = 34411;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP1_VERTEX_ATTRIB12_4_NV = 34412;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP1_VERTEX_ATTRIB13_4_NV = 34413;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP1_VERTEX_ATTRIB14_4_NV = 34414;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP1_VERTEX_ATTRIB15_4_NV = 34415;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP2_VERTEX_ATTRIB0_4_NV = 34416;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP2_VERTEX_ATTRIB1_4_NV = 34417;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP2_VERTEX_ATTRIB2_4_NV = 34418;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP2_VERTEX_ATTRIB3_4_NV = 34419;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP2_VERTEX_ATTRIB4_4_NV = 34420;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP2_VERTEX_ATTRIB5_4_NV = 34421;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP2_VERTEX_ATTRIB6_4_NV = 34422;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP2_VERTEX_ATTRIB7_4_NV = 34423;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP2_VERTEX_ATTRIB8_4_NV = 34424;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP2_VERTEX_ATTRIB9_4_NV = 34425;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP2_VERTEX_ATTRIB10_4_NV = 34426;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP2_VERTEX_ATTRIB11_4_NV = 34427;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP2_VERTEX_ATTRIB12_4_NV = 34428;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP2_VERTEX_ATTRIB13_4_NV = 34429;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP2_VERTEX_ATTRIB14_4_NV = 34430;

	[RequiredByFeature("GL_NV_vertex_program")]
	public const int MAP2_VERTEX_ATTRIB15_4_NV = 34431;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int VIDEO_BUFFER_NV = 36896;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int VIDEO_BUFFER_BINDING_NV = 36897;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int FIELD_UPPER_NV = 36898;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int FIELD_LOWER_NV = 36899;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int NUM_VIDEO_CAPTURE_STREAMS_NV = 36900;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 36901;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 36902;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int LAST_VIDEO_CAPTURE_STATUS_NV = 36903;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int VIDEO_BUFFER_PITCH_NV = 36904;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int VIDEO_COLOR_CONVERSION_MATRIX_NV = 36905;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int VIDEO_COLOR_CONVERSION_MAX_NV = 36906;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int VIDEO_COLOR_CONVERSION_MIN_NV = 36907;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int VIDEO_COLOR_CONVERSION_OFFSET_NV = 36908;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int VIDEO_BUFFER_INTERNAL_FORMAT_NV = 36909;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int PARTIAL_SUCCESS_NV = 36910;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int SUCCESS_NV = 36911;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int FAILURE_NV = 36912;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int YCBYCR8_422_NV = 36913;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int YCBAYCR8A_4224_NV = 36914;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 36915;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 36916;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 36917;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 36918;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int Z4Y12Z4CB12Z4CR12_444_NV = 36919;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int VIDEO_CAPTURE_FRAME_WIDTH_NV = 36920;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int VIDEO_CAPTURE_FRAME_HEIGHT_NV = 36921;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 36922;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 36923;

	[RequiredByFeature("GL_NV_video_capture")]
	public const int VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 36924;

	[RequiredByFeature("GL_NV_viewport_swizzle", Api = "gl|glcore|gles2")]
	public const int VIEWPORT_SWIZZLE_POSITIVE_X_NV = 37712;

	[RequiredByFeature("GL_NV_viewport_swizzle", Api = "gl|glcore|gles2")]
	public const int VIEWPORT_SWIZZLE_NEGATIVE_X_NV = 37713;

	[RequiredByFeature("GL_NV_viewport_swizzle", Api = "gl|glcore|gles2")]
	public const int VIEWPORT_SWIZZLE_POSITIVE_Y_NV = 37714;

	[RequiredByFeature("GL_NV_viewport_swizzle", Api = "gl|glcore|gles2")]
	public const int VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = 37715;

	[RequiredByFeature("GL_NV_viewport_swizzle", Api = "gl|glcore|gles2")]
	public const int VIEWPORT_SWIZZLE_POSITIVE_Z_NV = 37716;

	[RequiredByFeature("GL_NV_viewport_swizzle", Api = "gl|glcore|gles2")]
	public const int VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = 37717;

	[RequiredByFeature("GL_NV_viewport_swizzle", Api = "gl|glcore|gles2")]
	public const int VIEWPORT_SWIZZLE_POSITIVE_W_NV = 37718;

	[RequiredByFeature("GL_NV_viewport_swizzle", Api = "gl|glcore|gles2")]
	public const int VIEWPORT_SWIZZLE_NEGATIVE_W_NV = 37719;

	[RequiredByFeature("GL_NV_viewport_swizzle", Api = "gl|glcore|gles2")]
	public const int VIEWPORT_SWIZZLE_X_NV = 37720;

	[RequiredByFeature("GL_NV_viewport_swizzle", Api = "gl|glcore|gles2")]
	public const int VIEWPORT_SWIZZLE_Y_NV = 37721;

	[RequiredByFeature("GL_NV_viewport_swizzle", Api = "gl|glcore|gles2")]
	public const int VIEWPORT_SWIZZLE_Z_NV = 37722;

	[RequiredByFeature("GL_NV_viewport_swizzle", Api = "gl|glcore|gles2")]
	public const int VIEWPORT_SWIZZLE_W_NV = 37723;

	[RequiredByFeature("GL_OES_compressed_ETC1_RGB8_texture", Api = "gles1|gles2")]
	public const int ETC1_RGB8_OES = 36196;

	[RequiredByFeature("GL_OES_compressed_paletted_texture", Api = "gl|gles1|gles2")]
	public const int PALETTE4_RGB8_OES = 35728;

	[RequiredByFeature("GL_OES_compressed_paletted_texture", Api = "gl|gles1|gles2")]
	public const int PALETTE4_RGBA8_OES = 35729;

	[RequiredByFeature("GL_OES_compressed_paletted_texture", Api = "gl|gles1|gles2")]
	public const int PALETTE4_R5_G6_B5_OES = 35730;

	[RequiredByFeature("GL_OES_compressed_paletted_texture", Api = "gl|gles1|gles2")]
	public const int PALETTE4_RGBA4_OES = 35731;

	[RequiredByFeature("GL_OES_compressed_paletted_texture", Api = "gl|gles1|gles2")]
	public const int PALETTE4_RGB5_A1_OES = 35732;

	[RequiredByFeature("GL_OES_compressed_paletted_texture", Api = "gl|gles1|gles2")]
	public const int PALETTE8_RGB8_OES = 35733;

	[RequiredByFeature("GL_OES_compressed_paletted_texture", Api = "gl|gles1|gles2")]
	public const int PALETTE8_RGBA8_OES = 35734;

	[RequiredByFeature("GL_OES_compressed_paletted_texture", Api = "gl|gles1|gles2")]
	public const int PALETTE8_R5_G6_B5_OES = 35735;

	[RequiredByFeature("GL_OES_compressed_paletted_texture", Api = "gl|gles1|gles2")]
	public const int PALETTE8_RGBA4_OES = 35736;

	[RequiredByFeature("GL_OES_compressed_paletted_texture", Api = "gl|gles1|gles2")]
	public const int PALETTE8_RGB5_A1_OES = 35737;

	[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
	public const int TEXTURE_CROP_RECT_OES = 35741;

	[RequiredByFeature("GL_OES_EGL_image_external", Api = "gles1|gles2")]
	public const int SAMPLER_EXTERNAL_OES = 36198;

	[RequiredByFeature("GL_OES_matrix_get", Api = "gles1")]
	public const int MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = 35213;

	[RequiredByFeature("GL_OES_matrix_get", Api = "gles1")]
	public const int PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = 35214;

	[RequiredByFeature("GL_OES_matrix_get", Api = "gles1")]
	public const int TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = 35215;

	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public const int MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = 35742;

	[RequiredByFeature("GL_OES_point_size_array", Api = "gles1")]
	public const int POINT_SIZE_ARRAY_OES = 35740;

	[RequiredByFeature("GL_OES_point_size_array", Api = "gles1")]
	public const int POINT_SIZE_ARRAY_TYPE_OES = 35210;

	[RequiredByFeature("GL_OES_point_size_array", Api = "gles1")]
	public const int POINT_SIZE_ARRAY_STRIDE_OES = 35211;

	[RequiredByFeature("GL_OES_point_size_array", Api = "gles1")]
	public const int POINT_SIZE_ARRAY_POINTER_OES = 35212;

	[RequiredByFeature("GL_OES_point_size_array", Api = "gles1")]
	public const int POINT_SIZE_ARRAY_BUFFER_BINDING_OES = 35743;

	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_3x3x3_OES = 37824;

	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_4x3x3_OES = 37825;

	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_4x4x3_OES = 37826;

	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_4x4x4_OES = 37827;

	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_5x4x4_OES = 37828;

	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_5x5x4_OES = 37829;

	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_5x5x5_OES = 37830;

	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_6x5x5_OES = 37831;

	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_6x6x5_OES = 37832;

	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_RGBA_ASTC_6x6x6_OES = 37833;

	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = 37856;

	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = 37857;

	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = 37858;

	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = 37859;

	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = 37860;

	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = 37861;

	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = 37862;

	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = 37863;

	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = 37864;

	[RequiredByFeature("GL_OES_texture_compression_astc", Api = "gles2")]
	public const int COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = 37865;

	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	public const int TEXTURE_GEN_STR_OES = 36192;

	[RequiredByFeature("GL_OES_texture_half_float", Api = "gles2")]
	[RequiredByFeature("GL_OES_vertex_half_float", Api = "gles2")]
	public const int HALF_FLOAT_OES = 36193;

	[RequiredByFeature("GL_OES_vertex_type_10_10_10_2", Api = "gles2")]
	public const int UNSIGNED_INT_10_10_10_2_OES = 36342;

	[RequiredByFeature("GL_OES_vertex_type_10_10_10_2", Api = "gles2")]
	public const int INT_10_10_10_2_OES = 36343;

	[RequiredByFeature("GL_OML_interlace")]
	public const int INTERLACE_OML = 35200;

	[RequiredByFeature("GL_OML_interlace")]
	public const int INTERLACE_READ_OML = 35201;

	[RequiredByFeature("GL_OML_resample")]
	public const int PACK_RESAMPLE_OML = 35204;

	[RequiredByFeature("GL_OML_resample")]
	public const int UNPACK_RESAMPLE_OML = 35205;

	[RequiredByFeature("GL_OML_resample")]
	public const int RESAMPLE_REPLICATE_OML = 35206;

	[RequiredByFeature("GL_OML_resample")]
	public const int RESAMPLE_ZERO_FILL_OML = 35207;

	[RequiredByFeature("GL_OML_resample")]
	public const int RESAMPLE_AVERAGE_OML = 35208;

	[RequiredByFeature("GL_OML_resample")]
	public const int RESAMPLE_DECIMATE_OML = 35209;

	[RequiredByFeature("GL_OML_subsample")]
	public const int FORMAT_SUBSAMPLE_24_24_OML = 35202;

	[RequiredByFeature("GL_OML_subsample")]
	public const int FORMAT_SUBSAMPLE_244_244_OML = 35203;

	[RequiredByFeature("GL_OVR_multiview", Api = "gl|glcore|gles2")]
	public const int FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 38448;

	[RequiredByFeature("GL_OVR_multiview", Api = "gl|glcore|gles2")]
	public const int FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 38450;

	[RequiredByFeature("GL_OVR_multiview", Api = "gl|glcore|gles2")]
	public const int MAX_VIEWS_OVR = 38449;

	[RequiredByFeature("GL_OVR_multiview", Api = "gl|glcore|gles2")]
	public const int FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 38451;

	[RequiredByFeature("GL_PGI_misc_hints")]
	public const int PREFER_DOUBLEBUFFER_HINT_PGI = 107000;

	[RequiredByFeature("GL_PGI_misc_hints")]
	public const int CONSERVE_MEMORY_HINT_PGI = 107005;

	[RequiredByFeature("GL_PGI_misc_hints")]
	public const int RECLAIM_MEMORY_HINT_PGI = 107006;

	[RequiredByFeature("GL_PGI_misc_hints")]
	public const int NATIVE_GRAPHICS_HANDLE_PGI = 107010;

	[RequiredByFeature("GL_PGI_misc_hints")]
	public const int NATIVE_GRAPHICS_BEGIN_HINT_PGI = 107011;

	[RequiredByFeature("GL_PGI_misc_hints")]
	public const int NATIVE_GRAPHICS_END_HINT_PGI = 107012;

	[RequiredByFeature("GL_PGI_misc_hints")]
	public const int ALWAYS_FAST_HINT_PGI = 107020;

	[RequiredByFeature("GL_PGI_misc_hints")]
	public const int ALWAYS_SOFT_HINT_PGI = 107021;

	[RequiredByFeature("GL_PGI_misc_hints")]
	public const int ALLOW_DRAW_OBJ_HINT_PGI = 107022;

	[RequiredByFeature("GL_PGI_misc_hints")]
	public const int ALLOW_DRAW_WIN_HINT_PGI = 107023;

	[RequiredByFeature("GL_PGI_misc_hints")]
	public const int ALLOW_DRAW_FRG_HINT_PGI = 107024;

	[RequiredByFeature("GL_PGI_misc_hints")]
	public const int ALLOW_DRAW_MEM_HINT_PGI = 107025;

	[RequiredByFeature("GL_PGI_misc_hints")]
	public const int STRICT_DEPTHFUNC_HINT_PGI = 107030;

	[RequiredByFeature("GL_PGI_misc_hints")]
	public const int STRICT_LIGHTING_HINT_PGI = 107031;

	[RequiredByFeature("GL_PGI_misc_hints")]
	public const int STRICT_SCISSOR_HINT_PGI = 107032;

	[RequiredByFeature("GL_PGI_misc_hints")]
	public const int FULL_STIPPLE_HINT_PGI = 107033;

	[RequiredByFeature("GL_PGI_misc_hints")]
	public const int CLIP_NEAR_HINT_PGI = 107040;

	[RequiredByFeature("GL_PGI_misc_hints")]
	public const int CLIP_FAR_HINT_PGI = 107041;

	[RequiredByFeature("GL_PGI_misc_hints")]
	public const int WIDE_LINE_HINT_PGI = 107042;

	[RequiredByFeature("GL_PGI_misc_hints")]
	public const int BACK_NORMALS_HINT_PGI = 107043;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	public const int VERTEX_DATA_HINT_PGI = 107050;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	public const int VERTEX_CONSISTENT_HINT_PGI = 107051;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	public const int MATERIAL_SIDE_HINT_PGI = 107052;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	public const int MAX_VERTEX_HINT_PGI = 107053;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	[Log(BitmaskName = "GL")]
	public const uint COLOR3_BIT_PGI = 65536u;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	[Log(BitmaskName = "GL")]
	public const uint COLOR4_BIT_PGI = 131072u;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	[Log(BitmaskName = "GL")]
	public const uint EDGEFLAG_BIT_PGI = 262144u;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	[Log(BitmaskName = "GL")]
	public const uint INDEX_BIT_PGI = 524288u;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	[Log(BitmaskName = "GL")]
	public const uint MAT_AMBIENT_BIT_PGI = 1048576u;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	[Log(BitmaskName = "GL")]
	public const uint MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 2097152u;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	[Log(BitmaskName = "GL")]
	public const uint MAT_DIFFUSE_BIT_PGI = 4194304u;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	[Log(BitmaskName = "GL")]
	public const uint MAT_EMISSION_BIT_PGI = 8388608u;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	[Log(BitmaskName = "GL")]
	public const uint MAT_COLOR_INDEXES_BIT_PGI = 16777216u;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	[Log(BitmaskName = "GL")]
	public const uint MAT_SHININESS_BIT_PGI = 33554432u;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	[Log(BitmaskName = "GL")]
	public const uint MAT_SPECULAR_BIT_PGI = 67108864u;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	[Log(BitmaskName = "GL")]
	public const uint NORMAL_BIT_PGI = 134217728u;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	[Log(BitmaskName = "GL")]
	public const uint TEXCOORD1_BIT_PGI = 268435456u;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	[Log(BitmaskName = "GL")]
	public const uint TEXCOORD2_BIT_PGI = 536870912u;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	[Log(BitmaskName = "GL")]
	public const uint TEXCOORD3_BIT_PGI = 1073741824u;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	[Log(BitmaskName = "GL")]
	public const uint TEXCOORD4_BIT_PGI = 2147483648u;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	[Log(BitmaskName = "GL")]
	public const uint VERTEX23_BIT_PGI = 4u;

	[RequiredByFeature("GL_PGI_vertex_hints")]
	[Log(BitmaskName = "GL")]
	public const uint VERTEX4_BIT_PGI = 8u;

	[RequiredByFeature("GL_QCOM_binning_control", Api = "gles2")]
	public const int BINNING_CONTROL_HINT_QCOM = 36784;

	[RequiredByFeature("GL_QCOM_binning_control", Api = "gles2")]
	public const int CPU_OPTIMIZED_QCOM = 36785;

	[RequiredByFeature("GL_QCOM_binning_control", Api = "gles2")]
	public const int GPU_OPTIMIZED_QCOM = 36786;

	[RequiredByFeature("GL_QCOM_binning_control", Api = "gles2")]
	public const int RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = 36787;

	[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
	public const int TEXTURE_WIDTH_QCOM = 35794;

	[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
	public const int TEXTURE_HEIGHT_QCOM = 35795;

	[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
	public const int TEXTURE_DEPTH_QCOM = 35796;

	[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
	public const int TEXTURE_INTERNAL_FORMAT_QCOM = 35797;

	[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
	public const int TEXTURE_FORMAT_QCOM = 35798;

	[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
	public const int TEXTURE_TYPE_QCOM = 35799;

	[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
	public const int TEXTURE_IMAGE_VALID_QCOM = 35800;

	[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
	public const int TEXTURE_NUM_LEVELS_QCOM = 35801;

	[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
	public const int TEXTURE_TARGET_QCOM = 35802;

	[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
	public const int TEXTURE_OBJECT_VALID_QCOM = 35803;

	[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
	public const int STATE_RESTORE = 35804;

	[RequiredByFeature("GL_QCOM_motion_estimation", Api = "gles2")]
	public const int MOTION_ESTIMATION_SEARCH_BLOCK_X_QCOM = 35984;

	[RequiredByFeature("GL_QCOM_motion_estimation", Api = "gles2")]
	public const int MOTION_ESTIMATION_SEARCH_BLOCK_Y_QCOM = 35985;

	[RequiredByFeature("GL_QCOM_perfmon_global_mode", Api = "gles1|gles2")]
	public const int PERFMON_GLOBAL_MODE_QCOM = 36768;

	[RequiredByFeature("GL_QCOM_shader_framebuffer_fetch_noncoherent", Api = "gles2")]
	public const int FRAMEBUFFER_FETCH_NONCOHERENT_QCOM = 38562;

	[RequiredByFeature("GL_QCOM_shading_rate", Api = "gles2")]
	public const int SHADING_RATE_QCOM = 38564;

	[RequiredByFeature("GL_QCOM_shading_rate", Api = "gles2")]
	public const int SHADING_RATE_PRESERVE_ASPECT_RATIO_QCOM = 38565;

	[RequiredByFeature("GL_QCOM_framebuffer_foveated", Api = "gles2")]
	[RequiredByFeature("GL_QCOM_texture_foveated", Api = "gles2")]
	[Log(BitmaskName = "GL")]
	public const uint FOVEATION_ENABLE_BIT_QCOM = 1u;

	[RequiredByFeature("GL_QCOM_framebuffer_foveated", Api = "gles2")]
	[RequiredByFeature("GL_QCOM_motion_estimation", Api = "gles2")]
	[RequiredByFeature("GL_QCOM_texture_foveated", Api = "gles2")]
	[Log(BitmaskName = "GL")]
	public const uint FOVEATION_SCALED_BIN_METHOD_BIT_QCOM = 2u;

	[RequiredByFeature("GL_QCOM_texture_foveated", Api = "gles2")]
	public const int TEXTURE_FOVEATED_FEATURE_BITS_QCOM = 35835;

	[RequiredByFeature("GL_QCOM_texture_foveated", Api = "gles2")]
	public const int TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM = 35836;

	[RequiredByFeature("GL_QCOM_texture_foveated", Api = "gles2")]
	public const int TEXTURE_FOVEATED_FEATURE_QUERY_QCOM = 35837;

	[RequiredByFeature("GL_QCOM_texture_foveated", Api = "gles2")]
	public const int TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM = 35838;

	[RequiredByFeature("GL_QCOM_texture_foveated", Api = "gles2")]
	public const int FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM = 35839;

	[RequiredByFeature("GL_QCOM_texture_foveated2", Api = "gles2")]
	public const int TEXTURE_FOVEATED_CUTOFF_DENSITY_QCOM = 38560;

	[RequiredByFeature("GL_QCOM_texture_foveated_subsampled_layout", Api = "gles2")]
	[Log(BitmaskName = "GL")]
	public const uint FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM = 4u;

	[RequiredByFeature("GL_QCOM_texture_foveated_subsampled_layout", Api = "gles2")]
	public const int MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM = 36769;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint COLOR_BUFFER_BIT0_QCOM = 1u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint COLOR_BUFFER_BIT1_QCOM = 2u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint COLOR_BUFFER_BIT2_QCOM = 4u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint COLOR_BUFFER_BIT3_QCOM = 8u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint COLOR_BUFFER_BIT4_QCOM = 16u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint COLOR_BUFFER_BIT5_QCOM = 32u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint COLOR_BUFFER_BIT6_QCOM = 64u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint COLOR_BUFFER_BIT7_QCOM = 128u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint DEPTH_BUFFER_BIT0_QCOM = 256u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint DEPTH_BUFFER_BIT1_QCOM = 512u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint DEPTH_BUFFER_BIT2_QCOM = 1024u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint DEPTH_BUFFER_BIT3_QCOM = 2048u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint DEPTH_BUFFER_BIT4_QCOM = 4096u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint DEPTH_BUFFER_BIT5_QCOM = 8192u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint DEPTH_BUFFER_BIT6_QCOM = 16384u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint DEPTH_BUFFER_BIT7_QCOM = 32768u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint STENCIL_BUFFER_BIT0_QCOM = 65536u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint STENCIL_BUFFER_BIT1_QCOM = 131072u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint STENCIL_BUFFER_BIT2_QCOM = 262144u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint STENCIL_BUFFER_BIT3_QCOM = 524288u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint STENCIL_BUFFER_BIT4_QCOM = 1048576u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint STENCIL_BUFFER_BIT5_QCOM = 2097152u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint STENCIL_BUFFER_BIT6_QCOM = 4194304u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint STENCIL_BUFFER_BIT7_QCOM = 8388608u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint MULTISAMPLE_BUFFER_BIT0_QCOM = 16777216u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint MULTISAMPLE_BUFFER_BIT1_QCOM = 33554432u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint MULTISAMPLE_BUFFER_BIT2_QCOM = 67108864u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint MULTISAMPLE_BUFFER_BIT3_QCOM = 134217728u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint MULTISAMPLE_BUFFER_BIT4_QCOM = 268435456u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint MULTISAMPLE_BUFFER_BIT5_QCOM = 536870912u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint MULTISAMPLE_BUFFER_BIT6_QCOM = 1073741824u;

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	[Log(BitmaskName = "GL")]
	public const uint MULTISAMPLE_BUFFER_BIT7_QCOM = 2147483648u;

	[RequiredByFeature("GL_QCOM_writeonly_rendering", Api = "gles1|gles2")]
	public const int WRITEONLY_RENDERING_QCOM = 34851;

	[RequiredByFeature("GL_REND_screen_coordinates")]
	public const int SCREEN_COORDINATES_REND = 33936;

	[RequiredByFeature("GL_REND_screen_coordinates")]
	public const int INVERTED_SCREEN_W_REND = 33937;

	[RequiredByFeature("GL_S3_s3tc")]
	public const int RGB_S3TC = 33696;

	[RequiredByFeature("GL_S3_s3tc")]
	public const int RGB4_S3TC = 33697;

	[RequiredByFeature("GL_S3_s3tc")]
	public const int RGBA_S3TC = 33698;

	[RequiredByFeature("GL_S3_s3tc")]
	public const int RGBA4_S3TC = 33699;

	[RequiredByFeature("GL_S3_s3tc")]
	public const int RGBA_DXT5_S3TC = 33700;

	[RequiredByFeature("GL_S3_s3tc")]
	public const int RGBA4_DXT5_S3TC = 33701;

	[RequiredByFeature("GL_SGIS_detail_texture")]
	public const int DETAIL_TEXTURE_2D_SGIS = 32917;

	[RequiredByFeature("GL_SGIS_detail_texture")]
	public const int DETAIL_TEXTURE_2D_BINDING_SGIS = 32918;

	[RequiredByFeature("GL_SGIS_detail_texture")]
	public const int LINEAR_DETAIL_SGIS = 32919;

	[RequiredByFeature("GL_SGIS_detail_texture")]
	public const int LINEAR_DETAIL_ALPHA_SGIS = 32920;

	[RequiredByFeature("GL_SGIS_detail_texture")]
	public const int LINEAR_DETAIL_COLOR_SGIS = 32921;

	[RequiredByFeature("GL_SGIS_detail_texture")]
	public const int DETAIL_TEXTURE_LEVEL_SGIS = 32922;

	[RequiredByFeature("GL_SGIS_detail_texture")]
	public const int DETAIL_TEXTURE_MODE_SGIS = 32923;

	[RequiredByFeature("GL_SGIS_detail_texture")]
	public const int DETAIL_TEXTURE_FUNC_POINTS_SGIS = 32924;

	[RequiredByFeature("GL_SGIS_fog_function")]
	public const int FOG_FUNC_SGIS = 33066;

	[RequiredByFeature("GL_SGIS_fog_function")]
	public const int FOG_FUNC_POINTS_SGIS = 33067;

	[RequiredByFeature("GL_SGIS_fog_function")]
	public const int MAX_FOG_FUNC_POINTS_SGIS = 33068;

	[RequiredByFeature("GL_SGIS_multisample")]
	public const int SAMPLE_MASK_SGIS = 32928;

	[RequiredByFeature("GL_SGIS_multisample")]
	public const int SAMPLE_MASK_VALUE_SGIS = 32938;

	[RequiredByFeature("GL_SGIS_pixel_texture")]
	public const int PIXEL_TEXTURE_SGIS = 33619;

	[RequiredByFeature("GL_SGIS_pixel_texture")]
	public const int PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 33620;

	[RequiredByFeature("GL_SGIS_pixel_texture")]
	public const int PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 33621;

	[RequiredByFeature("GL_SGIS_pixel_texture")]
	public const int PIXEL_GROUP_COLOR_SGIS = 33622;

	[RequiredByFeature("GL_SGIS_point_line_texgen")]
	public const int EYE_DISTANCE_TO_POINT_SGIS = 33264;

	[RequiredByFeature("GL_SGIS_point_line_texgen")]
	public const int OBJECT_DISTANCE_TO_POINT_SGIS = 33265;

	[RequiredByFeature("GL_SGIS_point_line_texgen")]
	public const int EYE_DISTANCE_TO_LINE_SGIS = 33266;

	[RequiredByFeature("GL_SGIS_point_line_texgen")]
	public const int OBJECT_DISTANCE_TO_LINE_SGIS = 33267;

	[RequiredByFeature("GL_SGIS_point_line_texgen")]
	public const int EYE_POINT_SGIS = 33268;

	[RequiredByFeature("GL_SGIS_point_line_texgen")]
	public const int OBJECT_POINT_SGIS = 33269;

	[RequiredByFeature("GL_SGIS_point_line_texgen")]
	public const int EYE_LINE_SGIS = 33270;

	[RequiredByFeature("GL_SGIS_point_line_texgen")]
	public const int OBJECT_LINE_SGIS = 33271;

	[RequiredByFeature("GL_SGIS_sharpen_texture")]
	public const int LINEAR_SHARPEN_SGIS = 32941;

	[RequiredByFeature("GL_SGIS_sharpen_texture")]
	public const int LINEAR_SHARPEN_ALPHA_SGIS = 32942;

	[RequiredByFeature("GL_SGIS_sharpen_texture")]
	public const int LINEAR_SHARPEN_COLOR_SGIS = 32943;

	[RequiredByFeature("GL_SGIS_sharpen_texture")]
	public const int SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 32944;

	[RequiredByFeature("GL_SGIS_texture4D")]
	public const int PACK_SKIP_VOLUMES_SGIS = 33072;

	[RequiredByFeature("GL_SGIS_texture4D")]
	public const int PACK_IMAGE_DEPTH_SGIS = 33073;

	[RequiredByFeature("GL_SGIS_texture4D")]
	public const int UNPACK_SKIP_VOLUMES_SGIS = 33074;

	[RequiredByFeature("GL_SGIS_texture4D")]
	public const int UNPACK_IMAGE_DEPTH_SGIS = 33075;

	[RequiredByFeature("GL_SGIS_texture4D")]
	public const int TEXTURE_4D_SGIS = 33076;

	[RequiredByFeature("GL_SGIS_texture4D")]
	public const int PROXY_TEXTURE_4D_SGIS = 33077;

	[RequiredByFeature("GL_SGIS_texture4D")]
	public const int TEXTURE_4DSIZE_SGIS = 33078;

	[RequiredByFeature("GL_SGIS_texture4D")]
	public const int TEXTURE_WRAP_Q_SGIS = 33079;

	[RequiredByFeature("GL_SGIS_texture4D")]
	public const int MAX_4D_TEXTURE_SIZE_SGIS = 33080;

	[RequiredByFeature("GL_SGIS_texture4D")]
	public const int TEXTURE_4D_BINDING_SGIS = 33103;

	[RequiredByFeature("GL_SGIS_texture_color_mask")]
	public const int TEXTURE_COLOR_WRITEMASK_SGIS = 33263;

	[RequiredByFeature("GL_SGIS_texture_filter4")]
	public const int FILTER4_SGIS = 33094;

	[RequiredByFeature("GL_SGIS_texture_filter4")]
	public const int TEXTURE_FILTER4_SIZE_SGIS = 33095;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int DUAL_ALPHA4_SGIS = 33040;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int DUAL_ALPHA8_SGIS = 33041;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int DUAL_ALPHA12_SGIS = 33042;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int DUAL_ALPHA16_SGIS = 33043;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int DUAL_LUMINANCE4_SGIS = 33044;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int DUAL_LUMINANCE8_SGIS = 33045;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int DUAL_LUMINANCE12_SGIS = 33046;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int DUAL_LUMINANCE16_SGIS = 33047;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int DUAL_INTENSITY4_SGIS = 33048;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int DUAL_INTENSITY8_SGIS = 33049;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int DUAL_INTENSITY12_SGIS = 33050;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int DUAL_INTENSITY16_SGIS = 33051;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int DUAL_LUMINANCE_ALPHA4_SGIS = 33052;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int DUAL_LUMINANCE_ALPHA8_SGIS = 33053;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int QUAD_ALPHA4_SGIS = 33054;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int QUAD_ALPHA8_SGIS = 33055;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int QUAD_LUMINANCE4_SGIS = 33056;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int QUAD_LUMINANCE8_SGIS = 33057;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int QUAD_INTENSITY4_SGIS = 33058;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int QUAD_INTENSITY8_SGIS = 33059;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int DUAL_TEXTURE_SELECT_SGIS = 33060;

	[RequiredByFeature("GL_SGIS_texture_select")]
	public const int QUAD_TEXTURE_SELECT_SGIS = 33061;

	[RequiredByFeature("GL_SGIX_async")]
	public const int ASYNC_MARKER_SGIX = 33577;

	[RequiredByFeature("GL_SGIX_async_histogram")]
	public const int ASYNC_HISTOGRAM_SGIX = 33580;

	[RequiredByFeature("GL_SGIX_async_histogram")]
	public const int MAX_ASYNC_HISTOGRAM_SGIX = 33581;

	[RequiredByFeature("GL_SGIX_async_pixel")]
	public const int ASYNC_TEX_IMAGE_SGIX = 33628;

	[RequiredByFeature("GL_SGIX_async_pixel")]
	public const int ASYNC_DRAW_PIXELS_SGIX = 33629;

	[RequiredByFeature("GL_SGIX_async_pixel")]
	public const int ASYNC_READ_PIXELS_SGIX = 33630;

	[RequiredByFeature("GL_SGIX_async_pixel")]
	public const int MAX_ASYNC_TEX_IMAGE_SGIX = 33631;

	[RequiredByFeature("GL_SGIX_async_pixel")]
	public const int MAX_ASYNC_DRAW_PIXELS_SGIX = 33632;

	[RequiredByFeature("GL_SGIX_async_pixel")]
	public const int MAX_ASYNC_READ_PIXELS_SGIX = 33633;

	[RequiredByFeature("GL_SGIX_blend_alpha_minmax")]
	public const int ALPHA_MIN_SGIX = 33568;

	[RequiredByFeature("GL_SGIX_blend_alpha_minmax")]
	public const int ALPHA_MAX_SGIX = 33569;

	[RequiredByFeature("GL_SGIX_calligraphic_fragment")]
	public const int CALLIGRAPHIC_FRAGMENT_SGIX = 33155;

	[RequiredByFeature("GL_SGIX_clipmap")]
	public const int LINEAR_CLIPMAP_LINEAR_SGIX = 33136;

	[RequiredByFeature("GL_SGIX_clipmap")]
	public const int TEXTURE_CLIPMAP_CENTER_SGIX = 33137;

	[RequiredByFeature("GL_SGIX_clipmap")]
	public const int TEXTURE_CLIPMAP_FRAME_SGIX = 33138;

	[RequiredByFeature("GL_SGIX_clipmap")]
	public const int TEXTURE_CLIPMAP_OFFSET_SGIX = 33139;

	[RequiredByFeature("GL_SGIX_clipmap")]
	public const int TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 33140;

	[RequiredByFeature("GL_SGIX_clipmap")]
	public const int TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 33141;

	[RequiredByFeature("GL_SGIX_clipmap")]
	public const int TEXTURE_CLIPMAP_DEPTH_SGIX = 33142;

	[RequiredByFeature("GL_SGIX_clipmap")]
	public const int MAX_CLIPMAP_DEPTH_SGIX = 33143;

	[RequiredByFeature("GL_SGIX_clipmap")]
	public const int MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 33144;

	[RequiredByFeature("GL_SGIX_clipmap")]
	public const int NEAREST_CLIPMAP_NEAREST_SGIX = 33869;

	[RequiredByFeature("GL_SGIX_clipmap")]
	public const int NEAREST_CLIPMAP_LINEAR_SGIX = 33870;

	[RequiredByFeature("GL_SGIX_clipmap")]
	public const int LINEAR_CLIPMAP_NEAREST_SGIX = 33871;

	[RequiredByFeature("GL_SGIX_convolution_accuracy")]
	public const int CONVOLUTION_HINT_SGIX = 33558;

	[RequiredByFeature("GL_SGIX_fog_offset")]
	public const int FOG_OFFSET_SGIX = 33176;

	[RequiredByFeature("GL_SGIX_fog_offset")]
	public const int FOG_OFFSET_VALUE_SGIX = 33177;

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public const int FRAGMENT_LIGHTING_SGIX = 33792;

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public const int FRAGMENT_COLOR_MATERIAL_SGIX = 33793;

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public const int FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 33794;

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public const int FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 33795;

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public const int MAX_FRAGMENT_LIGHTS_SGIX = 33796;

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public const int MAX_ACTIVE_LIGHTS_SGIX = 33797;

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public const int CURRENT_RASTER_NORMAL_SGIX = 33798;

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public const int LIGHT_ENV_MODE_SGIX = 33799;

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public const int FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 33800;

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public const int FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 33801;

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public const int FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 33802;

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public const int FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 33803;

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public const int FRAGMENT_LIGHT0_SGIX = 33804;

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public const int FRAGMENT_LIGHT1_SGIX = 33805;

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public const int FRAGMENT_LIGHT2_SGIX = 33806;

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public const int FRAGMENT_LIGHT3_SGIX = 33807;

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public const int FRAGMENT_LIGHT4_SGIX = 33808;

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public const int FRAGMENT_LIGHT5_SGIX = 33809;

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public const int FRAGMENT_LIGHT6_SGIX = 33810;

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public const int FRAGMENT_LIGHT7_SGIX = 33811;

	[RequiredByFeature("GL_SGIX_framezoom")]
	public const int FRAMEZOOM_SGIX = 33163;

	[RequiredByFeature("GL_SGIX_framezoom")]
	public const int FRAMEZOOM_FACTOR_SGIX = 33164;

	[RequiredByFeature("GL_SGIX_framezoom")]
	public const int MAX_FRAMEZOOM_FACTOR_SGIX = 33165;

	[RequiredByFeature("GL_SGIX_instruments")]
	public const int INSTRUMENT_BUFFER_POINTER_SGIX = 33152;

	[RequiredByFeature("GL_SGIX_instruments")]
	public const int INSTRUMENT_MEASUREMENTS_SGIX = 33153;

	[RequiredByFeature("GL_SGIX_interlace")]
	public const int INTERLACE_SGIX = 32916;

	[RequiredByFeature("GL_SGIX_ir_instrument1")]
	public const int IR_INSTRUMENT1_SGIX = 33151;

	[RequiredByFeature("GL_SGIX_list_priority")]
	public const int LIST_PRIORITY_SGIX = 33154;

	[RequiredByFeature("GL_SGIX_pixel_texture")]
	public const int PIXEL_TEX_GEN_SGIX = 33081;

	[RequiredByFeature("GL_SGIX_pixel_texture")]
	public const int PIXEL_TEX_GEN_MODE_SGIX = 33579;

	[RequiredByFeature("GL_SGIX_pixel_tiles")]
	public const int PIXEL_TILE_BEST_ALIGNMENT_SGIX = 33086;

	[RequiredByFeature("GL_SGIX_pixel_tiles")]
	public const int PIXEL_TILE_CACHE_INCREMENT_SGIX = 33087;

	[RequiredByFeature("GL_SGIX_pixel_tiles")]
	public const int PIXEL_TILE_WIDTH_SGIX = 33088;

	[RequiredByFeature("GL_SGIX_pixel_tiles")]
	public const int PIXEL_TILE_HEIGHT_SGIX = 33089;

	[RequiredByFeature("GL_SGIX_pixel_tiles")]
	public const int PIXEL_TILE_GRID_WIDTH_SGIX = 33090;

	[RequiredByFeature("GL_SGIX_pixel_tiles")]
	public const int PIXEL_TILE_GRID_HEIGHT_SGIX = 33091;

	[RequiredByFeature("GL_SGIX_pixel_tiles")]
	public const int PIXEL_TILE_GRID_DEPTH_SGIX = 33092;

	[RequiredByFeature("GL_SGIX_pixel_tiles")]
	public const int PIXEL_TILE_CACHE_SIZE_SGIX = 33093;

	[RequiredByFeature("GL_SGIX_polynomial_ffd")]
	[Log(BitmaskName = "GL")]
	public const uint TEXTURE_DEFORMATION_BIT_SGIX = 1u;

	[RequiredByFeature("GL_SGIX_polynomial_ffd")]
	[Log(BitmaskName = "GL")]
	public const uint GEOMETRY_DEFORMATION_BIT_SGIX = 2u;

	[RequiredByFeature("GL_SGIX_polynomial_ffd")]
	public const int GEOMETRY_DEFORMATION_SGIX = 33172;

	[RequiredByFeature("GL_SGIX_polynomial_ffd")]
	public const int TEXTURE_DEFORMATION_SGIX = 33173;

	[RequiredByFeature("GL_SGIX_polynomial_ffd")]
	public const int DEFORMATIONS_MASK_SGIX = 33174;

	[RequiredByFeature("GL_SGIX_polynomial_ffd")]
	public const int MAX_DEFORMATION_ORDER_SGIX = 33175;

	[RequiredByFeature("GL_SGIX_reference_plane")]
	public const int REFERENCE_PLANE_SGIX = 33149;

	[RequiredByFeature("GL_SGIX_reference_plane")]
	public const int REFERENCE_PLANE_EQUATION_SGIX = 33150;

	[RequiredByFeature("GL_SGIX_resample")]
	public const int PACK_RESAMPLE_SGIX = 33838;

	[RequiredByFeature("GL_SGIX_resample")]
	public const int UNPACK_RESAMPLE_SGIX = 33839;

	[RequiredByFeature("GL_SGIX_resample")]
	public const int RESAMPLE_REPLICATE_SGIX = 33843;

	[RequiredByFeature("GL_SGIX_resample")]
	public const int RESAMPLE_ZERO_FILL_SGIX = 33844;

	[RequiredByFeature("GL_SGIX_resample")]
	public const int RESAMPLE_DECIMATE_SGIX = 33840;

	[RequiredByFeature("GL_SGIX_scalebias_hint")]
	public const int SCALEBIAS_HINT_SGIX = 33570;

	[RequiredByFeature("GL_SGIX_shadow")]
	public const int TEXTURE_COMPARE_SGIX = 33178;

	[RequiredByFeature("GL_SGIX_shadow")]
	public const int TEXTURE_COMPARE_OPERATOR_SGIX = 33179;

	[RequiredByFeature("GL_SGIX_shadow")]
	public const int TEXTURE_LEQUAL_R_SGIX = 33180;

	[RequiredByFeature("GL_SGIX_shadow")]
	public const int TEXTURE_GEQUAL_R_SGIX = 33181;

	[RequiredByFeature("GL_SGIX_shadow_ambient")]
	public const int SHADOW_AMBIENT_SGIX = 32959;

	[RequiredByFeature("GL_SGIX_sprite")]
	public const int SPRITE_SGIX = 33096;

	[RequiredByFeature("GL_SGIX_sprite")]
	public const int SPRITE_MODE_SGIX = 33097;

	[RequiredByFeature("GL_SGIX_sprite")]
	public const int SPRITE_AXIS_SGIX = 33098;

	[RequiredByFeature("GL_SGIX_sprite")]
	public const int SPRITE_TRANSLATION_SGIX = 33099;

	[RequiredByFeature("GL_SGIX_sprite")]
	public const int SPRITE_AXIAL_SGIX = 33100;

	[RequiredByFeature("GL_SGIX_sprite")]
	public const int SPRITE_OBJECT_ALIGNED_SGIX = 33101;

	[RequiredByFeature("GL_SGIX_sprite")]
	public const int SPRITE_EYE_ALIGNED_SGIX = 33102;

	[RequiredByFeature("GL_SGIX_subsample")]
	public const int PACK_SUBSAMPLE_RATE_SGIX = 34208;

	[RequiredByFeature("GL_SGIX_subsample")]
	public const int UNPACK_SUBSAMPLE_RATE_SGIX = 34209;

	[RequiredByFeature("GL_SGIX_subsample")]
	public const int PIXEL_SUBSAMPLE_4444_SGIX = 34210;

	[RequiredByFeature("GL_SGIX_subsample")]
	public const int PIXEL_SUBSAMPLE_2424_SGIX = 34211;

	[RequiredByFeature("GL_SGIX_subsample")]
	public const int PIXEL_SUBSAMPLE_4242_SGIX = 34212;

	[RequiredByFeature("GL_SGIX_texture_add_env")]
	public const int TEXTURE_ENV_BIAS_SGIX = 32958;

	[RequiredByFeature("GL_SGIX_texture_coordinate_clamp")]
	public const int TEXTURE_MAX_CLAMP_S_SGIX = 33641;

	[RequiredByFeature("GL_SGIX_texture_coordinate_clamp")]
	public const int TEXTURE_MAX_CLAMP_T_SGIX = 33642;

	[RequiredByFeature("GL_SGIX_texture_coordinate_clamp")]
	public const int TEXTURE_MAX_CLAMP_R_SGIX = 33643;

	[RequiredByFeature("GL_SGIX_texture_lod_bias")]
	public const int TEXTURE_LOD_BIAS_S_SGIX = 33166;

	[RequiredByFeature("GL_SGIX_texture_lod_bias")]
	public const int TEXTURE_LOD_BIAS_T_SGIX = 33167;

	[RequiredByFeature("GL_SGIX_texture_lod_bias")]
	public const int TEXTURE_LOD_BIAS_R_SGIX = 33168;

	[RequiredByFeature("GL_SGIX_texture_multi_buffer")]
	public const int TEXTURE_MULTI_BUFFER_HINT_SGIX = 33070;

	[RequiredByFeature("GL_SGIX_texture_scale_bias")]
	public const int POST_TEXTURE_FILTER_BIAS_SGIX = 33145;

	[RequiredByFeature("GL_SGIX_texture_scale_bias")]
	public const int POST_TEXTURE_FILTER_SCALE_SGIX = 33146;

	[RequiredByFeature("GL_SGIX_texture_scale_bias")]
	public const int POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 33147;

	[RequiredByFeature("GL_SGIX_texture_scale_bias")]
	public const int POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 33148;

	[RequiredByFeature("GL_SGIX_vertex_preclip")]
	public const int VERTEX_PRECLIP_SGIX = 33774;

	[RequiredByFeature("GL_SGIX_vertex_preclip")]
	public const int VERTEX_PRECLIP_HINT_SGIX = 33775;

	[RequiredByFeature("GL_SGIX_ycrcb")]
	public const int YCRCB_422_SGIX = 33211;

	[RequiredByFeature("GL_SGIX_ycrcb")]
	public const int YCRCB_444_SGIX = 33212;

	[RequiredByFeature("GL_SGIX_ycrcba")]
	public const int YCRCB_SGIX = 33560;

	[RequiredByFeature("GL_SGIX_ycrcba")]
	public const int YCRCBA_SGIX = 33561;

	[RequiredByFeature("GL_SGI_texture_color_table")]
	public const int TEXTURE_COLOR_TABLE_SGI = 32956;

	[RequiredByFeature("GL_SGI_texture_color_table")]
	public const int PROXY_TEXTURE_COLOR_TABLE_SGI = 32957;

	[RequiredByFeature("GL_SUNX_constant_data")]
	public const int UNPACK_CONSTANT_DATA_SUNX = 33237;

	[RequiredByFeature("GL_SUNX_constant_data")]
	public const int TEXTURE_CONSTANT_DATA_SUNX = 33238;

	[RequiredByFeature("GL_SUN_convolution_border_modes")]
	public const int WRAP_BORDER_SUN = 33236;

	[RequiredByFeature("GL_SUN_global_alpha")]
	public const int GLOBAL_ALPHA_SUN = 33241;

	[RequiredByFeature("GL_SUN_global_alpha")]
	public const int GLOBAL_ALPHA_FACTOR_SUN = 33242;

	[RequiredByFeature("GL_SUN_mesh_array")]
	public const int QUAD_MESH_SUN = 34324;

	[RequiredByFeature("GL_SUN_mesh_array")]
	public const int TRIANGLE_MESH_SUN = 34325;

	[RequiredByFeature("GL_SUN_slice_accum")]
	public const int SLICE_ACCUM_SUN = 34252;

	[RequiredByFeature("GL_SUN_triangle_list")]
	public const int RESTART_SUN = 1;

	[RequiredByFeature("GL_SUN_triangle_list")]
	public const int REPLACE_MIDDLE_SUN = 2;

	[RequiredByFeature("GL_SUN_triangle_list")]
	public const int REPLACE_OLDEST_SUN = 3;

	[RequiredByFeature("GL_SUN_triangle_list")]
	public const int TRIANGLE_LIST_SUN = 33239;

	[RequiredByFeature("GL_SUN_triangle_list")]
	public const int REPLACEMENT_CODE_SUN = 33240;

	[RequiredByFeature("GL_SUN_triangle_list")]
	public const int REPLACEMENT_CODE_ARRAY_SUN = 34240;

	[RequiredByFeature("GL_SUN_triangle_list")]
	public const int REPLACEMENT_CODE_ARRAY_TYPE_SUN = 34241;

	[RequiredByFeature("GL_SUN_triangle_list")]
	public const int REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 34242;

	[RequiredByFeature("GL_SUN_triangle_list")]
	public const int REPLACEMENT_CODE_ARRAY_POINTER_SUN = 34243;

	[RequiredByFeature("GL_SUN_triangle_list")]
	public const int R1UI_V3F_SUN = 34244;

	[RequiredByFeature("GL_SUN_triangle_list")]
	public const int R1UI_C4UB_V3F_SUN = 34245;

	[RequiredByFeature("GL_SUN_triangle_list")]
	public const int R1UI_C3F_V3F_SUN = 34246;

	[RequiredByFeature("GL_SUN_triangle_list")]
	public const int R1UI_N3F_V3F_SUN = 34247;

	[RequiredByFeature("GL_SUN_triangle_list")]
	public const int R1UI_C4F_N3F_V3F_SUN = 34248;

	[RequiredByFeature("GL_SUN_triangle_list")]
	public const int R1UI_T2F_V3F_SUN = 34249;

	[RequiredByFeature("GL_SUN_triangle_list")]
	public const int R1UI_T2F_N3F_V3F_SUN = 34250;

	[RequiredByFeature("GL_SUN_triangle_list")]
	public const int R1UI_T2F_C4F_N3F_V3F_SUN = 34251;

	[RequiredByFeature("GL_VIV_shader_binary", Api = "gles2")]
	public const int SHADER_BINARY_VIV = 36804;

	[RequiredByFeature("GL_WIN_phong_shading")]
	public const int PHONG_WIN = 33002;

	[RequiredByFeature("GL_WIN_phong_shading")]
	public const int PHONG_HINT_WIN = 33003;

	[RequiredByFeature("GL_WIN_specular_fog")]
	public const int FOG_SPECULAR_TEXTURE_WIN = 33004;

	public static KhronosVersion CurrentVersion => _CurrentVersion;

	public static GlslVersion CurrentShadingVersion => _CurrentShadingVersion;

	public static string CurrentVendor => _Vendor;

	public static string CurrentRenderer => _Renderer;

	public static Extensions CurrentExtensions => _CurrentExtensions;

	public static Limits CurrentLimits => _CurrentLimits;

	public GetAddressDelegate GetFunctionPointerDelegate
	{
		get
		{
			return _GetAddressDelegate;
		}
		set
		{
			_GetAddressDelegate = value ?? new GetAddressDelegate(KhronosApi.GetProcAddressGLOS);
		}
	}

	[RequiredByFeature("GL_3DFX_tbuffer")]
	public static void TbufferMask3DFX(uint mask)
	{
		Delegates.pglTbufferMask3DFX(mask);
	}

	[RequiredByFeature("GL_AMD_debug_output")]
	public unsafe static void DebugMessageEnableAMD(int category, DebugSeverity severity, int count, uint[] ids, bool enabled)
	{
		fixed (uint* ids2 = ids)
		{
			Delegates.pglDebugMessageEnableAMD(category, (int)severity, count, ids2, enabled);
		}
	}

	[RequiredByFeature("GL_AMD_debug_output")]
	public unsafe static void DebugMessageEnableAMD(int category, DebugSeverity severity, uint[] ids, bool enabled)
	{
		fixed (uint* ids2 = ids)
		{
			Delegates.pglDebugMessageEnableAMD(category, (int)severity, ids.Length, ids2, enabled);
		}
	}

	[RequiredByFeature("GL_AMD_debug_output")]
	public static void DebugMessageInsertAMD(int category, DebugSeverity severity, uint id, int length, string buf)
	{
		Delegates.pglDebugMessageInsertAMD(category, (int)severity, id, length, buf);
	}

	[RequiredByFeature("GL_AMD_debug_output")]
	public static void DebugMessageCallbackAMD(DebugProc callback, nint userParam)
	{
		Delegates.pglDebugMessageCallbackAMD(callback, userParam);
	}

	[RequiredByFeature("GL_AMD_debug_output")]
	public unsafe static uint GetDebugMessageLogAMD(int bufSize, [Out] int[] categories, [Out] int[] severities, [Out] uint[] ids, [Out] int[] lengths, StringBuilder message)
	{
		uint result;
		fixed (int* categories2 = categories)
		{
			fixed (int* severities2 = severities)
			{
				fixed (uint* ids2 = ids)
				{
					fixed (int* lengths2 = lengths)
					{
						result = Delegates.pglGetDebugMessageLogAMD((uint)categories.Length, bufSize, categories2, severities2, ids2, lengths2, message);
					}
				}
			}
		}
		return result;
	}

	[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
	public static void RenderbufferStorageMultisampleAMD(RenderbufferTarget target, int samples, int storageSamples, InternalFormat internalformat, int width, int height)
	{
		Delegates.pglRenderbufferStorageMultisampleAdvancedAMD((int)target, samples, storageSamples, (int)internalformat, width, height);
	}

	[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
	public static void NamedRenderbufferStorageMultisampleAMD(uint renderbuffer, int samples, int storageSamples, InternalFormat internalformat, int width, int height)
	{
		Delegates.pglNamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer, samples, storageSamples, (int)internalformat, width, height);
	}

	[RequiredByFeature("GL_AMD_framebuffer_sample_positions")]
	public unsafe static void FramebufferSampleAMD(FramebufferTarget target, uint numsamples, uint pixelindex, float[] values)
	{
		fixed (float* values2 = values)
		{
			Delegates.pglFramebufferSamplePositionsfvAMD((int)target, numsamples, pixelindex, values2);
		}
	}

	[RequiredByFeature("GL_AMD_framebuffer_sample_positions")]
	public unsafe static void NamedFramebufferSampleAMD(uint framebuffer, uint numsamples, uint pixelindex, float[] values)
	{
		fixed (float* values2 = values)
		{
			Delegates.pglNamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values2);
		}
	}

	[RequiredByFeature("GL_AMD_framebuffer_sample_positions")]
	public unsafe static void GetFramebufferParameterAMD(FramebufferTarget target, FramebufferAttachmentParameterName pname, uint numsamples, uint pixelindex, int size, [Out] float[] values)
	{
		fixed (float* values2 = values)
		{
			Delegates.pglGetFramebufferParameterfvAMD((int)target, (int)pname, numsamples, pixelindex, size, values2);
		}
	}

	[RequiredByFeature("GL_AMD_framebuffer_sample_positions")]
	public unsafe static void GetNamedFramebufferParameterAMD(uint framebuffer, int pname, uint numsamples, uint pixelindex, int size, [Out] float[] values)
	{
		fixed (float* values2 = values)
		{
			Delegates.pglGetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values2);
		}
	}

	[RequiredByFeature("GL_AMD_interleaved_elements")]
	public static void VertexAttribParameterAMD(uint index, int pname, int param)
	{
		Delegates.pglVertexAttribParameteriAMD(index, pname, param);
	}

	[RequiredByFeature("GL_AMD_name_gen_delete")]
	public unsafe static void GenNameAMD(int identifier, uint[] names)
	{
		fixed (uint* names2 = names)
		{
			Delegates.pglGenNamesAMD(identifier, (uint)names.Length, names2);
		}
	}

	[RequiredByFeature("GL_AMD_name_gen_delete")]
	public unsafe static uint GenNameAMD(int identifier)
	{
		uint result = default(uint);
		Delegates.pglGenNamesAMD(identifier, 1u, &result);
		return result;
	}

	[RequiredByFeature("GL_AMD_name_gen_delete")]
	public unsafe static void DeleteNameAMD(int identifier, uint[] names)
	{
		fixed (uint* names2 = names)
		{
			Delegates.pglDeleteNamesAMD(identifier, (uint)names.Length, names2);
		}
	}

	[RequiredByFeature("GL_AMD_name_gen_delete")]
	public static bool IsNameAMD(int identifier, uint name)
	{
		return Delegates.pglIsNameAMD(identifier, name);
	}

	[RequiredByFeature("GL_AMD_occlusion_query_event")]
	public static void QueryObjectParameterAMD(QueryTarget target, uint id, int pname, OcclusionQueryEventMaskAMD param)
	{
		Delegates.pglQueryObjectParameteruiAMD((int)target, id, pname, (uint)param);
	}

	[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
	public unsafe static void GetPerfMonitorGroupsAMD(out int numGroups, [Out] uint[] groups)
	{
		fixed (int* numGroups2 = &numGroups)
		{
			fixed (uint* groups2 = groups)
			{
				Delegates.pglGetPerfMonitorGroupsAMD(numGroups2, groups.Length, groups2);
			}
		}
	}

	[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
	public unsafe static void GetPerfMonitorCountersAMD(uint group, out int numCounters, out int maxActiveCounters, [Out] uint[] counters)
	{
		fixed (int* numCounters2 = &numCounters)
		{
			fixed (int* maxActiveCounters2 = &maxActiveCounters)
			{
				fixed (uint* counters2 = counters)
				{
					Delegates.pglGetPerfMonitorCountersAMD(group, numCounters2, maxActiveCounters2, counters.Length, counters2);
				}
			}
		}
	}

	[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
	public unsafe static void GetPerfMonitorGroupStringAMD(uint group, int bufSize, out int length, StringBuilder groupString)
	{
		fixed (int* length2 = &length)
		{
			Delegates.pglGetPerfMonitorGroupStringAMD(group, bufSize, length2, groupString);
		}
	}

	[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
	public unsafe static void GetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, out int length, StringBuilder counterString)
	{
		fixed (int* length2 = &length)
		{
			Delegates.pglGetPerfMonitorCounterStringAMD(group, counter, bufSize, length2, counterString);
		}
	}

	[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
	public static void GetPerfMonitorCounterInfoAMD(uint group, uint counter, int pname, nint data)
	{
		Delegates.pglGetPerfMonitorCounterInfoAMD(group, counter, pname, data);
	}

	[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
	public static void GetPerfMonitorCounterInfoAMD(uint group, uint counter, int pname, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			GetPerfMonitorCounterInfoAMD(group, counter, pname, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
	public unsafe static void GenPerfMonitorsAMD(uint[] monitors)
	{
		fixed (uint* monitors2 = monitors)
		{
			Delegates.pglGenPerfMonitorsAMD(monitors.Length, monitors2);
		}
	}

	[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
	public unsafe static uint GenPerfMonitorAMD()
	{
		uint result = default(uint);
		Delegates.pglGenPerfMonitorsAMD(1, &result);
		return result;
	}

	[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
	public unsafe static void DeletePerfMonitorsAMD(params uint[] monitors)
	{
		fixed (uint* monitors2 = monitors)
		{
			Delegates.pglDeletePerfMonitorsAMD(monitors.Length, monitors2);
		}
	}

	[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
	public unsafe static void SelectPerfMonitorCountersAMD(uint monitor, bool enable, uint group, uint[] counterList)
	{
		fixed (uint* counterList2 = counterList)
		{
			Delegates.pglSelectPerfMonitorCountersAMD(monitor, enable, group, counterList.Length, counterList2);
		}
	}

	[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
	public static void BeginPerfMonitorAMD(uint monitor)
	{
		Delegates.pglBeginPerfMonitorAMD(monitor);
	}

	[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
	public static void EndPerfMonitorAMD(uint monitor)
	{
		Delegates.pglEndPerfMonitorAMD(monitor);
	}

	[RequiredByFeature("GL_AMD_performance_monitor", Api = "gl|glcore|gles2")]
	public unsafe static void GetPerfMonitorCounterDataAMD(uint monitor, int pname, int dataSize, [Out] uint[] data, out int bytesWritten)
	{
		fixed (uint* data2 = data)
		{
			fixed (int* bytesWritten2 = &bytesWritten)
			{
				Delegates.pglGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data2, bytesWritten2);
			}
		}
	}

	[RequiredByFeature("GL_AMD_sample_positions")]
	public unsafe static void SetMultisampleAMD(int pname, uint index, float[] val)
	{
		fixed (float* val2 = val)
		{
			Delegates.pglSetMultisamplefvAMD(pname, index, val2);
		}
	}

	[RequiredByFeature("GL_AMD_sparse_texture")]
	public static void TexStorageAMD(TextureTarget target, SizedInternalFormat internalFormat, int width, int height, int depth, int layers, TextureStorageMaskAMD flags)
	{
		Delegates.pglTexStorageSparseAMD((int)target, (int)internalFormat, width, height, depth, layers, (uint)flags);
	}

	[RequiredByFeature("GL_AMD_sparse_texture")]
	public static void TextureStorageAMD(uint texture, int target, SizedInternalFormat internalFormat, int width, int height, int depth, int layers, TextureStorageMaskAMD flags)
	{
		Delegates.pglTextureStorageSparseAMD(texture, target, (int)internalFormat, width, height, depth, layers, (uint)flags);
	}

	[RequiredByFeature("GL_AMD_stencil_operation_extended")]
	public static void StencilOpAMD(TriangleFace face, uint value)
	{
		Delegates.pglStencilOpValueAMD((int)face, value);
	}

	[RequiredByFeature("GL_AMD_vertex_shader_tessellator")]
	public static void TessellationFactorAMD(float factor)
	{
		Delegates.pglTessellationFactorAMD(factor);
	}

	[RequiredByFeature("GL_AMD_vertex_shader_tessellator")]
	public static void TessellationModeAMD(int mode)
	{
		Delegates.pglTessellationModeAMD(mode);
	}

	[RequiredByFeature("GL_ANGLE_framebuffer_blit", Api = "gles2")]
	public static void BlitFramebufferANGLE(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter)
	{
		Delegates.pglBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, (uint)mask, (int)filter);
	}

	[RequiredByFeature("GL_ANGLE_framebuffer_multisample", Api = "gles2")]
	public static void RenderbufferStorageMultisampleANGLE(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height)
	{
		Delegates.pglRenderbufferStorageMultisampleANGLE((int)target, samples, (int)internalformat, width, height);
	}

	[RequiredByFeature("GL_ANGLE_translated_shader_source", Api = "gles2")]
	public unsafe static void GetTranslatedShaderSourceANGLE(uint shader, int bufSize, out int length, StringBuilder source)
	{
		fixed (int* length2 = &length)
		{
			Delegates.pglGetTranslatedShaderSourceANGLE(shader, bufSize, length2, source);
		}
	}

	[RequiredByFeature("GL_APPLE_copy_texture_levels", Api = "gles1|gles2")]
	public static void CopyTextureLevelsAPPLE(uint destinationTexture, uint sourceTexture, int sourceBaseLevel, int sourceLevelCount)
	{
		Delegates.pglCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
	}

	[RequiredByFeature("GL_APPLE_element_array")]
	public static void ElementPointerAPPLE(ElementPointerTypeATI type, nint pointer)
	{
		Delegates.pglElementPointerAPPLE((int)type, pointer);
	}

	[RequiredByFeature("GL_APPLE_element_array")]
	public static void ElementPointerAPPLE(ElementPointerTypeATI type, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			ElementPointerAPPLE(type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_APPLE_element_array")]
	public static void DrawElementArrayAPPLE(PrimitiveType mode, int first, int count)
	{
		Delegates.pglDrawElementArrayAPPLE((int)mode, first, count);
	}

	[RequiredByFeature("GL_APPLE_element_array")]
	public static void DrawRangeElementArrayAPPLE(PrimitiveType mode, uint start, uint end, int first, int count)
	{
		Delegates.pglDrawRangeElementArrayAPPLE((int)mode, start, end, first, count);
	}

	[RequiredByFeature("GL_APPLE_element_array")]
	public unsafe static void MultiDrawElementArrayAPPLE(PrimitiveType mode, int[] first, int[] count, int primcount)
	{
		fixed (int* first2 = first)
		{
			fixed (int* count2 = count)
			{
				Delegates.pglMultiDrawElementArrayAPPLE((int)mode, first2, count2, primcount);
			}
		}
	}

	[RequiredByFeature("GL_APPLE_element_array")]
	public unsafe static void MultiDrawElementArrayAPPLE(PrimitiveType mode, int[] first, int[] count)
	{
		fixed (int* first2 = first)
		{
			fixed (int* count2 = count)
			{
				Delegates.pglMultiDrawElementArrayAPPLE((int)mode, first2, count2, first.Length);
			}
		}
	}

	[RequiredByFeature("GL_APPLE_element_array")]
	public unsafe static void MultiDrawRangeElementArrayAPPLE(PrimitiveType mode, uint start, uint end, int[] first, int[] count, int primcount)
	{
		fixed (int* first2 = first)
		{
			fixed (int* count2 = count)
			{
				Delegates.pglMultiDrawRangeElementArrayAPPLE((int)mode, start, end, first2, count2, primcount);
			}
		}
	}

	[RequiredByFeature("GL_APPLE_element_array")]
	public unsafe static void MultiDrawRangeElementArrayAPPLE(PrimitiveType mode, uint start, uint end, int[] first, int[] count)
	{
		fixed (int* first2 = first)
		{
			fixed (int* count2 = count)
			{
				Delegates.pglMultiDrawRangeElementArrayAPPLE((int)mode, start, end, first2, count2, first.Length);
			}
		}
	}

	[RequiredByFeature("GL_APPLE_fence")]
	public unsafe static void GenFencesAPPLE(uint[] fences)
	{
		fixed (uint* fences2 = fences)
		{
			Delegates.pglGenFencesAPPLE(fences.Length, fences2);
		}
	}

	[RequiredByFeature("GL_APPLE_fence")]
	public unsafe static uint GenFenceAPPLE()
	{
		uint result = default(uint);
		Delegates.pglGenFencesAPPLE(1, &result);
		return result;
	}

	[RequiredByFeature("GL_APPLE_fence")]
	public unsafe static void DeleteFencesAPPLE(params uint[] fences)
	{
		fixed (uint* fences2 = fences)
		{
			Delegates.pglDeleteFencesAPPLE(fences.Length, fences2);
		}
	}

	[RequiredByFeature("GL_APPLE_fence")]
	public static void SetFenceAPPLE(uint fence)
	{
		Delegates.pglSetFenceAPPLE(fence);
	}

	[RequiredByFeature("GL_APPLE_fence")]
	public static bool IsFenceAPPLE(uint fence)
	{
		return Delegates.pglIsFenceAPPLE(fence);
	}

	[RequiredByFeature("GL_APPLE_fence")]
	public static bool TestFenceAPPLE(uint fence)
	{
		return Delegates.pglTestFenceAPPLE(fence);
	}

	[RequiredByFeature("GL_APPLE_fence")]
	public static void FinishFenceAPPLE(uint fence)
	{
		Delegates.pglFinishFenceAPPLE(fence);
	}

	[RequiredByFeature("GL_APPLE_fence")]
	public static bool TestObjectAPPLE(ObjectTypeAPPLE @object, uint name)
	{
		return Delegates.pglTestObjectAPPLE((int)@object, name);
	}

	[RequiredByFeature("GL_APPLE_fence")]
	public static void FinishObjectAPPLE(ObjectTypeAPPLE @object, int name)
	{
		Delegates.pglFinishObjectAPPLE((int)@object, name);
	}

	[RequiredByFeature("GL_APPLE_flush_buffer_range")]
	public static void BufferParameterAPPLE(int target, int pname, int param)
	{
		Delegates.pglBufferParameteriAPPLE(target, pname, param);
	}

	[RequiredByFeature("GL_APPLE_framebuffer_multisample", Api = "gles1|gles2")]
	public static void RenderbufferStorageMultisampleAPPLE(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height)
	{
		Delegates.pglRenderbufferStorageMultisampleAPPLE((int)target, samples, (int)internalformat, width, height);
	}

	[RequiredByFeature("GL_APPLE_framebuffer_multisample", Api = "gles1|gles2")]
	public static void ResolveMultisampleFramebufferAPPLE()
	{
		Delegates.pglResolveMultisampleFramebufferAPPLE();
	}

	[RequiredByFeature("GL_APPLE_object_purgeable")]
	public static int ObjectPurgeableAPPLE(int objectType, uint name, int option)
	{
		return Delegates.pglObjectPurgeableAPPLE(objectType, name, option);
	}

	[RequiredByFeature("GL_APPLE_object_purgeable")]
	public static int ObjectUnpurgeableAPPLE(int objectType, uint name, int option)
	{
		return Delegates.pglObjectUnpurgeableAPPLE(objectType, name, option);
	}

	[RequiredByFeature("GL_APPLE_object_purgeable")]
	public unsafe static void GetObjectParameterAPPLE(int objectType, uint name, int pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetObjectParameterivAPPLE(objectType, name, pname, params2);
		}
	}

	[RequiredByFeature("GL_APPLE_texture_range")]
	public static void TextureRangeAPPLE(int target, int length, nint pointer)
	{
		Delegates.pglTextureRangeAPPLE(target, length, pointer);
	}

	[RequiredByFeature("GL_APPLE_texture_range")]
	public static void TextureRangeAPPLE(int target, int length, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			TextureRangeAPPLE(target, length, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_APPLE_texture_range")]
	public unsafe static void GetTexParameterPointerAPPLE(int target, int pname, out nint @params)
	{
		fixed (nint* params2 = &@params)
		{
			Delegates.pglGetTexParameterPointervAPPLE(target, pname, params2);
		}
	}

	[RequiredByFeature("GL_APPLE_texture_range")]
	public static void GetTexParameterPointerAPPLE(int target, int pname, object @params)
	{
		GCHandle gCHandle = GCHandle.Alloc(@params, GCHandleType.Pinned);
		try
		{
			GetTexParameterPointerAPPLE(target, pname, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_APPLE_vertex_array_object")]
	public static void BindVertexArrayAPPLE(uint array)
	{
		Delegates.pglBindVertexArrayAPPLE(array);
	}

	[RequiredByFeature("GL_APPLE_vertex_array_range")]
	public static void VertexArrayRangeAPPLE(int length, nint pointer)
	{
		Delegates.pglVertexArrayRangeAPPLE(length, pointer);
	}

	[RequiredByFeature("GL_APPLE_vertex_array_range")]
	public static void FlushVertexArrayRangeAPPLE(int length, nint pointer)
	{
		Delegates.pglFlushVertexArrayRangeAPPLE(length, pointer);
	}

	[RequiredByFeature("GL_APPLE_vertex_array_range")]
	public static void VertexArrayParameterAPPLE(VertexArrayPNameAPPLE pname, int param)
	{
		Delegates.pglVertexArrayParameteriAPPLE((int)pname, param);
	}

	[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
	public static void EnableVertexAttribAPPLE(uint index, int pname)
	{
		Delegates.pglEnableVertexAttribAPPLE(index, pname);
	}

	[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
	public static void DisableVertexAttribAPPLE(uint index, int pname)
	{
		Delegates.pglDisableVertexAttribAPPLE(index, pname);
	}

	[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
	public static bool IsVertexAttribEnabledAPPLE(uint index, int pname)
	{
		return Delegates.pglIsVertexAttribEnabledAPPLE(index, pname);
	}

	[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
	public unsafe static void MapVertexAttrib1APPLE(uint index, uint size, double u1, double u2, int stride, int order, double[] points)
	{
		fixed (double* points2 = points)
		{
			Delegates.pglMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points2);
		}
	}

	[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
	public unsafe static void MapVertexAttrib1APPLE(uint index, uint size, float u1, float u2, int stride, int order, float[] points)
	{
		fixed (float* points2 = points)
		{
			Delegates.pglMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points2);
		}
	}

	[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
	public unsafe static void MapVertexAttrib2APPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points)
	{
		fixed (double* points2 = points)
		{
			Delegates.pglMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points2);
		}
	}

	[RequiredByFeature("GL_APPLE_vertex_program_evaluators")]
	public unsafe static void MapVertexAttrib2APPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points)
	{
		fixed (float* points2 = points)
		{
			Delegates.pglMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points2);
		}
	}

	[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_IMG_bindless_texture", Api = "gles2")]
	public static ulong GetTextureHandleARB(uint texture)
	{
		return Delegates.pglGetTextureHandleARB(texture);
	}

	[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_IMG_bindless_texture", Api = "gles2")]
	public static ulong GetTextureSamplerHandleARB(uint texture, uint sampler)
	{
		return Delegates.pglGetTextureSamplerHandleARB(texture, sampler);
	}

	[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
	public static void MakeTextureHandleResidentARB(ulong handle)
	{
		Delegates.pglMakeTextureHandleResidentARB(handle);
	}

	[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
	public static void MakeTextureHandleNonResidentARB(ulong handle)
	{
		Delegates.pglMakeTextureHandleNonResidentARB(handle);
	}

	[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
	public static ulong GetImageHandleARB(uint texture, int level, bool layered, int layer, PixelFormat format)
	{
		return Delegates.pglGetImageHandleARB(texture, level, layered, layer, (int)format);
	}

	[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
	public static void MakeImageHandleResidentARB(ulong handle, int access)
	{
		Delegates.pglMakeImageHandleResidentARB(handle, access);
	}

	[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
	public static void MakeImageHandleNonResidentARB(ulong handle)
	{
		Delegates.pglMakeImageHandleNonResidentARB(handle);
	}

	[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_IMG_bindless_texture", Api = "gles2")]
	public static void UniformHandleARB(int location, ulong value)
	{
		Delegates.pglUniformHandleui64ARB(location, value);
	}

	[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_IMG_bindless_texture", Api = "gles2")]
	public unsafe static void UniformHandleARB(int location, ulong[] value)
	{
		fixed (ulong* value2 = value)
		{
			Delegates.pglUniformHandleui64vARB(location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_IMG_bindless_texture", Api = "gles2")]
	public static void ProgramUniformHandleARB(uint program, int location, ulong value)
	{
		Delegates.pglProgramUniformHandleui64ARB(program, location, value);
	}

	[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_IMG_bindless_texture", Api = "gles2")]
	public unsafe static void ProgramUniformHandleARB(uint program, int location, ulong[] values)
	{
		fixed (ulong* values2 = values)
		{
			Delegates.pglProgramUniformHandleui64vARB(program, location, values.Length, values2);
		}
	}

	[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
	public static bool IsTextureHandleResidentARB(ulong handle)
	{
		return Delegates.pglIsTextureHandleResidentARB(handle);
	}

	[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
	public static bool IsImageHandleResidentARB(ulong handle)
	{
		return Delegates.pglIsImageHandleResidentARB(handle);
	}

	[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
	public static void VertexAttribL1ARB(uint index, ulong x)
	{
		Delegates.pglVertexAttribL1ui64ARB(index, x);
	}

	[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
	public unsafe static void VertexAttribL1ARB(uint index, ulong[] v)
	{
		fixed (ulong* v2 = v)
		{
			Delegates.pglVertexAttribL1ui64vARB(index, v2);
		}
	}

	[RequiredByFeature("GL_ARB_bindless_texture", Api = "gl|glcore")]
	public unsafe static void GetVertexAttribLARB(uint index, VertexAttribEnum pname, [Out] ulong[] @params)
	{
		fixed (ulong* params2 = @params)
		{
			Delegates.pglGetVertexAttribLui64vARB(index, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ARB_cl_event", Api = "gl|glcore")]
	public static int CreateSyncFromCLeventARB(nint context, nint @event, uint flags)
	{
		return Delegates.pglCreateSyncFromCLeventARB(context, @event, flags);
	}

	[RequiredByFeature("GL_ARB_compute_variable_group_size", Api = "gl|glcore")]
	public static void DispatchComputeGroupSizeARB(uint num_groups_x, uint num_groups_y, uint num_groups_z, uint group_size_x, uint group_size_y, uint group_size_z)
	{
		Delegates.pglDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
	}

	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_geometry_program4")]
	public static void FramebufferTextureFaceARB(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, TextureTarget face)
	{
		Delegates.pglFramebufferTextureFaceARB((int)target, (int)attachment, texture, level, (int)face);
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public static void Uniform1ARB(int location, long x)
	{
		Delegates.pglUniform1i64ARB(location, x);
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public static void Uniform2ARB(int location, long x, long y)
	{
		Delegates.pglUniform2i64ARB(location, x, y);
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public static void Uniform3ARB(int location, long x, long y, long z)
	{
		Delegates.pglUniform3i64ARB(location, x, y, z);
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public static void Uniform4ARB(int location, long x, long y, long z, long w)
	{
		Delegates.pglUniform4i64ARB(location, x, y, z, w);
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public unsafe static void Uniform1ARB(int location, long[] value)
	{
		fixed (long* value2 = value)
		{
			Delegates.pglUniform1i64vARB(location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public unsafe static void Uniform2ARB(int location, long[] value)
	{
		fixed (long* value2 = value)
		{
			Delegates.pglUniform2i64vARB(location, value.Length / 2, value2);
		}
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public unsafe static void Uniform3ARB(int location, long[] value)
	{
		fixed (long* value2 = value)
		{
			Delegates.pglUniform3i64vARB(location, value.Length / 3, value2);
		}
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public unsafe static void Uniform4ARB(int location, long[] value)
	{
		fixed (long* value2 = value)
		{
			Delegates.pglUniform4i64vARB(location, value.Length / 4, value2);
		}
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public static void Uniform1ARB(int location, ulong x)
	{
		Delegates.pglUniform1ui64ARB(location, x);
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public static void Uniform2ARB(int location, ulong x, ulong y)
	{
		Delegates.pglUniform2ui64ARB(location, x, y);
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public static void Uniform3ARB(int location, ulong x, ulong y, ulong z)
	{
		Delegates.pglUniform3ui64ARB(location, x, y, z);
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public static void Uniform4ARB(int location, ulong x, ulong y, ulong z, ulong w)
	{
		Delegates.pglUniform4ui64ARB(location, x, y, z, w);
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public unsafe static void Uniform1ARB(int location, ulong[] value)
	{
		fixed (ulong* value2 = value)
		{
			Delegates.pglUniform1ui64vARB(location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public unsafe static void Uniform2ARB(int location, ulong[] value)
	{
		fixed (ulong* value2 = value)
		{
			Delegates.pglUniform2ui64vARB(location, value.Length / 2, value2);
		}
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public unsafe static void Uniform3ARB(int location, ulong[] value)
	{
		fixed (ulong* value2 = value)
		{
			Delegates.pglUniform3ui64vARB(location, value.Length / 3, value2);
		}
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public unsafe static void Uniform4ARB(int location, ulong[] value)
	{
		fixed (ulong* value2 = value)
		{
			Delegates.pglUniform4ui64vARB(location, value.Length / 4, value2);
		}
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public unsafe static void GetUniformARB(uint program, int location, [Out] long[] @params)
	{
		fixed (long* params2 = @params)
		{
			Delegates.pglGetUniformi64vARB(program, location, params2);
		}
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public unsafe static void GetUniformARB(uint program, int location, [Out] ulong[] @params)
	{
		fixed (ulong* params2 = @params)
		{
			Delegates.pglGetUniformui64vARB(program, location, params2);
		}
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public unsafe static void GetnUniformARB(uint program, int location, int bufSize, [Out] long[] @params)
	{
		fixed (long* params2 = @params)
		{
			Delegates.pglGetnUniformi64vARB(program, location, bufSize, params2);
		}
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public unsafe static void GetnUniformARB(uint program, int location, int bufSize, [Out] ulong[] @params)
	{
		fixed (ulong* params2 = @params)
		{
			Delegates.pglGetnUniformui64vARB(program, location, bufSize, params2);
		}
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public static void ProgramUniform1ARB(uint program, int location, long x)
	{
		Delegates.pglProgramUniform1i64ARB(program, location, x);
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public static void ProgramUniform2ARB(uint program, int location, long x, long y)
	{
		Delegates.pglProgramUniform2i64ARB(program, location, x, y);
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public static void ProgramUniform3ARB(uint program, int location, long x, long y, long z)
	{
		Delegates.pglProgramUniform3i64ARB(program, location, x, y, z);
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public static void ProgramUniform4ARB(uint program, int location, long x, long y, long z, long w)
	{
		Delegates.pglProgramUniform4i64ARB(program, location, x, y, z, w);
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public unsafe static void ProgramUniform1ARB(uint program, int location, long[] value)
	{
		fixed (long* value2 = value)
		{
			Delegates.pglProgramUniform1i64vARB(program, location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public unsafe static void ProgramUniform2ARB(uint program, int location, long[] value)
	{
		fixed (long* value2 = value)
		{
			Delegates.pglProgramUniform2i64vARB(program, location, value.Length / 2, value2);
		}
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public unsafe static void ProgramUniform3ARB(uint program, int location, long[] value)
	{
		fixed (long* value2 = value)
		{
			Delegates.pglProgramUniform3i64vARB(program, location, value.Length / 3, value2);
		}
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public unsafe static void ProgramUniform4ARB(uint program, int location, long[] value)
	{
		fixed (long* value2 = value)
		{
			Delegates.pglProgramUniform4i64vARB(program, location, value.Length / 4, value2);
		}
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public static void ProgramUniform1ARB(uint program, int location, ulong x)
	{
		Delegates.pglProgramUniform1ui64ARB(program, location, x);
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public static void ProgramUniform2ARB(uint program, int location, ulong x, ulong y)
	{
		Delegates.pglProgramUniform2ui64ARB(program, location, x, y);
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public static void ProgramUniform3ARB(uint program, int location, ulong x, ulong y, ulong z)
	{
		Delegates.pglProgramUniform3ui64ARB(program, location, x, y, z);
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public static void ProgramUniform4ARB(uint program, int location, ulong x, ulong y, ulong z, ulong w)
	{
		Delegates.pglProgramUniform4ui64ARB(program, location, x, y, z, w);
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public unsafe static void ProgramUniform1ARB(uint program, int location, ulong[] value)
	{
		fixed (ulong* value2 = value)
		{
			Delegates.pglProgramUniform1ui64vARB(program, location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public unsafe static void ProgramUniform2ARB(uint program, int location, ulong[] value)
	{
		fixed (ulong* value2 = value)
		{
			Delegates.pglProgramUniform2ui64vARB(program, location, value.Length / 2, value2);
		}
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public unsafe static void ProgramUniform3ARB(uint program, int location, ulong[] value)
	{
		fixed (ulong* value2 = value)
		{
			Delegates.pglProgramUniform3ui64vARB(program, location, value.Length / 3, value2);
		}
	}

	[RequiredByFeature("GL_ARB_gpu_shader_int64", Api = "gl|glcore")]
	public unsafe static void ProgramUniform4ARB(uint program, int location, ulong[] value)
	{
		fixed (ulong* value2 = value)
		{
			Delegates.pglProgramUniform4ui64vARB(program, location, value.Length / 4, value2);
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_paletted_texture")]
	[RequiredByFeature("GL_SGI_color_table")]
	public static void ColorTable(ColorTableTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, nint data)
	{
		Delegates.pglColorTable((int)target, (int)internalformat, width, (int)format, (int)type, data);
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_paletted_texture")]
	[RequiredByFeature("GL_SGI_color_table")]
	public static void ColorTable(ColorTableTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			ColorTable(target, internalformat, width, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_SGI_color_table")]
	public unsafe static void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglColorTableParameterfv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_SGI_color_table")]
	public unsafe static void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglColorTableParameteriv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_SGI_color_table")]
	public static void CopyColorTable(ColorTableTarget target, InternalFormat internalformat, int x, int y, int width)
	{
		Delegates.pglCopyColorTable((int)target, (int)internalformat, x, y, width);
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_paletted_texture")]
	public static void GetColorTable(ColorTableTarget target, PixelFormat format, PixelType type, nint table)
	{
		Delegates.pglGetColorTable((int)target, (int)format, (int)type, table);
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_paletted_texture")]
	public static void GetColorTable(ColorTableTarget target, PixelFormat format, PixelType type, object table)
	{
		GCHandle gCHandle = GCHandle.Alloc(table, GCHandleType.Pinned);
		try
		{
			GetColorTable(target, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_paletted_texture")]
	public unsafe static void GetColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetColorTableParameterfv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_paletted_texture")]
	public unsafe static void GetColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetColorTableParameteriv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_color_subtable")]
	public static void ColorSubTable(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, nint data)
	{
		Delegates.pglColorSubTable((int)target, start, count, (int)format, (int)type, data);
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_color_subtable")]
	public static void ColorSubTable(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			ColorSubTable(target, start, count, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_color_subtable")]
	public static void CopyColorSubTable(ColorTableTarget target, int start, int x, int y, int width)
	{
		Delegates.pglCopyColorSubTable((int)target, start, x, y, width);
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_convolution")]
	public static void ConvolutionFilter1D(ConvolutionTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, nint data)
	{
		Delegates.pglConvolutionFilter1D((int)target, (int)internalformat, width, (int)format, (int)type, data);
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_convolution")]
	public static void ConvolutionFilter1D(ConvolutionTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			ConvolutionFilter1D(target, internalformat, width, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_convolution")]
	public static void ConvolutionFilter2D(ConvolutionTarget target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, nint data)
	{
		Delegates.pglConvolutionFilter2D((int)target, (int)internalformat, width, height, (int)format, (int)type, data);
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_convolution")]
	public static void ConvolutionFilter2D(ConvolutionTarget target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			ConvolutionFilter2D(target, internalformat, width, height, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_convolution")]
	public static void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, float @params)
	{
		Delegates.pglConvolutionParameterf((int)target, (int)pname, @params);
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_convolution")]
	public unsafe static void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglConvolutionParameterfv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_convolution")]
	public static void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, int @params)
	{
		Delegates.pglConvolutionParameteri((int)target, (int)pname, @params);
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_convolution")]
	public unsafe static void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglConvolutionParameteriv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_convolution")]
	public static void CopyConvolutionFilter1D(ConvolutionTarget target, InternalFormat internalformat, int x, int y, int width)
	{
		Delegates.pglCopyConvolutionFilter1D((int)target, (int)internalformat, x, y, width);
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_convolution")]
	public static void CopyConvolutionFilter2D(ConvolutionTarget target, InternalFormat internalformat, int x, int y, int width, int height)
	{
		Delegates.pglCopyConvolutionFilter2D((int)target, (int)internalformat, x, y, width, height);
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	public static void GetConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, nint image)
	{
		Delegates.pglGetConvolutionFilter((int)target, (int)format, (int)type, image);
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	public static void GetConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, object image)
	{
		GCHandle gCHandle = GCHandle.Alloc(image, GCHandleType.Pinned);
		try
		{
			GetConvolutionFilter(target, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	public unsafe static void GetConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetConvolutionParameterfv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	public unsafe static void GetConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetConvolutionParameteriv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	public static void GetSeparableFilter(SeparableTargetEXT target, PixelFormat format, PixelType type, nint row, nint column, nint span)
	{
		Delegates.pglGetSeparableFilter((int)target, (int)format, (int)type, row, column, span);
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	public static void GetSeparableFilter(SeparableTargetEXT target, PixelFormat format, PixelType type, object row, object column, object span)
	{
		GCHandle gCHandle = GCHandle.Alloc(row, GCHandleType.Pinned);
		GCHandle gCHandle2 = GCHandle.Alloc(column, GCHandleType.Pinned);
		GCHandle gCHandle3 = GCHandle.Alloc(span, GCHandleType.Pinned);
		try
		{
			GetSeparableFilter(target, format, type, gCHandle.AddrOfPinnedObject(), gCHandle2.AddrOfPinnedObject(), gCHandle3.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
			gCHandle2.Free();
			gCHandle3.Free();
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_convolution")]
	public static void SeparableFilter2D(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, nint row, nint column)
	{
		Delegates.pglSeparableFilter2D((int)target, (int)internalformat, width, height, (int)format, (int)type, row, column);
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_convolution")]
	public static void SeparableFilter2D(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, object row, object column)
	{
		GCHandle gCHandle = GCHandle.Alloc(row, GCHandleType.Pinned);
		GCHandle gCHandle2 = GCHandle.Alloc(column, GCHandleType.Pinned);
		try
		{
			SeparableFilter2D(target, internalformat, width, height, format, type, gCHandle.AddrOfPinnedObject(), gCHandle2.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
			gCHandle2.Free();
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	public static void GetHistogram(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, nint values)
	{
		Delegates.pglGetHistogram((int)target, reset, (int)format, (int)type, values);
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	public static void GetHistogram(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, object values)
	{
		GCHandle gCHandle = GCHandle.Alloc(values, GCHandleType.Pinned);
		try
		{
			GetHistogram(target, reset, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	public unsafe static void GetHistogramParameter(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetHistogramParameterfv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	public unsafe static void GetHistogramParameter(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetHistogramParameteriv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	public static void GetMinmax(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, nint values)
	{
		Delegates.pglGetMinmax((int)target, reset, (int)format, (int)type, values);
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	public static void GetMinmax(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, object values)
	{
		GCHandle gCHandle = GCHandle.Alloc(values, GCHandleType.Pinned);
		try
		{
			GetMinmax(target, reset, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	public unsafe static void GetMinmaxParameter(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetMinmaxParameterfv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	public unsafe static void GetMinmaxParameter(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetMinmaxParameteriv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_histogram")]
	public static void Histogram(HistogramTargetEXT target, int width, InternalFormat internalformat, bool sink)
	{
		Delegates.pglHistogram((int)target, width, (int)internalformat, sink);
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_histogram")]
	public static void Minmax(MinmaxTargetEXT target, InternalFormat internalformat, bool sink)
	{
		Delegates.pglMinmax((int)target, (int)internalformat, sink);
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_histogram")]
	public static void ResetHistogram(HistogramTargetEXT target)
	{
		Delegates.pglResetHistogram((int)target);
	}

	[RequiredByFeature("GL_ARB_imaging", Profile = "compatibility")]
	[RequiredByFeature("GL_EXT_histogram")]
	public static void ResetMinmax(MinmaxTargetEXT target)
	{
		Delegates.pglResetMinmax((int)target);
	}

	[RequiredByFeature("GL_ARB_matrix_palette")]
	public static void CurrentPaletteMatrixARB(int index)
	{
		Delegates.pglCurrentPaletteMatrixARB(index);
	}

	[RequiredByFeature("GL_ARB_matrix_palette")]
	public unsafe static void MatrixIndexARB(byte[] indices)
	{
		fixed (byte* indices2 = indices)
		{
			Delegates.pglMatrixIndexubvARB(indices.Length, indices2);
		}
	}

	[RequiredByFeature("GL_ARB_matrix_palette")]
	public unsafe static void MatrixIndexARB(ushort[] indices)
	{
		fixed (ushort* indices2 = indices)
		{
			Delegates.pglMatrixIndexusvARB(indices.Length, indices2);
		}
	}

	[RequiredByFeature("GL_ARB_matrix_palette")]
	public unsafe static void MatrixIndexARB(uint[] indices)
	{
		fixed (uint* indices2 = indices)
		{
			Delegates.pglMatrixIndexuivARB(indices.Length, indices2);
		}
	}

	[RequiredByFeature("GL_ARB_matrix_palette")]
	public static void MatrixIndexPointerARB(int size, MatrixIndexPointerTypeARB type, int stride, nint pointer)
	{
		Delegates.pglMatrixIndexPointerARB(size, (int)type, stride, pointer);
	}

	[RequiredByFeature("GL_ARB_matrix_palette")]
	public static void MatrixIndexPointerARB(int size, MatrixIndexPointerTypeARB type, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			MatrixIndexPointerARB(size, type, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
	public static GraphicsResetStatus GetGraphicsResetStatusARB()
	{
		return (GraphicsResetStatus)Delegates.pglGetGraphicsResetStatusARB();
	}

	[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
	public static void GetnTexImageARB(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, nint img)
	{
		Delegates.pglGetnTexImageARB((int)target, level, (int)format, (int)type, bufSize, img);
	}

	[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
	public static void GetnTexImageARB(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, object img)
	{
		GCHandle gCHandle = GCHandle.Alloc(img, GCHandleType.Pinned);
		try
		{
			GetnTexImageARB(target, level, format, type, bufSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
	public static void GetnCompressedTexImageARB(TextureTarget target, int lod, int bufSize, nint img)
	{
		Delegates.pglGetnCompressedTexImageARB((int)target, lod, bufSize, img);
	}

	[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
	public static void GetnCompressedTexImageARB(TextureTarget target, int lod, int bufSize, object img)
	{
		GCHandle gCHandle = GCHandle.Alloc(img, GCHandleType.Pinned);
		try
		{
			GetnCompressedTexImageARB(target, lod, bufSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
	public unsafe static void GetnUniformARB(uint program, int location, int bufSize, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetnUniformfvARB(program, location, bufSize, params2);
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
	public unsafe static void GetnUniformARB(uint program, int location, int bufSize, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetnUniformivARB(program, location, bufSize, params2);
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
	public unsafe static void GetnUniformARB(uint program, int location, int bufSize, [Out] uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglGetnUniformuivARB(program, location, bufSize, params2);
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
	public unsafe static void GetnUniformARB(uint program, int location, int bufSize, [Out] double[] @params)
	{
		fixed (double* params2 = @params)
		{
			Delegates.pglGetnUniformdvARB(program, location, bufSize, params2);
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public unsafe static void GetnMapARB(MapTarget target, MapQuery query, int bufSize, [Out] double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglGetnMapdvARB((int)target, (int)query, bufSize, v2);
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public unsafe static void GetnMapARB(MapTarget target, MapQuery query, int bufSize, [Out] float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglGetnMapfvARB((int)target, (int)query, bufSize, v2);
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public unsafe static void GetnMapARB(MapTarget target, MapQuery query, [Out] float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglGetnMapfvARB((int)target, (int)query, v.Length, v2);
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public unsafe static void GetnMapARB(MapTarget target, MapQuery query, int bufSize, [Out] int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglGetnMapivARB((int)target, (int)query, bufSize, v2);
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public unsafe static void GetnMapARB(MapTarget target, MapQuery query, [Out] int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglGetnMapivARB((int)target, (int)query, v.Length, v2);
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public unsafe static void GetnPixelMapARB(PixelMap map, int bufSize, [Out] float[] values)
	{
		fixed (float* values2 = values)
		{
			Delegates.pglGetnPixelMapfvARB((int)map, bufSize, values2);
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public unsafe static void GetnPixelMapARB(PixelMap map, int bufSize, [Out] uint[] values)
	{
		fixed (uint* values2 = values)
		{
			Delegates.pglGetnPixelMapuivARB((int)map, bufSize, values2);
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public unsafe static void GetnPixelMapARB(PixelMap map, [Out] uint[] values)
	{
		fixed (uint* values2 = values)
		{
			Delegates.pglGetnPixelMapuivARB((int)map, values.Length, values2);
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public unsafe static void GetnPixelMapARB(PixelMap map, int bufSize, [Out] ushort[] values)
	{
		fixed (ushort* values2 = values)
		{
			Delegates.pglGetnPixelMapusvARB((int)map, bufSize, values2);
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public unsafe static void GetnPixelMapARB(PixelMap map, [Out] ushort[] values)
	{
		fixed (ushort* values2 = values)
		{
			Delegates.pglGetnPixelMapusvARB((int)map, values.Length, values2);
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public unsafe static void GetnPolygonStippleARB([Out] byte[] pattern)
	{
		fixed (byte* pattern2 = pattern)
		{
			Delegates.pglGetnPolygonStippleARB(pattern.Length, pattern2);
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public static void GetnColorTableARB(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, nint table)
	{
		Delegates.pglGetnColorTableARB((int)target, (int)format, (int)type, bufSize, table);
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public static void GetnColorTableARB(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, object table)
	{
		GCHandle gCHandle = GCHandle.Alloc(table, GCHandleType.Pinned);
		try
		{
			GetnColorTableARB(target, format, type, bufSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public static void GetnConvolutionFilterARB(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, nint image)
	{
		Delegates.pglGetnConvolutionFilterARB((int)target, (int)format, (int)type, bufSize, image);
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public static void GetnConvolutionFilterARB(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, object image)
	{
		GCHandle gCHandle = GCHandle.Alloc(image, GCHandleType.Pinned);
		try
		{
			GetnConvolutionFilterARB(target, format, type, bufSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public static void GetnSeparableFilterARB(SeparableTargetEXT target, PixelFormat format, PixelType type, int rowBufSize, nint row, int columnBufSize, nint column, nint span)
	{
		Delegates.pglGetnSeparableFilterARB((int)target, (int)format, (int)type, rowBufSize, row, columnBufSize, column, span);
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public static void GetnSeparableFilterARB(SeparableTargetEXT target, PixelFormat format, PixelType type, int rowBufSize, object row, int columnBufSize, object column, object span)
	{
		GCHandle gCHandle = GCHandle.Alloc(row, GCHandleType.Pinned);
		GCHandle gCHandle2 = GCHandle.Alloc(column, GCHandleType.Pinned);
		GCHandle gCHandle3 = GCHandle.Alloc(span, GCHandleType.Pinned);
		try
		{
			GetnSeparableFilterARB(target, format, type, rowBufSize, gCHandle.AddrOfPinnedObject(), columnBufSize, gCHandle2.AddrOfPinnedObject(), gCHandle3.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
			gCHandle2.Free();
			gCHandle3.Free();
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public static void GetnHistogramARB(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, nint values)
	{
		Delegates.pglGetnHistogramARB((int)target, reset, (int)format, (int)type, bufSize, values);
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public static void GetnHistogramARB(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, object values)
	{
		GCHandle gCHandle = GCHandle.Alloc(values, GCHandleType.Pinned);
		try
		{
			GetnHistogramARB(target, reset, format, type, bufSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public static void GetnMinmaxARB(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, nint values)
	{
		Delegates.pglGetnMinmaxARB((int)target, reset, (int)format, (int)type, bufSize, values);
	}

	[RequiredByFeature("GL_ARB_robustness", Profile = "compatibility")]
	public static void GetnMinmaxARB(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, object values)
	{
		GCHandle gCHandle = GCHandle.Alloc(values, GCHandleType.Pinned);
		try
		{
			GetnMinmaxARB(target, reset, format, type, bufSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ARB_sample_locations", Api = "gl|glcore")]
	public unsafe static void FramebufferSampleLocationARB(FramebufferTarget target, uint start, int count, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglFramebufferSampleLocationsfvARB((int)target, start, count, v2);
		}
	}

	[RequiredByFeature("GL_ARB_sample_locations", Api = "gl|glcore")]
	public unsafe static void NamedFramebufferSampleLocationARB(uint framebuffer, uint start, int count, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v2);
		}
	}

	[RequiredByFeature("GL_ARB_sample_locations", Api = "gl|glcore")]
	public static void EvaluateDepthValuesARB()
	{
		Delegates.pglEvaluateDepthValuesARB();
	}

	[RequiredByFeature("GL_ARB_shader_objects")]
	public static void DeleteObjectARB(uint obj)
	{
		Delegates.pglDeleteObjectARB(obj);
	}

	[RequiredByFeature("GL_ARB_shader_objects")]
	public static uint GetHandleARB(ContainerType pname)
	{
		return Delegates.pglGetHandleARB((int)pname);
	}

	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void GetObjectParameterARB(uint obj, int pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetObjectParameterfvARB(obj, pname, params2);
		}
	}

	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void GetObjectParameterARB(uint obj, int pname, out float @params)
	{
		fixed (float* params2 = &@params)
		{
			Delegates.pglGetObjectParameterfvARB(obj, pname, params2);
		}
	}

	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void GetObjectParameterARB(uint obj, int pname, [Out] float* @params)
	{
		Delegates.pglGetObjectParameterfvARB(obj, pname, @params);
	}

	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void GetObjectParameterfARB<T>(uint obj, int pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetObjectParameterfvARB(obj, pname, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void GetObjectParameterARB(uint obj, int pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetObjectParameterivARB(obj, pname, params2);
		}
	}

	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void GetObjectParameterARB(uint obj, int pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetObjectParameterivARB(obj, pname, params2);
		}
	}

	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void GetObjectParameterARB(uint obj, int pname, [Out] int* @params)
	{
		Delegates.pglGetObjectParameterivARB(obj, pname, @params);
	}

	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void GetObjectParameteriARB<T>(uint obj, int pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetObjectParameterivARB(obj, pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void GetInfoLogARB(uint obj, int maxLength, out int length, StringBuilder infoLog)
	{
		fixed (int* length2 = &length)
		{
			Delegates.pglGetInfoLogARB(obj, maxLength, length2, infoLog);
		}
	}

	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void GetAttachedObjectARB(uint containerObj, out int count, [Out] uint[] obj)
	{
		fixed (int* count2 = &count)
		{
			fixed (uint* obj2 = obj)
			{
				Delegates.pglGetAttachedObjectsARB(containerObj, obj.Length, count2, obj2);
			}
		}
	}

	[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
	public static void NamedStringARB(int type, int namelen, string name, int stringlen, string @string)
	{
		Delegates.pglNamedStringARB(type, namelen, name, stringlen, @string);
	}

	[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
	public static void DeleteNamedStringARB(int namelen, string name)
	{
		Delegates.pglDeleteNamedStringARB(namelen, name);
	}

	[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
	public unsafe static void CompileShaderIncludeARB(uint shader, string[] path, int[] length)
	{
		fixed (int* length2 = length)
		{
			Delegates.pglCompileShaderIncludeARB(shader, path.Length, path, length2);
		}
	}

	[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
	public static bool IsNamedStringARB(int namelen, string name)
	{
		return Delegates.pglIsNamedStringARB(namelen, name);
	}

	[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
	public unsafe static void GetNamedStringARB(int namelen, string name, int bufSize, out int stringlen, StringBuilder @string)
	{
		fixed (int* stringlen2 = &stringlen)
		{
			Delegates.pglGetNamedStringARB(namelen, name, bufSize, stringlen2, @string);
		}
	}

	[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
	public unsafe static void GetNamedStringARB(int namelen, string name, int pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetNamedStringivARB(namelen, name, pname, params2);
		}
	}

	[RequiredByFeature("GL_ARB_shading_language_include", Api = "gl|glcore")]
	public unsafe static void GetNamedStringARB(int namelen, string name, int pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetNamedStringivARB(namelen, name, pname, params2);
		}
	}

	[RequiredByFeature("GL_ARB_sparse_buffer", Api = "gl|glcore")]
	public static void BufferPageCommitmentARB(int target, nint offset, uint size, bool commit)
	{
		Delegates.pglBufferPageCommitmentARB(target, offset, size, commit);
	}

	[RequiredByFeature("GL_ARB_sparse_buffer", Api = "gl|glcore")]
	public static void NamedBufferPageCommitmentEXT(uint buffer, nint offset, uint size, bool commit)
	{
		Delegates.pglNamedBufferPageCommitmentEXT(buffer, offset, size, commit);
	}

	[RequiredByFeature("GL_ARB_sparse_buffer", Api = "gl|glcore")]
	public static void NamedBufferPageCommitmentARB(uint buffer, nint offset, uint size, bool commit)
	{
		Delegates.pglNamedBufferPageCommitmentARB(buffer, offset, size, commit);
	}

	[RequiredByFeature("GL_ARB_sparse_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_sparse_texture", Api = "gles2")]
	public static void TexPageCommitmentARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit)
	{
		Delegates.pglTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
	}

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public unsafe static void WeightARB(sbyte[] weights)
	{
		fixed (sbyte* weights2 = weights)
		{
			Delegates.pglWeightbvARB(weights.Length, weights2);
		}
	}

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public unsafe static void WeightARB(short[] weights)
	{
		fixed (short* weights2 = weights)
		{
			Delegates.pglWeightsvARB(weights.Length, weights2);
		}
	}

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public unsafe static void WeightARB(int[] weights)
	{
		fixed (int* weights2 = weights)
		{
			Delegates.pglWeightivARB(weights.Length, weights2);
		}
	}

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public unsafe static void WeightARB(float[] weights)
	{
		fixed (float* weights2 = weights)
		{
			Delegates.pglWeightfvARB(weights.Length, weights2);
		}
	}

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public unsafe static void WeightARB(double[] weights)
	{
		fixed (double* weights2 = weights)
		{
			Delegates.pglWeightdvARB(weights.Length, weights2);
		}
	}

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public unsafe static void WeightARB(byte[] weights)
	{
		fixed (byte* weights2 = weights)
		{
			Delegates.pglWeightubvARB(weights.Length, weights2);
		}
	}

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public unsafe static void WeightARB(ushort[] weights)
	{
		fixed (ushort* weights2 = weights)
		{
			Delegates.pglWeightusvARB(weights.Length, weights2);
		}
	}

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public unsafe static void WeightARB(uint[] weights)
	{
		fixed (uint* weights2 = weights)
		{
			Delegates.pglWeightuivARB(weights.Length, weights2);
		}
	}

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public static void WeightPointerARB(int size, WeightPointerTypeARB type, int stride, nint pointer)
	{
		Delegates.pglWeightPointerARB(size, (int)type, stride, pointer);
	}

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public static void WeightPointerARB(int size, WeightPointerTypeARB type, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			WeightPointerARB(size, type, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ARB_vertex_blend")]
	public static void VertexBlendARB(int count)
	{
		Delegates.pglVertexBlendARB(count);
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public static void ProgramStringARB(ProgramTarget target, ProgramFormat format, int len, nint @string)
	{
		Delegates.pglProgramStringARB((int)target, (int)format, len, @string);
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public static void ProgramStringARB(ProgramTarget target, ProgramFormat format, int len, object @string)
	{
		GCHandle gCHandle = GCHandle.Alloc(@string, GCHandleType.Pinned);
		try
		{
			ProgramStringARB(target, format, len, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public static void BindProgramARB(ProgramTarget target, uint program)
	{
		Delegates.pglBindProgramARB((int)target, program);
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void DeleteProgramsARB(uint[] programs)
	{
		fixed (uint* programs2 = programs)
		{
			Delegates.pglDeleteProgramsARB(programs.Length, programs2);
		}
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void GenProgramsARB(uint[] programs)
	{
		fixed (uint* programs2 = programs)
		{
			Delegates.pglGenProgramsARB(programs.Length, programs2);
		}
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static uint GenProgramARB()
	{
		uint result = default(uint);
		Delegates.pglGenProgramsARB(1, &result);
		return result;
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public static void ProgramEnvParameter4ARB(ProgramTarget target, uint index, double x, double y, double z, double w)
	{
		Delegates.pglProgramEnvParameter4dARB((int)target, index, x, y, z, w);
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public unsafe static void ProgramEnvParameter4ARB(ProgramTarget target, uint index, double[] @params)
	{
		fixed (double* params2 = @params)
		{
			Delegates.pglProgramEnvParameter4dvARB((int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public static void ProgramEnvParameter4ARB(ProgramTarget target, uint index, float x, float y, float z, float w)
	{
		Delegates.pglProgramEnvParameter4fARB((int)target, index, x, y, z, w);
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public unsafe static void ProgramEnvParameter4ARB(ProgramTarget target, uint index, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglProgramEnvParameter4fvARB((int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public static void ProgramLocalParameter4ARB(ProgramTarget target, uint index, double x, double y, double z, double w)
	{
		Delegates.pglProgramLocalParameter4dARB((int)target, index, x, y, z, w);
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public unsafe static void ProgramLocalParameter4ARB(ProgramTarget target, uint index, double[] @params)
	{
		fixed (double* params2 = @params)
		{
			Delegates.pglProgramLocalParameter4dvARB((int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public static void ProgramLocalParameter4ARB(ProgramTarget target, uint index, float x, float y, float z, float w)
	{
		Delegates.pglProgramLocalParameter4fARB((int)target, index, x, y, z, w);
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public unsafe static void ProgramLocalParameter4ARB(ProgramTarget target, uint index, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglProgramLocalParameter4fvARB((int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public unsafe static void GetProgramEnvParameterARB(ProgramTarget target, uint index, [Out] double[] @params)
	{
		fixed (double* params2 = @params)
		{
			Delegates.pglGetProgramEnvParameterdvARB((int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public unsafe static void GetProgramEnvParameterARB(ProgramTarget target, uint index, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetProgramEnvParameterfvARB((int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public unsafe static void GetProgramLocalParameterARB(ProgramTarget target, uint index, [Out] double[] @params)
	{
		fixed (double* params2 = @params)
		{
			Delegates.pglGetProgramLocalParameterdvARB((int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public unsafe static void GetProgramLocalParameterARB(ProgramTarget target, uint index, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetProgramLocalParameterfvARB((int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public unsafe static void GetProgramARB(ProgramTarget target, ProgramProperty pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetProgramivARB((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public static void GetProgramStringARB(ProgramTarget target, ProgramStringProperty pname, nint @string)
	{
		Delegates.pglGetProgramStringARB((int)target, (int)pname, @string);
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	public static void GetProgramStringARB(ProgramTarget target, ProgramStringProperty pname, object @string)
	{
		GCHandle gCHandle = GCHandle.Alloc(@string, GCHandleType.Pinned);
		try
		{
			GetProgramStringARB(target, pname, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ARB_fragment_program")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public static bool IsProgramARB(uint program)
	{
		return Delegates.pglIsProgramARB(program);
	}

	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	public unsafe static void DepthRangeArraydNV(uint first, int count, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglDepthRangeArraydvNV(first, count, v2);
		}
	}

	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	public static void DepthRangeIndexeddNV(uint index, double n, double f)
	{
		Delegates.pglDepthRangeIndexeddNV(index, n, f);
	}

	[RequiredByFeature("GL_ATI_element_array")]
	public static void ElementPointerATI(ElementPointerTypeATI type, nint pointer)
	{
		Delegates.pglElementPointerATI((int)type, pointer);
	}

	[RequiredByFeature("GL_ATI_element_array")]
	public static void ElementPointerATI(ElementPointerTypeATI type, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			ElementPointerATI(type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ATI_element_array")]
	public static void DrawElementArrayATI(PrimitiveType mode, int count)
	{
		Delegates.pglDrawElementArrayATI((int)mode, count);
	}

	[RequiredByFeature("GL_ATI_element_array")]
	public static void DrawRangeElementArrayATI(PrimitiveType mode, uint start, uint end, int count)
	{
		Delegates.pglDrawRangeElementArrayATI((int)mode, start, end, count);
	}

	[RequiredByFeature("GL_ATI_envmap_bumpmap")]
	public unsafe static void TexBumpParameterATI(TexBumpParameterATI pname, int[] param)
	{
		fixed (int* param2 = param)
		{
			Delegates.pglTexBumpParameterivATI((int)pname, param2);
		}
	}

	[RequiredByFeature("GL_ATI_envmap_bumpmap")]
	public unsafe static void TexBumpParameterATI(TexBumpParameterATI pname, float[] param)
	{
		fixed (float* param2 = param)
		{
			Delegates.pglTexBumpParameterfvATI((int)pname, param2);
		}
	}

	[RequiredByFeature("GL_ATI_envmap_bumpmap")]
	public unsafe static void GetTexBumpParameterATI(GetTexBumpParameterATI pname, [Out] int[] param)
	{
		fixed (int* param2 = param)
		{
			Delegates.pglGetTexBumpParameterivATI((int)pname, param2);
		}
	}

	[RequiredByFeature("GL_ATI_envmap_bumpmap")]
	public unsafe static void GetTexBumpParameterATI(GetTexBumpParameterATI pname, [Out] float[] param)
	{
		fixed (float* param2 = param)
		{
			Delegates.pglGetTexBumpParameterfvATI((int)pname, param2);
		}
	}

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public static uint GenFragmentShadersATI(uint range)
	{
		return Delegates.pglGenFragmentShadersATI(range);
	}

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public static void BindFragmentShaderATI(uint id)
	{
		Delegates.pglBindFragmentShaderATI(id);
	}

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public static void DeleteFragmentShaderATI(uint id)
	{
		Delegates.pglDeleteFragmentShaderATI(id);
	}

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public static void BeginFragmentShaderATI()
	{
		Delegates.pglBeginFragmentShaderATI();
	}

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public static void EndFragmentShaderATI()
	{
		Delegates.pglEndFragmentShaderATI();
	}

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public static void PassTexCoordATI(FragmentShaderRegATI dst, FragmentShaderTextureSourceATI coord, SwizzleOpATI swizzle)
	{
		Delegates.pglPassTexCoordATI((uint)dst, (uint)coord, (int)swizzle);
	}

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public static void SampleMapATI(FragmentShaderRegATI dst, FragmentShaderTextureSourceATI interp, SwizzleOpATI swizzle)
	{
		Delegates.pglSampleMapATI((uint)dst, (uint)interp, (int)swizzle);
	}

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public static void ColorFragmentOp1ATI(FragmentOp1ATI op, FragmentShaderRegATI dst, FragmentShaderDestMaskATI dstMask, FragmentShaderDestModMaskATI dstMod, FragmentShaderGenericSourceATI arg1, FragmentShaderValueRepATI arg1Rep, FragmentShaderColorModMaskATI arg1Mod)
	{
		Delegates.pglColorFragmentOp1ATI((int)op, (uint)dst, (uint)dstMask, (uint)dstMod, (uint)arg1, (uint)arg1Rep, (uint)arg1Mod);
	}

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public static void ColorFragmentOp2ATI(FragmentOp2ATI op, FragmentShaderRegATI dst, FragmentShaderDestMaskATI dstMask, FragmentShaderDestModMaskATI dstMod, FragmentShaderGenericSourceATI arg1, FragmentShaderValueRepATI arg1Rep, FragmentShaderColorModMaskATI arg1Mod, FragmentShaderGenericSourceATI arg2, FragmentShaderValueRepATI arg2Rep, FragmentShaderColorModMaskATI arg2Mod)
	{
		Delegates.pglColorFragmentOp2ATI((int)op, (uint)dst, (uint)dstMask, (uint)dstMod, (uint)arg1, (uint)arg1Rep, (uint)arg1Mod, (uint)arg2, (uint)arg2Rep, (uint)arg2Mod);
	}

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public static void ColorFragmentOp3ATI(FragmentOp3ATI op, FragmentShaderRegATI dst, FragmentShaderDestMaskATI dstMask, FragmentShaderDestModMaskATI dstMod, FragmentShaderGenericSourceATI arg1, FragmentShaderValueRepATI arg1Rep, FragmentShaderColorModMaskATI arg1Mod, FragmentShaderGenericSourceATI arg2, FragmentShaderValueRepATI arg2Rep, FragmentShaderColorModMaskATI arg2Mod, FragmentShaderGenericSourceATI arg3, FragmentShaderValueRepATI arg3Rep, FragmentShaderColorModMaskATI arg3Mod)
	{
		Delegates.pglColorFragmentOp3ATI((int)op, (uint)dst, (uint)dstMask, (uint)dstMod, (uint)arg1, (uint)arg1Rep, (uint)arg1Mod, (uint)arg2, (uint)arg2Rep, (uint)arg2Mod, (uint)arg3, (uint)arg3Rep, (uint)arg3Mod);
	}

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public static void AlphaFragmentOp1ATI(FragmentOp1ATI op, FragmentShaderRegATI dst, FragmentShaderDestModMaskATI dstMod, FragmentShaderGenericSourceATI arg1, FragmentShaderValueRepATI arg1Rep, FragmentShaderColorModMaskATI arg1Mod)
	{
		Delegates.pglAlphaFragmentOp1ATI((int)op, (uint)dst, (uint)dstMod, (uint)arg1, (uint)arg1Rep, (uint)arg1Mod);
	}

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public static void AlphaFragmentOp2ATI(FragmentOp2ATI op, FragmentShaderRegATI dst, FragmentShaderDestModMaskATI dstMod, FragmentShaderGenericSourceATI arg1, FragmentShaderValueRepATI arg1Rep, FragmentShaderColorModMaskATI arg1Mod, FragmentShaderGenericSourceATI arg2, FragmentShaderValueRepATI arg2Rep, FragmentShaderColorModMaskATI arg2Mod)
	{
		Delegates.pglAlphaFragmentOp2ATI((int)op, (uint)dst, (uint)dstMod, (uint)arg1, (uint)arg1Rep, (uint)arg1Mod, (uint)arg2, (uint)arg2Rep, (uint)arg2Mod);
	}

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public static void AlphaFragmentOp3ATI(FragmentOp3ATI op, FragmentShaderRegATI dst, FragmentShaderDestModMaskATI dstMod, FragmentShaderGenericSourceATI arg1, FragmentShaderValueRepATI arg1Rep, FragmentShaderColorModMaskATI arg1Mod, FragmentShaderGenericSourceATI arg2, FragmentShaderValueRepATI arg2Rep, FragmentShaderColorModMaskATI arg2Mod, FragmentShaderGenericSourceATI arg3, FragmentShaderValueRepATI arg3Rep, FragmentShaderColorModMaskATI arg3Mod)
	{
		Delegates.pglAlphaFragmentOp3ATI((int)op, (uint)dst, (uint)dstMod, (uint)arg1, (uint)arg1Rep, (uint)arg1Mod, (uint)arg2, (uint)arg2Rep, (uint)arg2Mod, (uint)arg3, (uint)arg3Rep, (uint)arg3Mod);
	}

	[RequiredByFeature("GL_ATI_fragment_shader")]
	public unsafe static void SetFragmentShaderConstantATI(FragmentShaderConATI dst, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglSetFragmentShaderConstantATI((uint)dst, value2);
		}
	}

	[RequiredByFeature("GL_ATI_map_object_buffer")]
	public static nint MapObjectBufferATI(uint buffer)
	{
		return Delegates.pglMapObjectBufferATI(buffer);
	}

	[RequiredByFeature("GL_ATI_map_object_buffer")]
	public static void UnmapObjectBufferATI(uint buffer)
	{
		Delegates.pglUnmapObjectBufferATI(buffer);
	}

	[RequiredByFeature("GL_ATI_pn_triangles")]
	public static void PNTrianglesATI(PNTrianglesPNameATI pname, int param)
	{
		Delegates.pglPNTrianglesiATI((int)pname, param);
	}

	[RequiredByFeature("GL_ATI_pn_triangles")]
	public static void PNTrianglesATI(PNTrianglesPNameATI pname, float param)
	{
		Delegates.pglPNTrianglesfATI((int)pname, param);
	}

	[RequiredByFeature("GL_ATI_separate_stencil")]
	public static void StencilFuncSeparateATI(StencilFunction frontfunc, StencilFunction backfunc, int @ref, uint mask)
	{
		Delegates.pglStencilFuncSeparateATI((int)frontfunc, (int)backfunc, @ref, mask);
	}

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public static uint NewObjectBufferATI(int size, nint pointer, ArrayObjectUsageATI usage)
	{
		return Delegates.pglNewObjectBufferATI(size, pointer, (int)usage);
	}

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public static uint NewObjectBufferATI(int size, object pointer, ArrayObjectUsageATI usage)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			return NewObjectBufferATI(size, gCHandle.AddrOfPinnedObject(), usage);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public static bool IsObjectBufferATI(uint buffer)
	{
		return Delegates.pglIsObjectBufferATI(buffer);
	}

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public static void UpdateObjectBufferATI(uint buffer, uint offset, int size, nint pointer, PreserveModeATI preserve)
	{
		Delegates.pglUpdateObjectBufferATI(buffer, offset, size, pointer, (int)preserve);
	}

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public static void UpdateObjectBufferATI(uint buffer, uint offset, int size, object pointer, PreserveModeATI preserve)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			UpdateObjectBufferATI(buffer, offset, size, gCHandle.AddrOfPinnedObject(), preserve);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public unsafe static void GetObjectBufferATI(uint buffer, ArrayObjectPNameATI pname, out float @params)
	{
		fixed (float* params2 = &@params)
		{
			Delegates.pglGetObjectBufferfvATI(buffer, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public unsafe static void GetObjectBufferATI(uint buffer, ArrayObjectPNameATI pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetObjectBufferivATI(buffer, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public static void FreeObjectBufferATI(uint buffer)
	{
		Delegates.pglFreeObjectBufferATI(buffer);
	}

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public static void ArrayObjectATI(EnableCap array, int size, ScalarType type, int stride, uint buffer, uint offset)
	{
		Delegates.pglArrayObjectATI((int)array, size, (int)type, stride, buffer, offset);
	}

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public unsafe static void GetArrayObjectATI(EnableCap array, ArrayObjectPNameATI pname, out float @params)
	{
		fixed (float* params2 = &@params)
		{
			Delegates.pglGetArrayObjectfvATI((int)array, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public unsafe static void GetArrayObjectATI(EnableCap array, ArrayObjectPNameATI pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetArrayObjectivATI((int)array, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public static void VariantArrayObjectATI(uint id, ScalarType type, int stride, uint buffer, uint offset)
	{
		Delegates.pglVariantArrayObjectATI(id, (int)type, stride, buffer, offset);
	}

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public unsafe static void GetVariantArrayObjectATI(uint id, ArrayObjectPNameATI pname, out float @params)
	{
		fixed (float* params2 = &@params)
		{
			Delegates.pglGetVariantArrayObjectfvATI(id, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_array_object")]
	public unsafe static void GetVariantArrayObjectATI(uint id, ArrayObjectPNameATI pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetVariantArrayObjectivATI(id, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_attrib_array_object")]
	public static void VertexAttribArrayObjectATI(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, uint buffer, uint offset)
	{
		Delegates.pglVertexAttribArrayObjectATI(index, size, (int)type, normalized, stride, buffer, offset);
	}

	[RequiredByFeature("GL_ATI_vertex_attrib_array_object")]
	public unsafe static void GetVertexAttribArrayObjectATI(uint index, ArrayObjectPNameATI pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetVertexAttribArrayObjectfvATI(index, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_attrib_array_object")]
	public unsafe static void GetVertexAttribArrayObjectATI(uint index, ArrayObjectPNameATI pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetVertexAttribArrayObjectivATI(index, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void VertexStream1ATI(VertexStreamATI stream, short x)
	{
		Delegates.pglVertexStream1sATI((int)stream, x);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void VertexStream1ATI(VertexStreamATI stream, short[] coords)
	{
		fixed (short* coords2 = coords)
		{
			Delegates.pglVertexStream1svATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void VertexStream1ATI(VertexStreamATI stream, int x)
	{
		Delegates.pglVertexStream1iATI((int)stream, x);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void VertexStream1ATI(VertexStreamATI stream, int[] coords)
	{
		fixed (int* coords2 = coords)
		{
			Delegates.pglVertexStream1ivATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void VertexStream1ATI(VertexStreamATI stream, float x)
	{
		Delegates.pglVertexStream1fATI((int)stream, x);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void VertexStream1ATI(VertexStreamATI stream, float[] coords)
	{
		fixed (float* coords2 = coords)
		{
			Delegates.pglVertexStream1fvATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void VertexStream1ATI(VertexStreamATI stream, double x)
	{
		Delegates.pglVertexStream1dATI((int)stream, x);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void VertexStream1ATI(VertexStreamATI stream, double[] coords)
	{
		fixed (double* coords2 = coords)
		{
			Delegates.pglVertexStream1dvATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void VertexStream2ATI(VertexStreamATI stream, short x, short y)
	{
		Delegates.pglVertexStream2sATI((int)stream, x, y);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void VertexStream2ATI(VertexStreamATI stream, short[] coords)
	{
		fixed (short* coords2 = coords)
		{
			Delegates.pglVertexStream2svATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void VertexStream2ATI(VertexStreamATI stream, int x, int y)
	{
		Delegates.pglVertexStream2iATI((int)stream, x, y);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void VertexStream2ATI(VertexStreamATI stream, int[] coords)
	{
		fixed (int* coords2 = coords)
		{
			Delegates.pglVertexStream2ivATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void VertexStream2ATI(VertexStreamATI stream, float x, float y)
	{
		Delegates.pglVertexStream2fATI((int)stream, x, y);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void VertexStream2ATI(VertexStreamATI stream, float[] coords)
	{
		fixed (float* coords2 = coords)
		{
			Delegates.pglVertexStream2fvATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void VertexStream2ATI(VertexStreamATI stream, double x, double y)
	{
		Delegates.pglVertexStream2dATI((int)stream, x, y);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void VertexStream2ATI(VertexStreamATI stream, double[] coords)
	{
		fixed (double* coords2 = coords)
		{
			Delegates.pglVertexStream2dvATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void VertexStream3ATI(VertexStreamATI stream, short x, short y, short z)
	{
		Delegates.pglVertexStream3sATI((int)stream, x, y, z);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void VertexStream3ATI(VertexStreamATI stream, short[] coords)
	{
		fixed (short* coords2 = coords)
		{
			Delegates.pglVertexStream3svATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void VertexStream3ATI(VertexStreamATI stream, int x, int y, int z)
	{
		Delegates.pglVertexStream3iATI((int)stream, x, y, z);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void VertexStream3ATI(VertexStreamATI stream, int[] coords)
	{
		fixed (int* coords2 = coords)
		{
			Delegates.pglVertexStream3ivATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void VertexStream3ATI(VertexStreamATI stream, float x, float y, float z)
	{
		Delegates.pglVertexStream3fATI((int)stream, x, y, z);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void VertexStream3ATI(VertexStreamATI stream, float[] coords)
	{
		fixed (float* coords2 = coords)
		{
			Delegates.pglVertexStream3fvATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void VertexStream3ATI(VertexStreamATI stream, double x, double y, double z)
	{
		Delegates.pglVertexStream3dATI((int)stream, x, y, z);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void VertexStream3ATI(VertexStreamATI stream, double[] coords)
	{
		fixed (double* coords2 = coords)
		{
			Delegates.pglVertexStream3dvATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void VertexStream4ATI(VertexStreamATI stream, short x, short y, short z, short w)
	{
		Delegates.pglVertexStream4sATI((int)stream, x, y, z, w);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void VertexStream4ATI(VertexStreamATI stream, short[] coords)
	{
		fixed (short* coords2 = coords)
		{
			Delegates.pglVertexStream4svATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void VertexStream4ATI(VertexStreamATI stream, int x, int y, int z, int w)
	{
		Delegates.pglVertexStream4iATI((int)stream, x, y, z, w);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void VertexStream4ATI(VertexStreamATI stream, int[] coords)
	{
		fixed (int* coords2 = coords)
		{
			Delegates.pglVertexStream4ivATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void VertexStream4ATI(VertexStreamATI stream, float x, float y, float z, float w)
	{
		Delegates.pglVertexStream4fATI((int)stream, x, y, z, w);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void VertexStream4ATI(VertexStreamATI stream, float[] coords)
	{
		fixed (float* coords2 = coords)
		{
			Delegates.pglVertexStream4fvATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void VertexStream4ATI(VertexStreamATI stream, double x, double y, double z, double w)
	{
		Delegates.pglVertexStream4dATI((int)stream, x, y, z, w);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void VertexStream4ATI(VertexStreamATI stream, double[] coords)
	{
		fixed (double* coords2 = coords)
		{
			Delegates.pglVertexStream4dvATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void NormalStream3ATI(VertexStreamATI stream, sbyte nx, sbyte ny, sbyte nz)
	{
		Delegates.pglNormalStream3bATI((int)stream, nx, ny, nz);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void NormalStream3ATI(VertexStreamATI stream, sbyte[] coords)
	{
		fixed (sbyte* coords2 = coords)
		{
			Delegates.pglNormalStream3bvATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void NormalStream3ATI(VertexStreamATI stream, short nx, short ny, short nz)
	{
		Delegates.pglNormalStream3sATI((int)stream, nx, ny, nz);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void NormalStream3ATI(VertexStreamATI stream, short[] coords)
	{
		fixed (short* coords2 = coords)
		{
			Delegates.pglNormalStream3svATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void NormalStream3ATI(VertexStreamATI stream, int nx, int ny, int nz)
	{
		Delegates.pglNormalStream3iATI((int)stream, nx, ny, nz);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void NormalStream3ATI(VertexStreamATI stream, int[] coords)
	{
		fixed (int* coords2 = coords)
		{
			Delegates.pglNormalStream3ivATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void NormalStream3ATI(VertexStreamATI stream, float nx, float ny, float nz)
	{
		Delegates.pglNormalStream3fATI((int)stream, nx, ny, nz);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void NormalStream3ATI(VertexStreamATI stream, float[] coords)
	{
		fixed (float* coords2 = coords)
		{
			Delegates.pglNormalStream3fvATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void NormalStream3ATI(VertexStreamATI stream, double nx, double ny, double nz)
	{
		Delegates.pglNormalStream3dATI((int)stream, nx, ny, nz);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public unsafe static void NormalStream3ATI(VertexStreamATI stream, double[] coords)
	{
		fixed (double* coords2 = coords)
		{
			Delegates.pglNormalStream3dvATI((int)stream, coords2);
		}
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void ClientActiveVertexStreamATI(VertexStreamATI stream)
	{
		Delegates.pglClientActiveVertexStreamATI((int)stream);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void VertexBlendEnvATI(VertexStreamATI pname, int param)
	{
		Delegates.pglVertexBlendEnviATI((int)pname, param);
	}

	[RequiredByFeature("GL_ATI_vertex_streams")]
	public static void VertexBlendEnvATI(VertexStreamATI pname, float param)
	{
		Delegates.pglVertexBlendEnvfATI((int)pname, param);
	}

	[RequiredByFeature("GL_EXT_bindable_uniform")]
	public static void UniformBufferEXT(uint program, int location, uint buffer)
	{
		Delegates.pglUniformBufferEXT(program, location, buffer);
	}

	[RequiredByFeature("GL_EXT_bindable_uniform")]
	public static int GetUniformBufferSizeEXT(uint program, int location)
	{
		return Delegates.pglGetUniformBufferSizeEXT(program, location);
	}

	[RequiredByFeature("GL_EXT_bindable_uniform")]
	public static nint GetUniformOffsetEXT(uint program, int location)
	{
		return Delegates.pglGetUniformOffsetEXT(program, location);
	}

	[RequiredByFeature("GL_EXT_blend_func_extended", Api = "gles2")]
	public static int GetProgramResourceLocationIndexEXT(uint program, ProgramInterface programInterface, string name)
	{
		return Delegates.pglGetProgramResourceLocationIndexEXT(program, (int)programInterface, name);
	}

	[RequiredByFeature("GL_EXT_compiled_vertex_array")]
	public static void LockArraysEXT(int first, int count)
	{
		Delegates.pglLockArraysEXT(first, count);
	}

	[RequiredByFeature("GL_EXT_compiled_vertex_array")]
	public static void UnlockArraysEXT()
	{
		Delegates.pglUnlockArraysEXT();
	}

	[RequiredByFeature("GL_EXT_convolution")]
	public static void GetConvolutionFilterEXT(ConvolutionTargetEXT target, PixelFormat format, PixelType type, nint image)
	{
		Delegates.pglGetConvolutionFilterEXT((int)target, (int)format, (int)type, image);
	}

	[RequiredByFeature("GL_EXT_convolution")]
	public static void GetConvolutionFilterEXT(ConvolutionTargetEXT target, PixelFormat format, PixelType type, object image)
	{
		GCHandle gCHandle = GCHandle.Alloc(image, GCHandleType.Pinned);
		try
		{
			GetConvolutionFilterEXT(target, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_convolution")]
	public unsafe static void GetConvolutionParameterEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetConvolutionParameterfvEXT((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_convolution")]
	public unsafe static void GetConvolutionParameterEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetConvolutionParameterivEXT((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_convolution")]
	public static void GetSeparableFilterEXT(SeparableTargetEXT target, PixelFormat format, PixelType type, nint row, nint column, nint span)
	{
		Delegates.pglGetSeparableFilterEXT((int)target, (int)format, (int)type, row, column, span);
	}

	[RequiredByFeature("GL_EXT_convolution")]
	public static void GetSeparableFilterEXT(SeparableTargetEXT target, PixelFormat format, PixelType type, object row, object column, object span)
	{
		GCHandle gCHandle = GCHandle.Alloc(row, GCHandleType.Pinned);
		GCHandle gCHandle2 = GCHandle.Alloc(column, GCHandleType.Pinned);
		GCHandle gCHandle3 = GCHandle.Alloc(span, GCHandleType.Pinned);
		try
		{
			GetSeparableFilterEXT(target, format, type, gCHandle.AddrOfPinnedObject(), gCHandle2.AddrOfPinnedObject(), gCHandle3.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
			gCHandle2.Free();
			gCHandle3.Free();
		}
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public static void Tangent3EXT(sbyte tx, sbyte ty, sbyte tz)
	{
		Delegates.pglTangent3bEXT(tx, ty, tz);
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public unsafe static void Tangent3EXT(sbyte[] v)
	{
		fixed (sbyte* v2 = v)
		{
			Delegates.pglTangent3bvEXT(v2);
		}
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public static void Tangent3EXT(double tx, double ty, double tz)
	{
		Delegates.pglTangent3dEXT(tx, ty, tz);
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public unsafe static void Tangent3EXT(double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglTangent3dvEXT(v2);
		}
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public static void Tangent3EXT(float tx, float ty, float tz)
	{
		Delegates.pglTangent3fEXT(tx, ty, tz);
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public unsafe static void Tangent3EXT(float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglTangent3fvEXT(v2);
		}
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public static void Tangent3EXT(int tx, int ty, int tz)
	{
		Delegates.pglTangent3iEXT(tx, ty, tz);
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public unsafe static void Tangent3EXT(int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglTangent3ivEXT(v2);
		}
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public static void Tangent3EXT(short tx, short ty, short tz)
	{
		Delegates.pglTangent3sEXT(tx, ty, tz);
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public unsafe static void Tangent3EXT(short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglTangent3svEXT(v2);
		}
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public static void Binormal3EXT(sbyte bx, sbyte by, sbyte bz)
	{
		Delegates.pglBinormal3bEXT(bx, by, bz);
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public unsafe static void Binormal3EXT(sbyte[] v)
	{
		fixed (sbyte* v2 = v)
		{
			Delegates.pglBinormal3bvEXT(v2);
		}
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public static void Binormal3EXT(double bx, double by, double bz)
	{
		Delegates.pglBinormal3dEXT(bx, by, bz);
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public unsafe static void Binormal3EXT(double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglBinormal3dvEXT(v2);
		}
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public static void Binormal3EXT(float bx, float by, float bz)
	{
		Delegates.pglBinormal3fEXT(bx, by, bz);
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public unsafe static void Binormal3EXT(float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglBinormal3fvEXT(v2);
		}
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public static void Binormal3EXT(int bx, int by, int bz)
	{
		Delegates.pglBinormal3iEXT(bx, by, bz);
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public unsafe static void Binormal3EXT(int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglBinormal3ivEXT(v2);
		}
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public static void Binormal3EXT(short bx, short by, short bz)
	{
		Delegates.pglBinormal3sEXT(bx, by, bz);
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public unsafe static void Binormal3EXT(short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglBinormal3svEXT(v2);
		}
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public static void TangentPointerEXT(TangentPointerTypeEXT type, int stride, nint pointer)
	{
		Delegates.pglTangentPointerEXT((int)type, stride, pointer);
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public static void TangentPointerEXT(TangentPointerTypeEXT type, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			TangentPointerEXT(type, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public static void BinormalPointerEXT(BinormalPointerTypeEXT type, int stride, nint pointer)
	{
		Delegates.pglBinormalPointerEXT((int)type, stride, pointer);
	}

	[RequiredByFeature("GL_EXT_coordinate_frame")]
	public static void BinormalPointerEXT(BinormalPointerTypeEXT type, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			BinormalPointerEXT(type, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_cull_vertex")]
	public unsafe static void CullParameterEXT(CullParameterEXT pname, double[] @params)
	{
		fixed (double* params2 = @params)
		{
			Delegates.pglCullParameterdvEXT((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_cull_vertex")]
	public unsafe static void CullParameterEXT(CullParameterEXT pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglCullParameterfvEXT((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_debug_label", Api = "gl|glcore|gles2")]
	public static void LabelObjectEXT(int type, uint @object, int length, string label)
	{
		Delegates.pglLabelObjectEXT(type, @object, length, label);
	}

	[RequiredByFeature("GL_EXT_debug_label", Api = "gl|glcore|gles2")]
	public unsafe static void GetObjectLabelEXT(int type, uint @object, int bufSize, out int length, StringBuilder label)
	{
		fixed (int* length2 = &length)
		{
			Delegates.pglGetObjectLabelEXT(type, @object, bufSize, length2, label);
		}
	}

	[RequiredByFeature("GL_EXT_debug_marker", Api = "gl|glcore|gles1|gles2")]
	public static void InsertEventMarkerEXT(int length, string marker)
	{
		Delegates.pglInsertEventMarkerEXT(length, marker);
	}

	[RequiredByFeature("GL_EXT_debug_marker", Api = "gl|glcore|gles1|gles2")]
	public static void PushGroupMarkerEXT(int length, string marker)
	{
		Delegates.pglPushGroupMarkerEXT(length, marker);
	}

	[RequiredByFeature("GL_EXT_debug_marker", Api = "gl|glcore|gles1|gles2")]
	public static void PopGroupMarkerEXT()
	{
		Delegates.pglPopGroupMarkerEXT();
	}

	[RequiredByFeature("GL_EXT_depth_bounds_test")]
	public static void DepthBoundsEXT(double zmin, double zmax)
	{
		Delegates.pglDepthBoundsEXT(zmin, zmax);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixLoadEXT(MatrixMode mode, float[] m)
	{
		fixed (float* m2 = m)
		{
			Delegates.pglMatrixLoadfEXT((int)mode, m2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixLoadEXT(MatrixMode mode, float* m)
	{
		Delegates.pglMatrixLoadfEXT((int)mode, m);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixLoadfEXT<T>(MatrixMode mode, T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglMatrixLoadfEXT((int)mode, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixLoadEXT(MatrixMode mode, double[] m)
	{
		fixed (double* m2 = m)
		{
			Delegates.pglMatrixLoaddEXT((int)mode, m2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixLoadEXT(MatrixMode mode, double* m)
	{
		Delegates.pglMatrixLoaddEXT((int)mode, m);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixLoaddEXT<T>(MatrixMode mode, T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglMatrixLoaddEXT((int)mode, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixMultEXT(MatrixMode mode, float[] m)
	{
		fixed (float* m2 = m)
		{
			Delegates.pglMatrixMultfEXT((int)mode, m2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixMultEXT(MatrixMode mode, float* m)
	{
		Delegates.pglMatrixMultfEXT((int)mode, m);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixMultfEXT<T>(MatrixMode mode, T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglMatrixMultfEXT((int)mode, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixMultEXT(MatrixMode mode, double[] m)
	{
		fixed (double* m2 = m)
		{
			Delegates.pglMatrixMultdEXT((int)mode, m2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixMultEXT(MatrixMode mode, double* m)
	{
		Delegates.pglMatrixMultdEXT((int)mode, m);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixMultdEXT<T>(MatrixMode mode, T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglMatrixMultdEXT((int)mode, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void MatrixLoadIdentityEXT(MatrixMode mode)
	{
		Delegates.pglMatrixLoadIdentityEXT((int)mode);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void MatrixRotateEXT(MatrixMode mode, float angle, float x, float y, float z)
	{
		Delegates.pglMatrixRotatefEXT((int)mode, angle, x, y, z);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void MatrixRotateEXT(MatrixMode mode, double angle, double x, double y, double z)
	{
		Delegates.pglMatrixRotatedEXT((int)mode, angle, x, y, z);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void MatrixScaleEXT(MatrixMode mode, float x, float y, float z)
	{
		Delegates.pglMatrixScalefEXT((int)mode, x, y, z);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void MatrixScaleEXT(MatrixMode mode, double x, double y, double z)
	{
		Delegates.pglMatrixScaledEXT((int)mode, x, y, z);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void MatrixTranslateEXT(MatrixMode mode, float x, float y, float z)
	{
		Delegates.pglMatrixTranslatefEXT((int)mode, x, y, z);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void MatrixTranslateEXT(MatrixMode mode, double x, double y, double z)
	{
		Delegates.pglMatrixTranslatedEXT((int)mode, x, y, z);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void MatrixFrustumEXT(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar)
	{
		Delegates.pglMatrixFrustumEXT((int)mode, left, right, bottom, top, zNear, zFar);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void MatrixOrthoEXT(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar)
	{
		Delegates.pglMatrixOrthoEXT((int)mode, left, right, bottom, top, zNear, zFar);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void MatrixPopEXT(MatrixMode mode)
	{
		Delegates.pglMatrixPopEXT((int)mode);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void MatrixPushEXT(MatrixMode mode)
	{
		Delegates.pglMatrixPushEXT((int)mode);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void ClientAttribDefaultEXT(ClientAttribMask mask)
	{
		Delegates.pglClientAttribDefaultEXT((uint)mask);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void PushClientAttribDefaultEXT(ClientAttribMask mask)
	{
		Delegates.pglPushClientAttribDefaultEXT((uint)mask);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void TextureParameterEXT(uint texture, TextureTarget target, TextureParameterName pname, float param)
	{
		Delegates.pglTextureParameterfEXT(texture, (int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameterEXT(uint texture, TextureTarget target, TextureParameterName pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglTextureParameterfvEXT(texture, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameterEXT(uint texture, TextureTarget target, TextureParameterName pname, float* @params)
	{
		Delegates.pglTextureParameterfvEXT(texture, (int)target, (int)pname, @params);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameterfEXT<T>(uint texture, TextureTarget target, TextureParameterName pname, T @params) where T : struct
	{
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglTextureParameterfvEXT(texture, (int)target, (int)pname, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void TextureParameterEXT(uint texture, TextureTarget target, TextureParameterName pname, int param)
	{
		Delegates.pglTextureParameteriEXT(texture, (int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameterEXT(uint texture, TextureTarget target, TextureParameterName pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglTextureParameterivEXT(texture, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameterEXT(uint texture, TextureTarget target, TextureParameterName pname, int* @params)
	{
		Delegates.pglTextureParameterivEXT(texture, (int)target, (int)pname, @params);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameteriEXT<T>(uint texture, TextureTarget target, TextureParameterName pname, T @params) where T : struct
	{
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglTextureParameterivEXT(texture, (int)target, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void TextureImage1DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglTextureImage1DEXT(texture, (int)target, level, (int)internalformat, width, border, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void TextureImage1DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			TextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void TextureImage2DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglTextureImage2DEXT(texture, (int)target, level, (int)internalformat, width, height, border, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void TextureImage2DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			TextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void TextureSubImage1DEXT(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglTextureSubImage1DEXT(texture, (int)target, level, xoffset, width, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void TextureSubImage1DEXT(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			TextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void TextureSubImage2DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglTextureSubImage2DEXT(texture, (int)target, level, xoffset, yoffset, width, height, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void TextureSubImage2DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			TextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CopyTextureImage1DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int border)
	{
		Delegates.pglCopyTextureImage1DEXT(texture, (int)target, level, (int)internalformat, x, y, width, border);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CopyTextureImage2DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int height, int border)
	{
		Delegates.pglCopyTextureImage2DEXT(texture, (int)target, level, (int)internalformat, x, y, width, height, border);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CopyTextureSubImage1DEXT(uint texture, TextureTarget target, int level, int xoffset, int x, int y, int width)
	{
		Delegates.pglCopyTextureSubImage1DEXT(texture, (int)target, level, xoffset, x, y, width);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CopyTextureSubImage2DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
	{
		Delegates.pglCopyTextureSubImage2DEXT(texture, (int)target, level, xoffset, yoffset, x, y, width, height);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void GetTextureImageEXT(uint texture, TextureTarget target, int level, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglGetTextureImageEXT(texture, (int)target, level, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void GetTextureImageEXT(uint texture, TextureTarget target, int level, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			GetTextureImageEXT(texture, target, level, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterEXT(uint texture, TextureTarget target, GetTextureParameter pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetTextureParameterfvEXT(texture, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterEXT(uint texture, TextureTarget target, GetTextureParameter pname, out float @params)
	{
		fixed (float* params2 = &@params)
		{
			Delegates.pglGetTextureParameterfvEXT(texture, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterEXT(uint texture, TextureTarget target, GetTextureParameter pname, [Out] float* @params)
	{
		Delegates.pglGetTextureParameterfvEXT(texture, (int)target, (int)pname, @params);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterfEXT<T>(uint texture, TextureTarget target, GetTextureParameter pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetTextureParameterfvEXT(texture, (int)target, (int)pname, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterEXT(uint texture, TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetTextureParameterivEXT(texture, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterEXT(uint texture, TextureTarget target, GetTextureParameter pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetTextureParameterivEXT(texture, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterEXT(uint texture, TextureTarget target, GetTextureParameter pname, [Out] int* @params)
	{
		Delegates.pglGetTextureParameterivEXT(texture, (int)target, (int)pname, @params);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameteriEXT<T>(uint texture, TextureTarget target, GetTextureParameter pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetTextureParameterivEXT(texture, (int)target, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureLevelParameterEXT(uint texture, TextureTarget target, int level, GetTextureParameter pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetTextureLevelParameterfvEXT(texture, (int)target, level, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureLevelParameterEXT(uint texture, TextureTarget target, int level, GetTextureParameter pname, out float @params)
	{
		fixed (float* params2 = &@params)
		{
			Delegates.pglGetTextureLevelParameterfvEXT(texture, (int)target, level, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureLevelParameterEXT(uint texture, TextureTarget target, int level, GetTextureParameter pname, [Out] float* @params)
	{
		Delegates.pglGetTextureLevelParameterfvEXT(texture, (int)target, level, (int)pname, @params);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureLevelParameterfEXT<T>(uint texture, TextureTarget target, int level, GetTextureParameter pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetTextureLevelParameterfvEXT(texture, (int)target, level, (int)pname, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureLevelParameterEXT(uint texture, TextureTarget target, int level, GetTextureParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetTextureLevelParameterivEXT(texture, (int)target, level, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureLevelParameterEXT(uint texture, TextureTarget target, int level, GetTextureParameter pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetTextureLevelParameterivEXT(texture, (int)target, level, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureLevelParameterEXT(uint texture, TextureTarget target, int level, GetTextureParameter pname, [Out] int* @params)
	{
		Delegates.pglGetTextureLevelParameterivEXT(texture, (int)target, level, (int)pname, @params);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureLevelParameteriEXT<T>(uint texture, TextureTarget target, int level, GetTextureParameter pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetTextureLevelParameterivEXT(texture, (int)target, level, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void TextureImage3DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglTextureImage3DEXT(texture, (int)target, level, (int)internalformat, width, height, depth, border, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void TextureImage3DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			TextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void TextureSubImage3DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglTextureSubImage3DEXT(texture, (int)target, level, xoffset, yoffset, zoffset, width, height, depth, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void TextureSubImage3DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			TextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CopyTextureSubImage3DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
	{
		Delegates.pglCopyTextureSubImage3DEXT(texture, (int)target, level, xoffset, yoffset, zoffset, x, y, width, height);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void BindMultiTextureEXT(TextureUnit texunit, TextureTarget target, uint texture)
	{
		Delegates.pglBindMultiTextureEXT((int)texunit, (int)target, texture);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexCoordPointerEXT(TextureUnit texunit, int size, TexCoordPointerType type, int stride, nint pointer)
	{
		Delegates.pglMultiTexCoordPointerEXT((int)texunit, size, (int)type, stride, pointer);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexCoordPointerEXT(TextureUnit texunit, int size, TexCoordPointerType type, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			MultiTexCoordPointerEXT(texunit, size, type, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexEnvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float param)
	{
		Delegates.pglMultiTexEnvfEXT((int)texunit, (int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void MultiTexEnvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglMultiTexEnvfvEXT((int)texunit, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexEnvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int param)
	{
		Delegates.pglMultiTexEnviEXT((int)texunit, (int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void MultiTexEnvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglMultiTexEnvivEXT((int)texunit, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexGenEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double param)
	{
		Delegates.pglMultiTexGendEXT((int)texunit, (int)coord, (int)pname, param);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void MultiTexGenEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double[] @params)
	{
		fixed (double* params2 = @params)
		{
			Delegates.pglMultiTexGendvEXT((int)texunit, (int)coord, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexGenEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float param)
	{
		Delegates.pglMultiTexGenfEXT((int)texunit, (int)coord, (int)pname, param);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void MultiTexGenEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglMultiTexGenfvEXT((int)texunit, (int)coord, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexGenEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int param)
	{
		Delegates.pglMultiTexGeniEXT((int)texunit, (int)coord, (int)pname, param);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void MultiTexGenEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglMultiTexGenivEXT((int)texunit, (int)coord, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetMultiTexEnvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetMultiTexEnvfvEXT((int)texunit, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetMultiTexEnvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetMultiTexEnvivEXT((int)texunit, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetMultiTexGenEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] double[] @params)
	{
		fixed (double* params2 = @params)
		{
			Delegates.pglGetMultiTexGendvEXT((int)texunit, (int)coord, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetMultiTexGenEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetMultiTexGenfvEXT((int)texunit, (int)coord, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetMultiTexGenEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetMultiTexGenivEXT((int)texunit, (int)coord, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexParameterEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int param)
	{
		Delegates.pglMultiTexParameteriEXT((int)texunit, (int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void MultiTexParameterEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglMultiTexParameterivEXT((int)texunit, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexParameterEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float param)
	{
		Delegates.pglMultiTexParameterfEXT((int)texunit, (int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void MultiTexParameterEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglMultiTexParameterfvEXT((int)texunit, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglMultiTexImage1DEXT((int)texunit, (int)target, level, (int)internalformat, width, border, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			MultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglMultiTexImage2DEXT((int)texunit, (int)target, level, (int)internalformat, width, height, border, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			MultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglMultiTexSubImage1DEXT((int)texunit, (int)target, level, xoffset, width, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			MultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglMultiTexSubImage2DEXT((int)texunit, (int)target, level, xoffset, yoffset, width, height, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			MultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CopyMultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int border)
	{
		Delegates.pglCopyMultiTexImage1DEXT((int)texunit, (int)target, level, (int)internalformat, x, y, width, border);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CopyMultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int height, int border)
	{
		Delegates.pglCopyMultiTexImage2DEXT((int)texunit, (int)target, level, (int)internalformat, x, y, width, height, border);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CopyMultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int x, int y, int width)
	{
		Delegates.pglCopyMultiTexSubImage1DEXT((int)texunit, (int)target, level, xoffset, x, y, width);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CopyMultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
	{
		Delegates.pglCopyMultiTexSubImage2DEXT((int)texunit, (int)target, level, xoffset, yoffset, x, y, width, height);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void GetMultiTexImageEXT(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglGetMultiTexImageEXT((int)texunit, (int)target, level, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void GetMultiTexImageEXT(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			GetMultiTexImageEXT(texunit, target, level, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetMultiTexParameterEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetMultiTexParameterfvEXT((int)texunit, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetMultiTexParameterEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetMultiTexParameterivEXT((int)texunit, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetMultiTexLevelParameterEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetMultiTexLevelParameterfvEXT((int)texunit, (int)target, level, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetMultiTexLevelParameterEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetMultiTexLevelParameterivEXT((int)texunit, (int)target, level, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexImage3DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglMultiTexImage3DEXT((int)texunit, (int)target, level, (int)internalformat, width, height, depth, border, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexImage3DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			MultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglMultiTexSubImage3DEXT((int)texunit, (int)target, level, xoffset, yoffset, zoffset, width, height, depth, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			MultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CopyMultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
	{
		Delegates.pglCopyMultiTexSubImage3DEXT((int)texunit, (int)target, level, xoffset, yoffset, zoffset, x, y, width, height);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void EnableClientStateIndexedEXT(EnableCap array, uint index)
	{
		Delegates.pglEnableClientStateIndexedEXT((int)array, index);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void DisableClientStateIndexedEXT(EnableCap array, uint index)
	{
		Delegates.pglDisableClientStateIndexedEXT((int)array, index);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetPointerIndexedEXT(int target, uint index, out nint data)
	{
		fixed (nint* data2 = &data)
		{
			Delegates.pglGetPointerIndexedvEXT(target, index, data2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void GetPointerIndexedEXT(int target, uint index, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			GetPointerIndexedEXT(target, index, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedTextureImage3DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, nint bits)
	{
		Delegates.pglCompressedTextureImage3DEXT(texture, (int)target, level, (int)internalformat, width, height, depth, border, imageSize, bits);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedTextureImage3DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, object bits)
	{
		GCHandle gCHandle = GCHandle.Alloc(bits, GCHandleType.Pinned);
		try
		{
			CompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedTextureImage2DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, nint bits)
	{
		Delegates.pglCompressedTextureImage2DEXT(texture, (int)target, level, (int)internalformat, width, height, border, imageSize, bits);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedTextureImage2DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, object bits)
	{
		GCHandle gCHandle = GCHandle.Alloc(bits, GCHandleType.Pinned);
		try
		{
			CompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedTextureImage1DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, nint bits)
	{
		Delegates.pglCompressedTextureImage1DEXT(texture, (int)target, level, (int)internalformat, width, border, imageSize, bits);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedTextureImage1DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, object bits)
	{
		GCHandle gCHandle = GCHandle.Alloc(bits, GCHandleType.Pinned);
		try
		{
			CompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedTextureSubImage3DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, nint bits)
	{
		Delegates.pglCompressedTextureSubImage3DEXT(texture, (int)target, level, xoffset, yoffset, zoffset, width, height, depth, (int)format, imageSize, bits);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedTextureSubImage3DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, object bits)
	{
		GCHandle gCHandle = GCHandle.Alloc(bits, GCHandleType.Pinned);
		try
		{
			CompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedTextureSubImage2DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, nint bits)
	{
		Delegates.pglCompressedTextureSubImage2DEXT(texture, (int)target, level, xoffset, yoffset, width, height, (int)format, imageSize, bits);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedTextureSubImage2DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, object bits)
	{
		GCHandle gCHandle = GCHandle.Alloc(bits, GCHandleType.Pinned);
		try
		{
			CompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedTextureSubImage1DEXT(uint texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, nint bits)
	{
		Delegates.pglCompressedTextureSubImage1DEXT(texture, (int)target, level, xoffset, width, (int)format, imageSize, bits);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedTextureSubImage1DEXT(uint texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, object bits)
	{
		GCHandle gCHandle = GCHandle.Alloc(bits, GCHandleType.Pinned);
		try
		{
			CompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void GetCompressedTextureImageEXT(uint texture, TextureTarget target, int lod, nint img)
	{
		Delegates.pglGetCompressedTextureImageEXT(texture, (int)target, lod, img);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void GetCompressedTextureImageEXT(uint texture, TextureTarget target, int lod, object img)
	{
		GCHandle gCHandle = GCHandle.Alloc(img, GCHandleType.Pinned);
		try
		{
			GetCompressedTextureImageEXT(texture, target, lod, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedMultiTexImage3DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, nint bits)
	{
		Delegates.pglCompressedMultiTexImage3DEXT((int)texunit, (int)target, level, (int)internalformat, width, height, depth, border, imageSize, bits);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedMultiTexImage3DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, object bits)
	{
		GCHandle gCHandle = GCHandle.Alloc(bits, GCHandleType.Pinned);
		try
		{
			CompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedMultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, nint bits)
	{
		Delegates.pglCompressedMultiTexImage2DEXT((int)texunit, (int)target, level, (int)internalformat, width, height, border, imageSize, bits);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedMultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, object bits)
	{
		GCHandle gCHandle = GCHandle.Alloc(bits, GCHandleType.Pinned);
		try
		{
			CompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedMultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, nint bits)
	{
		Delegates.pglCompressedMultiTexImage1DEXT((int)texunit, (int)target, level, (int)internalformat, width, border, imageSize, bits);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedMultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, object bits)
	{
		GCHandle gCHandle = GCHandle.Alloc(bits, GCHandleType.Pinned);
		try
		{
			CompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedMultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, nint bits)
	{
		Delegates.pglCompressedMultiTexSubImage3DEXT((int)texunit, (int)target, level, xoffset, yoffset, zoffset, width, height, depth, (int)format, imageSize, bits);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedMultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, object bits)
	{
		GCHandle gCHandle = GCHandle.Alloc(bits, GCHandleType.Pinned);
		try
		{
			CompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedMultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, nint bits)
	{
		Delegates.pglCompressedMultiTexSubImage2DEXT((int)texunit, (int)target, level, xoffset, yoffset, width, height, (int)format, imageSize, bits);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedMultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, object bits)
	{
		GCHandle gCHandle = GCHandle.Alloc(bits, GCHandleType.Pinned);
		try
		{
			CompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedMultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, nint bits)
	{
		Delegates.pglCompressedMultiTexSubImage1DEXT((int)texunit, (int)target, level, xoffset, width, (int)format, imageSize, bits);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void CompressedMultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, object bits)
	{
		GCHandle gCHandle = GCHandle.Alloc(bits, GCHandleType.Pinned);
		try
		{
			CompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void GetCompressedMultiTexImageEXT(TextureUnit texunit, TextureTarget target, int lod, nint img)
	{
		Delegates.pglGetCompressedMultiTexImageEXT((int)texunit, (int)target, lod, img);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void GetCompressedMultiTexImageEXT(TextureUnit texunit, TextureTarget target, int lod, object img)
	{
		GCHandle gCHandle = GCHandle.Alloc(img, GCHandleType.Pinned);
		try
		{
			GetCompressedMultiTexImageEXT(texunit, target, lod, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixLoadTransposeEXT(MatrixMode mode, float[] m)
	{
		fixed (float* m2 = m)
		{
			Delegates.pglMatrixLoadTransposefEXT((int)mode, m2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixLoadTransposeEXT(MatrixMode mode, float* m)
	{
		Delegates.pglMatrixLoadTransposefEXT((int)mode, m);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixLoadTransposefEXT<T>(MatrixMode mode, T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglMatrixLoadTransposefEXT((int)mode, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixLoadTransposeEXT(MatrixMode mode, double[] m)
	{
		fixed (double* m2 = m)
		{
			Delegates.pglMatrixLoadTransposedEXT((int)mode, m2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixLoadTransposeEXT(MatrixMode mode, double* m)
	{
		Delegates.pglMatrixLoadTransposedEXT((int)mode, m);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixLoadTransposedEXT<T>(MatrixMode mode, T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglMatrixLoadTransposedEXT((int)mode, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixMultTransposeEXT(MatrixMode mode, float[] m)
	{
		fixed (float* m2 = m)
		{
			Delegates.pglMatrixMultTransposefEXT((int)mode, m2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixMultTransposeEXT(MatrixMode mode, float* m)
	{
		Delegates.pglMatrixMultTransposefEXT((int)mode, m);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixMultTransposefEXT<T>(MatrixMode mode, T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglMatrixMultTransposefEXT((int)mode, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixMultTransposeEXT(MatrixMode mode, double[] m)
	{
		fixed (double* m2 = m)
		{
			Delegates.pglMatrixMultTransposedEXT((int)mode, m2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixMultTransposeEXT(MatrixMode mode, double* m)
	{
		Delegates.pglMatrixMultTransposedEXT((int)mode, m);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixMultTransposedEXT<T>(MatrixMode mode, T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglMatrixMultTransposedEXT((int)mode, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedBufferDataEXT(uint buffer, uint size, nint data, BufferUsage usage)
	{
		Delegates.pglNamedBufferDataEXT(buffer, size, data, (int)usage);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedBufferDataEXT(uint buffer, uint size, object data, BufferUsage usage)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			NamedBufferDataEXT(buffer, size, gCHandle.AddrOfPinnedObject(), usage);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static nint MapNamedBufferEXT(uint buffer, BufferAccess access)
	{
		return Delegates.pglMapNamedBufferEXT(buffer, (int)access);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static bool UnmapNamedBufferEXT(uint buffer)
	{
		return Delegates.pglUnmapNamedBufferEXT(buffer);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedBufferParameterEXT(uint buffer, BufferPNameARB pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetNamedBufferParameterivEXT(buffer, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedBufferParameterEXT(uint buffer, BufferPNameARB pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetNamedBufferParameterivEXT(buffer, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedBufferParameterEXT(uint buffer, BufferPNameARB pname, [Out] int* @params)
	{
		Delegates.pglGetNamedBufferParameterivEXT(buffer, (int)pname, @params);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedBufferParameteriEXT<T>(uint buffer, BufferPNameARB pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetNamedBufferParameterivEXT(buffer, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedBufferPointerEXT(uint buffer, BufferPointerNameARB pname, out nint @params)
	{
		fixed (nint* params2 = &@params)
		{
			Delegates.pglGetNamedBufferPointervEXT(buffer, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void GetNamedBufferPointerEXT(uint buffer, BufferPointerNameARB pname, object @params)
	{
		GCHandle gCHandle = GCHandle.Alloc(@params, GCHandleType.Pinned);
		try
		{
			GetNamedBufferPointerEXT(buffer, pname, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void GetNamedBufferSubDataEXT(uint buffer, nint offset, uint size, nint data)
	{
		Delegates.pglGetNamedBufferSubDataEXT(buffer, offset, size, data);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void GetNamedBufferSubDataEXT(uint buffer, nint offset, uint size, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			GetNamedBufferSubDataEXT(buffer, offset, size, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void TextureBufferEXT(uint texture, TextureTarget target, SizedInternalFormat internalformat, uint buffer)
	{
		Delegates.pglTextureBufferEXT(texture, (int)target, (int)internalformat, buffer);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexBufferEXT(TextureUnit texunit, TextureTarget target, InternalFormat internalformat, uint buffer)
	{
		Delegates.pglMultiTexBufferEXT((int)texunit, (int)target, (int)internalformat, buffer);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameterIEXT(uint texture, TextureTarget target, TextureParameterName pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglTextureParameterIivEXT(texture, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameterIEXT(uint texture, TextureTarget target, TextureParameterName pname, int* @params)
	{
		Delegates.pglTextureParameterIivEXT(texture, (int)target, (int)pname, @params);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameterIiEXT<T>(uint texture, TextureTarget target, TextureParameterName pname, T @params) where T : struct
	{
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglTextureParameterIivEXT(texture, (int)target, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameterIEXT(uint texture, TextureTarget target, TextureParameterName pname, uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglTextureParameterIuivEXT(texture, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameterIEXT(uint texture, TextureTarget target, TextureParameterName pname, uint* @params)
	{
		Delegates.pglTextureParameterIuivEXT(texture, (int)target, (int)pname, @params);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameterIuiEXT<T>(uint texture, TextureTarget target, TextureParameterName pname, T @params) where T : struct
	{
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglTextureParameterIuivEXT(texture, (int)target, (int)pname, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterIEXT(uint texture, TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetTextureParameterIivEXT(texture, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterIEXT(uint texture, TextureTarget target, GetTextureParameter pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetTextureParameterIivEXT(texture, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterIEXT(uint texture, TextureTarget target, GetTextureParameter pname, [Out] int* @params)
	{
		Delegates.pglGetTextureParameterIivEXT(texture, (int)target, (int)pname, @params);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterIiEXT<T>(uint texture, TextureTarget target, GetTextureParameter pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetTextureParameterIivEXT(texture, (int)target, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterIEXT(uint texture, TextureTarget target, GetTextureParameter pname, [Out] uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglGetTextureParameterIuivEXT(texture, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterIEXT(uint texture, TextureTarget target, GetTextureParameter pname, out uint @params)
	{
		fixed (uint* params2 = &@params)
		{
			Delegates.pglGetTextureParameterIuivEXT(texture, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterIEXT(uint texture, TextureTarget target, GetTextureParameter pname, [Out] uint* @params)
	{
		Delegates.pglGetTextureParameterIuivEXT(texture, (int)target, (int)pname, @params);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterIuiEXT<T>(uint texture, TextureTarget target, GetTextureParameter pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetTextureParameterIuivEXT(texture, (int)target, (int)pname, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void MultiTexParameterIEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglMultiTexParameterIivEXT((int)texunit, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void MultiTexParameterIEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglMultiTexParameterIuivEXT((int)texunit, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetMultiTexParameterIEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetMultiTexParameterIivEXT((int)texunit, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetMultiTexParameterIEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglGetMultiTexParameterIuivEXT((int)texunit, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void NamedProgramLocalParameters4EXT(uint program, ProgramTarget target, uint index, int count, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglNamedProgramLocalParameters4fvEXT(program, (int)target, index, count, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void NamedProgramLocalParameters4EXT(uint program, ProgramTarget target, uint index, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglNamedProgramLocalParameters4fvEXT(program, (int)target, index, @params.Length / 4, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedProgramLocalParameterI4EXT(uint program, ProgramTarget target, uint index, int x, int y, int z, int w)
	{
		Delegates.pglNamedProgramLocalParameterI4iEXT(program, (int)target, index, x, y, z, w);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void NamedProgramLocalParameterI4EXT(uint program, ProgramTarget target, uint index, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglNamedProgramLocalParameterI4ivEXT(program, (int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void NamedProgramLocalParametersI4EXT(uint program, ProgramTarget target, uint index, int count, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglNamedProgramLocalParametersI4ivEXT(program, (int)target, index, count, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void NamedProgramLocalParametersI4EXT(uint program, ProgramTarget target, uint index, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglNamedProgramLocalParametersI4ivEXT(program, (int)target, index, @params.Length / 4, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedProgramLocalParameterI4uiEXT(uint program, ProgramTarget target, uint index, uint x, uint y, uint z, uint w)
	{
		Delegates.pglNamedProgramLocalParameterI4uiEXT(program, (int)target, index, x, y, z, w);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void NamedProgramLocalParameterI4uiEXT(uint program, ProgramTarget target, uint index, uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglNamedProgramLocalParameterI4uivEXT(program, (int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void NamedProgramLocalParametersI4uiEXT(uint program, ProgramTarget target, uint index, int count, uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglNamedProgramLocalParametersI4uivEXT(program, (int)target, index, count, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void NamedProgramLocalParametersI4uiEXT(uint program, ProgramTarget target, uint index, uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglNamedProgramLocalParametersI4uivEXT(program, (int)target, index, @params.Length / 4, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedProgramLocalParameterIEXT(uint program, ProgramTarget target, uint index, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetNamedProgramLocalParameterIivEXT(program, (int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedProgramLocalParameterIEXT(uint program, ProgramTarget target, uint index, [Out] uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglGetNamedProgramLocalParameterIuivEXT(program, (int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void EnableClientStateEXT(EnableCap array, uint index)
	{
		Delegates.pglEnableClientStateiEXT((int)array, index);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void DisableClientStateEXT(EnableCap array, uint index)
	{
		Delegates.pglDisableClientStateiEXT((int)array, index);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetPointerEXT(int pname, uint index, out nint @params)
	{
		fixed (nint* params2 = &@params)
		{
			Delegates.pglGetPointeri_vEXT(pname, index, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void GetPointerEXT(int pname, uint index, object @params)
	{
		GCHandle gCHandle = GCHandle.Alloc(@params, GCHandleType.Pinned);
		try
		{
			GetPointerEXT(pname, index, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedProgramStringEXT(uint program, ProgramTarget target, ProgramFormat format, int len, nint @string)
	{
		Delegates.pglNamedProgramStringEXT(program, (int)target, (int)format, len, @string);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedProgramStringEXT(uint program, ProgramTarget target, ProgramFormat format, int len, object @string)
	{
		GCHandle gCHandle = GCHandle.Alloc(@string, GCHandleType.Pinned);
		try
		{
			NamedProgramStringEXT(program, target, format, len, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedProgramLocalParameter4EXT(uint program, ProgramTarget target, uint index, double x, double y, double z, double w)
	{
		Delegates.pglNamedProgramLocalParameter4dEXT(program, (int)target, index, x, y, z, w);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void NamedProgramLocalParameter4EXT(uint program, ProgramTarget target, uint index, double[] @params)
	{
		fixed (double* params2 = @params)
		{
			Delegates.pglNamedProgramLocalParameter4dvEXT(program, (int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedProgramLocalParameter4EXT(uint program, ProgramTarget target, uint index, float x, float y, float z, float w)
	{
		Delegates.pglNamedProgramLocalParameter4fEXT(program, (int)target, index, x, y, z, w);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void NamedProgramLocalParameter4EXT(uint program, ProgramTarget target, uint index, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglNamedProgramLocalParameter4fvEXT(program, (int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedProgramLocalParameterEXT(uint program, ProgramTarget target, uint index, [Out] double[] @params)
	{
		fixed (double* params2 = @params)
		{
			Delegates.pglGetNamedProgramLocalParameterdvEXT(program, (int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedProgramLocalParameterEXT(uint program, ProgramTarget target, uint index, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetNamedProgramLocalParameterfvEXT(program, (int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedProgramEXT(uint program, ProgramTarget target, ProgramProperty pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetNamedProgramivEXT(program, (int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void GetNamedProgramStringEXT(uint program, ProgramTarget target, ProgramStringProperty pname, nint @string)
	{
		Delegates.pglGetNamedProgramStringEXT(program, (int)target, (int)pname, @string);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void GetNamedProgramStringEXT(uint program, ProgramTarget target, ProgramStringProperty pname, object @string)
	{
		GCHandle gCHandle = GCHandle.Alloc(@string, GCHandleType.Pinned);
		try
		{
			GetNamedProgramStringEXT(program, target, pname, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedRenderbufferStorageEXT(uint renderbuffer, InternalFormat internalformat, int width, int height)
	{
		Delegates.pglNamedRenderbufferStorageEXT(renderbuffer, (int)internalformat, width, height);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedRenderbufferParameterEXT(uint renderbuffer, RenderbufferParameterName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetNamedRenderbufferParameterivEXT(renderbuffer, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedRenderbufferParameterEXT(uint renderbuffer, RenderbufferParameterName pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetNamedRenderbufferParameterivEXT(renderbuffer, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedRenderbufferParameterEXT(uint renderbuffer, RenderbufferParameterName pname, [Out] int* @params)
	{
		Delegates.pglGetNamedRenderbufferParameterivEXT(renderbuffer, (int)pname, @params);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedRenderbufferParameteriEXT<T>(uint renderbuffer, RenderbufferParameterName pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetNamedRenderbufferParameterivEXT(renderbuffer, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedRenderbufferStorageMultisampleEXT(uint renderbuffer, int samples, InternalFormat internalformat, int width, int height)
	{
		Delegates.pglNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, (int)internalformat, width, height);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedRenderbufferStorageMultisampleCoverageEXT(uint renderbuffer, int coverageSamples, int colorSamples, InternalFormat internalformat, int width, int height)
	{
		Delegates.pglNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, (int)internalformat, width, height);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static FramebufferStatus CheckNamedFramebufferStatusEXT(uint framebuffer, FramebufferTarget target)
	{
		return (FramebufferStatus)Delegates.pglCheckNamedFramebufferStatusEXT(framebuffer, (int)target);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedFramebufferTexture1DEXT(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
	{
		Delegates.pglNamedFramebufferTexture1DEXT(framebuffer, (int)attachment, (int)textarget, texture, level);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedFramebufferTexture2DEXT(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
	{
		Delegates.pglNamedFramebufferTexture2DEXT(framebuffer, (int)attachment, (int)textarget, texture, level);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedFramebufferTexture3DEXT(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset)
	{
		Delegates.pglNamedFramebufferTexture3DEXT(framebuffer, (int)attachment, (int)textarget, texture, level, zoffset);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedFramebufferRenderbufferEXT(uint framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
	{
		Delegates.pglNamedFramebufferRenderbufferEXT(framebuffer, (int)attachment, (int)renderbuffertarget, renderbuffer);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedFramebufferAttachmentParameterEXT(uint framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetNamedFramebufferAttachmentParameterivEXT(framebuffer, (int)attachment, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedFramebufferAttachmentParameterEXT(uint framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetNamedFramebufferAttachmentParameterivEXT(framebuffer, (int)attachment, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedFramebufferAttachmentParameterEXT(uint framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, [Out] int* @params)
	{
		Delegates.pglGetNamedFramebufferAttachmentParameterivEXT(framebuffer, (int)attachment, (int)pname, @params);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedFramebufferAttachmentParameteriEXT<T>(uint framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetNamedFramebufferAttachmentParameterivEXT(framebuffer, (int)attachment, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void GenerateTextureMipmapEXT(uint texture, TextureTarget target)
	{
		Delegates.pglGenerateTextureMipmapEXT(texture, (int)target);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void GenerateMultiTexMipmapEXT(TextureUnit texunit, TextureTarget target)
	{
		Delegates.pglGenerateMultiTexMipmapEXT((int)texunit, (int)target);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void FramebufferDrawBufferEXT(uint framebuffer, DrawBufferMode mode)
	{
		Delegates.pglFramebufferDrawBufferEXT(framebuffer, (int)mode);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void FramebufferDrawBuffersEXT(uint framebuffer, int[] bufs)
	{
		fixed (int* bufs2 = bufs)
		{
			Delegates.pglFramebufferDrawBuffersEXT(framebuffer, bufs.Length, bufs2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void FramebufferReadBufferEXT(uint framebuffer, ReadBufferMode mode)
	{
		Delegates.pglFramebufferReadBufferEXT(framebuffer, (int)mode);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetFramebufferParameterEXT(uint framebuffer, GetFramebufferParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetFramebufferParameterivEXT(framebuffer, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetFramebufferParameterEXT(uint framebuffer, GetFramebufferParameter pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetFramebufferParameterivEXT(framebuffer, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetFramebufferParameterEXT(uint framebuffer, GetFramebufferParameter pname, [Out] int* @params)
	{
		Delegates.pglGetFramebufferParameterivEXT(framebuffer, (int)pname, @params);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetFramebufferParameteriEXT<T>(uint framebuffer, GetFramebufferParameter pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetFramebufferParameterivEXT(framebuffer, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedCopyBufferSubDataEXT(uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, uint size)
	{
		Delegates.pglNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedFramebufferTextureEXT(uint framebuffer, FramebufferAttachment attachment, uint texture, int level)
	{
		Delegates.pglNamedFramebufferTextureEXT(framebuffer, (int)attachment, texture, level);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedFramebufferTextureLayerEXT(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, int layer)
	{
		Delegates.pglNamedFramebufferTextureLayerEXT(framebuffer, (int)attachment, texture, level, layer);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedFramebufferTextureFaceEXT(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, TextureTarget face)
	{
		Delegates.pglNamedFramebufferTextureFaceEXT(framebuffer, (int)attachment, texture, level, (int)face);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void TextureRenderbufferEXT(uint texture, TextureTarget target, uint renderbuffer)
	{
		Delegates.pglTextureRenderbufferEXT(texture, (int)target, renderbuffer);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void MultiTexRenderbufferEXT(TextureUnit texunit, TextureTarget target, uint renderbuffer)
	{
		Delegates.pglMultiTexRenderbufferEXT((int)texunit, (int)target, renderbuffer);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayVertexOffsetEXT(uint vaobj, uint buffer, int size, VertexPointerType type, int stride, nint offset)
	{
		Delegates.pglVertexArrayVertexOffsetEXT(vaobj, buffer, size, (int)type, stride, offset);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayColorOffsetEXT(uint vaobj, uint buffer, int size, ColorPointerType type, int stride, nint offset)
	{
		Delegates.pglVertexArrayColorOffsetEXT(vaobj, buffer, size, (int)type, stride, offset);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayEdgeFlagOffsetEXT(uint vaobj, uint buffer, int stride, nint offset)
	{
		Delegates.pglVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayIndexOffsetEXT(uint vaobj, uint buffer, IndexPointerType type, int stride, nint offset)
	{
		Delegates.pglVertexArrayIndexOffsetEXT(vaobj, buffer, (int)type, stride, offset);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayNormalOffsetEXT(uint vaobj, uint buffer, NormalPointerType type, int stride, nint offset)
	{
		Delegates.pglVertexArrayNormalOffsetEXT(vaobj, buffer, (int)type, stride, offset);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayTexCoordOffsetEXT(uint vaobj, uint buffer, int size, TexCoordPointerType type, int stride, nint offset)
	{
		Delegates.pglVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, (int)type, stride, offset);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayMultiTexCoordOffsetEXT(uint vaobj, uint buffer, int texunit, int size, TexCoordPointerType type, int stride, nint offset)
	{
		Delegates.pglVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, (int)type, stride, offset);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayFogCoordOffsetEXT(uint vaobj, uint buffer, FogCoordinatePointerType type, int stride, nint offset)
	{
		Delegates.pglVertexArrayFogCoordOffsetEXT(vaobj, buffer, (int)type, stride, offset);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void VertexArraySecondaryColorOffsetEXT(uint vaobj, uint buffer, int size, ColorPointerType type, int stride, nint offset)
	{
		Delegates.pglVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, (int)type, stride, offset);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayVertexAttribOffsetEXT(uint vaobj, uint buffer, uint index, int size, VertexAttribPointerType type, bool normalized, int stride, nint offset)
	{
		Delegates.pglVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, (int)type, normalized, stride, offset);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayVertexAttribIOffsetEXT(uint vaobj, uint buffer, uint index, int size, VertexAttribType type, int stride, nint offset)
	{
		Delegates.pglVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, (int)type, stride, offset);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void EnableVertexArrayEXT(uint vaobj, EnableCap array)
	{
		Delegates.pglEnableVertexArrayEXT(vaobj, (int)array);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void DisableVertexArrayEXT(uint vaobj, EnableCap array)
	{
		Delegates.pglDisableVertexArrayEXT(vaobj, (int)array);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void EnableVertexArrayAttribEXT(uint vaobj, uint index)
	{
		Delegates.pglEnableVertexArrayAttribEXT(vaobj, index);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void DisableVertexArrayAttribEXT(uint vaobj, uint index)
	{
		Delegates.pglDisableVertexArrayAttribEXT(vaobj, index);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetVertexArrayIntegerEXT(uint vaobj, VertexArrayPName pname, [Out] int[] param)
	{
		fixed (int* param2 = param)
		{
			Delegates.pglGetVertexArrayIntegervEXT(vaobj, (int)pname, param2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetVertexArrayPointerEXT(uint vaobj, VertexArrayPName pname, out nint param)
	{
		fixed (nint* param2 = &param)
		{
			Delegates.pglGetVertexArrayPointervEXT(vaobj, (int)pname, param2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void GetVertexArrayPointerEXT(uint vaobj, VertexArrayPName pname, object param)
	{
		GCHandle gCHandle = GCHandle.Alloc(param, GCHandleType.Pinned);
		try
		{
			GetVertexArrayPointerEXT(vaobj, pname, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetVertexArrayIntegerEXT(uint vaobj, uint index, VertexArrayPName pname, [Out] int[] param)
	{
		fixed (int* param2 = param)
		{
			Delegates.pglGetVertexArrayIntegeri_vEXT(vaobj, index, (int)pname, param2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetVertexArrayPointerEXT(uint vaobj, uint index, VertexArrayPName pname, out nint param)
	{
		fixed (nint* param2 = &param)
		{
			Delegates.pglGetVertexArrayPointeri_vEXT(vaobj, index, (int)pname, param2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void GetVertexArrayPointerEXT(uint vaobj, uint index, VertexArrayPName pname, object param)
	{
		GCHandle gCHandle = GCHandle.Alloc(param, GCHandleType.Pinned);
		try
		{
			GetVertexArrayPointerEXT(vaobj, index, pname, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static nint MapNamedBufferRangeEXT(uint buffer, nint offset, uint length, MapBufferAccessMask access)
	{
		return Delegates.pglMapNamedBufferRangeEXT(buffer, offset, length, (uint)access);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void FlushMappedNamedBufferRangeEXT(uint buffer, nint offset, uint length)
	{
		Delegates.pglFlushMappedNamedBufferRangeEXT(buffer, offset, length);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void ClearNamedBufferDataEXT(uint buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, nint data)
	{
		Delegates.pglClearNamedBufferDataEXT(buffer, (int)internalformat, (int)format, (int)type, data);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void ClearNamedBufferDataEXT(uint buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			ClearNamedBufferDataEXT(buffer, internalformat, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void ClearNamedBufferSubDataEXT(uint buffer, SizedInternalFormat internalformat, uint offset, uint size, PixelFormat format, PixelType type, nint data)
	{
		Delegates.pglClearNamedBufferSubDataEXT(buffer, (int)internalformat, offset, size, (int)format, (int)type, data);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void ClearNamedBufferSubDataEXT(uint buffer, SizedInternalFormat internalformat, uint offset, uint size, PixelFormat format, PixelType type, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			ClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedFramebufferParameterEXT(uint framebuffer, FramebufferParameterName pname, int param)
	{
		Delegates.pglNamedFramebufferParameteriEXT(framebuffer, (int)pname, param);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedFramebufferParameterEXT(uint framebuffer, GetFramebufferParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetNamedFramebufferParameterivEXT(framebuffer, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedFramebufferParameterEXT(uint framebuffer, GetFramebufferParameter pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetNamedFramebufferParameterivEXT(framebuffer, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedFramebufferParameterEXT(uint framebuffer, GetFramebufferParameter pname, [Out] int* @params)
	{
		Delegates.pglGetNamedFramebufferParameterivEXT(framebuffer, (int)pname, @params);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedFramebufferParameteriEXT<T>(uint framebuffer, GetFramebufferParameter pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetNamedFramebufferParameterivEXT(framebuffer, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void ProgramUniform1EXT(uint program, int location, double x)
	{
		Delegates.pglProgramUniform1dEXT(program, location, x);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void ProgramUniform2EXT(uint program, int location, double x, double y)
	{
		Delegates.pglProgramUniform2dEXT(program, location, x, y);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void ProgramUniform3EXT(uint program, int location, double x, double y, double z)
	{
		Delegates.pglProgramUniform3dEXT(program, location, x, y, z);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void ProgramUniform4EXT(uint program, int location, double x, double y, double z, double w)
	{
		Delegates.pglProgramUniform4dEXT(program, location, x, y, z, w);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void ProgramUniform1EXT(uint program, int location, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniform1dvEXT(program, location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void ProgramUniform2EXT(uint program, int location, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniform2dvEXT(program, location, value.Length / 2, value2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void ProgramUniform3EXT(uint program, int location, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniform3dvEXT(program, location, value.Length / 3, value2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void ProgramUniform4EXT(uint program, int location, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniform4dvEXT(program, location, value.Length / 4, value2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix2EXT(uint program, int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniformMatrix2dvEXT(program, location, value.Length / 4, transpose, value2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix3EXT(uint program, int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniformMatrix3dvEXT(program, location, value.Length / 9, transpose, value2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix4EXT(uint program, int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniformMatrix4dvEXT(program, location, value.Length / 16, transpose, value2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix2x3EXT(uint program, int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniformMatrix2x3dvEXT(program, location, value.Length / 6, transpose, value2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix2x4EXT(uint program, int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniformMatrix2x4dvEXT(program, location, value.Length / 8, transpose, value2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix3x2EXT(uint program, int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniformMatrix3x2dvEXT(program, location, value.Length / 6, transpose, value2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix3x4EXT(uint program, int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniformMatrix3x4dvEXT(program, location, value.Length / 12, transpose, value2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix4x2EXT(uint program, int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniformMatrix4x2dvEXT(program, location, value.Length / 8, transpose, value2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix4x3EXT(uint program, int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniformMatrix4x3dvEXT(program, location, value.Length / 12, transpose, value2);
		}
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void TextureBufferRangeEXT(uint texture, TextureTarget target, SizedInternalFormat internalformat, uint buffer, nint offset, uint size)
	{
		Delegates.pglTextureBufferRangeEXT(texture, (int)target, (int)internalformat, buffer, offset, size);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public static void TextureStorage1DEXT(uint texture, int target, int levels, SizedInternalFormat internalformat, int width)
	{
		Delegates.pglTextureStorage1DEXT(texture, target, levels, (int)internalformat, width);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public static void TextureStorage2DEXT(uint texture, int target, int levels, SizedInternalFormat internalformat, int width, int height)
	{
		Delegates.pglTextureStorage2DEXT(texture, target, levels, (int)internalformat, width, height);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public static void TextureStorage3DEXT(uint texture, int target, int levels, SizedInternalFormat internalformat, int width, int height, int depth)
	{
		Delegates.pglTextureStorage3DEXT(texture, target, levels, (int)internalformat, width, height, depth);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void TextureStorage2DMultisampleEXT(uint texture, TextureTarget target, int samples, SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations)
	{
		Delegates.pglTextureStorage2DMultisampleEXT(texture, (int)target, samples, (int)internalformat, width, height, fixedsamplelocations);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void TextureStorage3DMultisampleEXT(uint texture, int target, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
	{
		Delegates.pglTextureStorage3DMultisampleEXT(texture, target, samples, (int)internalformat, width, height, depth, fixedsamplelocations);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayBindVertexBufferEXT(uint vaobj, uint bindingindex, uint buffer, nint offset, int stride)
	{
		Delegates.pglVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayVertexAttribFormatEXT(uint vaobj, uint attribindex, int size, VertexAttribType type, bool normalized, uint relativeoffset)
	{
		Delegates.pglVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, (int)type, normalized, relativeoffset);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayVertexAttribIFormatEXT(uint vaobj, uint attribindex, int size, VertexAttribIType type, uint relativeoffset)
	{
		Delegates.pglVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, (int)type, relativeoffset);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayVertexAttribLFormatEXT(uint vaobj, uint attribindex, int size, VertexAttribLType type, uint relativeoffset)
	{
		Delegates.pglVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, (int)type, relativeoffset);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayVertexAttribBindingEXT(uint vaobj, uint attribindex, uint bindingindex)
	{
		Delegates.pglVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayVertexBindingDivisorEXT(uint vaobj, uint bindingindex, uint divisor)
	{
		Delegates.pglVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayVertexAttribLOffsetEXT(uint vaobj, uint buffer, uint index, int size, VertexAttribLType type, int stride, nint offset)
	{
		Delegates.pglVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, (int)type, stride, offset);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void TexturePageCommitmentEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit)
	{
		Delegates.pglTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
	}

	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayVertexAttribDivisorEXT(uint vaobj, uint index, uint divisor)
	{
		Delegates.pglVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor);
	}

	[RequiredByFeature("GL_EXT_discard_framebuffer", Api = "gles1|gles2")]
	public unsafe static void DiscardFramebufferEXT(FramebufferTarget target, int numAttachments, int[] attachments)
	{
		fixed (int* attachments2 = attachments)
		{
			Delegates.pglDiscardFramebufferEXT((int)target, numAttachments, attachments2);
		}
	}

	[RequiredByFeature("GL_EXT_discard_framebuffer", Api = "gles1|gles2")]
	public unsafe static void DiscardFramebufferEXT(FramebufferTarget target, int[] attachments)
	{
		fixed (int* attachments2 = attachments)
		{
			Delegates.pglDiscardFramebufferEXT((int)target, attachments.Length, attachments2);
		}
	}

	[RequiredByFeature("GL_EXT_EGL_image_storage", Api = "gl|glcore|gles2")]
	public unsafe static void EGLImageTargetTexStorageEXT(int target, nint image, int[] attrib_list)
	{
		fixed (int* attrib_list2 = attrib_list)
		{
			Delegates.pglEGLImageTargetTexStorageEXT(target, image, attrib_list2);
		}
	}

	[RequiredByFeature("GL_EXT_EGL_image_storage", Api = "gl|glcore|gles2")]
	public unsafe static void EGLImageTargetTextureStorageEXT(uint texture, nint image, int[] attrib_list)
	{
		fixed (int* attrib_list2 = attrib_list)
		{
			Delegates.pglEGLImageTargetTextureStorageEXT(texture, image, attrib_list2);
		}
	}

	[RequiredByFeature("GL_EXT_external_buffer", Api = "gl|gles2")]
	public static void BufferStorageEXT(int target, nint offset, uint size, nint clientBuffer, BufferStorageMask flags)
	{
		Delegates.pglBufferStorageExternalEXT(target, offset, size, clientBuffer, (uint)flags);
	}

	[RequiredByFeature("GL_EXT_external_buffer", Api = "gl|gles2")]
	public static void NamedBufferStorageEXT(uint buffer, nint offset, uint size, nint clientBuffer, BufferStorageMask flags)
	{
		Delegates.pglNamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, (uint)flags);
	}

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public unsafe static void GetFragmentShadingEXT(int samples, out int count, [Out] int[] shadingRates)
	{
		fixed (int* count2 = &count)
		{
			fixed (int* shadingRates2 = shadingRates)
			{
				Delegates.pglGetFragmentShadingRatesEXT(samples, shadingRates.Length, count2, shadingRates2);
			}
		}
	}

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public static void ShadingEXT(ShadingRate rate)
	{
		Delegates.pglShadingRateEXT((int)rate);
	}

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public static void ShadingRateCombinerOpsEXT(ShadingRateCombinerOp combinerOp0, ShadingRateCombinerOp combinerOp1)
	{
		Delegates.pglShadingRateCombinerOpsEXT((int)combinerOp0, (int)combinerOp1);
	}

	[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
	public static void FramebufferShadingEXT(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int baseLayer, int numLayers, int texelWidth, int texelHeight)
	{
		Delegates.pglFramebufferShadingRateEXT((int)target, (int)attachment, texture, baseLayer, numLayers, texelWidth, texelHeight);
	}

	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public static void BindRenderbufferEXT(RenderbufferTarget target, uint renderbuffer)
	{
		Delegates.pglBindRenderbufferEXT((int)target, renderbuffer);
	}

	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public static void BindFramebufferEXT(FramebufferTarget target, uint framebuffer)
	{
		Delegates.pglBindFramebufferEXT((int)target, framebuffer);
	}

	[RequiredByFeature("GL_EXT_gpu_program_parameters")]
	public unsafe static void ProgramEnvParameters4EXT(ProgramTarget target, uint index, int count, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglProgramEnvParameters4fvEXT((int)target, index, count, params2);
		}
	}

	[RequiredByFeature("GL_EXT_gpu_program_parameters")]
	public unsafe static void ProgramEnvParameters4EXT(ProgramTarget target, uint index, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglProgramEnvParameters4fvEXT((int)target, index, @params.Length / 4, params2);
		}
	}

	[RequiredByFeature("GL_EXT_gpu_program_parameters")]
	public unsafe static void ProgramLocalParameters4EXT(ProgramTarget target, uint index, int count, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglProgramLocalParameters4fvEXT((int)target, index, count, params2);
		}
	}

	[RequiredByFeature("GL_EXT_gpu_program_parameters")]
	public unsafe static void ProgramLocalParameters4EXT(ProgramTarget target, uint index, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglProgramLocalParameters4fvEXT((int)target, index, @params.Length / 4, params2);
		}
	}

	[RequiredByFeature("GL_EXT_histogram")]
	public static void GetHistogramEXT(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, nint values)
	{
		Delegates.pglGetHistogramEXT((int)target, reset, (int)format, (int)type, values);
	}

	[RequiredByFeature("GL_EXT_histogram")]
	public static void GetHistogramEXT(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, object values)
	{
		GCHandle gCHandle = GCHandle.Alloc(values, GCHandleType.Pinned);
		try
		{
			GetHistogramEXT(target, reset, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_histogram")]
	public unsafe static void GetHistogramParameterEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetHistogramParameterfvEXT((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_histogram")]
	public unsafe static void GetHistogramParameterEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetHistogramParameterivEXT((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_histogram")]
	public static void GetMinmaxEXT(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, nint values)
	{
		Delegates.pglGetMinmaxEXT((int)target, reset, (int)format, (int)type, values);
	}

	[RequiredByFeature("GL_EXT_histogram")]
	public static void GetMinmaxEXT(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, object values)
	{
		GCHandle gCHandle = GCHandle.Alloc(values, GCHandleType.Pinned);
		try
		{
			GetMinmaxEXT(target, reset, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_histogram")]
	public unsafe static void GetMinmaxParameterEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetMinmaxParameterfvEXT((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_histogram")]
	public unsafe static void GetMinmaxParameterEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetMinmaxParameterivEXT((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_index_func")]
	public static void IndexFuncEXT(IndexFunctionEXT func, float @ref)
	{
		Delegates.pglIndexFuncEXT((int)func, @ref);
	}

	[RequiredByFeature("GL_EXT_index_material")]
	public static void IndexMaterialEXT(TriangleFace face, IndexMaterialParameterEXT mode)
	{
		Delegates.pglIndexMaterialEXT((int)face, (int)mode);
	}

	[RequiredByFeature("GL_EXT_light_texture")]
	public static void ApplyTextureEXT(LightTextureModeEXT mode)
	{
		Delegates.pglApplyTextureEXT((int)mode);
	}

	[RequiredByFeature("GL_EXT_light_texture")]
	public static void TextureLightEXT(LightTexturePNameEXT pname)
	{
		Delegates.pglTextureLightEXT((int)pname);
	}

	[RequiredByFeature("GL_EXT_light_texture")]
	public static void TextureMaterialEXT(TriangleFace face, MaterialParameter mode)
	{
		Delegates.pglTextureMaterialEXT((int)face, (int)mode);
	}

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public unsafe static void DeleteMemoryObjectEXT(uint[] memoryObjects)
	{
		fixed (uint* memoryObjects2 = memoryObjects)
		{
			Delegates.pglDeleteMemoryObjectsEXT(memoryObjects.Length, memoryObjects2);
		}
	}

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public static bool IsMemoryObjectEXT(uint memoryObject)
	{
		return Delegates.pglIsMemoryObjectEXT(memoryObject);
	}

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public unsafe static void CreateMemoryObjectEXT(int n, uint[] memoryObjects)
	{
		fixed (uint* memoryObjects2 = memoryObjects)
		{
			Delegates.pglCreateMemoryObjectsEXT(n, memoryObjects2);
		}
	}

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public unsafe static void MemoryObjectParameterEXT(uint memoryObject, MemoryObjectParameterName pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglMemoryObjectParameterivEXT(memoryObject, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public unsafe static void GetMemoryObjectParameterEXT(uint memoryObject, MemoryObjectParameterName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetMemoryObjectParameterivEXT(memoryObject, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public static void TexStorageEXT(TextureTarget target, int levels, SizedInternalFormat internalFormat, int width, int height, uint memory, ulong offset)
	{
		Delegates.pglTexStorageMem2DEXT((int)target, levels, (int)internalFormat, width, height, memory, offset);
	}

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public static void TexStorageMem2DMultisampleEXT(TextureTarget target, int samples, SizedInternalFormat internalFormat, int width, int height, bool fixedSampleLocations, uint memory, ulong offset)
	{
		Delegates.pglTexStorageMem2DMultisampleEXT((int)target, samples, (int)internalFormat, width, height, fixedSampleLocations, memory, offset);
	}

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public static void TexStorageEXT(TextureTarget target, int levels, SizedInternalFormat internalFormat, int width, int height, int depth, uint memory, ulong offset)
	{
		Delegates.pglTexStorageMem3DEXT((int)target, levels, (int)internalFormat, width, height, depth, memory, offset);
	}

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public static void TexStorageMem3DMultisampleEXT(TextureTarget target, int samples, SizedInternalFormat internalFormat, int width, int height, int depth, bool fixedSampleLocations, uint memory, ulong offset)
	{
		Delegates.pglTexStorageMem3DMultisampleEXT((int)target, samples, (int)internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
	}

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public static void BufferStorageEXT(BufferTarget target, uint size, uint memory, ulong offset)
	{
		Delegates.pglBufferStorageMemEXT((int)target, size, memory, offset);
	}

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public static void TextureStorageEXT(uint texture, int levels, SizedInternalFormat internalFormat, int width, int height, uint memory, ulong offset)
	{
		Delegates.pglTextureStorageMem2DEXT(texture, levels, (int)internalFormat, width, height, memory, offset);
	}

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public static void TextureStorageMem2DMultisampleEXT(uint texture, int samples, SizedInternalFormat internalFormat, int width, int height, bool fixedSampleLocations, uint memory, ulong offset)
	{
		Delegates.pglTextureStorageMem2DMultisampleEXT(texture, samples, (int)internalFormat, width, height, fixedSampleLocations, memory, offset);
	}

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public static void TextureStorageEXT(uint texture, int levels, SizedInternalFormat internalFormat, int width, int height, int depth, uint memory, ulong offset)
	{
		Delegates.pglTextureStorageMem3DEXT(texture, levels, (int)internalFormat, width, height, depth, memory, offset);
	}

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public static void TextureStorageMem3DMultisampleEXT(uint texture, int samples, SizedInternalFormat internalFormat, int width, int height, int depth, bool fixedSampleLocations, uint memory, ulong offset)
	{
		Delegates.pglTextureStorageMem3DMultisampleEXT(texture, samples, (int)internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
	}

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	public static void NamedBufferStorageEXT(uint buffer, uint size, uint memory, ulong offset)
	{
		Delegates.pglNamedBufferStorageMemEXT(buffer, size, memory, offset);
	}

	[RequiredByFeature("GL_EXT_memory_object")]
	public static void TexStorageEXT(TextureTarget target, int levels, SizedInternalFormat internalFormat, int width, uint memory, ulong offset)
	{
		Delegates.pglTexStorageMem1DEXT((int)target, levels, (int)internalFormat, width, memory, offset);
	}

	[RequiredByFeature("GL_EXT_memory_object")]
	public static void TextureStorageEXT(uint texture, int levels, SizedInternalFormat internalFormat, int width, uint memory, ulong offset)
	{
		Delegates.pglTextureStorageMem1DEXT(texture, levels, (int)internalFormat, width, memory, offset);
	}

	[RequiredByFeature("GL_EXT_memory_object_fd", Api = "gl|gles2")]
	public static void ImportMemoryEXT(uint memory, ulong size, ExternalHandleType handleType, int fd)
	{
		Delegates.pglImportMemoryFdEXT(memory, size, (int)handleType, fd);
	}

	[RequiredByFeature("GL_EXT_memory_object_win32", Api = "gl|gles2")]
	public static void ImportMemoryWin32HandleEXT(uint memory, ulong size, ExternalHandleType handleType, nint handle)
	{
		Delegates.pglImportMemoryWin32HandleEXT(memory, size, (int)handleType, handle);
	}

	[RequiredByFeature("GL_EXT_memory_object_win32", Api = "gl|gles2")]
	public static void ImportMemoryWin32NameEXT(uint memory, ulong size, ExternalHandleType handleType, nint name)
	{
		Delegates.pglImportMemoryWin32NameEXT(memory, size, (int)handleType, name);
	}

	[RequiredByFeature("GL_EXT_memory_object_win32", Api = "gl|gles2")]
	public static void ImportMemoryWin32NameEXT(uint memory, ulong size, ExternalHandleType handleType, object name)
	{
		GCHandle gCHandle = GCHandle.Alloc(name, GCHandleType.Pinned);
		try
		{
			ImportMemoryWin32NameEXT(memory, size, handleType, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_multisample")]
	[RequiredByFeature("GL_SGIS_multisample")]
	public static void SampleMaskEXT(float value, bool invert)
	{
		Delegates.pglSampleMaskEXT(value, invert);
	}

	[RequiredByFeature("GL_EXT_multisample")]
	[RequiredByFeature("GL_SGIS_multisample")]
	public static void SamplePatternEXT(SamplePatternEXT pattern)
	{
		Delegates.pglSamplePatternEXT((int)pattern);
	}

	[RequiredByFeature("GL_EXT_multisampled_render_to_texture", Api = "gles1|gles2")]
	public static void FramebufferTexture2DMultisampleEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int samples)
	{
		Delegates.pglFramebufferTexture2DMultisampleEXT((int)target, (int)attachment, (int)textarget, texture, level, samples);
	}

	[RequiredByFeature("GL_EXT_multiview_draw_buffers", Api = "gles2")]
	public static void ReadBufferIndexedEXT(ReadBufferMode src, int index)
	{
		Delegates.pglReadBufferIndexedEXT((int)src, index);
	}

	[RequiredByFeature("GL_EXT_multiview_draw_buffers", Api = "gles2")]
	public unsafe static void DrawBuffersIndexedEXT(int[] location, int[] indices)
	{
		fixed (int* location2 = location)
		{
			fixed (int* indices2 = indices)
			{
				Delegates.pglDrawBuffersIndexedEXT(location.Length, location2, indices2);
			}
		}
	}

	[RequiredByFeature("GL_EXT_multiview_draw_buffers", Api = "gles2")]
	public unsafe static void GetIntegerEXT(GetPName target, uint index, [Out] int[] data)
	{
		fixed (int* data2 = data)
		{
			Delegates.pglGetIntegeri_vEXT((int)target, index, data2);
		}
	}

	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
	public unsafe static void GenQueriesEXT(uint[] ids)
	{
		fixed (uint* ids2 = ids)
		{
			Delegates.pglGenQueriesEXT(ids.Length, ids2);
		}
	}

	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
	public unsafe static uint GenQueryEXT()
	{
		uint result = default(uint);
		Delegates.pglGenQueriesEXT(1, &result);
		return result;
	}

	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
	public unsafe static void DeleteQueriesEXT(params uint[] ids)
	{
		fixed (uint* ids2 = ids)
		{
			Delegates.pglDeleteQueriesEXT(ids.Length, ids2);
		}
	}

	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
	public static bool IsQueryEXT(uint id)
	{
		return Delegates.pglIsQueryEXT(id);
	}

	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
	public static void BeginQueryEXT(QueryTarget target, uint id)
	{
		Delegates.pglBeginQueryEXT((int)target, id);
	}

	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
	public static void EndQueryEXT(QueryTarget target)
	{
		Delegates.pglEndQueryEXT((int)target);
	}

	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
	public unsafe static void GetQueryEXT(QueryTarget target, QueryParameterName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetQueryivEXT((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
	public unsafe static void GetQueryEXT(QueryTarget target, QueryParameterName pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetQueryivEXT((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
	public unsafe static void GetQueryObjectuivEXT(uint id, QueryObjectParameterName pname, [Out] uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglGetQueryObjectuivEXT(id, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	[RequiredByFeature("GL_EXT_occlusion_query_boolean", Api = "gles2")]
	public unsafe static void GetQueryObjectuivEXT(uint id, QueryObjectParameterName pname, out uint @params)
	{
		fixed (uint* params2 = &@params)
		{
			Delegates.pglGetQueryObjectuivEXT(id, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_pixel_transform")]
	public static void PixelTransformParameterEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, int param)
	{
		Delegates.pglPixelTransformParameteriEXT((int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_EXT_pixel_transform")]
	public static void PixelTransformParameterEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, float param)
	{
		Delegates.pglPixelTransformParameterfEXT((int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_EXT_pixel_transform")]
	public unsafe static void PixelTransformParameterEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglPixelTransformParameterivEXT((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_pixel_transform")]
	public unsafe static void PixelTransformParameterEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglPixelTransformParameterfvEXT((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_pixel_transform")]
	public unsafe static void GetPixelTransformParameterEXT(int target, int pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetPixelTransformParameterivEXT(target, pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_pixel_transform")]
	public unsafe static void GetPixelTransformParameterEXT(int target, int pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetPixelTransformParameterfvEXT(target, pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_polygon_offset")]
	public static void PolygonOffsetEXT(float factor, float bias)
	{
		Delegates.pglPolygonOffsetEXT(factor, bias);
	}

	[RequiredByFeature("GL_EXT_raster_multisample", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
	public static void RasterSampleEXT(uint samples, bool fixedsamplelocations)
	{
		Delegates.pglRasterSamplesEXT(samples, fixedsamplelocations);
	}

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public unsafe static void GetUnsignedBytevEXT(GetPName pname, [Out] byte[] data)
	{
		fixed (byte* data2 = data)
		{
			Delegates.pglGetUnsignedBytevEXT((int)pname, data2);
		}
	}

	[RequiredByFeature("GL_EXT_memory_object", Api = "gl|gles2")]
	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public unsafe static void GetUnsignedBytei_vEXT(int target, uint index, [Out] byte[] data)
	{
		fixed (byte* data2 = data)
		{
			Delegates.pglGetUnsignedBytei_vEXT(target, index, data2);
		}
	}

	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public unsafe static void GenSemaphoreEXT(uint[] semaphores)
	{
		fixed (uint* semaphores2 = semaphores)
		{
			Delegates.pglGenSemaphoresEXT(semaphores.Length, semaphores2);
		}
	}

	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public unsafe static uint GenSemaphoreEXT()
	{
		uint result = default(uint);
		Delegates.pglGenSemaphoresEXT(1, &result);
		return result;
	}

	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public unsafe static void DeleteSemaphoreEXT(uint[] semaphores)
	{
		fixed (uint* semaphores2 = semaphores)
		{
			Delegates.pglDeleteSemaphoresEXT(semaphores.Length, semaphores2);
		}
	}

	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public static bool IsSemaphoreEXT(uint semaphore)
	{
		return Delegates.pglIsSemaphoreEXT(semaphore);
	}

	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public unsafe static void SemaphoreParameterEXT(uint semaphore, SemaphoreParameterName pname, ulong[] @params)
	{
		fixed (ulong* params2 = @params)
		{
			Delegates.pglSemaphoreParameterui64vEXT(semaphore, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public unsafe static void GetSemaphoreParameterEXT(uint semaphore, SemaphoreParameterName pname, [Out] ulong[] @params)
	{
		fixed (ulong* params2 = @params)
		{
			Delegates.pglGetSemaphoreParameterui64vEXT(semaphore, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public unsafe static void WaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint[] buffers, uint numTextureBarriers, uint[] textures, int[] srcLayouts)
	{
		fixed (uint* buffers2 = buffers)
		{
			fixed (uint* textures2 = textures)
			{
				fixed (int* srcLayouts2 = srcLayouts)
				{
					Delegates.pglWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers2, numTextureBarriers, textures2, srcLayouts2);
				}
			}
		}
	}

	[RequiredByFeature("GL_EXT_semaphore", Api = "gl|gles2")]
	public unsafe static void SignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint[] buffers, uint numTextureBarriers, uint[] textures, int[] dstLayouts)
	{
		fixed (uint* buffers2 = buffers)
		{
			fixed (uint* textures2 = textures)
			{
				fixed (int* dstLayouts2 = dstLayouts)
				{
					Delegates.pglSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers2, numTextureBarriers, textures2, dstLayouts2);
				}
			}
		}
	}

	[RequiredByFeature("GL_EXT_semaphore_fd", Api = "gl|gles2")]
	public static void ImportSemaphoreEXT(uint semaphore, ExternalHandleType handleType, int fd)
	{
		Delegates.pglImportSemaphoreFdEXT(semaphore, (int)handleType, fd);
	}

	[RequiredByFeature("GL_EXT_semaphore_win32", Api = "gl|gles2")]
	public static void ImportSemaphoreWin32HandleEXT(uint semaphore, ExternalHandleType handleType, nint handle)
	{
		Delegates.pglImportSemaphoreWin32HandleEXT(semaphore, (int)handleType, handle);
	}

	[RequiredByFeature("GL_EXT_semaphore_win32", Api = "gl|gles2")]
	public static void ImportSemaphoreWin32NameEXT(uint semaphore, ExternalHandleType handleType, nint name)
	{
		Delegates.pglImportSemaphoreWin32NameEXT(semaphore, (int)handleType, name);
	}

	[RequiredByFeature("GL_EXT_semaphore_win32", Api = "gl|gles2")]
	public static void ImportSemaphoreWin32NameEXT(uint semaphore, ExternalHandleType handleType, object name)
	{
		GCHandle gCHandle = GCHandle.Alloc(name, GCHandleType.Pinned);
		try
		{
			ImportSemaphoreWin32NameEXT(semaphore, handleType, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_separate_shader_objects")]
	public static void UseShaderProgramEXT(int type, uint program)
	{
		Delegates.pglUseShaderProgramEXT(type, program);
	}

	[RequiredByFeature("GL_EXT_separate_shader_objects")]
	public static void ActiveProgramEXT(uint program)
	{
		Delegates.pglActiveProgramEXT(program);
	}

	[RequiredByFeature("GL_EXT_separate_shader_objects")]
	public static uint CreateShaderProgramEXT(ShaderType type, string @string)
	{
		return Delegates.pglCreateShaderProgramEXT((int)type, @string);
	}

	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public static void ActiveShaderProgramEXT(uint pipeline, uint program)
	{
		Delegates.pglActiveShaderProgramEXT(pipeline, program);
	}

	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public static void BindProgramPipelineEXT(uint pipeline)
	{
		Delegates.pglBindProgramPipelineEXT(pipeline);
	}

	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public static uint CreateShaderProgramEXT(ShaderType type, int count, string[] strings)
	{
		return Delegates.pglCreateShaderProgramvEXT((int)type, count, strings);
	}

	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public static uint CreateShaderProgramEXT(ShaderType type, string[] strings)
	{
		return Delegates.pglCreateShaderProgramvEXT((int)type, strings.Length, strings);
	}

	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void DeleteProgramPipelinesEXT(params uint[] pipelines)
	{
		fixed (uint* pipelines2 = pipelines)
		{
			Delegates.pglDeleteProgramPipelinesEXT(pipelines.Length, pipelines2);
		}
	}

	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void GenProgramPipelinesEXT(uint[] pipelines)
	{
		fixed (uint* pipelines2 = pipelines)
		{
			Delegates.pglGenProgramPipelinesEXT(pipelines.Length, pipelines2);
		}
	}

	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static uint GenProgramPipelineEXT()
	{
		uint result = default(uint);
		Delegates.pglGenProgramPipelinesEXT(1, &result);
		return result;
	}

	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void GetProgramPipelineInfoLogEXT(uint pipeline, int bufSize, out int length, StringBuilder infoLog)
	{
		fixed (int* length2 = &length)
		{
			Delegates.pglGetProgramPipelineInfoLogEXT(pipeline, bufSize, length2, infoLog);
		}
	}

	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void GetProgramPipelineEXT(uint pipeline, PipelineParameterName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetProgramPipelineivEXT(pipeline, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void GetProgramPipelineEXT(uint pipeline, PipelineParameterName pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetProgramPipelineivEXT(pipeline, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public static bool IsProgramPipelineEXT(uint pipeline)
	{
		return Delegates.pglIsProgramPipelineEXT(pipeline);
	}

	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public static void UseProgramStageEXT(uint pipeline, UseProgramStageMask stages, uint program)
	{
		Delegates.pglUseProgramStagesEXT(pipeline, (uint)stages, program);
	}

	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public static void ValidateProgramPipelineEXT(uint pipeline)
	{
		Delegates.pglValidateProgramPipelineEXT(pipeline);
	}

	[RequiredByFeature("GL_EXT_shader_framebuffer_fetch_non_coherent", Api = "gl|glcore|gles2")]
	public static void FramebufferFetchBarrierEXT()
	{
		Delegates.pglFramebufferFetchBarrierEXT();
	}

	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public static void BindImageTextureEXT(uint index, uint texture, int level, bool layered, int layer, BufferAccess access, int format)
	{
		Delegates.pglBindImageTextureEXT(index, texture, level, layered, layer, (int)access, format);
	}

	[RequiredByFeature("GL_EXT_shader_pixel_local_storage2", Api = "gles2")]
	public static void FramebufferPixelLocalStorageSizeEXT(uint target, int size)
	{
		Delegates.pglFramebufferPixelLocalStorageSizeEXT(target, size);
	}

	[RequiredByFeature("GL_EXT_shader_pixel_local_storage2", Api = "gles2")]
	public static int GetFramebufferPixelLocalStorageSizeEXT(FramebufferTarget target)
	{
		return Delegates.pglGetFramebufferPixelLocalStorageSizeEXT((uint)target);
	}

	[RequiredByFeature("GL_EXT_shader_pixel_local_storage2", Api = "gles2")]
	public unsafe static void ClearPixelLocalStorageEXT(int offset, uint[] values)
	{
		fixed (uint* values2 = values)
		{
			Delegates.pglClearPixelLocalStorageuiEXT(offset, values.Length, values2);
		}
	}

	[RequiredByFeature("GL_EXT_stencil_clear_tag")]
	public static void StencilClearTagEXT(int stencilTagBits, uint stencilClearTag)
	{
		Delegates.pglStencilClearTagEXT(stencilTagBits, stencilClearTag);
	}

	[RequiredByFeature("GL_EXT_stencil_two_side")]
	public static void ActiveStencilFaceEXT(TriangleFace face)
	{
		Delegates.pglActiveStencilFaceEXT((int)face);
	}

	[RequiredByFeature("GL_EXT_texture_integer")]
	public static void ClearColorIEXT(int red, int green, int blue, int alpha)
	{
		Delegates.pglClearColorIiEXT(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_EXT_texture_integer")]
	public static void ClearColorIEXT(uint red, uint green, uint blue, uint alpha)
	{
		Delegates.pglClearColorIuiEXT(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_EXT_texture_object")]
	public unsafe static bool AreTexturesResidentEXT(uint[] textures, [Out] byte[] residences)
	{
		bool result;
		fixed (uint* textures2 = textures)
		{
			fixed (byte* residences2 = residences)
			{
				result = Delegates.pglAreTexturesResidentEXT(textures.Length, textures2, residences2);
			}
		}
		return result;
	}

	[RequiredByFeature("GL_EXT_texture_object")]
	public unsafe static void DeleteTexturesEXT(params uint[] textures)
	{
		fixed (uint* textures2 = textures)
		{
			Delegates.pglDeleteTexturesEXT(textures.Length, textures2);
		}
	}

	[RequiredByFeature("GL_EXT_texture_object")]
	public unsafe static void GenTexturesEXT(uint[] textures)
	{
		fixed (uint* textures2 = textures)
		{
			Delegates.pglGenTexturesEXT(textures.Length, textures2);
		}
	}

	[RequiredByFeature("GL_EXT_texture_object")]
	public unsafe static uint GenTextureEXT()
	{
		uint result = default(uint);
		Delegates.pglGenTexturesEXT(1, &result);
		return result;
	}

	[RequiredByFeature("GL_EXT_texture_object")]
	public static bool IsTextureEXT(uint texture)
	{
		return Delegates.pglIsTextureEXT(texture);
	}

	[RequiredByFeature("GL_EXT_texture_perturb_normal")]
	public static void TextureNormalEXT(TextureNormalModeEXT mode)
	{
		Delegates.pglTextureNormalEXT((int)mode);
	}

	[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
	public unsafe static void TexStorageAttribs2EXT(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height, int[] attrib_list)
	{
		fixed (int* attrib_list2 = attrib_list)
		{
			Delegates.pglTexStorageAttribs2DEXT((int)target, levels, (int)internalformat, width, height, attrib_list2);
		}
	}

	[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
	public unsafe static void TexStorageAttribs3EXT(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height, int depth, int[] attrib_list)
	{
		fixed (int* attrib_list2 = attrib_list)
		{
			Delegates.pglTexStorageAttribs3DEXT((int)target, levels, (int)internalformat, width, height, depth, attrib_list2);
		}
	}

	[RequiredByFeature("GL_EXT_transform_feedback")]
	[RequiredByFeature("GL_NV_transform_feedback")]
	public static void BindBufferOffsetEXT(BufferTarget target, uint index, uint buffer, nint offset)
	{
		Delegates.pglBindBufferOffsetEXT((int)target, index, buffer, offset);
	}

	[RequiredByFeature("GL_EXT_vertex_array")]
	public static void ColorPointerEXT(int size, ColorPointerType type, int stride, int count, nint pointer)
	{
		Delegates.pglColorPointerEXT(size, (int)type, stride, count, pointer);
	}

	[RequiredByFeature("GL_EXT_vertex_array")]
	public static void ColorPointerEXT(int size, ColorPointerType type, int stride, int count, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			ColorPointerEXT(size, type, stride, count, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_vertex_array")]
	public unsafe static void EdgeFlagPointerEXT(int stride, int count, byte[] pointer)
	{
		fixed (byte* pointer2 = pointer)
		{
			Delegates.pglEdgeFlagPointerEXT(stride, count, pointer2);
		}
	}

	[RequiredByFeature("GL_EXT_vertex_array")]
	public static void IndexPointerEXT(IndexPointerType type, int stride, int count, nint pointer)
	{
		Delegates.pglIndexPointerEXT((int)type, stride, count, pointer);
	}

	[RequiredByFeature("GL_EXT_vertex_array")]
	public static void IndexPointerEXT(IndexPointerType type, int stride, int count, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			IndexPointerEXT(type, stride, count, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_vertex_array")]
	public static void NormalPointerEXT(NormalPointerType type, int stride, int count, nint pointer)
	{
		Delegates.pglNormalPointerEXT((int)type, stride, count, pointer);
	}

	[RequiredByFeature("GL_EXT_vertex_array")]
	public static void NormalPointerEXT(NormalPointerType type, int stride, int count, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			NormalPointerEXT(type, stride, count, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_vertex_array")]
	public static void TexCoordPointerEXT(int size, TexCoordPointerType type, int stride, int count, nint pointer)
	{
		Delegates.pglTexCoordPointerEXT(size, (int)type, stride, count, pointer);
	}

	[RequiredByFeature("GL_EXT_vertex_array")]
	public static void TexCoordPointerEXT(int size, TexCoordPointerType type, int stride, int count, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			TexCoordPointerEXT(size, type, stride, count, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_vertex_array")]
	public static void VertexPointerEXT(int size, VertexPointerType type, int stride, int count, nint pointer)
	{
		Delegates.pglVertexPointerEXT(size, (int)type, stride, count, pointer);
	}

	[RequiredByFeature("GL_EXT_vertex_array")]
	public static void VertexPointerEXT(int size, VertexPointerType type, int stride, int count, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			VertexPointerEXT(size, type, stride, count, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static void BeginVertexShaderEXT()
	{
		Delegates.pglBeginVertexShaderEXT();
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static void EndVertexShaderEXT()
	{
		Delegates.pglEndVertexShaderEXT();
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static void BindVertexShaderEXT(uint id)
	{
		Delegates.pglBindVertexShaderEXT(id);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static uint GenVertexShadersEXT(uint range)
	{
		return Delegates.pglGenVertexShadersEXT(range);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static void DeleteVertexShaderEXT(uint id)
	{
		Delegates.pglDeleteVertexShaderEXT(id);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static void ShaderOp1EXT(VertexShaderOpEXT op, uint res, uint arg1)
	{
		Delegates.pglShaderOp1EXT((int)op, res, arg1);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static void ShaderOp2EXT(VertexShaderOpEXT op, uint res, uint arg1, uint arg2)
	{
		Delegates.pglShaderOp2EXT((int)op, res, arg1, arg2);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static void ShaderOp3EXT(VertexShaderOpEXT op, uint res, uint arg1, uint arg2, uint arg3)
	{
		Delegates.pglShaderOp3EXT((int)op, res, arg1, arg2, arg3);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static void SwizzleEXT(uint res, uint @in, VertexShaderCoordOutEXT outX, VertexShaderCoordOutEXT outY, VertexShaderCoordOutEXT outZ, VertexShaderCoordOutEXT outW)
	{
		Delegates.pglSwizzleEXT(res, @in, (int)outX, (int)outY, (int)outZ, (int)outW);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static void WriteMaskEXT(uint res, uint @in, VertexShaderWriteMaskEXT outX, VertexShaderWriteMaskEXT outY, VertexShaderWriteMaskEXT outZ, VertexShaderWriteMaskEXT outW)
	{
		Delegates.pglWriteMaskEXT(res, @in, (int)outX, (int)outY, (int)outZ, (int)outW);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static void InsertComponentEXT(uint res, uint src, uint num)
	{
		Delegates.pglInsertComponentEXT(res, src, num);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static void ExtractComponentEXT(uint res, uint src, uint num)
	{
		Delegates.pglExtractComponentEXT(res, src, num);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static uint GenSymbolsEXT(DataTypeEXT datatype, VertexShaderStorageTypeEXT storagetype, ParameterRangeEXT range, uint components)
	{
		return Delegates.pglGenSymbolsEXT((int)datatype, (int)storagetype, (int)range, components);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static void SetInvariantEXT(uint id, ScalarType type, nint addr)
	{
		Delegates.pglSetInvariantEXT(id, (int)type, addr);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static void SetInvariantEXT(uint id, ScalarType type, object addr)
	{
		GCHandle gCHandle = GCHandle.Alloc(addr, GCHandleType.Pinned);
		try
		{
			SetInvariantEXT(id, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static void SetLocalConstantEXT(uint id, ScalarType type, nint addr)
	{
		Delegates.pglSetLocalConstantEXT(id, (int)type, addr);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static void SetLocalConstantEXT(uint id, ScalarType type, object addr)
	{
		GCHandle gCHandle = GCHandle.Alloc(addr, GCHandleType.Pinned);
		try
		{
			SetLocalConstantEXT(id, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public unsafe static void VariantEXT(uint id, sbyte[] addr)
	{
		fixed (sbyte* addr2 = addr)
		{
			Delegates.pglVariantbvEXT(id, addr2);
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public unsafe static void VariantEXT(uint id, short[] addr)
	{
		fixed (short* addr2 = addr)
		{
			Delegates.pglVariantsvEXT(id, addr2);
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public unsafe static void VariantEXT(uint id, int[] addr)
	{
		fixed (int* addr2 = addr)
		{
			Delegates.pglVariantivEXT(id, addr2);
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public unsafe static void VariantEXT(uint id, float[] addr)
	{
		fixed (float* addr2 = addr)
		{
			Delegates.pglVariantfvEXT(id, addr2);
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public unsafe static void VariantEXT(uint id, double[] addr)
	{
		fixed (double* addr2 = addr)
		{
			Delegates.pglVariantdvEXT(id, addr2);
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public unsafe static void VariantEXT(uint id, byte[] addr)
	{
		fixed (byte* addr2 = addr)
		{
			Delegates.pglVariantubvEXT(id, addr2);
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public unsafe static void VariantEXT(uint id, ushort[] addr)
	{
		fixed (ushort* addr2 = addr)
		{
			Delegates.pglVariantusvEXT(id, addr2);
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public unsafe static void VariantEXT(uint id, uint[] addr)
	{
		fixed (uint* addr2 = addr)
		{
			Delegates.pglVariantuivEXT(id, addr2);
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static void VariantPointerEXT(uint id, ScalarType type, uint stride, nint addr)
	{
		Delegates.pglVariantPointerEXT(id, (int)type, stride, addr);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static void VariantPointerEXT(uint id, ScalarType type, uint stride, object addr)
	{
		GCHandle gCHandle = GCHandle.Alloc(addr, GCHandleType.Pinned);
		try
		{
			VariantPointerEXT(id, type, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static void EnableVariantClientStateEXT(uint id)
	{
		Delegates.pglEnableVariantClientStateEXT(id);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static void DisableVariantClientStateEXT(uint id)
	{
		Delegates.pglDisableVariantClientStateEXT(id);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static uint BindLightParameterEXT(LightName light, LightParameter value)
	{
		return Delegates.pglBindLightParameterEXT((int)light, (int)value);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static uint BindMaterialParameterEXT(TriangleFace face, MaterialParameter value)
	{
		return Delegates.pglBindMaterialParameterEXT((int)face, (int)value);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static uint BindTexGenParameterEXT(TextureUnit unit, TextureCoordName coord, TextureGenParameter value)
	{
		return Delegates.pglBindTexGenParameterEXT((int)unit, (int)coord, (int)value);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static uint BindTextureUnitParameterEXT(TextureUnit unit, VertexShaderTextureUnitParameter value)
	{
		return Delegates.pglBindTextureUnitParameterEXT((int)unit, (int)value);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static uint BindParameterEXT(VertexShaderParameterEXT value)
	{
		return Delegates.pglBindParameterEXT((int)value);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public static bool IsVariantEnabledEXT(uint id, VariantCapEXT cap)
	{
		return Delegates.pglIsVariantEnabledEXT(id, (int)cap);
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public unsafe static void GetVariantBooleanEXT(uint id, GetVariantValueEXT value, [Out] byte[] data)
	{
		fixed (byte* data2 = data)
		{
			Delegates.pglGetVariantBooleanvEXT(id, (int)value, data2);
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public unsafe static void GetVariantIntegerEXT(uint id, GetVariantValueEXT value, [Out] int[] data)
	{
		fixed (int* data2 = data)
		{
			Delegates.pglGetVariantIntegervEXT(id, (int)value, data2);
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public unsafe static void GetVariantFloatEXT(uint id, GetVariantValueEXT value, [Out] float[] data)
	{
		fixed (float* data2 = data)
		{
			Delegates.pglGetVariantFloatvEXT(id, (int)value, data2);
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public unsafe static void GetVariantPointerEXT(uint id, GetVariantValueEXT value, [Out] nint[] data)
	{
		fixed (nint* data2 = data)
		{
			Delegates.pglGetVariantPointervEXT(id, (int)value, data2);
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public unsafe static void GetInvariantBooleanEXT(uint id, GetVariantValueEXT value, [Out] byte[] data)
	{
		fixed (byte* data2 = data)
		{
			Delegates.pglGetInvariantBooleanvEXT(id, (int)value, data2);
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public unsafe static void GetInvariantIntegerEXT(uint id, GetVariantValueEXT value, [Out] int[] data)
	{
		fixed (int* data2 = data)
		{
			Delegates.pglGetInvariantIntegervEXT(id, (int)value, data2);
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public unsafe static void GetInvariantFloatEXT(uint id, GetVariantValueEXT value, [Out] float[] data)
	{
		fixed (float* data2 = data)
		{
			Delegates.pglGetInvariantFloatvEXT(id, (int)value, data2);
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public unsafe static void GetLocalConstantBooleanEXT(uint id, GetVariantValueEXT value, [Out] byte[] data)
	{
		fixed (byte* data2 = data)
		{
			Delegates.pglGetLocalConstantBooleanvEXT(id, (int)value, data2);
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public unsafe static void GetLocalConstantIntegerEXT(uint id, GetVariantValueEXT value, [Out] int[] data)
	{
		fixed (int* data2 = data)
		{
			Delegates.pglGetLocalConstantIntegervEXT(id, (int)value, data2);
		}
	}

	[RequiredByFeature("GL_EXT_vertex_shader")]
	public unsafe static void GetLocalConstantFloatEXT(uint id, GetVariantValueEXT value, [Out] float[] data)
	{
		fixed (float* data2 = data)
		{
			Delegates.pglGetLocalConstantFloatvEXT(id, (int)value, data2);
		}
	}

	[RequiredByFeature("GL_EXT_vertex_weighting")]
	public static void VertexWeightEXT(float weight)
	{
		Delegates.pglVertexWeightfEXT(weight);
	}

	[RequiredByFeature("GL_EXT_vertex_weighting")]
	public unsafe static void VertexWeightEXT(float[] weight)
	{
		fixed (float* weight2 = weight)
		{
			Delegates.pglVertexWeightfvEXT(weight2);
		}
	}

	[RequiredByFeature("GL_EXT_vertex_weighting")]
	public static void VertexWeightPointerEXT(int size, VertexWeightPointerTypeEXT type, int stride, nint pointer)
	{
		Delegates.pglVertexWeightPointerEXT(size, (int)type, stride, pointer);
	}

	[RequiredByFeature("GL_EXT_vertex_weighting")]
	public static void VertexWeightPointerEXT(int size, VertexWeightPointerTypeEXT type, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			VertexWeightPointerEXT(size, type, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_EXT_win32_keyed_mutex", Api = "gl|gles2")]
	public static bool AcquireKeyedMutexWin32EXT(uint memory, ulong key, uint timeout)
	{
		return Delegates.pglAcquireKeyedMutexWin32EXT(memory, key, timeout);
	}

	[RequiredByFeature("GL_EXT_win32_keyed_mutex", Api = "gl|gles2")]
	public static bool ReleaseKeyedEXT(uint memory, ulong key)
	{
		return Delegates.pglReleaseKeyedMutexWin32EXT(memory, key);
	}

	[RequiredByFeature("GL_EXT_window_rectangles", Api = "gl|glcore|gles2")]
	public unsafe static void WindowRectanglesEXT(int mode, int count, int[] box)
	{
		fixed (int* box2 = box)
		{
			Delegates.pglWindowRectanglesEXT(mode, count, box2);
		}
	}

	[RequiredByFeature("GL_EXT_x11_sync_object")]
	public static int ImportSyncEXT(int external_sync_type, nint external_sync, uint flags)
	{
		return Delegates.pglImportSyncEXT(external_sync_type, external_sync, flags);
	}

	static Gl()
	{
		_StackExtensions = new Stack<Extensions>();
		_GetAddressDelegate = KhronosApi.GetProcAddressGLOS;
		PlatformExtensions = new PlatformExtensionsCollection();
		Version_100 = new KhronosVersion(1, 0, "gl");
		Version_110 = new KhronosVersion(1, 1, "gl");
		Version_120 = new KhronosVersion(1, 2, "gl");
		Version_130 = new KhronosVersion(1, 3, "gl");
		Version_140 = new KhronosVersion(1, 4, "gl");
		Version_150 = new KhronosVersion(1, 5, "gl");
		Version_200 = new KhronosVersion(2, 0, "gl");
		Version_210 = new KhronosVersion(2, 1, "gl");
		Version_300 = new KhronosVersion(3, 0, "gl");
		Version_310 = new KhronosVersion(3, 1, "gl");
		Version_320 = new KhronosVersion(3, 2, "gl");
		Version_330 = new KhronosVersion(3, 3, "gl");
		Version_400 = new KhronosVersion(4, 0, "gl");
		Version_410 = new KhronosVersion(4, 1, "gl");
		Version_420 = new KhronosVersion(4, 2, "gl");
		Version_430 = new KhronosVersion(4, 3, "gl");
		Version_440 = new KhronosVersion(4, 4, "gl");
		Version_450 = new KhronosVersion(4, 5, "gl");
		Version_460 = new KhronosVersion(4, 6, "gl");
		Version_100_ES = new KhronosVersion(1, 0, "gles1");
		Version_200_ES = new KhronosVersion(2, 0, "gles2");
		Version_300_ES = new KhronosVersion(3, 0, "gles2");
		Version_310_ES = new KhronosVersion(3, 1, "gles2");
		Version_320_ES = new KhronosVersion(3, 2, "gles2");
		Version_200_SC = new KhronosVersion(2, 0, "glsc2");
		string environmentVariable = Environment.GetEnvironmentVariable("OPENGL_NET_GL_STATIC_INIT");
		if (environmentVariable != null && environmentVariable == "NO")
		{
			return;
		}
		try
		{
			Initialize();
		}
		catch (NotSupportedException)
		{
		}
	}

	public static void Initialize()
	{
		if (_Initialized)
		{
			return;
		}
		_Initialized = true;
		string environmentVariable = Environment.GetEnvironmentVariable("OPENGL_NET_INIT");
		if (environmentVariable != null && environmentVariable == "NO")
		{
			return;
		}
		Khronos.KhronosApi.LogComment("OpenGL.Net is initializing");
		try
		{
			if (Egl.IsAvailable)
			{
				if (Platform.CurrentPlatformId == Platform.Id.Linux && !Glx.IsAvailable)
				{
					Egl.IsRequired = true;
				}
				string environmentVariable2 = Environment.GetEnvironmentVariable("OPENGL_NET_PLATFORM");
				if (environmentVariable2 != null && environmentVariable2 == "EGL")
				{
					Egl.IsRequired = true;
				}
			}
			NativeWindow = DeviceContext.CreateHiddenWindow();
			using (DeviceContext deviceContext = DeviceContext.Create())
			{
				nint num = deviceContext.CreateSimpleContext();
				if (num == IntPtr.Zero)
				{
					throw new NotImplementedException("unable to create a simple context");
				}
				if (!deviceContext.MakeCurrent(num))
				{
					throw new InvalidOperationException("unable to make current", deviceContext.GetPlatformException());
				}
				if (!Egl.IsRequired && Platform.CurrentPlatformId == Platform.Id.WindowsNT)
				{
					Wgl.BindAPI();
				}
				_CurrentVersion = KhronosVersion.Parse(GetString(StringName.Version));
				_CurrentExtensions = new Extensions();
				_CurrentExtensions.Query();
				deviceContext.QueryPlatformExtensions();
				_CurrentLimits = Limits.Query(CurrentVersion, _CurrentExtensions);
				string text = null;
				string api = _CurrentVersion.Api;
				if (!(api == "gl"))
				{
					if (api == "gles2")
					{
						text = GetString(StringName.ShadingLanguageVersion);
					}
				}
				else if (_CurrentVersion >= Version_200 || _CurrentExtensions.ShadingLanguage100_ARB)
				{
					text = GetString(StringName.ShadingLanguageVersion);
				}
				if (text != null)
				{
					_CurrentShadingVersion = GlslVersion.Parse(text, _CurrentVersion.Api);
				}
				_Vendor = GetString(StringName.Vendor);
				_Renderer = GetString(StringName.Renderer);
				if (KhronosApi.EnvDebug || KhronosApi.EnvExperimental)
				{
					Khronos.KhronosApi.CheckExtensionCommands<Gl>(CurrentVersion, CurrentExtensions, KhronosApi.EnvExperimental);
				}
				deviceContext.MakeCurrent(IntPtr.Zero);
				if (!deviceContext.DeleteContext(num))
				{
					throw new InvalidOperationException("unable to delete OpenGL context");
				}
			}
			Khronos.KhronosApi.LogComment("OpenGL.Net has been initialized");
		}
		catch (Exception initializationException)
		{
			InitializationException = initializationException;
			Khronos.KhronosApi.LogComment($"Unable to initialize OpenGL.Net: {InitializationException}");
		}
	}

	public static void PushExtensions()
	{
		_StackExtensions.Push(_CurrentExtensions);
		_CurrentExtensions = _CurrentExtensions.Clone();
	}

	public static void PopExtensions()
	{
		if (_StackExtensions.Count == 0)
		{
			throw new InvalidOperationException("extensions stack underflow");
		}
		_CurrentExtensions = _StackExtensions.Pop();
	}

	public static void EnableExperimentalExtensions()
	{
		Khronos.KhronosApi.CheckExtensionCommands<Gl>(CurrentVersion, CurrentExtensions, enableExtensions: true);
	}

	public static void EnableExperimentalExtensions(KhronosVersion version, Extensions extensions)
	{
		Khronos.KhronosApi.CheckExtensionCommands<Gl>(version, extensions, enableExtensions: true);
	}

	public static void BindAPI()
	{
		BindAPI(QueryContextVersionCore(), CurrentExtensions);
	}

	public static void BindAPI(KhronosVersion version, ExtensionsCollection extensions)
	{
		if (version == null)
		{
			throw new ArgumentNullException("version");
		}
		Khronos.KhronosApi.BindAPI<Gl>(GetPlatformLibrary(version), _GetAddressDelegate, version, extensions);
	}

	public static KhronosVersion QueryContextVersion()
	{
		KhronosVersion khronosVersion = KhronosVersion.Parse(GetString(StringName.Version));
		if (khronosVersion.Api == "gl" && khronosVersion >= Version_320)
		{
			Get(37158, out int data);
			string profile = ((((ulong)data & 2uL) != 0L) ? "compatibility" : ((((ulong)data & 1uL) == 0L) ? "compatibility" : "core"));
			return new KhronosVersion(khronosVersion, profile);
		}
		return new KhronosVersion(khronosVersion, "compatibility");
	}

	private static KhronosVersion QueryContextVersionCore()
	{
		if (!Egl.IsRequired)
		{
			BindAPIFunction(Version_100, null, "glGetError");
			BindAPIFunction(Version_100, null, "glGetString");
			BindAPIFunction(Version_100, null, "glGetIntegerv");
		}
		else
		{
			BindAPIFunction(Version_320_ES, null, "glGetError");
			BindAPIFunction(Version_320_ES, null, "glGetString");
			BindAPIFunction(Version_320_ES, null, "glGetIntegerv");
		}
		return QueryContextVersion();
	}

	internal static void BindAPIFunction(KhronosVersion version, ExtensionsCollection extensions, string functionName)
	{
		Khronos.KhronosApi.BindAPIFunction<Gl>(GetPlatformLibrary(version), functionName, _GetAddressDelegate, version, extensions);
	}

	private static string GetPlatformLibrary(KhronosVersion version)
	{
		switch (version.Api)
		{
		case "gl":
		case "glsc2":
			return Platform.CurrentPlatformId switch
			{
				Platform.Id.Linux => "libGL.so.1", 
				Platform.Id.MacOS => "/usr/X11/lib/libGL.1.dylib", 
				_ => "opengl32.dll", 
			};
		case "gles1":
			if (Platform.CurrentPlatformId == Platform.Id.Linux)
			{
				return "libGLESv2.so";
			}
			if (!Egl.IsRequired)
			{
				return "opengl32.dll";
			}
			return "libGLESv1_CM.dll";
		case "gles2":
			if (Platform.CurrentPlatformId == Platform.Id.Linux)
			{
				return "libGLESv2.so";
			}
			if (!Egl.IsRequired)
			{
				return "opengl32.dll";
			}
			return "libGLESv2.dll";
		default:
			throw new NotSupportedException($"binding API for OpenGL {version} not supported");
		}
	}

	public static void CheckErrors()
	{
		ErrorCode error = GetError();
		if (error != 0)
		{
			throw new GlException(error);
		}
	}

	private static void ClearErrors()
	{
		while (GetError() != 0)
		{
		}
	}

	[Conditional("GL_DEBUG")]
	private static void DebugCheckErrors(object returnValue)
	{
		CheckErrors();
	}

	[Conditional("GL_DEBUG")]
	protected new static void LogCommand(string name, object returnValue, params object[] args)
	{
		if (_LogContext == null)
		{
			_LogContext = new KhronosLogContext(typeof(Gl));
		}
		Khronos.KhronosApi.RaiseLog(new KhronosLogEventArgs(_LogContext, name, args, returnValue));
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	public unsafe static void TransformFeedbackVaryings(uint program, nint[] varyings, int bufferMode)
	{
		fixed (nint* varyings2 = varyings)
		{
			Delegates.pglTransformFeedbackVaryings_Unmanaged(program, varyings.Length, varyings2, bufferMode);
		}
	}

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_blend_equation_advanced", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public static void BlendBarrier()
	{
		Delegates.pglBlendBarrier();
	}

	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES3_2_compatibility", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_primitive_bounding_box", Api = "gles2")]
	[RequiredByFeature("GL_OES_primitive_bounding_box", Api = "gles2")]
	public static void Primitive(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
	{
		Delegates.pglPrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void CullFace(TriangleFace mode)
	{
		Delegates.pglCullFace((int)mode);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void FrontFace(FrontFaceDirection mode)
	{
		Delegates.pglFrontFace((int)mode);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void Hint(HintTarget target, HintMode mode)
	{
		Delegates.pglHint((int)target, (int)mode);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void LineWidth(float width)
	{
		Delegates.pglLineWidth(width);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	public static void PointSize(float size)
	{
		Delegates.pglPointSize(size);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_NV_polygon_mode", Api = "gles2")]
	public static void PolygonMode(TriangleFace face, PolygonMode mode)
	{
		Delegates.pglPolygonMode((int)face, (int)mode);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void Scissor(int x, int y, int width, int height)
	{
		Delegates.pglScissor(x, y, width, height);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void TexParameter(TextureTarget target, TextureParameterName pname, float param)
	{
		Delegates.pglTexParameterf((int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void TexParameter(TextureTarget target, TextureParameterName pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglTexParameterfv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void TexParameter(TextureTarget target, TextureParameterName pname, float* @params)
	{
		Delegates.pglTexParameterfv((int)target, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void TexParameterf<T>(TextureTarget target, TextureParameterName pname, T @params) where T : struct
	{
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglTexParameterfv((int)target, (int)pname, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void TexParameter(TextureTarget target, TextureParameterName pname, int param)
	{
		Delegates.pglTexParameteri((int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void TexParameter(TextureTarget target, TextureParameterName pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglTexParameteriv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void TexParameter(TextureTarget target, TextureParameterName pname, int* @params)
	{
		Delegates.pglTexParameteriv((int)target, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void TexParameteri<T>(TextureTarget target, TextureParameterName pname, T @params) where T : struct
	{
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglTexParameteriv((int)target, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	public static void TexImage1D(TextureTarget target, int level, InternalFormat internalFormat, int width, int border, PixelFormat format, PixelType type, nint data)
	{
		Delegates.pglTexImage1D((int)target, level, (int)internalFormat, width, border, (int)format, (int)type, data);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	public static void TexImage1D(TextureTarget target, int level, InternalFormat internalFormat, int width, int border, PixelFormat format, PixelType type, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			TexImage1D(target, level, internalFormat, width, border, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public static void TexImage2D(TextureTarget target, int level, InternalFormat internalFormat, int width, int height, int border, PixelFormat format, PixelType type, nint data)
	{
		Delegates.pglTexImage2D((int)target, level, (int)internalFormat, width, height, border, (int)format, (int)type, data);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public static void TexImage2D(TextureTarget target, int level, InternalFormat internalFormat, int width, int height, int border, PixelFormat format, PixelType type, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			TexImage2D(target, level, internalFormat, width, height, border, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	public static void DrawBuffer(DrawBufferMode buf)
	{
		Delegates.pglDrawBuffer((int)buf);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void Clear(ClearBufferMask mask)
	{
		Delegates.pglClear((uint)mask);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void ClearColor(float red, float green, float blue, float alpha)
	{
		Delegates.pglClearColor(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void ClearStencil(int s)
	{
		Delegates.pglClearStencil(s);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	public static void ClearDepth(double depth)
	{
		Delegates.pglClearDepth(depth);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void StencilMask(uint mask)
	{
		Delegates.pglStencilMask(mask);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void ColorMask(bool red, bool green, bool blue, bool alpha)
	{
		Delegates.pglColorMask(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void DepthMask(bool flag)
	{
		Delegates.pglDepthMask(flag);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void Disable(EnableCap cap)
	{
		Delegates.pglDisable((int)cap);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void Enable(EnableCap cap)
	{
		Delegates.pglEnable((int)cap);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void Finish()
	{
		Delegates.pglFinish();
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void Flush()
	{
		Delegates.pglFlush();
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void BlendFunc(BlendingFactor sfactor, BlendingFactor dfactor)
	{
		Delegates.pglBlendFunc((int)sfactor, (int)dfactor);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void LogicOp(LogicOp opcode)
	{
		Delegates.pglLogicOp((int)opcode);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void StencilFunc(StencilFunction func, int @ref, uint mask)
	{
		Delegates.pglStencilFunc((int)func, @ref, mask);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void StencilOp(StencilOp sfail, StencilOp dpfail, StencilOp dppass)
	{
		Delegates.pglStencilOp((int)sfail, (int)dpfail, (int)dppass);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void DepthFunc(DepthFunction func)
	{
		Delegates.pglDepthFunc((int)func);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	public static void PixelStore(PixelStoreParameter pname, float param)
	{
		Delegates.pglPixelStoref((int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void PixelStore(PixelStoreParameter pname, int param)
	{
		Delegates.pglPixelStorei((int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public static void ReadBuffer(ReadBufferMode mode)
	{
		Delegates.pglReadBuffer((int)mode);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public static void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, nint data)
	{
		Delegates.pglReadPixels(x, y, width, height, (int)format, (int)type, data);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void Get(int pname, [Out] byte[] data)
	{
		fixed (byte* data2 = data)
		{
			Delegates.pglGetBooleanv(pname, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void Get(GetPName pname, [Out] byte[] data)
	{
		fixed (byte* data2 = data)
		{
			Delegates.pglGetBooleanv((int)pname, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void Get(int pname, out byte data)
	{
		fixed (byte* data2 = &data)
		{
			Delegates.pglGetBooleanv(pname, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void Get(GetPName pname, out byte data)
	{
		fixed (byte* data2 = &data)
		{
			Delegates.pglGetBooleanv((int)pname, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void Get(GetPName pname, [Out] byte* data)
	{
		Delegates.pglGetBooleanv((int)pname, data);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void GetBoolean<T>(GetPName pname, out T data) where T : struct
	{
		data = default(T);
		TypedReference typedReference = __makeref(data);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetBooleanv((int)pname, (byte*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	public unsafe static void Get(int pname, [Out] double[] data)
	{
		fixed (double* data2 = data)
		{
			Delegates.pglGetDoublev(pname, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	public unsafe static void Get(GetPName pname, [Out] double[] data)
	{
		fixed (double* data2 = data)
		{
			Delegates.pglGetDoublev((int)pname, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	public unsafe static void Get(int pname, out double data)
	{
		fixed (double* data2 = &data)
		{
			Delegates.pglGetDoublev(pname, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	public unsafe static void Get(GetPName pname, out double data)
	{
		fixed (double* data2 = &data)
		{
			Delegates.pglGetDoublev((int)pname, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	public unsafe static void Get(GetPName pname, [Out] double* data)
	{
		Delegates.pglGetDoublev((int)pname, data);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	public unsafe static void GetDouble<T>(GetPName pname, out T data) where T : struct
	{
		data = default(T);
		TypedReference typedReference = __makeref(data);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetDoublev((int)pname, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static ErrorCode GetError()
	{
		return (ErrorCode)Delegates.pglGetError();
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void Get(int pname, [Out] float[] data)
	{
		fixed (float* data2 = data)
		{
			Delegates.pglGetFloatv(pname, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void Get(GetPName pname, [Out] float[] data)
	{
		fixed (float* data2 = data)
		{
			Delegates.pglGetFloatv((int)pname, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void Get(int pname, out float data)
	{
		fixed (float* data2 = &data)
		{
			Delegates.pglGetFloatv(pname, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void Get(GetPName pname, out float data)
	{
		fixed (float* data2 = &data)
		{
			Delegates.pglGetFloatv((int)pname, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void Get(GetPName pname, [Out] float* data)
	{
		Delegates.pglGetFloatv((int)pname, data);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void GetFloat<T>(GetPName pname, out T data) where T : struct
	{
		data = default(T);
		TypedReference typedReference = __makeref(data);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetFloatv((int)pname, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void Get(int pname, [Out] int[] data)
	{
		fixed (int* data2 = data)
		{
			Delegates.pglGetIntegerv(pname, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void Get(GetPName pname, [Out] int[] data)
	{
		fixed (int* data2 = data)
		{
			Delegates.pglGetIntegerv((int)pname, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void Get(int pname, out int data)
	{
		fixed (int* data2 = &data)
		{
			Delegates.pglGetIntegerv(pname, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void Get(GetPName pname, out int data)
	{
		fixed (int* data2 = &data)
		{
			Delegates.pglGetIntegerv((int)pname, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void Get(GetPName pname, [Out] int* data)
	{
		Delegates.pglGetIntegerv((int)pname, data);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void GetInteger<T>(GetPName pname, out T data) where T : struct
	{
		data = default(T);
		TypedReference typedReference = __makeref(data);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetIntegerv((int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static string GetString(StringName name)
	{
		return Khronos.KhronosApi.PtrToString(Delegates.pglGetString((int)name));
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	public static void GetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglGetTexImage((int)target, level, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	public static void GetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			GetTexImage(target, level, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetTexParameterfv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameter pname, out float @params)
	{
		fixed (float* params2 = &@params)
		{
			Delegates.pglGetTexParameterfv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] float* @params)
	{
		Delegates.pglGetTexParameterfv((int)target, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void GetTexParameterf<T>(TextureTarget target, GetTextureParameter pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetTexParameterfv((int)target, (int)pname, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetTexParameteriv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameter pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetTexParameteriv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] int* @params)
	{
		Delegates.pglGetTexParameteriv((int)target, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void GetTexParameteri<T>(TextureTarget target, GetTextureParameter pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetTexParameteriv((int)target, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	public unsafe static void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetTexLevelParameterfv((int)target, level, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	public unsafe static void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, out float @params)
	{
		fixed (float* params2 = &@params)
		{
			Delegates.pglGetTexLevelParameterfv((int)target, level, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	public unsafe static void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, [Out] float* @params)
	{
		Delegates.pglGetTexLevelParameterfv((int)target, level, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	public unsafe static void GetTexLevelParameterf<T>(TextureTarget target, int level, GetTextureParameter pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetTexLevelParameterfv((int)target, level, (int)pname, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	public unsafe static void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetTexLevelParameteriv((int)target, level, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	public unsafe static void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetTexLevelParameteriv((int)target, level, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	public unsafe static void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, [Out] int* @params)
	{
		Delegates.pglGetTexLevelParameteriv((int)target, level, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	public unsafe static void GetTexLevelParameteri<T>(TextureTarget target, int level, GetTextureParameter pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetTexLevelParameteriv((int)target, level, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static bool IsEnabled(EnableCap cap)
	{
		return Delegates.pglIsEnabled((int)cap);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	public static void DepthRange(double n, double f)
	{
		Delegates.pglDepthRange(n, f);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void Viewport(int x, int y, int width, int height)
	{
		Delegates.pglViewport(x, y, width, height);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void NewList(uint list, ListMode mode)
	{
		Delegates.pglNewList(list, (int)mode);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void EndList()
	{
		Delegates.pglEndList();
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void CallList(uint list)
	{
		Delegates.pglCallList(list);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void CallLists(int n, ListNameType type, nint lists)
	{
		Delegates.pglCallLists(n, (int)type, lists);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void CallLists(int n, ListNameType type, object lists)
	{
		GCHandle gCHandle = GCHandle.Alloc(lists, GCHandleType.Pinned);
		try
		{
			CallLists(n, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void DeleteLists(uint list, int range)
	{
		Delegates.pglDeleteLists(list, range);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static uint GenLists(int range)
	{
		return Delegates.pglGenLists(range);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void ListBase(uint @base)
	{
		Delegates.pglListBase(@base);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Begin(PrimitiveType mode)
	{
		Delegates.pglBegin((int)mode);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte[] bitmap)
	{
		fixed (byte* bitmap2 = bitmap)
		{
			Delegates.pglBitmap(width, height, xorig, yorig, xmove, ymove, bitmap2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Color3(sbyte red, sbyte green, sbyte blue)
	{
		Delegates.pglColor3b(red, green, blue);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Color3(sbyte[] v)
	{
		fixed (sbyte* v2 = v)
		{
			Delegates.pglColor3bv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Color3(double red, double green, double blue)
	{
		Delegates.pglColor3d(red, green, blue);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Color3(double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglColor3dv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Color3(float red, float green, float blue)
	{
		Delegates.pglColor3f(red, green, blue);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Color3(float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglColor3fv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Color3(int red, int green, int blue)
	{
		Delegates.pglColor3i(red, green, blue);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Color3(int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglColor3iv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Color3(short red, short green, short blue)
	{
		Delegates.pglColor3s(red, green, blue);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Color3(short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglColor3sv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Color3(byte red, byte green, byte blue)
	{
		Delegates.pglColor3ub(red, green, blue);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Color3(byte[] v)
	{
		fixed (byte* v2 = v)
		{
			Delegates.pglColor3ubv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Color3(uint red, uint green, uint blue)
	{
		Delegates.pglColor3ui(red, green, blue);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Color3(uint[] v)
	{
		fixed (uint* v2 = v)
		{
			Delegates.pglColor3uiv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Color3(ushort red, ushort green, ushort blue)
	{
		Delegates.pglColor3us(red, green, blue);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Color3(ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglColor3usv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Color4(sbyte red, sbyte green, sbyte blue, sbyte alpha)
	{
		Delegates.pglColor4b(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Color4(sbyte[] v)
	{
		fixed (sbyte* v2 = v)
		{
			Delegates.pglColor4bv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Color4(double red, double green, double blue, double alpha)
	{
		Delegates.pglColor4d(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Color4(double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglColor4dv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Color4(float red, float green, float blue, float alpha)
	{
		Delegates.pglColor4f(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Color4(float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglColor4fv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Color4(int red, int green, int blue, int alpha)
	{
		Delegates.pglColor4i(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Color4(int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglColor4iv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Color4(short red, short green, short blue, short alpha)
	{
		Delegates.pglColor4s(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Color4(short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglColor4sv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Color4(byte red, byte green, byte blue, byte alpha)
	{
		Delegates.pglColor4ub(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Color4(byte[] v)
	{
		fixed (byte* v2 = v)
		{
			Delegates.pglColor4ubv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Color4(uint red, uint green, uint blue, uint alpha)
	{
		Delegates.pglColor4ui(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Color4(uint[] v)
	{
		fixed (uint* v2 = v)
		{
			Delegates.pglColor4uiv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Color4(ushort red, ushort green, ushort blue, ushort alpha)
	{
		Delegates.pglColor4us(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Color4(ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglColor4usv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void EdgeFlag(bool flag)
	{
		Delegates.pglEdgeFlag(flag);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void EdgeFlag(byte[] flag)
	{
		fixed (byte* flag2 = flag)
		{
			Delegates.pglEdgeFlagv(flag2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void End()
	{
		Delegates.pglEnd();
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Index(double c)
	{
		Delegates.pglIndexd(c);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Index(double[] c)
	{
		fixed (double* c2 = c)
		{
			Delegates.pglIndexdv(c2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Index(float c)
	{
		Delegates.pglIndexf(c);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Index(float[] c)
	{
		fixed (float* c2 = c)
		{
			Delegates.pglIndexfv(c2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Index(int c)
	{
		Delegates.pglIndexi(c);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Index(int[] c)
	{
		fixed (int* c2 = c)
		{
			Delegates.pglIndexiv(c2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Index(short c)
	{
		Delegates.pglIndexs(c);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Index(short[] c)
	{
		fixed (short* c2 = c)
		{
			Delegates.pglIndexsv(c2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Normal3(sbyte nx, sbyte ny, sbyte nz)
	{
		Delegates.pglNormal3b(nx, ny, nz);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Normal3(sbyte[] v)
	{
		fixed (sbyte* v2 = v)
		{
			Delegates.pglNormal3bv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Normal3(double nx, double ny, double nz)
	{
		Delegates.pglNormal3d(nx, ny, nz);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Normal3(double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglNormal3dv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Normal3(float nx, float ny, float nz)
	{
		Delegates.pglNormal3f(nx, ny, nz);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Normal3(float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglNormal3fv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Normal3(int nx, int ny, int nz)
	{
		Delegates.pglNormal3i(nx, ny, nz);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Normal3(int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglNormal3iv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Normal3(short nx, short ny, short nz)
	{
		Delegates.pglNormal3s(nx, ny, nz);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Normal3(short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglNormal3sv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void RasterPos2(double x, double y)
	{
		Delegates.pglRasterPos2d(x, y);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void RasterPos2(double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglRasterPos2dv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void RasterPos2(float x, float y)
	{
		Delegates.pglRasterPos2f(x, y);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void RasterPos2(float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglRasterPos2fv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void RasterPos2(int x, int y)
	{
		Delegates.pglRasterPos2i(x, y);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void RasterPos2(int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglRasterPos2iv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void RasterPos2(short x, short y)
	{
		Delegates.pglRasterPos2s(x, y);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void RasterPos2(short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglRasterPos2sv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void RasterPos3(double x, double y, double z)
	{
		Delegates.pglRasterPos3d(x, y, z);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void RasterPos3(double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglRasterPos3dv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void RasterPos3(float x, float y, float z)
	{
		Delegates.pglRasterPos3f(x, y, z);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void RasterPos3(float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglRasterPos3fv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void RasterPos3(int x, int y, int z)
	{
		Delegates.pglRasterPos3i(x, y, z);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void RasterPos3(int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglRasterPos3iv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void RasterPos3(short x, short y, short z)
	{
		Delegates.pglRasterPos3s(x, y, z);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void RasterPos3(short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglRasterPos3sv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void RasterPos4(double x, double y, double z, double w)
	{
		Delegates.pglRasterPos4d(x, y, z, w);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void RasterPos4(double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglRasterPos4dv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void RasterPos4(float x, float y, float z, float w)
	{
		Delegates.pglRasterPos4f(x, y, z, w);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void RasterPos4(float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglRasterPos4fv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void RasterPos4(int x, int y, int z, int w)
	{
		Delegates.pglRasterPos4i(x, y, z, w);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void RasterPos4(int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglRasterPos4iv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void RasterPos4(short x, short y, short z, short w)
	{
		Delegates.pglRasterPos4s(x, y, z, w);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void RasterPos4(short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglRasterPos4sv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Rect(double x1, double y1, double x2, double y2)
	{
		Delegates.pglRectd(x1, y1, x2, y2);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Rect(double[] v1, double[] v2)
	{
		fixed (double* v3 = v1)
		{
			fixed (double* v4 = v2)
			{
				Delegates.pglRectdv(v3, v4);
			}
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Rect(float x1, float y1, float x2, float y2)
	{
		Delegates.pglRectf(x1, y1, x2, y2);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Rect(float[] v1, float[] v2)
	{
		fixed (float* v3 = v1)
		{
			fixed (float* v4 = v2)
			{
				Delegates.pglRectfv(v3, v4);
			}
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Rect(int x1, int y1, int x2, int y2)
	{
		Delegates.pglRecti(x1, y1, x2, y2);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Rect(int[] v1, int[] v2)
	{
		fixed (int* v3 = v1)
		{
			fixed (int* v4 = v2)
			{
				Delegates.pglRectiv(v3, v4);
			}
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Rect(short x1, short y1, short x2, short y2)
	{
		Delegates.pglRects(x1, y1, x2, y2);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Rect(short[] v1, short[] v2)
	{
		fixed (short* v3 = v1)
		{
			fixed (short* v4 = v2)
			{
				Delegates.pglRectsv(v3, v4);
			}
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexCoord1(double s)
	{
		Delegates.pglTexCoord1d(s);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexCoord1(double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglTexCoord1dv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexCoord1(float s)
	{
		Delegates.pglTexCoord1f(s);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexCoord1(float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglTexCoord1fv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexCoord1(int s)
	{
		Delegates.pglTexCoord1i(s);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexCoord1(int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglTexCoord1iv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexCoord1(short s)
	{
		Delegates.pglTexCoord1s(s);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexCoord1(short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglTexCoord1sv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexCoord2(double s, double t)
	{
		Delegates.pglTexCoord2d(s, t);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexCoord2(double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglTexCoord2dv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexCoord2(float s, float t)
	{
		Delegates.pglTexCoord2f(s, t);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexCoord2(float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglTexCoord2fv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexCoord2(int s, int t)
	{
		Delegates.pglTexCoord2i(s, t);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexCoord2(int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglTexCoord2iv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexCoord2(short s, short t)
	{
		Delegates.pglTexCoord2s(s, t);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexCoord2(short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglTexCoord2sv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexCoord3(double s, double t, double r)
	{
		Delegates.pglTexCoord3d(s, t, r);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexCoord3(double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglTexCoord3dv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexCoord3(float s, float t, float r)
	{
		Delegates.pglTexCoord3f(s, t, r);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexCoord3(float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglTexCoord3fv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexCoord3(int s, int t, int r)
	{
		Delegates.pglTexCoord3i(s, t, r);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexCoord3(int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglTexCoord3iv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexCoord3(short s, short t, short r)
	{
		Delegates.pglTexCoord3s(s, t, r);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexCoord3(short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglTexCoord3sv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexCoord4(double s, double t, double r, double q)
	{
		Delegates.pglTexCoord4d(s, t, r, q);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexCoord4(double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglTexCoord4dv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexCoord4(float s, float t, float r, float q)
	{
		Delegates.pglTexCoord4f(s, t, r, q);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexCoord4(float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglTexCoord4fv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexCoord4(int s, int t, int r, int q)
	{
		Delegates.pglTexCoord4i(s, t, r, q);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexCoord4(int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglTexCoord4iv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexCoord4(short s, short t, short r, short q)
	{
		Delegates.pglTexCoord4s(s, t, r, q);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexCoord4(short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglTexCoord4sv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Vertex2(double x, double y)
	{
		Delegates.pglVertex2d(x, y);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Vertex2(double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglVertex2dv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Vertex2(float x, float y)
	{
		Delegates.pglVertex2f(x, y);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Vertex2(float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglVertex2fv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Vertex2(int x, int y)
	{
		Delegates.pglVertex2i(x, y);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Vertex2(int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglVertex2iv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Vertex2(short x, short y)
	{
		Delegates.pglVertex2s(x, y);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Vertex2(short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglVertex2sv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Vertex3(double x, double y, double z)
	{
		Delegates.pglVertex3d(x, y, z);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Vertex3(double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglVertex3dv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Vertex3(float x, float y, float z)
	{
		Delegates.pglVertex3f(x, y, z);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Vertex3(float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglVertex3fv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Vertex3(int x, int y, int z)
	{
		Delegates.pglVertex3i(x, y, z);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Vertex3(int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglVertex3iv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Vertex3(short x, short y, short z)
	{
		Delegates.pglVertex3s(x, y, z);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Vertex3(short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglVertex3sv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Vertex4(double x, double y, double z, double w)
	{
		Delegates.pglVertex4d(x, y, z, w);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Vertex4(double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglVertex4dv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Vertex4(float x, float y, float z, float w)
	{
		Delegates.pglVertex4f(x, y, z, w);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Vertex4(float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglVertex4fv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Vertex4(int x, int y, int z, int w)
	{
		Delegates.pglVertex4i(x, y, z, w);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Vertex4(int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglVertex4iv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Vertex4(short x, short y, short z, short w)
	{
		Delegates.pglVertex4s(x, y, z, w);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Vertex4(short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglVertex4sv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void ClipPlane(ClipPlaneName plane, double[] equation)
	{
		fixed (double* equation2 = equation)
		{
			Delegates.pglClipPlane((int)plane, equation2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void ColorMaterial(TriangleFace face, ColorMaterialParameter mode)
	{
		Delegates.pglColorMaterial((int)face, (int)mode);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Fog(FogParameter pname, float param)
	{
		Delegates.pglFogf((int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Fog(FogParameter pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglFogfv((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Fog(FogParameter pname, int param)
	{
		Delegates.pglFogi((int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Fog(FogParameter pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglFogiv((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Light(LightName light, LightParameter pname, float param)
	{
		Delegates.pglLightf((int)light, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Light(LightName light, LightParameter pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglLightfv((int)light, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Light(LightName light, LightParameter pname, int param)
	{
		Delegates.pglLighti((int)light, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Light(LightName light, LightParameter pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglLightiv((int)light, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void LightModel(LightModelParameter pname, float param)
	{
		Delegates.pglLightModelf((int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void LightModel(LightModelParameter pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglLightModelfv((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void LightModel(LightModelParameter pname, int param)
	{
		Delegates.pglLightModeli((int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void LightModel(LightModelParameter pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglLightModeliv((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void LineStipple(int factor, ushort pattern)
	{
		Delegates.pglLineStipple(factor, pattern);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Material(TriangleFace face, MaterialParameter pname, float param)
	{
		Delegates.pglMaterialf((int)face, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Material(TriangleFace face, MaterialParameter pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglMaterialfv((int)face, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Material(TriangleFace face, MaterialParameter pname, int param)
	{
		Delegates.pglMateriali((int)face, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Material(TriangleFace face, MaterialParameter pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglMaterialiv((int)face, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void PolygonStipple(byte[] mask)
	{
		fixed (byte* mask2 = mask)
		{
			Delegates.pglPolygonStipple(mask2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void ShadeModel(ShadingModel mode)
	{
		Delegates.pglShadeModel((int)mode);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, float param)
	{
		Delegates.pglTexEnvf((int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglTexEnvfv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, int param)
	{
		Delegates.pglTexEnvi((int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglTexEnviv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexGen(TextureCoordName coord, TextureGenParameter pname, double param)
	{
		Delegates.pglTexGend((int)coord, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexGen(TextureCoordName coord, TextureGenParameter pname, double[] @params)
	{
		fixed (double* params2 = @params)
		{
			Delegates.pglTexGendv((int)coord, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexGen(TextureCoordName coord, TextureGenParameter pname, float param)
	{
		Delegates.pglTexGenf((int)coord, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexGen(TextureCoordName coord, TextureGenParameter pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglTexGenfv((int)coord, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexGen(TextureCoordName coord, TextureGenParameter pname, int param)
	{
		Delegates.pglTexGeni((int)coord, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void TexGen(TextureCoordName coord, TextureGenParameter pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglTexGeniv((int)coord, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void FeedbackBuffer(int size, FeedbackType type, params float[] buffer)
	{
		fixed (float* buffer2 = buffer)
		{
			Delegates.pglFeedbackBuffer(size, (int)type, buffer2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void FeedbackBuffer(FeedbackType type, params float[] buffer)
	{
		fixed (float* buffer2 = buffer)
		{
			Delegates.pglFeedbackBuffer(buffer.Length, (int)type, buffer2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void SelectBuffer(params uint[] buffer)
	{
		fixed (uint* buffer2 = buffer)
		{
			Delegates.pglSelectBuffer(buffer.Length, buffer2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static int RenderMode(RenderingMode mode)
	{
		return Delegates.pglRenderMode((int)mode);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void InitName()
	{
		Delegates.pglInitNames();
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void LoadName(uint name)
	{
		Delegates.pglLoadName(name);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void PassThrough(float token)
	{
		Delegates.pglPassThrough(token);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void PopName()
	{
		Delegates.pglPopName();
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void PushName(uint name)
	{
		Delegates.pglPushName(name);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void ClearAccum(float red, float green, float blue, float alpha)
	{
		Delegates.pglClearAccum(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void ClearIndex(float c)
	{
		Delegates.pglClearIndex(c);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void IndexMask(uint mask)
	{
		Delegates.pglIndexMask(mask);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Accum(AccumOp op, float value)
	{
		Delegates.pglAccum((int)op, value);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void PopAttrib()
	{
		Delegates.pglPopAttrib();
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void PushAttrib(AttribMask mask)
	{
		Delegates.pglPushAttrib((uint)mask);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Map1(MapTarget target, double u1, double u2, int stride, int order, double[] points)
	{
		fixed (double* points2 = points)
		{
			Delegates.pglMap1d((int)target, u1, u2, stride, order, points2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Map1(MapTarget target, float u1, float u2, int stride, int order, float[] points)
	{
		fixed (float* points2 = points)
		{
			Delegates.pglMap1f((int)target, u1, u2, stride, order, points2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Map2(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points)
	{
		fixed (double* points2 = points)
		{
			Delegates.pglMap2d((int)target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Map2(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points)
	{
		fixed (float* points2 = points)
		{
			Delegates.pglMap2f((int)target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MapGrid1(int un, double u1, double u2)
	{
		Delegates.pglMapGrid1d(un, u1, u2);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MapGrid1(int un, float u1, float u2)
	{
		Delegates.pglMapGrid1f(un, u1, u2);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MapGrid2(int un, double u1, double u2, int vn, double v1, double v2)
	{
		Delegates.pglMapGrid2d(un, u1, u2, vn, v1, v2);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MapGrid2(int un, float u1, float u2, int vn, float v1, float v2)
	{
		Delegates.pglMapGrid2f(un, u1, u2, vn, v1, v2);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void EvalCoord1(double u)
	{
		Delegates.pglEvalCoord1d(u);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void EvalCoord1(double[] u)
	{
		fixed (double* u2 = u)
		{
			Delegates.pglEvalCoord1dv(u2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void EvalCoord1(float u)
	{
		Delegates.pglEvalCoord1f(u);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void EvalCoord1(float[] u)
	{
		fixed (float* u2 = u)
		{
			Delegates.pglEvalCoord1fv(u2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void EvalCoord2(double u, double v)
	{
		Delegates.pglEvalCoord2d(u, v);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void EvalCoord2(double[] u)
	{
		fixed (double* u2 = u)
		{
			Delegates.pglEvalCoord2dv(u2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void EvalCoord2(float u, float v)
	{
		Delegates.pglEvalCoord2f(u, v);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void EvalCoord2(float[] u)
	{
		fixed (float* u2 = u)
		{
			Delegates.pglEvalCoord2fv(u2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void EvalMesh1(MeshMode1 mode, int i1, int i2)
	{
		Delegates.pglEvalMesh1((int)mode, i1, i2);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void EvalPoint1(int i)
	{
		Delegates.pglEvalPoint1(i);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void EvalMesh2(MeshMode2 mode, int i1, int i2, int j1, int j2)
	{
		Delegates.pglEvalMesh2((int)mode, i1, i2, j1, j2);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void EvalPoint2(int i, int j)
	{
		Delegates.pglEvalPoint2(i, j);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void AlphaFunc(AlphaFunction func, float @ref)
	{
		Delegates.pglAlphaFunc((int)func, @ref);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void PixelZoom(float xfactor, float yfactor)
	{
		Delegates.pglPixelZoom(xfactor, yfactor);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void PixelTransfer(PixelTransferParameter pname, float param)
	{
		Delegates.pglPixelTransferf((int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void PixelTransfer(PixelTransferParameter pname, int param)
	{
		Delegates.pglPixelTransferi((int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void PixelMap(PixelMap map, int mapsize, float[] values)
	{
		fixed (float* values2 = values)
		{
			Delegates.pglPixelMapfv((int)map, mapsize, values2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void PixelMap(PixelMap map, float[] values)
	{
		fixed (float* values2 = values)
		{
			Delegates.pglPixelMapfv((int)map, values.Length, values2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void PixelMap(PixelMap map, int mapsize, uint[] values)
	{
		fixed (uint* values2 = values)
		{
			Delegates.pglPixelMapuiv((int)map, mapsize, values2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void PixelMap(PixelMap map, uint[] values)
	{
		fixed (uint* values2 = values)
		{
			Delegates.pglPixelMapuiv((int)map, values.Length, values2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void PixelMap(PixelMap map, int mapsize, ushort[] values)
	{
		fixed (ushort* values2 = values)
		{
			Delegates.pglPixelMapusv((int)map, mapsize, values2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void PixelMap(PixelMap map, ushort[] values)
	{
		fixed (ushort* values2 = values)
		{
			Delegates.pglPixelMapusv((int)map, values.Length, values2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void CopyPixels(int x, int y, int width, int height, PixelCopyType type)
	{
		Delegates.pglCopyPixels(x, y, width, height, (int)type);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void DrawPixels(int width, int height, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglDrawPixels(width, height, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void DrawPixels(int width, int height, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			DrawPixels(width, height, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void GetClipPlane(ClipPlaneName plane, [Out] double[] equation)
	{
		fixed (double* equation2 = equation)
		{
			Delegates.pglGetClipPlane((int)plane, equation2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void GetLight(LightName light, LightParameter pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetLightfv((int)light, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void GetLight(LightName light, LightParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetLightiv((int)light, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void GetMap(MapTarget target, GetMapQuery query, [Out] double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglGetMapdv((int)target, (int)query, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void GetMap(MapTarget target, GetMapQuery query, [Out] float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglGetMapfv((int)target, (int)query, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void GetMap(MapTarget target, GetMapQuery query, [Out] int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglGetMapiv((int)target, (int)query, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void GetMaterial(TriangleFace face, MaterialParameter pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetMaterialfv((int)face, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void GetMaterial(TriangleFace face, MaterialParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetMaterialiv((int)face, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void GetPixelMap(PixelMap map, [Out] float[] values)
	{
		fixed (float* values2 = values)
		{
			Delegates.pglGetPixelMapfv((int)map, values2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void GetPixelMap(PixelMap map, [Out] uint[] values)
	{
		fixed (uint* values2 = values)
		{
			Delegates.pglGetPixelMapuiv((int)map, values2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void GetPixelMap(PixelMap map, [Out] ushort[] values)
	{
		fixed (ushort* values2 = values)
		{
			Delegates.pglGetPixelMapusv((int)map, values2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void GetPolygonStipple([Out] byte[] mask)
	{
		fixed (byte* mask2 = mask)
		{
			Delegates.pglGetPolygonStipple(mask2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void GetTexEnv(TextureEnvTarget target, TextureEnvParameter pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetTexEnvfv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void GetTexEnv(TextureEnvTarget target, TextureEnvParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetTexEnviv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void GetTexGen(TextureCoordName coord, TextureGenParameter pname, [Out] double[] @params)
	{
		fixed (double* params2 = @params)
		{
			Delegates.pglGetTexGendv((int)coord, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void GetTexGen(TextureCoordName coord, TextureGenParameter pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetTexGenfv((int)coord, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void GetTexGen(TextureCoordName coord, TextureGenParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetTexGeniv((int)coord, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static bool IsList(uint list)
	{
		return Delegates.pglIsList(list);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Frustum(double left, double right, double bottom, double top, double zNear, double zFar)
	{
		Delegates.pglFrustum(left, right, bottom, top, zNear, zFar);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void LoadIdentity()
	{
		Delegates.pglLoadIdentity();
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void LoadMatrix(float[] m)
	{
		fixed (float* m2 = m)
		{
			Delegates.pglLoadMatrixf(m2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void LoadMatrix(float* m)
	{
		Delegates.pglLoadMatrixf(m);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void LoadMatrixf<T>(T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglLoadMatrixf((float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void LoadMatrix(double[] m)
	{
		fixed (double* m2 = m)
		{
			Delegates.pglLoadMatrixd(m2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void LoadMatrix(double* m)
	{
		Delegates.pglLoadMatrixd(m);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void LoadMatrixd<T>(T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglLoadMatrixd((double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MatrixMode(MatrixMode mode)
	{
		Delegates.pglMatrixMode((int)mode);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultMatrix(float[] m)
	{
		fixed (float* m2 = m)
		{
			Delegates.pglMultMatrixf(m2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultMatrix(float* m)
	{
		Delegates.pglMultMatrixf(m);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultMatrixf<T>(T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglMultMatrixf((float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultMatrix(double[] m)
	{
		fixed (double* m2 = m)
		{
			Delegates.pglMultMatrixd(m2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultMatrix(double* m)
	{
		Delegates.pglMultMatrixd(m);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultMatrixd<T>(T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglMultMatrixd((double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Ortho(double left, double right, double bottom, double top, double zNear, double zFar)
	{
		Delegates.pglOrtho(left, right, bottom, top, zNear, zFar);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void PopMatrix()
	{
		Delegates.pglPopMatrix();
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void PushMatrix()
	{
		Delegates.pglPushMatrix();
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Rotate(double angle, double x, double y, double z)
	{
		Delegates.pglRotated(angle, x, y, z);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Rotate(float angle, float x, float y, float z)
	{
		Delegates.pglRotatef(angle, x, y, z);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Scale(double x, double y, double z)
	{
		Delegates.pglScaled(x, y, z);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Scale(float x, float y, float z)
	{
		Delegates.pglScalef(x, y, z);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Translate(double x, double y, double z)
	{
		Delegates.pglTranslated(x, y, z);
	}

	[RequiredByFeature("GL_VERSION_1_0")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Translate(float x, float y, float z)
	{
		Delegates.pglTranslatef(x, y, z);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	public static void DrawArrays(PrimitiveType mode, int first, int count)
	{
		Delegates.pglDrawArrays((int)mode, first, count);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public static void DrawElements(PrimitiveType mode, int count, DrawElementsType type, nint indices)
	{
		Delegates.pglDrawElements((int)mode, count, (int)type, indices);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public static void DrawElements(PrimitiveType mode, int count, DrawElementsType type, object indices)
	{
		GCHandle gCHandle = GCHandle.Alloc(indices, GCHandleType.Pinned);
		try
		{
			DrawElements(mode, count, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RequiredByFeature("GL_KHR_debug")]
	[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void GetPointer(GetPointervPName pname, out nint @params)
	{
		fixed (nint* params2 = &@params)
		{
			Delegates.pglGetPointerv((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RequiredByFeature("GL_KHR_debug")]
	[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void GetPointer(GetPointervPName pname, object @params)
	{
		GCHandle gCHandle = GCHandle.Alloc(@params, GCHandleType.Pinned);
		try
		{
			GetPointer(pname, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void PolygonOffset(float factor, float units)
	{
		Delegates.pglPolygonOffset(factor, units);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_copy_texture")]
	public static void CopyTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int border)
	{
		Delegates.pglCopyTexImage1D((int)target, level, (int)internalformat, x, y, width, border);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_copy_texture")]
	public static void CopyTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int height, int border)
	{
		Delegates.pglCopyTexImage2D((int)target, level, (int)internalformat, x, y, width, height, border);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_copy_texture")]
	public static void CopyTexSubImage1D(TextureTarget target, int level, int xoffset, int x, int y, int width)
	{
		Delegates.pglCopyTexSubImage1D((int)target, level, xoffset, x, y, width);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_copy_texture")]
	public static void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
	{
		Delegates.pglCopyTexSubImage2D((int)target, level, xoffset, yoffset, x, y, width, height);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_subtexture")]
	public static void TexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglTexSubImage1D((int)target, level, xoffset, width, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_subtexture")]
	public static void TexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			TexSubImage1D(target, level, xoffset, width, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_subtexture")]
	public static void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglTexSubImage2D((int)target, level, xoffset, yoffset, width, height, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_subtexture")]
	public static void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_texture_object")]
	public static void BindTexture(TextureTarget target, uint texture)
	{
		Delegates.pglBindTexture((int)target, texture);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public unsafe static void DeleteTextures(params uint[] textures)
	{
		fixed (uint* textures2 = textures)
		{
			Delegates.pglDeleteTextures(textures.Length, textures2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void GenTextures(uint[] textures)
	{
		fixed (uint* textures2 = textures)
		{
			Delegates.pglGenTextures(textures.Length, textures2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static uint GenTexture()
	{
		uint result = default(uint);
		Delegates.pglGenTextures(1, &result);
		return result;
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public static bool IsTexture(uint texture)
	{
		return Delegates.pglIsTexture(texture);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_vertex_array")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void ArrayElement(int i)
	{
		Delegates.pglArrayElement(i);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void ColorPointer(int size, ColorPointerType type, int stride, nint pointer)
	{
		Delegates.pglColorPointer(size, (int)type, stride, pointer);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void ColorPointer(int size, ColorPointerType type, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			ColorPointer(size, type, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void DisableClientState(EnableCap array)
	{
		Delegates.pglDisableClientState((int)array);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void EdgeFlagPointer(int stride, nint pointer)
	{
		Delegates.pglEdgeFlagPointer(stride, pointer);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void EdgeFlagPointer(int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			EdgeFlagPointer(stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void EnableClientState(EnableCap array)
	{
		Delegates.pglEnableClientState((int)array);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void IndexPointer(IndexPointerType type, int stride, nint pointer)
	{
		Delegates.pglIndexPointer((int)type, stride, pointer);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void IndexPointer(IndexPointerType type, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			IndexPointer(type, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void InterleavedArrays(InterleavedArrayFormat format, int stride, nint pointer)
	{
		Delegates.pglInterleavedArrays((int)format, stride, pointer);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void InterleavedArrays(InterleavedArrayFormat format, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			InterleavedArrays(format, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void NormalPointer(NormalPointerType type, int stride, nint pointer)
	{
		Delegates.pglNormalPointer((int)type, stride, pointer);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void NormalPointer(NormalPointerType type, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			NormalPointer(type, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexCoordPointer(int size, TexCoordPointerType type, int stride, nint pointer)
	{
		Delegates.pglTexCoordPointer(size, (int)type, stride, pointer);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void TexCoordPointer(int size, TexCoordPointerType type, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			TexCoordPointer(size, type, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void VertexPointer(int size, VertexPointerType type, int stride, nint pointer)
	{
		Delegates.pglVertexPointer(size, (int)type, stride, pointer);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void VertexPointer(int size, VertexPointerType type, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			VertexPointer(size, type, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static bool AreTexturesResident(uint[] textures, [Out] byte[] residences)
	{
		bool result;
		fixed (uint* textures2 = textures)
		{
			fixed (byte* residences2 = residences)
			{
				result = Delegates.pglAreTexturesResident(textures.Length, textures2, residences2);
			}
		}
		return result;
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RequiredByFeature("GL_EXT_texture_object")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void PrioritizeTextures(uint[] textures, params float[] priorities)
	{
		fixed (uint* textures2 = textures)
		{
			fixed (float* priorities2 = priorities)
			{
				Delegates.pglPrioritizeTextures(textures.Length, textures2, priorities2);
			}
		}
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void Index(byte c)
	{
		Delegates.pglIndexub(c);
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void Index(byte[] c)
	{
		fixed (byte* c2 = c)
		{
			Delegates.pglIndexubv(c2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void PopClientAttrib()
	{
		Delegates.pglPopClientAttrib();
	}

	[RequiredByFeature("GL_VERSION_1_1")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void PushClientAttrib(ClientAttribMask mask)
	{
		Delegates.pglPushClientAttrib((uint)mask);
	}

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_range_elements")]
	public static void DrawRangeElements(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint indices)
	{
		Delegates.pglDrawRangeElements((int)mode, start, end, count, (int)type, indices);
	}

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_draw_range_elements")]
	public static void DrawRangeElements(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, object indices)
	{
		GCHandle gCHandle = GCHandle.Alloc(indices, GCHandleType.Pinned);
		try
		{
			DrawRangeElements(mode, start, end, count, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture3D")]
	public static void TexImage3D(TextureTarget target, int level, InternalFormat internalFormat, int width, int height, int depth, int border, PixelFormat format, PixelType type, nint data)
	{
		Delegates.pglTexImage3D((int)target, level, (int)internalFormat, width, height, depth, border, (int)format, (int)type, data);
	}

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture3D")]
	public static void TexImage3D(TextureTarget target, int level, InternalFormat internalFormat, int width, int height, int depth, int border, PixelFormat format, PixelType type, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			TexImage3D(target, level, internalFormat, width, height, depth, border, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture3D")]
	public static void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglTexSubImage3D((int)target, level, xoffset, yoffset, zoffset, width, height, depth, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture3D")]
	public static void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_copy_texture")]
	public static void CopyTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
	{
		Delegates.pglCopyTexSubImage3D((int)target, level, xoffset, yoffset, zoffset, x, y, width, height);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multitexture")]
	public static void ActiveTexture(TextureUnit texture)
	{
		Delegates.pglActiveTexture((int)texture);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_multisample")]
	public static void SampleCoverage(float value, bool invert)
	{
		Delegates.pglSampleCoverage(value, invert);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public static void CompressedTexImage3D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, nint data)
	{
		Delegates.pglCompressedTexImage3D((int)target, level, (int)internalformat, width, height, depth, border, imageSize, data);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public static void CompressedTexImage3D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public static void CompressedTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, nint data)
	{
		Delegates.pglCompressedTexImage2D((int)target, level, (int)internalformat, width, height, border, imageSize, data);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public static void CompressedTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public static void CompressedTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, nint data)
	{
		Delegates.pglCompressedTexImage1D((int)target, level, (int)internalformat, width, border, imageSize, data);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public static void CompressedTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			CompressedTexImage1D(target, level, internalformat, width, border, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public static void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, nint data)
	{
		Delegates.pglCompressedTexSubImage3D((int)target, level, xoffset, yoffset, zoffset, width, height, depth, (int)format, imageSize, data);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public static void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public static void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, nint data)
	{
		Delegates.pglCompressedTexSubImage2D((int)target, level, xoffset, yoffset, width, height, (int)format, imageSize, data);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public static void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public static void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, nint data)
	{
		Delegates.pglCompressedTexSubImage1D((int)target, level, xoffset, width, (int)format, imageSize, data);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public static void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public static void GetCompressedTexImage(TextureTarget target, int level, nint img)
	{
		Delegates.pglGetCompressedTexImage((int)target, level, img);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_texture_compression")]
	public static void GetCompressedTexImage(TextureTarget target, int level, object img)
	{
		GCHandle gCHandle = GCHandle.Alloc(img, GCHandleType.Pinned);
		try
		{
			GetCompressedTexImage(target, level, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void ClientActiveTexture(TextureUnit texture)
	{
		Delegates.pglClientActiveTexture((int)texture);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MultiTexCoord1(TextureUnit target, double s)
	{
		Delegates.pglMultiTexCoord1d((int)target, s);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultiTexCoord1(TextureUnit target, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglMultiTexCoord1dv((int)target, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MultiTexCoord1(TextureUnit target, float s)
	{
		Delegates.pglMultiTexCoord1f((int)target, s);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultiTexCoord1(TextureUnit target, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglMultiTexCoord1fv((int)target, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MultiTexCoord1(TextureUnit target, int s)
	{
		Delegates.pglMultiTexCoord1i((int)target, s);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultiTexCoord1(TextureUnit target, int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglMultiTexCoord1iv((int)target, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MultiTexCoord1(TextureUnit target, short s)
	{
		Delegates.pglMultiTexCoord1s((int)target, s);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultiTexCoord1(TextureUnit target, short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglMultiTexCoord1sv((int)target, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MultiTexCoord2(TextureUnit target, double s, double t)
	{
		Delegates.pglMultiTexCoord2d((int)target, s, t);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultiTexCoord2(TextureUnit target, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglMultiTexCoord2dv((int)target, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MultiTexCoord2(TextureUnit target, float s, float t)
	{
		Delegates.pglMultiTexCoord2f((int)target, s, t);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultiTexCoord2(TextureUnit target, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglMultiTexCoord2fv((int)target, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MultiTexCoord2(TextureUnit target, int s, int t)
	{
		Delegates.pglMultiTexCoord2i((int)target, s, t);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultiTexCoord2(TextureUnit target, int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglMultiTexCoord2iv((int)target, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MultiTexCoord2(TextureUnit target, short s, short t)
	{
		Delegates.pglMultiTexCoord2s((int)target, s, t);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultiTexCoord2(TextureUnit target, short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglMultiTexCoord2sv((int)target, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MultiTexCoord3(TextureUnit target, double s, double t, double r)
	{
		Delegates.pglMultiTexCoord3d((int)target, s, t, r);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultiTexCoord3(TextureUnit target, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglMultiTexCoord3dv((int)target, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MultiTexCoord3(TextureUnit target, float s, float t, float r)
	{
		Delegates.pglMultiTexCoord3f((int)target, s, t, r);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultiTexCoord3(TextureUnit target, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglMultiTexCoord3fv((int)target, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MultiTexCoord3(TextureUnit target, int s, int t, int r)
	{
		Delegates.pglMultiTexCoord3i((int)target, s, t, r);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultiTexCoord3(TextureUnit target, int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglMultiTexCoord3iv((int)target, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MultiTexCoord3(TextureUnit target, short s, short t, short r)
	{
		Delegates.pglMultiTexCoord3s((int)target, s, t, r);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultiTexCoord3(TextureUnit target, short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglMultiTexCoord3sv((int)target, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MultiTexCoord4(TextureUnit target, double s, double t, double r, double q)
	{
		Delegates.pglMultiTexCoord4d((int)target, s, t, r, q);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultiTexCoord4(TextureUnit target, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglMultiTexCoord4dv((int)target, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MultiTexCoord4(TextureUnit target, float s, float t, float r, float q)
	{
		Delegates.pglMultiTexCoord4f((int)target, s, t, r, q);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultiTexCoord4(TextureUnit target, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglMultiTexCoord4fv((int)target, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MultiTexCoord4(TextureUnit target, int s, int t, int r, int q)
	{
		Delegates.pglMultiTexCoord4i((int)target, s, t, r, q);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultiTexCoord4(TextureUnit target, int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglMultiTexCoord4iv((int)target, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void MultiTexCoord4(TextureUnit target, short s, short t, short r, short q)
	{
		Delegates.pglMultiTexCoord4s((int)target, s, t, r, q);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_multitexture")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultiTexCoord4(TextureUnit target, short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglMultiTexCoord4sv((int)target, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_transpose_matrix")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void LoadTransposeMatrix(float[] m)
	{
		fixed (float* m2 = m)
		{
			Delegates.pglLoadTransposeMatrixf(m2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_transpose_matrix")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void LoadTransposeMatrix(float* m)
	{
		Delegates.pglLoadTransposeMatrixf(m);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_transpose_matrix")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void LoadTransposeMatrixf<T>(T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglLoadTransposeMatrixf((float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_transpose_matrix")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void LoadTransposeMatrix(double[] m)
	{
		fixed (double* m2 = m)
		{
			Delegates.pglLoadTransposeMatrixd(m2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_transpose_matrix")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void LoadTransposeMatrix(double* m)
	{
		Delegates.pglLoadTransposeMatrixd(m);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_transpose_matrix")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void LoadTransposeMatrixd<T>(T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglLoadTransposeMatrixd((double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_transpose_matrix")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultTransposeMatrix(float[] m)
	{
		fixed (float* m2 = m)
		{
			Delegates.pglMultTransposeMatrixf(m2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_transpose_matrix")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultTransposeMatrix(float* m)
	{
		Delegates.pglMultTransposeMatrixf(m);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_transpose_matrix")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultTransposeMatrixf<T>(T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglMultTransposeMatrixf((float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_transpose_matrix")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultTransposeMatrix(double[] m)
	{
		fixed (double* m2 = m)
		{
			Delegates.pglMultTransposeMatrixd(m2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_transpose_matrix")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultTransposeMatrix(double* m)
	{
		Delegates.pglMultTransposeMatrixd(m);
	}

	[RequiredByFeature("GL_VERSION_1_3")]
	[RequiredByFeature("GL_ARB_transpose_matrix")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void MultTransposeMatrixd<T>(T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglMultTransposeMatrixd((double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_blend_func_separate")]
	[RequiredByFeature("GL_INGR_blend_func_separate")]
	public static void BlendFuncSeparate(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha)
	{
		Delegates.pglBlendFuncSeparate((int)sfactorRGB, (int)dfactorRGB, (int)sfactorAlpha, (int)dfactorAlpha);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_multi_draw_arrays", Api = "gl|gles1|gles2")]
	public unsafe static void MultiDrawArrays(PrimitiveType mode, int[] first, int[] count, int drawcount)
	{
		fixed (int* first2 = first)
		{
			fixed (int* count2 = count)
			{
				Delegates.pglMultiDrawArrays((int)mode, first2, count2, drawcount);
			}
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_multi_draw_arrays", Api = "gl|gles1|gles2")]
	public unsafe static void MultiDrawArrays(PrimitiveType mode, int[] first, int[] count)
	{
		fixed (int* first2 = first)
		{
			fixed (int* count2 = count)
			{
				Delegates.pglMultiDrawArrays((int)mode, first2, count2, first.Length);
			}
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_multi_draw_arrays", Api = "gl|gles1|gles2")]
	public unsafe static void MultiDrawElements(PrimitiveType mode, int[] count, DrawElementsType type, nint[] indices, int drawcount)
	{
		fixed (int* count2 = count)
		{
			fixed (nint* indices2 = indices)
			{
				Delegates.pglMultiDrawElements((int)mode, count2, (int)type, indices2, drawcount);
			}
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_multi_draw_arrays", Api = "gl|gles1|gles2")]
	public unsafe static void MultiDrawElements(PrimitiveType mode, int[] count, DrawElementsType type, nint[] indices)
	{
		fixed (int* count2 = count)
		{
			fixed (nint* indices2 = indices)
			{
				Delegates.pglMultiDrawElements((int)mode, count2, (int)type, indices2, count.Length);
			}
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ARB_point_parameters")]
	[RequiredByFeature("GL_EXT_point_parameters")]
	[RequiredByFeature("GL_SGIS_point_parameters")]
	public static void PointParameter(PointParameterNameARB pname, float param)
	{
		Delegates.pglPointParameterf((int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ARB_point_parameters")]
	[RequiredByFeature("GL_EXT_point_parameters")]
	[RequiredByFeature("GL_SGIS_point_parameters")]
	public unsafe static void PointParameter(PointParameterNameARB pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglPointParameterfv((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_NV_point_sprite")]
	public static void PointParameter(PointParameterNameARB pname, int param)
	{
		Delegates.pglPointParameteri((int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_NV_point_sprite")]
	public unsafe static void PointParameter(PointParameterNameARB pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglPointParameteriv((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_fog_coord")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void FogCoord(float coord)
	{
		Delegates.pglFogCoordf(coord);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_fog_coord")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void FogCoord(float[] coord)
	{
		fixed (float* coord2 = coord)
		{
			Delegates.pglFogCoordfv(coord2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_fog_coord")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void FogCoord(double coord)
	{
		Delegates.pglFogCoordd(coord);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_fog_coord")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void FogCoord(double[] coord)
	{
		fixed (double* coord2 = coord)
		{
			Delegates.pglFogCoorddv(coord2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_fog_coord")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void FogCoordPointer(FogPointerTypeEXT type, int stride, nint pointer)
	{
		Delegates.pglFogCoordPointer((int)type, stride, pointer);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_fog_coord")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void FogCoordPointer(FogPointerTypeEXT type, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			FogCoordPointer(type, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void SecondaryColor3(sbyte red, sbyte green, sbyte blue)
	{
		Delegates.pglSecondaryColor3b(red, green, blue);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void SecondaryColor3(sbyte[] v)
	{
		fixed (sbyte* v2 = v)
		{
			Delegates.pglSecondaryColor3bv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void SecondaryColor3(double red, double green, double blue)
	{
		Delegates.pglSecondaryColor3d(red, green, blue);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void SecondaryColor3(double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglSecondaryColor3dv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void SecondaryColor3(float red, float green, float blue)
	{
		Delegates.pglSecondaryColor3f(red, green, blue);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void SecondaryColor3(float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglSecondaryColor3fv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void SecondaryColor3(int red, int green, int blue)
	{
		Delegates.pglSecondaryColor3i(red, green, blue);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void SecondaryColor3(int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglSecondaryColor3iv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void SecondaryColor3(short red, short green, short blue)
	{
		Delegates.pglSecondaryColor3s(red, green, blue);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void SecondaryColor3(short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglSecondaryColor3sv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void SecondaryColor3(byte red, byte green, byte blue)
	{
		Delegates.pglSecondaryColor3ub(red, green, blue);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void SecondaryColor3(byte[] v)
	{
		fixed (byte* v2 = v)
		{
			Delegates.pglSecondaryColor3ubv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void SecondaryColor3(uint red, uint green, uint blue)
	{
		Delegates.pglSecondaryColor3ui(red, green, blue);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void SecondaryColor3(uint[] v)
	{
		fixed (uint* v2 = v)
		{
			Delegates.pglSecondaryColor3uiv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void SecondaryColor3(ushort red, ushort green, ushort blue)
	{
		Delegates.pglSecondaryColor3us(red, green, blue);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void SecondaryColor3(ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglSecondaryColor3usv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void SecondaryColorPointer(int size, ColorPointerType type, int stride, nint pointer)
	{
		Delegates.pglSecondaryColorPointer(size, (int)type, stride, pointer);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_EXT_secondary_color")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void SecondaryColorPointer(int size, ColorPointerType type, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			SecondaryColorPointer(size, type, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ARB_window_pos")]
	[RequiredByFeature("GL_MESA_window_pos")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void WindowPos2(double x, double y)
	{
		Delegates.pglWindowPos2d(x, y);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ARB_window_pos")]
	[RequiredByFeature("GL_MESA_window_pos")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void WindowPos2(double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglWindowPos2dv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ARB_window_pos")]
	[RequiredByFeature("GL_MESA_window_pos")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void WindowPos2(float x, float y)
	{
		Delegates.pglWindowPos2f(x, y);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ARB_window_pos")]
	[RequiredByFeature("GL_MESA_window_pos")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void WindowPos2(float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglWindowPos2fv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ARB_window_pos")]
	[RequiredByFeature("GL_MESA_window_pos")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void WindowPos2(int x, int y)
	{
		Delegates.pglWindowPos2i(x, y);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ARB_window_pos")]
	[RequiredByFeature("GL_MESA_window_pos")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void WindowPos2(int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglWindowPos2iv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ARB_window_pos")]
	[RequiredByFeature("GL_MESA_window_pos")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void WindowPos2(short x, short y)
	{
		Delegates.pglWindowPos2s(x, y);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ARB_window_pos")]
	[RequiredByFeature("GL_MESA_window_pos")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void WindowPos2(short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglWindowPos2sv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ARB_window_pos")]
	[RequiredByFeature("GL_MESA_window_pos")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void WindowPos3(double x, double y, double z)
	{
		Delegates.pglWindowPos3d(x, y, z);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ARB_window_pos")]
	[RequiredByFeature("GL_MESA_window_pos")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void WindowPos3(double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglWindowPos3dv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ARB_window_pos")]
	[RequiredByFeature("GL_MESA_window_pos")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void WindowPos3(float x, float y, float z)
	{
		Delegates.pglWindowPos3f(x, y, z);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ARB_window_pos")]
	[RequiredByFeature("GL_MESA_window_pos")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void WindowPos3(float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglWindowPos3fv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ARB_window_pos")]
	[RequiredByFeature("GL_MESA_window_pos")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void WindowPos3(int x, int y, int z)
	{
		Delegates.pglWindowPos3i(x, y, z);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ARB_window_pos")]
	[RequiredByFeature("GL_MESA_window_pos")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void WindowPos3(int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglWindowPos3iv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ARB_window_pos")]
	[RequiredByFeature("GL_MESA_window_pos")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public static void WindowPos3(short x, short y, short z)
	{
		Delegates.pglWindowPos3s(x, y, z);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ARB_window_pos")]
	[RequiredByFeature("GL_MESA_window_pos")]
	[RemovedByFeature("GL_VERSION_3_2", Profile = "core")]
	public unsafe static void WindowPos3(short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglWindowPos3sv(v2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_blend_color")]
	public static void BlendColor(float red, float green, float blue, float alpha)
	{
		Delegates.pglBlendColor(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_VERSION_1_4")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_imaging", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_blend_minmax")]
	public static void BlendEquation(BlendEquationMode mode)
	{
		Delegates.pglBlendEquation((int)mode);
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_occlusion_query")]
	public unsafe static void GenQueries(uint[] ids)
	{
		fixed (uint* ids2 = ids)
		{
			Delegates.pglGenQueries(ids.Length, ids2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_occlusion_query")]
	public unsafe static uint GenQuery()
	{
		uint result = default(uint);
		Delegates.pglGenQueries(1, &result);
		return result;
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_occlusion_query")]
	public unsafe static void DeleteQueries(params uint[] ids)
	{
		fixed (uint* ids2 = ids)
		{
			Delegates.pglDeleteQueries(ids.Length, ids2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_occlusion_query")]
	public static bool IsQuery(uint id)
	{
		return Delegates.pglIsQuery(id);
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_occlusion_query")]
	public static void BeginQuery(QueryTarget target, uint id)
	{
		Delegates.pglBeginQuery((int)target, id);
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_occlusion_query")]
	public static void EndQuery(QueryTarget target)
	{
		Delegates.pglEndQuery((int)target);
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_occlusion_query")]
	public unsafe static void GetQuery(QueryTarget target, QueryParameterName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetQueryiv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_occlusion_query")]
	public unsafe static void GetQuery(QueryTarget target, QueryParameterName pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetQueryiv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ARB_occlusion_query")]
	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	public unsafe static void GetQueryObject(uint id, QueryObjectParameterName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetQueryObjectiv(id, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ARB_occlusion_query")]
	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	public unsafe static void GetQueryObject(uint id, QueryObjectParameterName pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetQueryObjectiv(id, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_occlusion_query")]
	public unsafe static void GetQueryObject(uint id, QueryObjectParameterName pname, [Out] uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglGetQueryObjectuiv(id, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_occlusion_query")]
	public unsafe static void GetQueryObject(uint id, QueryObjectParameterName pname, out uint @params)
	{
		fixed (uint* params2 = &@params)
		{
			Delegates.pglGetQueryObjectuiv(id, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public static void BindBuffer(BufferTarget target, uint buffer)
	{
		Delegates.pglBindBuffer((int)target, buffer);
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public unsafe static void DeleteBuffers(params uint[] buffers)
	{
		fixed (uint* buffers2 = buffers)
		{
			Delegates.pglDeleteBuffers(buffers.Length, buffers2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public unsafe static void GenBuffers(uint[] buffers)
	{
		fixed (uint* buffers2 = buffers)
		{
			Delegates.pglGenBuffers(buffers.Length, buffers2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public unsafe static uint GenBuffer()
	{
		uint result = default(uint);
		Delegates.pglGenBuffers(1, &result);
		return result;
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public static bool IsBuffer(uint buffer)
	{
		return Delegates.pglIsBuffer(buffer);
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public static void BufferData(BufferTarget target, uint size, nint data, BufferUsage usage)
	{
		Delegates.pglBufferData((int)target, size, data, (int)usage);
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public static void BufferData(BufferTarget target, uint size, object data, BufferUsage usage)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			BufferData(target, size, gCHandle.AddrOfPinnedObject(), usage);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public static void BufferSubData(BufferTarget target, nint offset, uint size, nint data)
	{
		Delegates.pglBufferSubData((int)target, offset, size, data);
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public static void BufferSubData(BufferTarget target, nint offset, uint size, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			BufferSubData(target, offset, size, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public static void GetBufferSubData(BufferTarget target, nint offset, uint size, nint data)
	{
		Delegates.pglGetBufferSubData((int)target, offset, size, data);
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public static void GetBufferSubData(BufferTarget target, nint offset, uint size, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			GetBufferSubData(target, offset, size, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	[RequiredByFeature("GL_OES_mapbuffer", Api = "gles1|gles2")]
	public static nint MapBuffer(BufferTarget target, BufferAccess access)
	{
		return Delegates.pglMapBuffer((int)target, (int)access);
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	[RequiredByFeature("GL_OES_mapbuffer", Api = "gles1|gles2")]
	public static bool UnmapBuffer(BufferTarget target)
	{
		return Delegates.pglUnmapBuffer((int)target);
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public unsafe static void GetBufferParameter(BufferTarget target, BufferPNameARB value, [Out] int[] data)
	{
		fixed (int* @params = data)
		{
			Delegates.pglGetBufferParameteriv((int)target, (int)value, @params);
		}
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public unsafe static void GetBufferParameter(BufferTarget target, BufferPNameARB value, out int data)
	{
		fixed (int* @params = &data)
		{
			Delegates.pglGetBufferParameteriv((int)target, (int)value, @params);
		}
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public unsafe static void GetBufferParameter(BufferTarget target, BufferPNameARB value, [Out] int* data)
	{
		Delegates.pglGetBufferParameteriv((int)target, (int)value, data);
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	public unsafe static void GetBufferParameteri<T>(BufferTarget target, BufferPNameARB value, out T data) where T : struct
	{
		data = default(T);
		TypedReference typedReference = __makeref(data);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetBufferParameteriv((int)target, (int)value, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	[RequiredByFeature("GL_OES_mapbuffer", Api = "gles1|gles2")]
	public unsafe static void GetBufferPointer(BufferTarget target, BufferPointerNameARB pname, out nint @params)
	{
		fixed (nint* params2 = &@params)
		{
			Delegates.pglGetBufferPointerv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_1_5")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_buffer_object")]
	[RequiredByFeature("GL_OES_mapbuffer", Api = "gles1|gles2")]
	public static void GetBufferPointer(BufferTarget target, BufferPointerNameARB pname, object @params)
	{
		GCHandle gCHandle = GCHandle.Alloc(@params, GCHandleType.Pinned);
		try
		{
			GetBufferPointer(target, pname, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_blend_equation_separate")]
	public static void BlendEquationSeparate(BlendEquationMode modeRGB, BlendEquationMode modeAlpha)
	{
		Delegates.pglBlendEquationSeparate((int)modeRGB, (int)modeAlpha);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_buffers")]
	[RequiredByFeature("GL_ATI_draw_buffers")]
	[RequiredByFeature("GL_EXT_draw_buffers", Api = "gles2")]
	public unsafe static void DrawBuffers(params int[] bufs)
	{
		fixed (int* bufs2 = bufs)
		{
			Delegates.pglDrawBuffers(bufs.Length, bufs2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ATI_separate_stencil")]
	public static void StencilOpSeparate(TriangleFace face, StencilOp sfail, StencilOp dpfail, StencilOp dppass)
	{
		Delegates.pglStencilOpSeparate((int)face, (int)sfail, (int)dpfail, (int)dppass);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void StencilFuncSeparate(TriangleFace face, StencilFunction func, int @ref, uint mask)
	{
		Delegates.pglStencilFuncSeparate((int)face, (int)func, @ref, mask);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public static void StencilMaskSeparate(TriangleFace face, uint mask)
	{
		Delegates.pglStencilMaskSeparate((int)face, mask);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public static void AttachShader(uint program, uint shader)
	{
		Delegates.pglAttachShader(program, shader);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public static void BindAttribLocation(uint program, uint index, string name)
	{
		Delegates.pglBindAttribLocation(program, index, name);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public static void CompileShader(uint shader)
	{
		Delegates.pglCompileShader(shader);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public static uint CreateProgram()
	{
		return Delegates.pglCreateProgram();
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public static uint CreateShader(ShaderType type)
	{
		return Delegates.pglCreateShader((int)type);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public static void DeleteProgram(uint program)
	{
		Delegates.pglDeleteProgram(program);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public static void DeleteShader(uint shader)
	{
		Delegates.pglDeleteShader(shader);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public static void DetachShader(uint program, uint shader)
	{
		Delegates.pglDetachShader(program, shader);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public static void DisableVertexAttribArray(uint index)
	{
		Delegates.pglDisableVertexAttribArray(index);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public static void EnableVertexAttribArray(uint index)
	{
		Delegates.pglEnableVertexAttribArray(index);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void GetActiveAttrib(uint program, uint index, int bufSize, out int length, out int size, out int type, StringBuilder name)
	{
		fixed (int* length2 = &length)
		{
			fixed (int* size2 = &size)
			{
				fixed (int* type2 = &type)
				{
					Delegates.pglGetActiveAttrib(program, index, bufSize, length2, size2, type2, name);
				}
			}
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void GetActiveUniform(uint program, uint index, int bufSize, out int length, out int size, out int type, StringBuilder name)
	{
		fixed (int* length2 = &length)
		{
			fixed (int* size2 = &size)
			{
				fixed (int* type2 = &type)
				{
					Delegates.pglGetActiveUniform(program, index, bufSize, length2, size2, type2, name);
				}
			}
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public unsafe static void GetAttachedShaders(uint program, out int count, [Out] uint[] shaders)
	{
		fixed (int* count2 = &count)
		{
			fixed (uint* shaders2 = shaders)
			{
				Delegates.pglGetAttachedShaders(program, shaders.Length, count2, shaders2);
			}
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public static int GetAttribLocation(uint program, string name)
	{
		return Delegates.pglGetAttribLocation(program, name);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void GetProgram(uint program, ProgramProperty pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetProgramiv(program, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	public unsafe static void GetProgram(uint program, ProgramProperty pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetProgramiv(program, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public unsafe static void GetProgramInfoLog(uint program, int maxLength, out int length, StringBuilder infoLog)
	{
		fixed (int* length2 = &length)
		{
			Delegates.pglGetProgramInfoLog(program, maxLength, length2, infoLog);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public unsafe static void GetShader(uint shader, ShaderParameterName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetShaderiv(shader, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public unsafe static void GetShader(uint shader, ShaderParameterName pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetShaderiv(shader, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public unsafe static void GetShaderInfoLog(uint shader, int maxLength, out int length, StringBuilder infoLog)
	{
		fixed (int* length2 = &length)
		{
			Delegates.pglGetShaderInfoLog(shader, maxLength, length2, infoLog);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void GetShaderSource(uint shader, int bufSize, out int length, StringBuilder source)
	{
		fixed (int* length2 = &length)
		{
			Delegates.pglGetShaderSource(shader, bufSize, length2, source);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public static int GetUniformLocation(uint program, string name)
	{
		return Delegates.pglGetUniformLocation(program, name);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void GetUniform(uint program, int location, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetUniformfv(program, location, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void GetUniform(uint program, int location, [Out] float* @params)
	{
		Delegates.pglGetUniformfv(program, location, @params);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void GetUniformf<T>(uint program, int location, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetUniformfv(program, location, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void GetUniform(uint program, int location, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetUniformiv(program, location, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void GetUniform(uint program, int location, [Out] int* @params)
	{
		Delegates.pglGetUniformiv(program, location, @params);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void GetUniformi<T>(uint program, int location, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetUniformiv(program, location, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void GetVertexAttrib(uint index, VertexAttribPropertyARB pname, [Out] double[] @params)
	{
		fixed (double* params2 = @params)
		{
			Delegates.pglGetVertexAttribdv(index, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void GetVertexAttrib(uint index, VertexAttribPropertyARB pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetVertexAttribfv(index, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void GetVertexAttrib(uint index, VertexAttribPropertyARB pname, out float @params)
	{
		fixed (float* params2 = &@params)
		{
			Delegates.pglGetVertexAttribfv(index, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void GetVertexAttrib(uint index, VertexAttribPropertyARB pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetVertexAttribiv(index, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void GetVertexAttrib(uint index, VertexAttribPropertyARB pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetVertexAttribiv(index, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void GetVertexAttribPointer(uint index, VertexAttribPointerPropertyARB pname, out nint pointer)
	{
		fixed (nint* pointer2 = &pointer)
		{
			Delegates.pglGetVertexAttribPointerv(index, (int)pname, pointer2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public static void GetVertexAttribPointer(uint index, VertexAttribPointerPropertyARB pname, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			GetVertexAttribPointer(index, pname, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public static bool IsProgram(uint program)
	{
		return Delegates.pglIsProgram(program);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	public static bool IsShader(uint shader)
	{
		return Delegates.pglIsShader(shader);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public static void LinkProgram(uint program)
	{
		Delegates.pglLinkProgram(program);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void ShaderSource(uint shader, string[] @string, int[] length)
	{
		fixed (int* length2 = length)
		{
			Delegates.pglShaderSource(shader, @string.Length, @string, length2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public static void UseProgram(uint program)
	{
		Delegates.pglUseProgram(program);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public static void Uniform1(int location, float v0)
	{
		Delegates.pglUniform1f(location, v0);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public static void Uniform2(int location, float v0, float v1)
	{
		Delegates.pglUniform2f(location, v0, v1);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public static void Uniform3(int location, float v0, float v1, float v2)
	{
		Delegates.pglUniform3f(location, v0, v1, v2);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public static void Uniform4(int location, float v0, float v1, float v2, float v3)
	{
		Delegates.pglUniform4f(location, v0, v1, v2, v3);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public static void Uniform1(int location, int v0)
	{
		Delegates.pglUniform1i(location, v0);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public static void Uniform2(int location, int v0, int v1)
	{
		Delegates.pglUniform2i(location, v0, v1);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public static void Uniform3(int location, int v0, int v1, int v2)
	{
		Delegates.pglUniform3i(location, v0, v1, v2);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public static void Uniform4(int location, int v0, int v1, int v2, int v3)
	{
		Delegates.pglUniform4i(location, v0, v1, v2, v3);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform1(int location, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglUniform1fv(location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform1(int location, int count, float* value)
	{
		Delegates.pglUniform1fv(location, count, value);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform1f<T>(int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniform1fv(location, count, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform2(int location, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglUniform2fv(location, value.Length / 2, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform2(int location, int count, float* value)
	{
		Delegates.pglUniform2fv(location, count, value);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform2f<T>(int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniform2fv(location, count, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform3(int location, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglUniform3fv(location, value.Length / 3, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform3(int location, int count, float* value)
	{
		Delegates.pglUniform3fv(location, count, value);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform3f<T>(int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniform3fv(location, count, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform4(int location, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglUniform4fv(location, value.Length / 4, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform4(int location, int count, float* value)
	{
		Delegates.pglUniform4fv(location, count, value);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform4f<T>(int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniform4fv(location, count, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform1(int location, int[] value)
	{
		fixed (int* value2 = value)
		{
			Delegates.pglUniform1iv(location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform1(int location, int count, int* value)
	{
		Delegates.pglUniform1iv(location, count, value);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform1i<T>(int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniform1iv(location, count, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform2(int location, int[] value)
	{
		fixed (int* value2 = value)
		{
			Delegates.pglUniform2iv(location, value.Length / 2, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform2(int location, int count, int* value)
	{
		Delegates.pglUniform2iv(location, count, value);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform2i<T>(int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniform2iv(location, count, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform3(int location, int[] value)
	{
		fixed (int* value2 = value)
		{
			Delegates.pglUniform3iv(location, value.Length / 3, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform3(int location, int count, int* value)
	{
		Delegates.pglUniform3iv(location, count, value);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform3i<T>(int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniform3iv(location, count, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform4(int location, int[] value)
	{
		fixed (int* value2 = value)
		{
			Delegates.pglUniform4iv(location, value.Length / 4, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform4(int location, int count, int* value)
	{
		Delegates.pglUniform4iv(location, count, value);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void Uniform4i<T>(int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniform4iv(location, count, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void UniformMatrix2(int location, bool transpose, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglUniformMatrix2fv(location, value.Length / 4, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void UniformMatrix2(int location, int count, bool transpose, float* value)
	{
		Delegates.pglUniformMatrix2fv(location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void UniformMatrix2f<T>(int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniformMatrix2fv(location, count, transpose, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void UniformMatrix3(int location, bool transpose, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglUniformMatrix3fv(location, value.Length / 9, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void UniformMatrix3(int location, int count, bool transpose, float* value)
	{
		Delegates.pglUniformMatrix3fv(location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void UniformMatrix3f<T>(int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniformMatrix3fv(location, count, transpose, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void UniformMatrix4(int location, bool transpose, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglUniformMatrix4fv(location, value.Length / 16, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void UniformMatrix4(int location, int count, bool transpose, float* value)
	{
		Delegates.pglUniformMatrix4fv(location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public unsafe static void UniformMatrix4f<T>(int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniformMatrix4fv(location, count, transpose, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public static void ValidateProgram(uint program)
	{
		Delegates.pglValidateProgram(program);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public static void VertexAttrib1(uint index, double x)
	{
		Delegates.pglVertexAttrib1d(index, x);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib1(uint index, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglVertexAttrib1dv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib1(uint index, double* v)
	{
		Delegates.pglVertexAttrib1dv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib1d<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib1dv(index, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public static void VertexAttrib1(uint index, float x)
	{
		Delegates.pglVertexAttrib1f(index, x);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib1(uint index, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglVertexAttrib1fv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib1(uint index, float* v)
	{
		Delegates.pglVertexAttrib1fv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib1f<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib1fv(index, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public static void VertexAttrib1(uint index, short x)
	{
		Delegates.pglVertexAttrib1s(index, x);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib1(uint index, short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglVertexAttrib1sv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib1(uint index, short* v)
	{
		Delegates.pglVertexAttrib1sv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib1s<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib1sv(index, (short*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public static void VertexAttrib2(uint index, double x, double y)
	{
		Delegates.pglVertexAttrib2d(index, x, y);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib2(uint index, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglVertexAttrib2dv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib2(uint index, double* v)
	{
		Delegates.pglVertexAttrib2dv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib2d<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib2dv(index, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public static void VertexAttrib2(uint index, float x, float y)
	{
		Delegates.pglVertexAttrib2f(index, x, y);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib2(uint index, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglVertexAttrib2fv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib2(uint index, float* v)
	{
		Delegates.pglVertexAttrib2fv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib2f<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib2fv(index, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public static void VertexAttrib2(uint index, short x, short y)
	{
		Delegates.pglVertexAttrib2s(index, x, y);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib2(uint index, short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglVertexAttrib2sv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib2(uint index, short* v)
	{
		Delegates.pglVertexAttrib2sv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib2s<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib2sv(index, (short*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public static void VertexAttrib3(uint index, double x, double y, double z)
	{
		Delegates.pglVertexAttrib3d(index, x, y, z);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib3(uint index, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglVertexAttrib3dv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib3(uint index, double* v)
	{
		Delegates.pglVertexAttrib3dv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib3d<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib3dv(index, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public static void VertexAttrib3(uint index, float x, float y, float z)
	{
		Delegates.pglVertexAttrib3f(index, x, y, z);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib3(uint index, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglVertexAttrib3fv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib3(uint index, float* v)
	{
		Delegates.pglVertexAttrib3fv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib3f<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib3fv(index, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public static void VertexAttrib3(uint index, short x, short y, short z)
	{
		Delegates.pglVertexAttrib3s(index, x, y, z);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib3(uint index, short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglVertexAttrib3sv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib3(uint index, short* v)
	{
		Delegates.pglVertexAttrib3sv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib3s<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib3sv(index, (short*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4N(uint index, sbyte[] v)
	{
		fixed (sbyte* v2 = v)
		{
			Delegates.pglVertexAttrib4Nbv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4N(uint index, sbyte* v)
	{
		Delegates.pglVertexAttrib4Nbv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4Nb<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib4Nbv(index, (sbyte*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4N(uint index, int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglVertexAttrib4Niv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4N(uint index, int* v)
	{
		Delegates.pglVertexAttrib4Niv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4Ni<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib4Niv(index, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4N(uint index, short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglVertexAttrib4Nsv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4N(uint index, short* v)
	{
		Delegates.pglVertexAttrib4Nsv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4Ns<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib4Nsv(index, (short*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public static void VertexAttrib4N(uint index, byte x, byte y, byte z, byte w)
	{
		Delegates.pglVertexAttrib4Nub(index, x, y, z, w);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib4N(uint index, byte[] v)
	{
		fixed (byte* v2 = v)
		{
			Delegates.pglVertexAttrib4Nubv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib4N(uint index, byte* v)
	{
		Delegates.pglVertexAttrib4Nubv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib4Nub<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib4Nubv(index, (byte*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4N(uint index, uint[] v)
	{
		fixed (uint* v2 = v)
		{
			Delegates.pglVertexAttrib4Nuiv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4N(uint index, uint* v)
	{
		Delegates.pglVertexAttrib4Nuiv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4Nui<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib4Nuiv(index, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4N(uint index, ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglVertexAttrib4Nusv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4N(uint index, ushort* v)
	{
		Delegates.pglVertexAttrib4Nusv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4Nus<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib4Nusv(index, (ushort*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4(uint index, sbyte[] v)
	{
		fixed (sbyte* v2 = v)
		{
			Delegates.pglVertexAttrib4bv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4(uint index, sbyte* v)
	{
		Delegates.pglVertexAttrib4bv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4b<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib4bv(index, (sbyte*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public static void VertexAttrib4(uint index, double x, double y, double z, double w)
	{
		Delegates.pglVertexAttrib4d(index, x, y, z, w);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib4(uint index, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglVertexAttrib4dv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib4(uint index, double* v)
	{
		Delegates.pglVertexAttrib4dv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib4d<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib4dv(index, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public static void VertexAttrib4(uint index, float x, float y, float z, float w)
	{
		Delegates.pglVertexAttrib4f(index, x, y, z, w);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib4(uint index, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglVertexAttrib4fv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib4(uint index, float* v)
	{
		Delegates.pglVertexAttrib4fv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib4f<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib4fv(index, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4(uint index, int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglVertexAttrib4iv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4(uint index, int* v)
	{
		Delegates.pglVertexAttrib4iv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4i<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib4iv(index, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public static void VertexAttrib4(uint index, short x, short y, short z, short w)
	{
		Delegates.pglVertexAttrib4s(index, x, y, z, w);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib4(uint index, short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglVertexAttrib4sv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib4(uint index, short* v)
	{
		Delegates.pglVertexAttrib4sv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttrib4s<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib4sv(index, (short*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4ub(uint index, byte[] v)
	{
		fixed (byte* v2 = v)
		{
			Delegates.pglVertexAttrib4ubv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4ub(uint index, byte* v)
	{
		Delegates.pglVertexAttrib4ubv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4ub<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib4ubv(index, (byte*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4(uint index, uint[] v)
	{
		fixed (uint* v2 = v)
		{
			Delegates.pglVertexAttrib4uiv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4(uint index, uint* v)
	{
		Delegates.pglVertexAttrib4uiv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4ui<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib4uiv(index, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4(uint index, ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglVertexAttrib4usv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4(uint index, ushort* v)
	{
		Delegates.pglVertexAttrib4usv(index, v);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public unsafe static void VertexAttrib4us<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttrib4usv(index, (ushort*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public static void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, nint pointer)
	{
		Delegates.pglVertexAttribPointer(index, size, (int)type, normalized, stride, pointer);
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_vertex_program")]
	[RequiredByFeature("GL_ARB_vertex_shader")]
	public static void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			VertexAttribPointer(index, size, type, normalized, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_2_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_objects")]
	public static void ShaderSource(uint shader, string[] @string)
	{
		int[] array = new int[@string.Length];
		for (int i = 0; i < @string.Length; i++)
		{
			array[i] = ((@string[i] != null) ? @string[i].Length : 0);
		}
		ShaderSource(shader, @string, array);
	}

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public unsafe static void UniformMatrix2x3(int location, bool transpose, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglUniformMatrix2x3fv(location, value.Length / 6, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public unsafe static void UniformMatrix2x3(int location, int count, bool transpose, float* value)
	{
		Delegates.pglUniformMatrix2x3fv(location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public unsafe static void UniformMatrix2x3f<T>(int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniformMatrix2x3fv(location, count, transpose, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public unsafe static void UniformMatrix3x2(int location, bool transpose, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglUniformMatrix3x2fv(location, value.Length / 6, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public unsafe static void UniformMatrix3x2(int location, int count, bool transpose, float* value)
	{
		Delegates.pglUniformMatrix3x2fv(location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public unsafe static void UniformMatrix3x2f<T>(int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniformMatrix3x2fv(location, count, transpose, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public unsafe static void UniformMatrix2x4(int location, bool transpose, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglUniformMatrix2x4fv(location, value.Length / 8, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public unsafe static void UniformMatrix2x4(int location, int count, bool transpose, float* value)
	{
		Delegates.pglUniformMatrix2x4fv(location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public unsafe static void UniformMatrix2x4f<T>(int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniformMatrix2x4fv(location, count, transpose, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public unsafe static void UniformMatrix4x2(int location, bool transpose, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglUniformMatrix4x2fv(location, value.Length / 8, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public unsafe static void UniformMatrix4x2(int location, int count, bool transpose, float* value)
	{
		Delegates.pglUniformMatrix4x2fv(location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public unsafe static void UniformMatrix4x2f<T>(int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniformMatrix4x2fv(location, count, transpose, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public unsafe static void UniformMatrix3x4(int location, bool transpose, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglUniformMatrix3x4fv(location, value.Length / 12, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public unsafe static void UniformMatrix3x4(int location, int count, bool transpose, float* value)
	{
		Delegates.pglUniformMatrix3x4fv(location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public unsafe static void UniformMatrix3x4f<T>(int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniformMatrix3x4fv(location, count, transpose, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public unsafe static void UniformMatrix4x3(int location, bool transpose, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglUniformMatrix4x3fv(location, value.Length / 12, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public unsafe static void UniformMatrix4x3(int location, int count, bool transpose, float* value)
	{
		Delegates.pglUniformMatrix4x3fv(location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_2_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_NV_non_square_matrices", Api = "gles2")]
	public unsafe static void UniformMatrix4x3f<T>(int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniformMatrix4x3fv(location, count, transpose, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_draw_buffers2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	public static void ColorMask(uint buf, bool red, bool green, bool blue, bool alpha)
	{
		Delegates.pglColorMaski(buf, red, green, blue, alpha);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers2")]
	public unsafe static void Get(int target, uint index, [Out] byte[] data)
	{
		fixed (byte* data2 = data)
		{
			Delegates.pglGetBooleani_v(target, index, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers2")]
	public unsafe static void Get(BufferTarget target, uint index, [Out] byte[] data)
	{
		fixed (byte* data2 = data)
		{
			Delegates.pglGetBooleani_v((int)target, index, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers2")]
	public unsafe static void Get(int target, uint index, out byte data)
	{
		fixed (byte* data2 = &data)
		{
			Delegates.pglGetBooleani_v(target, index, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers2")]
	public unsafe static void Get(BufferTarget target, uint index, out byte data)
	{
		fixed (byte* data2 = &data)
		{
			Delegates.pglGetBooleani_v((int)target, index, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers2")]
	public unsafe static void Get(BufferTarget target, uint index, [Out] byte* data)
	{
		Delegates.pglGetBooleani_v((int)target, index, data);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers2")]
	public unsafe static void GetBoolean<T>(BufferTarget target, uint index, out T data) where T : struct
	{
		data = default(T);
		TypedReference typedReference = __makeref(data);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetBooleani_v((int)target, index, (byte*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers2")]
	public unsafe static void Get(int target, uint index, [Out] int[] data)
	{
		fixed (int* data2 = data)
		{
			Delegates.pglGetIntegeri_v(target, index, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers2")]
	public unsafe static void Get(GetPName target, uint index, [Out] int[] data)
	{
		fixed (int* data2 = data)
		{
			Delegates.pglGetIntegeri_v((int)target, index, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers2")]
	public unsafe static void Get(int target, uint index, out int data)
	{
		fixed (int* data2 = &data)
		{
			Delegates.pglGetIntegeri_v(target, index, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers2")]
	public unsafe static void Get(GetPName target, uint index, out int data)
	{
		fixed (int* data2 = &data)
		{
			Delegates.pglGetIntegeri_v((int)target, index, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers2")]
	public unsafe static void Get(GetPName target, uint index, [Out] int* data)
	{
		Delegates.pglGetIntegeri_v((int)target, index, data);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers2")]
	public unsafe static void GetInteger<T>(GetPName target, uint index, out T data) where T : struct
	{
		data = default(T);
		TypedReference typedReference = __makeref(data);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetIntegeri_v((int)target, index, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public static void Enable(EnableCap cap, uint index)
	{
		Delegates.pglEnablei((int)cap, index);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public static void Disable(EnableCap cap, uint index)
	{
		Delegates.pglDisablei((int)cap, index);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers2")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public static bool IsEnabled(EnableCap cap, uint index)
	{
		return Delegates.pglIsEnabledi((int)cap, index);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	[RequiredByFeature("GL_NV_transform_feedback")]
	public static void BeginTransformFeedback(PrimitiveType primitiveMode)
	{
		Delegates.pglBeginTransformFeedback((int)primitiveMode);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	[RequiredByFeature("GL_NV_transform_feedback")]
	public static void EndTransformFeedback()
	{
		Delegates.pglEndTransformFeedback();
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	[RequiredByFeature("GL_NV_transform_feedback")]
	public static void BindBufferRange(BufferTarget target, uint index, uint buffer, nint offset, uint size)
	{
		Delegates.pglBindBufferRange((int)target, index, buffer, offset, size);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	[RequiredByFeature("GL_NV_transform_feedback")]
	public static void BindBufferBase(BufferTarget target, uint index, uint buffer)
	{
		Delegates.pglBindBufferBase((int)target, index, buffer);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	public static void TransformFeedbackVaryings(uint program, int count, string[] varyings, TransformFeedbackBufferMode bufferMode)
	{
		Delegates.pglTransformFeedbackVaryings(program, count, varyings, (int)bufferMode);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	public static void TransformFeedbackVaryings(uint program, string[] varyings, TransformFeedbackBufferMode bufferMode)
	{
		Delegates.pglTransformFeedbackVaryings(program, varyings.Length, varyings, (int)bufferMode);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_transform_feedback")]
	public unsafe static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, out int length, out int size, out int type, StringBuilder name)
	{
		fixed (int* length2 = &length)
		{
			fixed (int* size2 = &size)
			{
				fixed (int* type2 = &type)
				{
					Delegates.pglGetTransformFeedbackVarying(program, index, bufSize, length2, size2, type2, name);
				}
			}
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_color_buffer_float")]
	public static void ClampColor(ClampColorTargetARB target, ClampColorModeARB clamp)
	{
		Delegates.pglClampColor((int)target, (int)clamp);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_NV_conditional_render", Api = "gl|glcore|gles2")]
	public static void BeginConditionalRender(uint id, ConditionalRenderMode mode)
	{
		Delegates.pglBeginConditionalRender(id, (int)mode);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_NVX_conditional_render")]
	[RequiredByFeature("GL_NV_conditional_render", Api = "gl|glcore|gles2")]
	public static void EndConditionalRender()
	{
		Delegates.pglEndConditionalRender();
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public static void VertexAttribIPointer(uint index, int size, VertexAttribIType type, int stride, nint pointer)
	{
		Delegates.pglVertexAttribIPointer(index, size, (int)type, stride, pointer);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public static void VertexAttribIPointer(uint index, int size, VertexAttribIType type, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			VertexAttribIPointer(index, size, type, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void GetVertexAttribI(uint index, VertexAttribEnum pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetVertexAttribIiv(index, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void GetVertexAttribI(uint index, VertexAttribEnum pname, out uint @params)
	{
		fixed (uint* params2 = &@params)
		{
			Delegates.pglGetVertexAttribIuiv(index, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public static void VertexAttribI1(uint index, int x)
	{
		Delegates.pglVertexAttribI1i(index, x);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public static void VertexAttribI2(uint index, int x, int y)
	{
		Delegates.pglVertexAttribI2i(index, x, y);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public static void VertexAttribI3(uint index, int x, int y, int z)
	{
		Delegates.pglVertexAttribI3i(index, x, y, z);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public static void VertexAttribI4(uint index, int x, int y, int z, int w)
	{
		Delegates.pglVertexAttribI4i(index, x, y, z, w);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public static void VertexAttribI1(uint index, uint x)
	{
		Delegates.pglVertexAttribI1ui(index, x);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public static void VertexAttribI2(uint index, uint x, uint y)
	{
		Delegates.pglVertexAttribI2ui(index, x, y);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public static void VertexAttribI3(uint index, uint x, uint y, uint z)
	{
		Delegates.pglVertexAttribI3ui(index, x, y, z);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public static void VertexAttribI4(uint index, uint x, uint y, uint z, uint w)
	{
		Delegates.pglVertexAttribI4ui(index, x, y, z, w);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI1(uint index, int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglVertexAttribI1iv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI1(uint index, int* v)
	{
		Delegates.pglVertexAttribI1iv(index, v);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI1i<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttribI1iv(index, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI2(uint index, int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglVertexAttribI2iv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI2(uint index, int* v)
	{
		Delegates.pglVertexAttribI2iv(index, v);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI2i<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttribI2iv(index, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI3(uint index, int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglVertexAttribI3iv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI3(uint index, int* v)
	{
		Delegates.pglVertexAttribI3iv(index, v);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI3i<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttribI3iv(index, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI4(uint index, int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglVertexAttribI4iv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI4(uint index, int* v)
	{
		Delegates.pglVertexAttribI4iv(index, v);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI4i<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttribI4iv(index, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI1(uint index, uint[] v)
	{
		fixed (uint* v2 = v)
		{
			Delegates.pglVertexAttribI1uiv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI1(uint index, uint* v)
	{
		Delegates.pglVertexAttribI1uiv(index, v);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI1ui<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttribI1uiv(index, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI2(uint index, uint[] v)
	{
		fixed (uint* v2 = v)
		{
			Delegates.pglVertexAttribI2uiv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI2(uint index, uint* v)
	{
		Delegates.pglVertexAttribI2uiv(index, v);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI2ui<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttribI2uiv(index, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI3(uint index, uint[] v)
	{
		fixed (uint* v2 = v)
		{
			Delegates.pglVertexAttribI3uiv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI3(uint index, uint* v)
	{
		Delegates.pglVertexAttribI3uiv(index, v);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI3ui<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttribI3uiv(index, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI4(uint index, uint[] v)
	{
		fixed (uint* v2 = v)
		{
			Delegates.pglVertexAttribI4uiv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI4(uint index, uint* v)
	{
		Delegates.pglVertexAttribI4uiv(index, v);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI4ui<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttribI4uiv(index, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI4(uint index, sbyte[] v)
	{
		fixed (sbyte* v2 = v)
		{
			Delegates.pglVertexAttribI4bv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI4(uint index, sbyte* v)
	{
		Delegates.pglVertexAttribI4bv(index, v);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI4b<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttribI4bv(index, (sbyte*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI4(uint index, short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglVertexAttribI4sv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI4(uint index, short* v)
	{
		Delegates.pglVertexAttribI4sv(index, v);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI4s<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttribI4sv(index, (short*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI4(uint index, byte[] v)
	{
		fixed (byte* v2 = v)
		{
			Delegates.pglVertexAttribI4ubv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI4(uint index, byte* v)
	{
		Delegates.pglVertexAttribI4ubv(index, v);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI4ub<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttribI4ubv(index, (byte*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI4(uint index, ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglVertexAttribI4usv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI4(uint index, ushort* v)
	{
		Delegates.pglVertexAttribI4usv(index, v);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	[RequiredByFeature("GL_NV_vertex_program4")]
	public unsafe static void VertexAttribI4us<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttribI4usv(index, (ushort*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public unsafe static void GetUniform(uint program, int location, [Out] uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglGetUniformuiv(program, location, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public unsafe static void GetUniform(uint program, int location, [Out] uint* @params)
	{
		Delegates.pglGetUniformuiv(program, location, @params);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public unsafe static void GetUniformui<T>(uint program, int location, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetUniformuiv(program, location, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_EXT_blend_func_extended", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public static void BindFragDataLocation(uint program, uint color, string name)
	{
		Delegates.pglBindFragDataLocation(program, color, name);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public static int GetFragDataLocation(uint program, string name)
	{
		return Delegates.pglGetFragDataLocation(program, name);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public static void Uniform1(int location, uint v0)
	{
		Delegates.pglUniform1ui(location, v0);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public static void Uniform2(int location, uint v0, uint v1)
	{
		Delegates.pglUniform2ui(location, v0, v1);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public static void Uniform3(int location, uint v0, uint v1, uint v2)
	{
		Delegates.pglUniform3ui(location, v0, v1, v2);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public static void Uniform4(int location, uint v0, uint v1, uint v2, uint v3)
	{
		Delegates.pglUniform4ui(location, v0, v1, v2, v3);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public unsafe static void Uniform1(int location, uint[] value)
	{
		fixed (uint* value2 = value)
		{
			Delegates.pglUniform1uiv(location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public unsafe static void Uniform1(int location, int count, uint* value)
	{
		Delegates.pglUniform1uiv(location, count, value);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public unsafe static void Uniform1ui<T>(int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniform1uiv(location, count, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public unsafe static void Uniform2(int location, uint[] value)
	{
		fixed (uint* value2 = value)
		{
			Delegates.pglUniform2uiv(location, value.Length / 2, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public unsafe static void Uniform2(int location, int count, uint* value)
	{
		Delegates.pglUniform2uiv(location, count, value);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public unsafe static void Uniform2ui<T>(int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniform2uiv(location, count, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public unsafe static void Uniform3(int location, uint[] value)
	{
		fixed (uint* value2 = value)
		{
			Delegates.pglUniform3uiv(location, value.Length / 3, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public unsafe static void Uniform3(int location, int count, uint* value)
	{
		Delegates.pglUniform3uiv(location, count, value);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public unsafe static void Uniform3ui<T>(int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniform3uiv(location, count, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public unsafe static void Uniform4(int location, uint[] value)
	{
		fixed (uint* value2 = value)
		{
			Delegates.pglUniform4uiv(location, value.Length / 4, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public unsafe static void Uniform4(int location, int count, uint* value)
	{
		Delegates.pglUniform4uiv(location, count, value);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_EXT_gpu_shader4")]
	public unsafe static void Uniform4ui<T>(int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniform4uiv(location, count, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglTexParameterIiv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, int* @params)
	{
		Delegates.pglTexParameterIiv((int)target, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void TexParameterIi<T>(TextureTarget target, TextureParameterName pname, T @params) where T : struct
	{
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglTexParameterIiv((int)target, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglTexParameterIuiv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, uint* @params)
	{
		Delegates.pglTexParameterIuiv((int)target, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void TexParameterIui<T>(TextureTarget target, TextureParameterName pname, T @params) where T : struct
	{
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglTexParameterIuiv((int)target, (int)pname, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetTexParameterIiv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetTexParameterIiv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] int* @params)
	{
		Delegates.pglGetTexParameterIiv((int)target, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void GetTexParameterIi<T>(TextureTarget target, GetTextureParameter pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetTexParameterIiv((int)target, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglGetTexParameterIuiv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, out uint @params)
	{
		fixed (uint* params2 = &@params)
		{
			Delegates.pglGetTexParameterIuiv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] uint* @params)
	{
		Delegates.pglGetTexParameterIuiv((int)target, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_integer")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void GetTexParameterIui<T>(TextureTarget target, GetTextureParameter pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetTexParameterIuiv((int)target, (int)pname, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public unsafe static void ClearBuffer(Buffer buffer, int drawbuffer, int[] value)
	{
		fixed (int* value2 = value)
		{
			Delegates.pglClearBufferiv((int)buffer, drawbuffer, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public unsafe static void ClearBuffer(Buffer buffer, int drawbuffer, uint[] value)
	{
		fixed (uint* value2 = value)
		{
			Delegates.pglClearBufferuiv((int)buffer, drawbuffer, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public unsafe static void ClearBuffer(Buffer buffer, int drawbuffer, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglClearBufferfv((int)buffer, drawbuffer, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public static void ClearBuffer(Buffer buffer, int drawbuffer, float depth, int stencil)
	{
		Delegates.pglClearBufferfi((int)buffer, drawbuffer, depth, stencil);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public static string GetString(StringName name, uint index)
	{
		return Khronos.KhronosApi.PtrToString(Delegates.pglGetStringi((int)name, index));
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public static bool IsRenderbuffer(uint renderbuffer)
	{
		return Delegates.pglIsRenderbuffer(renderbuffer);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	public static void BindRenderbuffer(RenderbufferTarget target, uint renderbuffer)
	{
		Delegates.pglBindRenderbuffer((int)target, renderbuffer);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public unsafe static void DeleteRenderbuffers(params uint[] renderbuffers)
	{
		fixed (uint* renderbuffers2 = renderbuffers)
		{
			Delegates.pglDeleteRenderbuffers(renderbuffers.Length, renderbuffers2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public unsafe static void GenRenderbuffers(uint[] renderbuffers)
	{
		fixed (uint* renderbuffers2 = renderbuffers)
		{
			Delegates.pglGenRenderbuffers(renderbuffers.Length, renderbuffers2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public unsafe static uint GenRenderbuffer()
	{
		uint result = default(uint);
		Delegates.pglGenRenderbuffers(1, &result);
		return result;
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public static void RenderbufferStorage(RenderbufferTarget target, InternalFormat internalformat, int width, int height)
	{
		Delegates.pglRenderbufferStorage((int)target, (int)internalformat, width, height);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public unsafe static void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetRenderbufferParameteriv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public unsafe static void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetRenderbufferParameteriv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public unsafe static void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int* @params)
	{
		Delegates.pglGetRenderbufferParameteriv((int)target, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public unsafe static void GetRenderbufferParameteri<T>(RenderbufferTarget target, RenderbufferParameterName pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetRenderbufferParameteriv((int)target, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public static bool IsFramebuffer(uint framebuffer)
	{
		return Delegates.pglIsFramebuffer(framebuffer);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	public static void BindFramebuffer(FramebufferTarget target, uint framebuffer)
	{
		Delegates.pglBindFramebuffer((int)target, framebuffer);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public unsafe static void DeleteFramebuffers(params uint[] framebuffers)
	{
		fixed (uint* framebuffers2 = framebuffers)
		{
			Delegates.pglDeleteFramebuffers(framebuffers.Length, framebuffers2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public unsafe static void GenFramebuffers(uint[] framebuffers)
	{
		fixed (uint* framebuffers2 = framebuffers)
		{
			Delegates.pglGenFramebuffers(framebuffers.Length, framebuffers2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public unsafe static uint GenFramebuffer()
	{
		uint result = default(uint);
		Delegates.pglGenFramebuffers(1, &result);
		return result;
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public static FramebufferStatus CheckFramebufferStatus(FramebufferTarget target)
	{
		return (FramebufferStatus)Delegates.pglCheckFramebufferStatus((int)target);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public static void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
	{
		Delegates.pglFramebufferTexture1D((int)target, (int)attachment, (int)textarget, texture, level);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public static void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
	{
		Delegates.pglFramebufferTexture2D((int)target, (int)attachment, (int)textarget, texture, level);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public static void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int layer)
	{
		Delegates.pglFramebufferTexture3D((int)target, (int)attachment, (int)textarget, texture, level, layer);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public static void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
	{
		Delegates.pglFramebufferRenderbuffer((int)target, (int)attachment, (int)renderbuffertarget, renderbuffer);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public unsafe static void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetFramebufferAttachmentParameteriv((int)target, (int)attachment, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public unsafe static void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetFramebufferAttachmentParameteriv((int)target, (int)attachment, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public unsafe static void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, [Out] int* @params)
	{
		Delegates.pglGetFramebufferAttachmentParameteriv((int)target, (int)attachment, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public unsafe static void GetFramebufferAttachmentParameteri<T>(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetFramebufferAttachmentParameteriv((int)target, (int)attachment, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_object")]
	public static void GenerateMipmap(TextureTarget target)
	{
		Delegates.pglGenerateMipmap((int)target);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_blit")]
	[RequiredByFeature("GL_NV_framebuffer_blit", Api = "gles2")]
	public static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter)
	{
		Delegates.pglBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, (uint)mask, (int)filter);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_framebuffer_multisample")]
	[RequiredByFeature("GL_EXT_multisampled_render_to_texture", Api = "gles1|gles2")]
	[RequiredByFeature("GL_NV_framebuffer_multisample", Api = "gles2")]
	public static void RenderbufferStorageMultisample(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height)
	{
		Delegates.pglRenderbufferStorageMultisample((int)target, samples, (int)internalformat, width, height);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_array")]
	[RequiredByFeature("GL_NV_geometry_program4")]
	public static void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer)
	{
		Delegates.pglFramebufferTextureLayer((int)target, (int)attachment, texture, level, layer);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_map_buffer_range", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_map_buffer_range", Api = "gles1|gles2")]
	public static nint MapBufferRange(BufferTarget target, nint offset, uint length, MapBufferAccessMask access)
	{
		return Delegates.pglMapBufferRange((int)target, offset, length, (uint)access);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_flush_buffer_range")]
	[RequiredByFeature("GL_ARB_map_buffer_range", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_map_buffer_range", Api = "gles1|gles2")]
	public static void FlushMappedBufferRange(BufferTarget target, nint offset, uint length)
	{
		Delegates.pglFlushMappedBufferRange((int)target, offset, length);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_array_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_vertex_array_object", Api = "gles1|gles2")]
	public static void BindVertexArray(uint array)
	{
		Delegates.pglBindVertexArray(array);
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_vertex_array_object")]
	[RequiredByFeature("GL_ARB_vertex_array_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_vertex_array_object", Api = "gles1|gles2")]
	public unsafe static void DeleteVertexArrays(params uint[] arrays)
	{
		fixed (uint* arrays2 = arrays)
		{
			Delegates.pglDeleteVertexArrays(arrays.Length, arrays2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_vertex_array_object")]
	[RequiredByFeature("GL_ARB_vertex_array_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_vertex_array_object", Api = "gles1|gles2")]
	public unsafe static void GenVertexArrays(uint[] arrays)
	{
		fixed (uint* arrays2 = arrays)
		{
			Delegates.pglGenVertexArrays(arrays.Length, arrays2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_vertex_array_object")]
	[RequiredByFeature("GL_ARB_vertex_array_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_vertex_array_object", Api = "gles1|gles2")]
	public unsafe static uint GenVertexArray()
	{
		uint result = default(uint);
		Delegates.pglGenVertexArrays(1, &result);
		return result;
	}

	[RequiredByFeature("GL_VERSION_3_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_vertex_array_object")]
	[RequiredByFeature("GL_ARB_vertex_array_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_vertex_array_object", Api = "gles1|gles2")]
	public static bool IsVertexArray(uint array)
	{
		return Delegates.pglIsVertexArray(array);
	}

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ANGLE_instanced_arrays", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_instanced", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_instanced", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_EXT_instanced_arrays", Api = "gles2")]
	[RequiredByFeature("GL_NV_draw_instanced", Api = "gles2")]
	public static void DrawArraysInstanced(PrimitiveType mode, int first, int count, int primcount)
	{
		Delegates.pglDrawArraysInstanced((int)mode, first, count, primcount);
	}

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ANGLE_instanced_arrays", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_instanced", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_instanced", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_EXT_instanced_arrays", Api = "gles2")]
	[RequiredByFeature("GL_NV_draw_instanced", Api = "gles2")]
	public static void DrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, nint indices, int primcount)
	{
		Delegates.pglDrawElementsInstanced((int)mode, count, (int)type, indices, primcount);
	}

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ANGLE_instanced_arrays", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_instanced", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_instanced", Api = "gl|glcore|gles2")]
	[RequiredByFeature("GL_EXT_instanced_arrays", Api = "gles2")]
	[RequiredByFeature("GL_NV_draw_instanced", Api = "gles2")]
	public static void DrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, object indices, int primcount)
	{
		GCHandle gCHandle = GCHandle.Alloc(indices, GCHandleType.Pinned);
		try
		{
			DrawElementsInstanced(mode, count, type, gCHandle.AddrOfPinnedObject(), primcount);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_buffer_object", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2")]
	[RequiredByFeature("GL_EXT_texture_buffer_object")]
	[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2")]
	public static void TexBuffer(TextureTarget target, SizedInternalFormat internalformat, uint buffer)
	{
		Delegates.pglTexBuffer((int)target, (int)internalformat, buffer);
	}

	[RequiredByFeature("GL_VERSION_3_1")]
	public static void PrimitiveRestartIndex(uint index)
	{
		Delegates.pglPrimitiveRestartIndex(index);
	}

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_copy_buffer", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_copy_buffer", Api = "gles2")]
	public static void CopyBufferSubData(CopyBufferSubDataTarget readTarget, CopyBufferSubDataTarget writeTarget, nint readOffset, nint writeOffset, uint size)
	{
		Delegates.pglCopyBufferSubData((int)readTarget, (int)writeTarget, readOffset, writeOffset, size);
	}

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public unsafe static void GetUniformIndices(uint program, int uniformCount, string[] uniformNames, [Out] uint[] uniformIndices)
	{
		fixed (uint* uniformIndices2 = uniformIndices)
		{
			Delegates.pglGetUniformIndices(program, uniformCount, uniformNames, uniformIndices2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public unsafe static void GetActiveUniforms(uint program, int uniformCount, uint[] uniformIndices, UniformPName pname, [Out] int[] @params)
	{
		fixed (uint* uniformIndices2 = uniformIndices)
		{
			fixed (int* params2 = @params)
			{
				Delegates.pglGetActiveUniformsiv(program, uniformCount, uniformIndices2, (int)pname, params2);
			}
		}
	}

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public unsafe static void GetActiveUniforms(uint program, uint[] uniformIndices, UniformPName pname, [Out] int[] @params)
	{
		fixed (uint* uniformIndices2 = uniformIndices)
		{
			fixed (int* params2 = @params)
			{
				Delegates.pglGetActiveUniformsiv(program, uniformIndices.Length, uniformIndices2, (int)pname, params2);
			}
		}
	}

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public unsafe static void GetActiveUniformName(uint program, uint uniformIndex, int bufSize, out int length, StringBuilder uniformName)
	{
		fixed (int* length2 = &length)
		{
			Delegates.pglGetActiveUniformName(program, uniformIndex, bufSize, length2, uniformName);
		}
	}

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public static uint GetUniformBlockIndex(uint program, string uniformBlockName)
	{
		return Delegates.pglGetUniformBlockIndex(program, uniformBlockName);
	}

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public unsafe static void GetActiveUniformBlock(uint program, uint uniformBlockIndex, UniformBlockPName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetActiveUniformBlockiv(program, uniformBlockIndex, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public unsafe static void GetActiveUniformBlock(uint program, uint uniformBlockIndex, UniformBlockPName pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetActiveUniformBlockiv(program, uniformBlockIndex, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public unsafe static void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, out int length, StringBuilder uniformBlockName)
	{
		fixed (int* length2 = &length)
		{
			Delegates.pglGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length2, uniformBlockName);
		}
	}

	[RequiredByFeature("GL_VERSION_3_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_uniform_buffer_object", Api = "gl|glcore")]
	public static void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding)
	{
		Delegates.pglUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_elements_base_vertex", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_elements_base_vertex", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_elements_base_vertex", Api = "gles2")]
	public static void DrawElementsBaseVertex(PrimitiveType mode, int count, DrawElementsType type, nint indices, int basevertex)
	{
		Delegates.pglDrawElementsBaseVertex((int)mode, count, (int)type, indices, basevertex);
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_elements_base_vertex", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_elements_base_vertex", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_elements_base_vertex", Api = "gles2")]
	public static void DrawElementsBaseVertex(PrimitiveType mode, int count, DrawElementsType type, object indices, int basevertex)
	{
		GCHandle gCHandle = GCHandle.Alloc(indices, GCHandleType.Pinned);
		try
		{
			DrawElementsBaseVertex(mode, count, type, gCHandle.AddrOfPinnedObject(), basevertex);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_elements_base_vertex", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_elements_base_vertex", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_elements_base_vertex", Api = "gles2")]
	public static void DrawRangeElementsBaseVertex(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint indices, int basevertex)
	{
		Delegates.pglDrawRangeElementsBaseVertex((int)mode, start, end, count, (int)type, indices, basevertex);
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_elements_base_vertex", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_elements_base_vertex", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_elements_base_vertex", Api = "gles2")]
	public static void DrawRangeElementsBaseVertex(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, object indices, int basevertex)
	{
		GCHandle gCHandle = GCHandle.Alloc(indices, GCHandleType.Pinned);
		try
		{
			DrawRangeElementsBaseVertex(mode, start, end, count, type, gCHandle.AddrOfPinnedObject(), basevertex);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_elements_base_vertex", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_elements_base_vertex", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_elements_base_vertex", Api = "gles2")]
	public static void DrawElementsInstancedBaseVertex(PrimitiveType mode, int count, DrawElementsType type, nint indices, int primcount, int basevertex)
	{
		Delegates.pglDrawElementsInstancedBaseVertex((int)mode, count, (int)type, indices, primcount, basevertex);
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_elements_base_vertex", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_elements_base_vertex", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_elements_base_vertex", Api = "gles2")]
	public static void DrawElementsInstancedBaseVertex(PrimitiveType mode, int count, DrawElementsType type, object indices, int primcount, int basevertex)
	{
		GCHandle gCHandle = GCHandle.Alloc(indices, GCHandleType.Pinned);
		try
		{
			DrawElementsInstancedBaseVertex(mode, count, type, gCHandle.AddrOfPinnedObject(), primcount, basevertex);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ARB_draw_elements_base_vertex", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_elements_base_vertex", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_elements_base_vertex", Api = "gles2")]
	public unsafe static void MultiDrawElementsBaseVertex(PrimitiveType mode, int[] count, DrawElementsType type, nint[] indices, int drawcount, int[] basevertex)
	{
		fixed (int* count2 = count)
		{
			fixed (nint* indices2 = indices)
			{
				fixed (int* basevertex2 = basevertex)
				{
					Delegates.pglMultiDrawElementsBaseVertex((int)mode, count2, (int)type, indices2, drawcount, basevertex2);
				}
			}
		}
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ARB_draw_elements_base_vertex", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_elements_base_vertex", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_elements_base_vertex", Api = "gles2")]
	public unsafe static void MultiDrawElementsBaseVertex(PrimitiveType mode, int[] count, DrawElementsType type, nint[] indices, int[] basevertex)
	{
		fixed (int* count2 = count)
		{
			fixed (nint* indices2 = indices)
			{
				fixed (int* basevertex2 = basevertex)
				{
					Delegates.pglMultiDrawElementsBaseVertex((int)mode, count2, (int)type, indices2, count.Length, basevertex2);
				}
			}
		}
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ARB_provoking_vertex", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_provoking_vertex")]
	public static void ProvokingVertex(VertexProvokingMode provokeMode)
	{
		Delegates.pglProvokingVertex((int)provokeMode);
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	public static int FenceSync(SyncCondition condition, SyncBehaviorFlags flags)
	{
		return Delegates.pglFenceSync((int)condition, (uint)flags);
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	public static bool IsSync(int sync)
	{
		return Delegates.pglIsSync(sync);
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	public static void DeleteSync(int sync)
	{
		Delegates.pglDeleteSync(sync);
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	public static SyncStatus ClientWaitSync(int sync, SyncObjectMask flags, ulong timeout)
	{
		return (SyncStatus)Delegates.pglClientWaitSync(sync, (uint)flags, timeout);
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	public static void WaitSync(int sync, SyncBehaviorFlags flags, ulong timeout)
	{
		Delegates.pglWaitSync(sync, (uint)flags, timeout);
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	public unsafe static void Get(int pname, [Out] long[] data)
	{
		fixed (long* data2 = data)
		{
			Delegates.pglGetInteger64v(pname, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	public unsafe static void Get(GetPName pname, [Out] long[] data)
	{
		fixed (long* data2 = data)
		{
			Delegates.pglGetInteger64v((int)pname, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	public unsafe static void Get(int pname, out long data)
	{
		fixed (long* data2 = &data)
		{
			Delegates.pglGetInteger64v(pname, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	public unsafe static void Get(GetPName pname, out long data)
	{
		fixed (long* data2 = &data)
		{
			Delegates.pglGetInteger64v((int)pname, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	public unsafe static void Get(GetPName pname, [Out] long* data)
	{
		Delegates.pglGetInteger64v((int)pname, data);
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	public unsafe static void GetInteger64<T>(GetPName pname, out T data) where T : struct
	{
		data = default(T);
		TypedReference typedReference = __makeref(data);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetInteger64v((int)pname, (long*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	public unsafe static void GetSync(int sync, SyncParameterName pname, int count, out int length, [Out] int[] values)
	{
		fixed (int* length2 = &length)
		{
			fixed (int* values2 = values)
			{
				Delegates.pglGetSynciv(sync, (int)pname, count, length2, values2);
			}
		}
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_APPLE_sync", Api = "gles1|gles2")]
	[RequiredByFeature("GL_ARB_sync", Api = "gl|glcore")]
	public unsafe static void GetSync(int sync, SyncParameterName pname, out int length, [Out] int[] values)
	{
		fixed (int* length2 = &length)
		{
			fixed (int* values2 = values)
			{
				Delegates.pglGetSynciv(sync, (int)pname, values.Length, length2, values2);
			}
		}
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public unsafe static void Get(int target, uint index, [Out] long[] data)
	{
		fixed (long* data2 = data)
		{
			Delegates.pglGetInteger64i_v(target, index, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public unsafe static void Get(GetPName target, uint index, [Out] long[] data)
	{
		fixed (long* data2 = data)
		{
			Delegates.pglGetInteger64i_v((int)target, index, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public unsafe static void Get(int target, uint index, out long data)
	{
		fixed (long* data2 = &data)
		{
			Delegates.pglGetInteger64i_v(target, index, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public unsafe static void Get(GetPName target, uint index, out long data)
	{
		fixed (long* data2 = &data)
		{
			Delegates.pglGetInteger64i_v((int)target, index, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public unsafe static void Get(GetPName target, uint index, [Out] long* data)
	{
		Delegates.pglGetInteger64i_v((int)target, index, data);
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public unsafe static void GetInteger64<T>(GetPName target, uint index, out T data) where T : struct
	{
		data = default(T);
		TypedReference typedReference = __makeref(data);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetInteger64i_v((int)target, index, (long*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	public unsafe static void GetBufferParameter(BufferTarget target, BufferPNameARB value, [Out] long[] data)
	{
		fixed (long* @params = data)
		{
			Delegates.pglGetBufferParameteri64v((int)target, (int)value, @params);
		}
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader", Api = "gles2")]
	[RequiredByFeature("GL_NV_geometry_program4")]
	[RequiredByFeature("GL_OES_geometry_shader", Api = "gles2")]
	public static void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level)
	{
		Delegates.pglFramebufferTexture((int)target, (int)attachment, texture, level);
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	public static void TexImage2DMultisample(TextureTarget target, int samples, InternalFormat internalformat, int width, int height, bool fixedsamplelocations)
	{
		Delegates.pglTexImage2DMultisample((int)target, samples, (int)internalformat, width, height, fixedsamplelocations);
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	public static void TexImage3DMultisample(TextureTarget target, int samples, InternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
	{
		Delegates.pglTexImage3DMultisample((int)target, samples, (int)internalformat, width, height, depth, fixedsamplelocations);
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_explicit_multisample")]
	public unsafe static void GetMultisample(GetMultisamplePNameNV pname, uint index, [Out] float[] val)
	{
		fixed (float* val2 = val)
		{
			Delegates.pglGetMultisamplefv((int)pname, index, val2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_multisample", Api = "gl|glcore")]
	public static void SampleMask(uint maskNumber, uint mask)
	{
		Delegates.pglSampleMaski(maskNumber, mask);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_blend_func_extended", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_blend_func_extended", Api = "gles2")]
	public static void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, string name)
	{
		Delegates.pglBindFragDataLocationIndexed(program, colorNumber, index, name);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_blend_func_extended", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_blend_func_extended", Api = "gles2")]
	public static int GetFragDataIndex(uint program, string name)
	{
		return Delegates.pglGetFragDataIndex(program, name);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public unsafe static void GenSamplers(uint[] samplers)
	{
		fixed (uint* samplers2 = samplers)
		{
			Delegates.pglGenSamplers(samplers.Length, samplers2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public unsafe static uint GenSampler()
	{
		uint result = default(uint);
		Delegates.pglGenSamplers(1, &result);
		return result;
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public unsafe static void DeleteSamplers(params uint[] samplers)
	{
		fixed (uint* samplers2 = samplers)
		{
			Delegates.pglDeleteSamplers(samplers.Length, samplers2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public static bool IsSampler(uint sampler)
	{
		return Delegates.pglIsSampler(sampler);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public static void BindSampler(uint unit, uint sampler)
	{
		Delegates.pglBindSampler(unit, sampler);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public static void SamplerParameter(uint sampler, SamplerParameterI pname, int param)
	{
		Delegates.pglSamplerParameteri(sampler, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public unsafe static void SamplerParameter(uint sampler, SamplerParameterI pname, int[] param)
	{
		fixed (int* param2 = param)
		{
			Delegates.pglSamplerParameteriv(sampler, (int)pname, param2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public unsafe static void SamplerParameter(uint sampler, SamplerParameterI pname, int* param)
	{
		Delegates.pglSamplerParameteriv(sampler, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public unsafe static void SamplerParameteri<T>(uint sampler, SamplerParameterI pname, T param) where T : struct
	{
		TypedReference typedReference = __makeref(param);
		nint num = *(nint*)(&typedReference);
		Delegates.pglSamplerParameteriv(sampler, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public static void SamplerParameter(uint sampler, SamplerParameterF pname, float param)
	{
		Delegates.pglSamplerParameterf(sampler, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public unsafe static void SamplerParameter(uint sampler, SamplerParameterF pname, float[] param)
	{
		fixed (float* param2 = param)
		{
			Delegates.pglSamplerParameterfv(sampler, (int)pname, param2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public unsafe static void SamplerParameter(uint sampler, SamplerParameterF pname, float* param)
	{
		Delegates.pglSamplerParameterfv(sampler, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public unsafe static void SamplerParameterf<T>(uint sampler, SamplerParameterF pname, T param) where T : struct
	{
		TypedReference typedReference = __makeref(param);
		nint num = *(nint*)(&typedReference);
		Delegates.pglSamplerParameterfv(sampler, (int)pname, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void SamplerParameterI(uint sampler, SamplerParameterI pname, int[] param)
	{
		fixed (int* param2 = param)
		{
			Delegates.pglSamplerParameterIiv(sampler, (int)pname, param2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void SamplerParameterI(uint sampler, SamplerParameterI pname, int* param)
	{
		Delegates.pglSamplerParameterIiv(sampler, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void SamplerParameterIi<T>(uint sampler, SamplerParameterI pname, T param) where T : struct
	{
		TypedReference typedReference = __makeref(param);
		nint num = *(nint*)(&typedReference);
		Delegates.pglSamplerParameterIiv(sampler, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void SamplerParameterI(uint sampler, SamplerParameterI pname, uint[] param)
	{
		fixed (uint* param2 = param)
		{
			Delegates.pglSamplerParameterIuiv(sampler, (int)pname, param2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void SamplerParameterI(uint sampler, SamplerParameterI pname, uint* param)
	{
		Delegates.pglSamplerParameterIuiv(sampler, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void SamplerParameterIui<T>(uint sampler, SamplerParameterI pname, T param) where T : struct
	{
		TypedReference typedReference = __makeref(param);
		nint num = *(nint*)(&typedReference);
		Delegates.pglSamplerParameterIuiv(sampler, (int)pname, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterI pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetSamplerParameteriv(sampler, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterI pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetSamplerParameteriv(sampler, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterI pname, [Out] int* @params)
	{
		Delegates.pglGetSamplerParameteriv(sampler, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public unsafe static void GetSamplerParameteri<T>(uint sampler, SamplerParameterI pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetSamplerParameteriv(sampler, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void GetSamplerParameterI(uint sampler, SamplerParameterI pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetSamplerParameterIiv(sampler, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void GetSamplerParameterI(uint sampler, SamplerParameterI pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetSamplerParameterIiv(sampler, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void GetSamplerParameterI(uint sampler, SamplerParameterI pname, [Out] int* @params)
	{
		Delegates.pglGetSamplerParameterIiv(sampler, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void GetSamplerParameterIi<T>(uint sampler, SamplerParameterI pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetSamplerParameterIiv(sampler, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterF pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetSamplerParameterfv(sampler, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterF pname, out float @params)
	{
		fixed (float* params2 = &@params)
		{
			Delegates.pglGetSamplerParameterfv(sampler, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterF pname, [Out] float* @params)
	{
		Delegates.pglGetSamplerParameterfv(sampler, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	public unsafe static void GetSamplerParameterf<T>(uint sampler, SamplerParameterF pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetSamplerParameterfv(sampler, (int)pname, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void GetSamplerParameterI(uint sampler, SamplerParameterI pname, [Out] uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglGetSamplerParameterIuiv(sampler, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void GetSamplerParameterI(uint sampler, SamplerParameterI pname, out uint @params)
	{
		fixed (uint* params2 = &@params)
		{
			Delegates.pglGetSamplerParameterIuiv(sampler, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void GetSamplerParameterI(uint sampler, SamplerParameterI pname, [Out] uint* @params)
	{
		Delegates.pglGetSamplerParameterIuiv(sampler, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sampler_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_border_clamp", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_border_clamp", Api = "gles2")]
	public unsafe static void GetSamplerParameterIui<T>(uint sampler, SamplerParameterI pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetSamplerParameterIuiv(sampler, (int)pname, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_timer_query", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	public static void QueryCounter(uint id, QueryCounterTarget target)
	{
		Delegates.pglQueryCounter(id, (int)target);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_timer_query", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	[RequiredByFeature("GL_EXT_timer_query")]
	public unsafe static void GetQueryObject(uint id, QueryObjectParameterName pname, [Out] long[] @params)
	{
		fixed (long* params2 = @params)
		{
			Delegates.pglGetQueryObjecti64v(id, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_timer_query", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	[RequiredByFeature("GL_EXT_timer_query")]
	public unsafe static void GetQueryObject(uint id, QueryObjectParameterName pname, out long @params)
	{
		fixed (long* params2 = &@params)
		{
			Delegates.pglGetQueryObjecti64v(id, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_timer_query", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	[RequiredByFeature("GL_EXT_timer_query")]
	public unsafe static void GetQueryObject(uint id, QueryObjectParameterName pname, [Out] ulong[] @params)
	{
		fixed (ulong* params2 = @params)
		{
			Delegates.pglGetQueryObjectui64v(id, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_timer_query", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_disjoint_timer_query", Api = "gles2")]
	[RequiredByFeature("GL_EXT_timer_query")]
	public unsafe static void GetQueryObject(uint id, QueryObjectParameterName pname, out ulong @params)
	{
		fixed (ulong* params2 = &@params)
		{
			Delegates.pglGetQueryObjectui64v(id, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ANGLE_instanced_arrays", Api = "gles2")]
	[RequiredByFeature("GL_ARB_instanced_arrays", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_instanced_arrays", Api = "gles2")]
	[RequiredByFeature("GL_NV_instanced_arrays", Api = "gles2")]
	public static void VertexAttribDivisor(uint index, uint divisor)
	{
		Delegates.pglVertexAttribDivisor(index, divisor);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
	public static void VertexAttribP1(uint index, VertexAttribPointerType type, bool normalized, uint value)
	{
		Delegates.pglVertexAttribP1ui(index, (int)type, normalized, value);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
	public unsafe static void VertexAttribP1(uint index, VertexAttribPointerType type, bool normalized, uint[] value)
	{
		fixed (uint* value2 = value)
		{
			Delegates.pglVertexAttribP1uiv(index, (int)type, normalized, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
	public static void VertexAttribP2(uint index, VertexAttribPointerType type, bool normalized, uint value)
	{
		Delegates.pglVertexAttribP2ui(index, (int)type, normalized, value);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
	public unsafe static void VertexAttribP2(uint index, VertexAttribPointerType type, bool normalized, uint[] value)
	{
		fixed (uint* value2 = value)
		{
			Delegates.pglVertexAttribP2uiv(index, (int)type, normalized, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
	public static void VertexAttribP3(uint index, VertexAttribPointerType type, bool normalized, uint value)
	{
		Delegates.pglVertexAttribP3ui(index, (int)type, normalized, value);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
	public unsafe static void VertexAttribP3(uint index, VertexAttribPointerType type, bool normalized, uint[] value)
	{
		fixed (uint* value2 = value)
		{
			Delegates.pglVertexAttribP3uiv(index, (int)type, normalized, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
	public static void VertexAttribP4(uint index, VertexAttribPointerType type, bool normalized, uint value)
	{
		Delegates.pglVertexAttribP4ui(index, (int)type, normalized, value);
	}

	[RequiredByFeature("GL_VERSION_3_3")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Api = "gl|glcore")]
	public unsafe static void VertexAttribP4(uint index, VertexAttribPointerType type, bool normalized, uint[] value)
	{
		fixed (uint* value2 = value)
		{
			Delegates.pglVertexAttribP4uiv(index, (int)type, normalized, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public static void VertexP2(VertexPointerType type, uint value)
	{
		Delegates.pglVertexP2ui((int)type, value);
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public unsafe static void VertexP2(VertexPointerType type, uint[] value)
	{
		fixed (uint* value2 = value)
		{
			Delegates.pglVertexP2uiv((int)type, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public static void VertexP3(VertexPointerType type, uint value)
	{
		Delegates.pglVertexP3ui((int)type, value);
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public unsafe static void VertexP3(VertexPointerType type, uint[] value)
	{
		fixed (uint* value2 = value)
		{
			Delegates.pglVertexP3uiv((int)type, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public static void VertexP4(VertexPointerType type, uint value)
	{
		Delegates.pglVertexP4ui((int)type, value);
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public unsafe static void VertexP4(VertexPointerType type, uint[] value)
	{
		fixed (uint* value2 = value)
		{
			Delegates.pglVertexP4uiv((int)type, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public static void TexCoordP1(TexCoordPointerType type, uint coords)
	{
		Delegates.pglTexCoordP1ui((int)type, coords);
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public unsafe static void TexCoordP1(TexCoordPointerType type, uint[] coords)
	{
		fixed (uint* coords2 = coords)
		{
			Delegates.pglTexCoordP1uiv((int)type, coords2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public static void TexCoordP2(TexCoordPointerType type, uint coords)
	{
		Delegates.pglTexCoordP2ui((int)type, coords);
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public unsafe static void TexCoordP2(TexCoordPointerType type, uint[] coords)
	{
		fixed (uint* coords2 = coords)
		{
			Delegates.pglTexCoordP2uiv((int)type, coords2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public static void TexCoordP3(TexCoordPointerType type, uint coords)
	{
		Delegates.pglTexCoordP3ui((int)type, coords);
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public unsafe static void TexCoordP3(TexCoordPointerType type, uint[] coords)
	{
		fixed (uint* coords2 = coords)
		{
			Delegates.pglTexCoordP3uiv((int)type, coords2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public static void TexCoordP4(TexCoordPointerType type, uint coords)
	{
		Delegates.pglTexCoordP4ui((int)type, coords);
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public unsafe static void TexCoordP4(TexCoordPointerType type, uint[] coords)
	{
		fixed (uint* coords2 = coords)
		{
			Delegates.pglTexCoordP4uiv((int)type, coords2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public static void MultiTexCoordP1(TextureUnit texture, TexCoordPointerType type, uint coords)
	{
		Delegates.pglMultiTexCoordP1ui((int)texture, (int)type, coords);
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public unsafe static void MultiTexCoordP1(TextureUnit texture, TexCoordPointerType type, uint[] coords)
	{
		fixed (uint* coords2 = coords)
		{
			Delegates.pglMultiTexCoordP1uiv((int)texture, (int)type, coords2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public static void MultiTexCoordP2(TextureUnit texture, TexCoordPointerType type, uint coords)
	{
		Delegates.pglMultiTexCoordP2ui((int)texture, (int)type, coords);
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public unsafe static void MultiTexCoordP2(TextureUnit texture, TexCoordPointerType type, uint[] coords)
	{
		fixed (uint* coords2 = coords)
		{
			Delegates.pglMultiTexCoordP2uiv((int)texture, (int)type, coords2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public static void MultiTexCoordP3(TextureUnit texture, TexCoordPointerType type, uint coords)
	{
		Delegates.pglMultiTexCoordP3ui((int)texture, (int)type, coords);
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public unsafe static void MultiTexCoordP3(TextureUnit texture, TexCoordPointerType type, uint[] coords)
	{
		fixed (uint* coords2 = coords)
		{
			Delegates.pglMultiTexCoordP3uiv((int)texture, (int)type, coords2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public static void MultiTexCoordP4(TextureUnit texture, TexCoordPointerType type, uint coords)
	{
		Delegates.pglMultiTexCoordP4ui((int)texture, (int)type, coords);
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public unsafe static void MultiTexCoordP4(TextureUnit texture, TexCoordPointerType type, uint[] coords)
	{
		fixed (uint* coords2 = coords)
		{
			Delegates.pglMultiTexCoordP4uiv((int)texture, (int)type, coords2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public static void NormalP3(NormalPointerType type, uint coords)
	{
		Delegates.pglNormalP3ui((int)type, coords);
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public unsafe static void NormalP3(NormalPointerType type, uint[] coords)
	{
		fixed (uint* coords2 = coords)
		{
			Delegates.pglNormalP3uiv((int)type, coords2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public static void ColorP3(ColorPointerType type, uint color)
	{
		Delegates.pglColorP3ui((int)type, color);
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public unsafe static void ColorP3(ColorPointerType type, uint[] color)
	{
		fixed (uint* color2 = color)
		{
			Delegates.pglColorP3uiv((int)type, color2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public static void ColorP4(ColorPointerType type, uint color)
	{
		Delegates.pglColorP4ui((int)type, color);
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public unsafe static void ColorP4(ColorPointerType type, uint[] color)
	{
		fixed (uint* color2 = color)
		{
			Delegates.pglColorP4uiv((int)type, color2);
		}
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public static void SecondaryColorP3(ColorPointerType type, uint color)
	{
		Delegates.pglSecondaryColorP3ui((int)type, color);
	}

	[RequiredByFeature("GL_VERSION_3_3", Profile = "compatibility")]
	[RequiredByFeature("GL_ARB_vertex_type_2_10_10_10_rev", Profile = "compatibility")]
	public unsafe static void SecondaryColorP3(ColorPointerType type, uint[] color)
	{
		fixed (uint* color2 = color)
		{
			Delegates.pglSecondaryColorP3uiv((int)type, color2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_sample_shading", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_sample_shading", Api = "gles2")]
	public static void MinSampleShading(float value)
	{
		Delegates.pglMinSampleShading(value);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_AMD_draw_buffers_blend")]
	[RequiredByFeature("GL_ARB_draw_buffers_blend", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	public static void BlendEquation(uint buf, BlendEquationMode mode)
	{
		Delegates.pglBlendEquationi(buf, (int)mode);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_AMD_draw_buffers_blend")]
	[RequiredByFeature("GL_ARB_draw_buffers_blend", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	public static void BlendEquationSeparate(uint buf, BlendEquationMode modeRGB, BlendEquationMode modeAlpha)
	{
		Delegates.pglBlendEquationSeparatei(buf, (int)modeRGB, (int)modeAlpha);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_AMD_draw_buffers_blend")]
	[RequiredByFeature("GL_ARB_draw_buffers_blend", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	public static void BlendFunc(uint buf, BlendingFactor src, BlendingFactor dst)
	{
		Delegates.pglBlendFunci(buf, (int)src, (int)dst);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_AMD_draw_buffers_blend")]
	[RequiredByFeature("GL_ARB_draw_buffers_blend", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_buffers_indexed", Api = "gles2")]
	[RequiredByFeature("GL_OES_draw_buffers_indexed", Api = "gles2")]
	public static void BlendFuncSeparate(uint buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha)
	{
		Delegates.pglBlendFuncSeparatei(buf, (int)srcRGB, (int)dstRGB, (int)srcAlpha, (int)dstAlpha);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_indirect", Api = "gl|glcore")]
	public static void DrawArraysIndirect(PrimitiveType mode, nint indirect)
	{
		Delegates.pglDrawArraysIndirect((int)mode, indirect);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_indirect", Api = "gl|glcore")]
	public static void DrawArraysIndirect(PrimitiveType mode, object indirect)
	{
		GCHandle gCHandle = GCHandle.Alloc(indirect, GCHandleType.Pinned);
		try
		{
			DrawArraysIndirect(mode, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_indirect", Api = "gl|glcore")]
	public static void DrawElementsIndirect(PrimitiveType mode, DrawElementsType type, nint indirect)
	{
		Delegates.pglDrawElementsIndirect((int)mode, (int)type, indirect);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_draw_indirect", Api = "gl|glcore")]
	public static void DrawElementsIndirect(PrimitiveType mode, DrawElementsType type, object indirect)
	{
		GCHandle gCHandle = GCHandle.Alloc(indirect, GCHandleType.Pinned);
		try
		{
			DrawElementsIndirect(mode, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public static void Uniform1(int location, double x)
	{
		Delegates.pglUniform1d(location, x);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public static void Uniform2(int location, double x, double y)
	{
		Delegates.pglUniform2d(location, x, y);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public static void Uniform3(int location, double x, double y, double z)
	{
		Delegates.pglUniform3d(location, x, y, z);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public static void Uniform4(int location, double x, double y, double z, double w)
	{
		Delegates.pglUniform4d(location, x, y, z, w);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void Uniform1(int location, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglUniform1dv(location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void Uniform1(int location, int count, double* value)
	{
		Delegates.pglUniform1dv(location, count, value);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void Uniform1d<T>(int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniform1dv(location, count, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void Uniform2(int location, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglUniform2dv(location, value.Length / 2, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void Uniform2(int location, int count, double* value)
	{
		Delegates.pglUniform2dv(location, count, value);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void Uniform2d<T>(int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniform2dv(location, count, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void Uniform3(int location, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglUniform3dv(location, value.Length / 3, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void Uniform3(int location, int count, double* value)
	{
		Delegates.pglUniform3dv(location, count, value);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void Uniform3d<T>(int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniform3dv(location, count, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void Uniform4(int location, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglUniform4dv(location, value.Length / 4, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void Uniform4(int location, int count, double* value)
	{
		Delegates.pglUniform4dv(location, count, value);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void Uniform4d<T>(int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniform4dv(location, count, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix2(int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglUniformMatrix2dv(location, value.Length / 4, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix2(int location, int count, bool transpose, double* value)
	{
		Delegates.pglUniformMatrix2dv(location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix2d<T>(int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniformMatrix2dv(location, count, transpose, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix3(int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglUniformMatrix3dv(location, value.Length / 9, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix3(int location, int count, bool transpose, double* value)
	{
		Delegates.pglUniformMatrix3dv(location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix3d<T>(int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniformMatrix3dv(location, count, transpose, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix4(int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglUniformMatrix4dv(location, value.Length / 16, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix4(int location, int count, bool transpose, double* value)
	{
		Delegates.pglUniformMatrix4dv(location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix4d<T>(int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniformMatrix4dv(location, count, transpose, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix2x3(int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglUniformMatrix2x3dv(location, value.Length / 6, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix2x3(int location, int count, bool transpose, double* value)
	{
		Delegates.pglUniformMatrix2x3dv(location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix2x3d<T>(int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniformMatrix2x3dv(location, count, transpose, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix2x4(int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglUniformMatrix2x4dv(location, value.Length / 8, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix2x4(int location, int count, bool transpose, double* value)
	{
		Delegates.pglUniformMatrix2x4dv(location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix2x4d<T>(int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniformMatrix2x4dv(location, count, transpose, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix3x2(int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglUniformMatrix3x2dv(location, value.Length / 6, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix3x2(int location, int count, bool transpose, double* value)
	{
		Delegates.pglUniformMatrix3x2dv(location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix3x2d<T>(int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniformMatrix3x2dv(location, count, transpose, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix3x4(int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglUniformMatrix3x4dv(location, value.Length / 12, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix3x4(int location, int count, bool transpose, double* value)
	{
		Delegates.pglUniformMatrix3x4dv(location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix3x4d<T>(int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniformMatrix3x4dv(location, count, transpose, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix4x2(int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglUniformMatrix4x2dv(location, value.Length / 8, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix4x2(int location, int count, bool transpose, double* value)
	{
		Delegates.pglUniformMatrix4x2dv(location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix4x2d<T>(int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniformMatrix4x2dv(location, count, transpose, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix4x3(int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglUniformMatrix4x3dv(location, value.Length / 12, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix4x3(int location, int count, bool transpose, double* value)
	{
		Delegates.pglUniformMatrix4x3dv(location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void UniformMatrix4x3d<T>(int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglUniformMatrix4x3dv(location, count, transpose, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void GetUniform(uint program, int location, [Out] double[] @params)
	{
		fixed (double* params2 = @params)
		{
			Delegates.pglGetUniformdv(program, location, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void GetUniform(uint program, int location, [Out] double* @params)
	{
		Delegates.pglGetUniformdv(program, location, @params);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_gpu_shader_fp64", Api = "gl|glcore")]
	public unsafe static void GetUniformd<T>(uint program, int location, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetUniformdv(program, location, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	public static int GetSubroutineUniformLocation(uint program, ShaderType shadertype, string name)
	{
		return Delegates.pglGetSubroutineUniformLocation(program, (int)shadertype, name);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	public static uint GetSubroutineIndex(uint program, ShaderType shadertype, string name)
	{
		return Delegates.pglGetSubroutineIndex(program, (int)shadertype, name);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	public unsafe static void GetActiveSubroutineUniform(uint program, ShaderType shadertype, uint index, SubroutineParameterName pname, [Out] int[] values)
	{
		fixed (int* values2 = values)
		{
			Delegates.pglGetActiveSubroutineUniformiv(program, (int)shadertype, index, (int)pname, values2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	public unsafe static void GetActiveSubroutineUniform(uint program, ShaderType shadertype, uint index, SubroutineParameterName pname, out int values)
	{
		fixed (int* values2 = &values)
		{
			Delegates.pglGetActiveSubroutineUniformiv(program, (int)shadertype, index, (int)pname, values2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	public unsafe static void GetActiveSubroutineUniformName(uint program, ShaderType shadertype, uint index, int bufSize, out int length, StringBuilder name)
	{
		fixed (int* length2 = &length)
		{
			Delegates.pglGetActiveSubroutineUniformName(program, (int)shadertype, index, bufSize, length2, name);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	public unsafe static void GetActiveSubroutineName(uint program, ShaderType shadertype, uint index, int bufSize, out int length, StringBuilder name)
	{
		fixed (int* length2 = &length)
		{
			Delegates.pglGetActiveSubroutineName(program, (int)shadertype, index, bufSize, length2, name);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	public unsafe static void UniformSubroutines(ShaderType shadertype, int count, uint[] indices)
	{
		fixed (uint* indices2 = indices)
		{
			Delegates.pglUniformSubroutinesuiv((int)shadertype, count, indices2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	public unsafe static void UniformSubroutines(ShaderType shadertype, uint[] indices)
	{
		fixed (uint* indices2 = indices)
		{
			Delegates.pglUniformSubroutinesuiv((int)shadertype, indices.Length, indices2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	public unsafe static void GetUniformSubroutine(ShaderType shadertype, int location, out uint @params)
	{
		fixed (uint* params2 = &@params)
		{
			Delegates.pglGetUniformSubroutineuiv((int)shadertype, location, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_shader_subroutine", Api = "gl|glcore")]
	public unsafe static void GetProgramStage(uint program, ShaderType shadertype, ProgramStagePName pname, out int values)
	{
		fixed (int* values2 = &values)
		{
			Delegates.pglGetProgramStageiv(program, (int)shadertype, (int)pname, values2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_tessellation_shader", Api = "gles2")]
	[RequiredByFeature("GL_OES_tessellation_shader", Api = "gles2")]
	public static void PatchParameter(PatchParameterName pname, int value)
	{
		Delegates.pglPatchParameteri((int)pname, value);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_tessellation_shader", Api = "gl|glcore")]
	public unsafe static void PatchParameter(PatchParameterName pname, float[] values)
	{
		fixed (float* values2 = values)
		{
			Delegates.pglPatchParameterfv((int)pname, values2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
	public static void BindTransformFeedback(BindTransformFeedbackTarget target, uint id)
	{
		Delegates.pglBindTransformFeedback((int)target, id);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_transform_feedback2")]
	public unsafe static void DeleteTransformFeedbacks(params uint[] ids)
	{
		fixed (uint* ids2 = ids)
		{
			Delegates.pglDeleteTransformFeedbacks(ids.Length, ids2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_transform_feedback2")]
	public unsafe static void GenTransformFeedbacks(uint[] ids)
	{
		fixed (uint* ids2 = ids)
		{
			Delegates.pglGenTransformFeedbacks(ids.Length, ids2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_transform_feedback2")]
	public unsafe static uint GenTransformFeedback()
	{
		uint result = default(uint);
		Delegates.pglGenTransformFeedbacks(1, &result);
		return result;
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_transform_feedback2")]
	public static bool IsTransformFeedback(uint id)
	{
		return Delegates.pglIsTransformFeedback(id);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_transform_feedback2")]
	public static void PauseTransformFeedback()
	{
		Delegates.pglPauseTransformFeedback();
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_transform_feedback2")]
	public static void ResumeTransformFeedback()
	{
		Delegates.pglResumeTransformFeedback();
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_transform_feedback2", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_transform_feedback", Api = "gles2")]
	[RequiredByFeature("GL_NV_transform_feedback2")]
	public static void DrawTransformFeedback(PrimitiveType mode, uint id)
	{
		Delegates.pglDrawTransformFeedback((int)mode, id);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_transform_feedback3", Api = "gl|glcore")]
	public static void DrawTransformFeedbackStream(PrimitiveType mode, uint id, uint stream)
	{
		Delegates.pglDrawTransformFeedbackStream((int)mode, id, stream);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_transform_feedback3", Api = "gl|glcore")]
	public static void BeginQueryIndexed(QueryTarget target, uint index, uint id)
	{
		Delegates.pglBeginQueryIndexed((int)target, index, id);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_transform_feedback3", Api = "gl|glcore")]
	public static void EndQueryIndexed(QueryTarget target, uint index)
	{
		Delegates.pglEndQueryIndexed((int)target, index);
	}

	[RequiredByFeature("GL_VERSION_4_0")]
	[RequiredByFeature("GL_ARB_transform_feedback3", Api = "gl|glcore")]
	public unsafe static void GetQueryIndexed(QueryTarget target, uint index, QueryParameterName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetQueryIndexediv((int)target, index, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	public static void ReleaseShaderCompiler()
	{
		Delegates.pglReleaseShaderCompiler();
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	public unsafe static void ShaderBinary(int count, uint[] shaders, ShaderBinaryFormat binaryFormat, nint binary, int length)
	{
		fixed (uint* shaders2 = shaders)
		{
			Delegates.pglShaderBinary(count, shaders2, (int)binaryFormat, binary, length);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	public unsafe static void ShaderBinary(int count, uint[] shaders, int binaryFormat, nint binary, int length)
	{
		fixed (uint* shaders2 = shaders)
		{
			Delegates.pglShaderBinary(count, shaders2, binaryFormat, binary, length);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	public static void ShaderBinary(int count, uint[] shaders, ShaderBinaryFormat binaryFormat, object binary, int length)
	{
		GCHandle gCHandle = GCHandle.Alloc(binary, GCHandleType.Pinned);
		try
		{
			ShaderBinary(count, shaders, binaryFormat, gCHandle.AddrOfPinnedObject(), length);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	public unsafe static void ShaderBinary(uint[] shaders, ShaderBinaryFormat binaryFormat, nint binary, int length)
	{
		fixed (uint* shaders2 = shaders)
		{
			Delegates.pglShaderBinary(shaders.Length, shaders2, (int)binaryFormat, binary, length);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	public unsafe static void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, [Out] int[] range, out int precision)
	{
		fixed (int* range2 = range)
		{
			fixed (int* precision2 = &precision)
			{
				Delegates.pglGetShaderPrecisionFormat((int)shadertype, (int)precisiontype, range2, precision2);
			}
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	public unsafe static void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, out int range, out int precision)
	{
		fixed (int* range2 = &range)
		{
			fixed (int* precision2 = &precision)
			{
				Delegates.pglGetShaderPrecisionFormat((int)shadertype, (int)precisiontype, range2, precision2);
			}
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_single_precision", Api = "gl|gles1")]
	public static void DepthRange(float n, float f)
	{
		Delegates.pglDepthRangef(n, f);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	[RequiredByFeature("GL_ES_VERSION_2_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_ES2_compatibility", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_single_precision", Api = "gl|gles1")]
	public static void ClearDepth(float d)
	{
		Delegates.pglClearDepthf(d);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_get_program_binary", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_get_program_binary", Api = "gles2")]
	public unsafe static void GetProgramBinary(uint program, int bufSize, out int length, out int binaryFormat, nint binary)
	{
		fixed (int* length2 = &length)
		{
			fixed (int* binaryFormat2 = &binaryFormat)
			{
				Delegates.pglGetProgramBinary(program, bufSize, length2, binaryFormat2, binary);
			}
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_get_program_binary", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_get_program_binary", Api = "gles2")]
	public static void GetProgramBinary(uint program, int bufSize, out int length, out int binaryFormat, object binary)
	{
		GCHandle gCHandle = GCHandle.Alloc(binary, GCHandleType.Pinned);
		try
		{
			GetProgramBinary(program, bufSize, out length, out binaryFormat, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_get_program_binary", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_get_program_binary", Api = "gles2")]
	public static void ProgramBinary(uint program, int binaryFormat, nint binary, int length)
	{
		Delegates.pglProgramBinary(program, binaryFormat, binary, length);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_get_program_binary", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_get_program_binary", Api = "gles2")]
	public static void ProgramBinary(uint program, int binaryFormat, object binary, int length)
	{
		GCHandle gCHandle = GCHandle.Alloc(binary, GCHandleType.Pinned);
		try
		{
			ProgramBinary(program, binaryFormat, gCHandle.AddrOfPinnedObject(), length);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_geometry_shader4", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_get_program_binary", Api = "gl|glcore")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_geometry_shader4")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public static void ProgramParameter(uint program, ProgramParameterPName pname, int value)
	{
		Delegates.pglProgramParameteri(program, (int)pname, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public static void UseProgramStage(uint pipeline, UseProgramStageMask stages, uint program)
	{
		Delegates.pglUseProgramStages(pipeline, (uint)stages, program);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public static void ActiveShaderProgram(uint pipeline, uint program)
	{
		Delegates.pglActiveShaderProgram(pipeline, program);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public static uint CreateShaderProgram(ShaderType type, int count, params string[] strings)
	{
		return Delegates.pglCreateShaderProgramv((int)type, count, strings);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public static uint CreateShaderProgram(ShaderType type, params string[] strings)
	{
		return Delegates.pglCreateShaderProgramv((int)type, strings.Length, strings);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public static void BindProgramPipeline(uint pipeline)
	{
		Delegates.pglBindProgramPipeline(pipeline);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void DeleteProgramPipelines(params uint[] pipelines)
	{
		fixed (uint* pipelines2 = pipelines)
		{
			Delegates.pglDeleteProgramPipelines(pipelines.Length, pipelines2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void GenProgramPipelines(uint[] pipelines)
	{
		fixed (uint* pipelines2 = pipelines)
		{
			Delegates.pglGenProgramPipelines(pipelines.Length, pipelines2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static uint GenProgramPipeline()
	{
		uint result = default(uint);
		Delegates.pglGenProgramPipelines(1, &result);
		return result;
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public static bool IsProgramPipeline(uint pipeline)
	{
		return Delegates.pglIsProgramPipeline(pipeline);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void GetProgramPipeline(uint pipeline, PipelineParameterName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetProgramPipelineiv(pipeline, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void GetProgramPipeline(uint pipeline, PipelineParameterName pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetProgramPipelineiv(pipeline, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public static void ProgramUniform1(uint program, int location, int v0)
	{
		Delegates.pglProgramUniform1i(program, location, v0);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform1(uint program, int location, int[] value)
	{
		fixed (int* value2 = value)
		{
			Delegates.pglProgramUniform1iv(program, location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform1(uint program, int location, int count, int* value)
	{
		Delegates.pglProgramUniform1iv(program, location, count, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform1i<T>(uint program, int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniform1iv(program, location, count, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public static void ProgramUniform1(uint program, int location, float v0)
	{
		Delegates.pglProgramUniform1f(program, location, v0);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform1(uint program, int location, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglProgramUniform1fv(program, location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform1(uint program, int location, int count, float* value)
	{
		Delegates.pglProgramUniform1fv(program, location, count, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform1f<T>(uint program, int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniform1fv(program, location, count, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public static void ProgramUniform1(uint program, int location, double v0)
	{
		Delegates.pglProgramUniform1d(program, location, v0);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniform1(uint program, int location, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniform1dv(program, location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniform1(uint program, int location, int count, double* value)
	{
		Delegates.pglProgramUniform1dv(program, location, count, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniform1d<T>(uint program, int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniform1dv(program, location, count, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public static void ProgramUniform1(uint program, int location, uint v0)
	{
		Delegates.pglProgramUniform1ui(program, location, v0);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform1(uint program, int location, uint[] value)
	{
		fixed (uint* value2 = value)
		{
			Delegates.pglProgramUniform1uiv(program, location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform1(uint program, int location, int count, uint* value)
	{
		Delegates.pglProgramUniform1uiv(program, location, count, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform1ui<T>(uint program, int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniform1uiv(program, location, count, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public static void ProgramUniform2(uint program, int location, int v0, int v1)
	{
		Delegates.pglProgramUniform2i(program, location, v0, v1);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform2(uint program, int location, int[] value)
	{
		fixed (int* value2 = value)
		{
			Delegates.pglProgramUniform2iv(program, location, value.Length / 2, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform2(uint program, int location, int count, int* value)
	{
		Delegates.pglProgramUniform2iv(program, location, count, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform2i<T>(uint program, int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniform2iv(program, location, count, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public static void ProgramUniform2(uint program, int location, float v0, float v1)
	{
		Delegates.pglProgramUniform2f(program, location, v0, v1);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform2(uint program, int location, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglProgramUniform2fv(program, location, value.Length / 2, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform2(uint program, int location, int count, float* value)
	{
		Delegates.pglProgramUniform2fv(program, location, count, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform2f<T>(uint program, int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniform2fv(program, location, count, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public static void ProgramUniform2(uint program, int location, double v0, double v1)
	{
		Delegates.pglProgramUniform2d(program, location, v0, v1);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniform2(uint program, int location, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniform2dv(program, location, value.Length / 2, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniform2(uint program, int location, int count, double* value)
	{
		Delegates.pglProgramUniform2dv(program, location, count, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniform2d<T>(uint program, int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniform2dv(program, location, count, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public static void ProgramUniform2(uint program, int location, uint v0, uint v1)
	{
		Delegates.pglProgramUniform2ui(program, location, v0, v1);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform2(uint program, int location, uint[] value)
	{
		fixed (uint* value2 = value)
		{
			Delegates.pglProgramUniform2uiv(program, location, value.Length / 2, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform2(uint program, int location, int count, uint* value)
	{
		Delegates.pglProgramUniform2uiv(program, location, count, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform2ui<T>(uint program, int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniform2uiv(program, location, count, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public static void ProgramUniform3(uint program, int location, int v0, int v1, int v2)
	{
		Delegates.pglProgramUniform3i(program, location, v0, v1, v2);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform3(uint program, int location, int[] value)
	{
		fixed (int* value2 = value)
		{
			Delegates.pglProgramUniform3iv(program, location, value.Length / 3, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform3(uint program, int location, int count, int* value)
	{
		Delegates.pglProgramUniform3iv(program, location, count, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform3i<T>(uint program, int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniform3iv(program, location, count, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public static void ProgramUniform3(uint program, int location, float v0, float v1, float v2)
	{
		Delegates.pglProgramUniform3f(program, location, v0, v1, v2);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform3(uint program, int location, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglProgramUniform3fv(program, location, value.Length / 3, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform3(uint program, int location, int count, float* value)
	{
		Delegates.pglProgramUniform3fv(program, location, count, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform3f<T>(uint program, int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniform3fv(program, location, count, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public static void ProgramUniform3(uint program, int location, double v0, double v1, double v2)
	{
		Delegates.pglProgramUniform3d(program, location, v0, v1, v2);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniform3(uint program, int location, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniform3dv(program, location, value.Length / 3, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniform3(uint program, int location, int count, double* value)
	{
		Delegates.pglProgramUniform3dv(program, location, count, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniform3d<T>(uint program, int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniform3dv(program, location, count, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public static void ProgramUniform3(uint program, int location, uint v0, uint v1, uint v2)
	{
		Delegates.pglProgramUniform3ui(program, location, v0, v1, v2);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform3(uint program, int location, uint[] value)
	{
		fixed (uint* value2 = value)
		{
			Delegates.pglProgramUniform3uiv(program, location, value.Length / 3, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform3(uint program, int location, int count, uint* value)
	{
		Delegates.pglProgramUniform3uiv(program, location, count, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform3ui<T>(uint program, int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniform3uiv(program, location, count, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public static void ProgramUniform4(uint program, int location, int v0, int v1, int v2, int v3)
	{
		Delegates.pglProgramUniform4i(program, location, v0, v1, v2, v3);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform4(uint program, int location, int[] value)
	{
		fixed (int* value2 = value)
		{
			Delegates.pglProgramUniform4iv(program, location, value.Length / 4, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform4(uint program, int location, int count, int* value)
	{
		Delegates.pglProgramUniform4iv(program, location, count, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform4i<T>(uint program, int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniform4iv(program, location, count, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public static void ProgramUniform4(uint program, int location, float v0, float v1, float v2, float v3)
	{
		Delegates.pglProgramUniform4f(program, location, v0, v1, v2, v3);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform4(uint program, int location, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglProgramUniform4fv(program, location, value.Length / 4, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform4(uint program, int location, int count, float* value)
	{
		Delegates.pglProgramUniform4fv(program, location, count, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform4f<T>(uint program, int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniform4fv(program, location, count, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public static void ProgramUniform4(uint program, int location, double v0, double v1, double v2, double v3)
	{
		Delegates.pglProgramUniform4d(program, location, v0, v1, v2, v3);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniform4(uint program, int location, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniform4dv(program, location, value.Length / 4, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniform4(uint program, int location, int count, double* value)
	{
		Delegates.pglProgramUniform4dv(program, location, count, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniform4d<T>(uint program, int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniform4dv(program, location, count, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public static void ProgramUniform4(uint program, int location, uint v0, uint v1, uint v2, uint v3)
	{
		Delegates.pglProgramUniform4ui(program, location, v0, v1, v2, v3);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform4(uint program, int location, uint[] value)
	{
		fixed (uint* value2 = value)
		{
			Delegates.pglProgramUniform4uiv(program, location, value.Length / 4, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform4(uint program, int location, int count, uint* value)
	{
		Delegates.pglProgramUniform4uiv(program, location, count, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniform4ui<T>(uint program, int location, int count, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniform4uiv(program, location, count, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix2(uint program, int location, bool transpose, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglProgramUniformMatrix2fv(program, location, value.Length / 4, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, float* value)
	{
		Delegates.pglProgramUniformMatrix2fv(program, location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix2f<T>(uint program, int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniformMatrix2fv(program, location, count, transpose, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix3(uint program, int location, bool transpose, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglProgramUniformMatrix3fv(program, location, value.Length / 9, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, float* value)
	{
		Delegates.pglProgramUniformMatrix3fv(program, location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix3f<T>(uint program, int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniformMatrix3fv(program, location, count, transpose, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix4(uint program, int location, bool transpose, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglProgramUniformMatrix4fv(program, location, value.Length / 16, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, float* value)
	{
		Delegates.pglProgramUniformMatrix4fv(program, location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix4f<T>(uint program, int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniformMatrix4fv(program, location, count, transpose, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix2(uint program, int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniformMatrix2dv(program, location, value.Length / 4, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, double* value)
	{
		Delegates.pglProgramUniformMatrix2dv(program, location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix2d<T>(uint program, int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniformMatrix2dv(program, location, count, transpose, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix3(uint program, int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniformMatrix3dv(program, location, value.Length / 9, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, double* value)
	{
		Delegates.pglProgramUniformMatrix3dv(program, location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix3d<T>(uint program, int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniformMatrix3dv(program, location, count, transpose, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix4(uint program, int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniformMatrix4dv(program, location, value.Length / 16, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, double* value)
	{
		Delegates.pglProgramUniformMatrix4dv(program, location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix4d<T>(uint program, int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniformMatrix4dv(program, location, count, transpose, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix2x3(uint program, int location, bool transpose, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglProgramUniformMatrix2x3fv(program, location, value.Length / 6, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, float* value)
	{
		Delegates.pglProgramUniformMatrix2x3fv(program, location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix2x3f<T>(uint program, int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniformMatrix2x3fv(program, location, count, transpose, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix3x2(uint program, int location, bool transpose, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglProgramUniformMatrix3x2fv(program, location, value.Length / 6, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, float* value)
	{
		Delegates.pglProgramUniformMatrix3x2fv(program, location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix3x2f<T>(uint program, int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniformMatrix3x2fv(program, location, count, transpose, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix2x4(uint program, int location, bool transpose, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglProgramUniformMatrix2x4fv(program, location, value.Length / 8, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, float* value)
	{
		Delegates.pglProgramUniformMatrix2x4fv(program, location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix2x4f<T>(uint program, int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniformMatrix2x4fv(program, location, count, transpose, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix4x2(uint program, int location, bool transpose, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglProgramUniformMatrix4x2fv(program, location, value.Length / 8, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, float* value)
	{
		Delegates.pglProgramUniformMatrix4x2fv(program, location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix4x2f<T>(uint program, int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniformMatrix4x2fv(program, location, count, transpose, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix3x4(uint program, int location, bool transpose, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglProgramUniformMatrix3x4fv(program, location, value.Length / 12, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, float* value)
	{
		Delegates.pglProgramUniformMatrix3x4fv(program, location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix3x4f<T>(uint program, int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniformMatrix3x4fv(program, location, count, transpose, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix4x3(uint program, int location, bool transpose, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglProgramUniformMatrix4x3fv(program, location, value.Length / 12, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, float* value)
	{
		Delegates.pglProgramUniformMatrix4x3fv(program, location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_separate_shader_objects", Api = "gles2")]
	public unsafe static void ProgramUniformMatrix4x3f<T>(uint program, int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniformMatrix4x3fv(program, location, count, transpose, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix2x3(uint program, int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniformMatrix2x3dv(program, location, value.Length / 6, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, double* value)
	{
		Delegates.pglProgramUniformMatrix2x3dv(program, location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix2x3d<T>(uint program, int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniformMatrix2x3dv(program, location, count, transpose, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix3x2(uint program, int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniformMatrix3x2dv(program, location, value.Length / 6, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, double* value)
	{
		Delegates.pglProgramUniformMatrix3x2dv(program, location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix3x2d<T>(uint program, int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniformMatrix3x2dv(program, location, count, transpose, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix2x4(uint program, int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniformMatrix2x4dv(program, location, value.Length / 8, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, double* value)
	{
		Delegates.pglProgramUniformMatrix2x4dv(program, location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix2x4d<T>(uint program, int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniformMatrix2x4dv(program, location, count, transpose, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix4x2(uint program, int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniformMatrix4x2dv(program, location, value.Length / 8, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, double* value)
	{
		Delegates.pglProgramUniformMatrix4x2dv(program, location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix4x2d<T>(uint program, int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniformMatrix4x2dv(program, location, count, transpose, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix3x4(uint program, int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniformMatrix3x4dv(program, location, value.Length / 12, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, double* value)
	{
		Delegates.pglProgramUniformMatrix3x4dv(program, location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix3x4d<T>(uint program, int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniformMatrix3x4dv(program, location, count, transpose, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix4x3(uint program, int location, bool transpose, double[] value)
	{
		fixed (double* value2 = value)
		{
			Delegates.pglProgramUniformMatrix4x3dv(program, location, value.Length / 12, transpose, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, double* value)
	{
		Delegates.pglProgramUniformMatrix4x3dv(program, location, count, transpose, value);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void ProgramUniformMatrix4x3d<T>(uint program, int location, int count, bool transpose, T value) where T : struct
	{
		TypedReference typedReference = __makeref(value);
		nint num = *(nint*)(&typedReference);
		Delegates.pglProgramUniformMatrix4x3dv(program, location, count, transpose, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public static void ValidateProgramPipeline(uint pipeline)
	{
		Delegates.pglValidateProgramPipeline(pipeline);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_separate_shader_objects", Api = "gl|glcore")]
	public unsafe static void GetProgramPipelineInfoLog(uint pipeline, int bufSize, out int length, StringBuilder infoLog)
	{
		fixed (int* length2 = &length)
		{
			Delegates.pglGetProgramPipelineInfoLog(pipeline, bufSize, length2, infoLog);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public static void VertexAttribL1(uint index, double x)
	{
		Delegates.pglVertexAttribL1d(index, x);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public static void VertexAttribL2(uint index, double x, double y)
	{
		Delegates.pglVertexAttribL2d(index, x, y);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public static void VertexAttribL3(uint index, double x, double y, double z)
	{
		Delegates.pglVertexAttribL3d(index, x, y, z);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public static void VertexAttribL4(uint index, double x, double y, double z, double w)
	{
		Delegates.pglVertexAttribL4d(index, x, y, z, w);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public unsafe static void VertexAttribL1(uint index, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglVertexAttribL1dv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public unsafe static void VertexAttribL1(uint index, double* v)
	{
		Delegates.pglVertexAttribL1dv(index, v);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public unsafe static void VertexAttribL1d<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttribL1dv(index, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public unsafe static void VertexAttribL2(uint index, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglVertexAttribL2dv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public unsafe static void VertexAttribL2(uint index, double* v)
	{
		Delegates.pglVertexAttribL2dv(index, v);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public unsafe static void VertexAttribL2d<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttribL2dv(index, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public unsafe static void VertexAttribL3(uint index, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglVertexAttribL3dv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public unsafe static void VertexAttribL3(uint index, double* v)
	{
		Delegates.pglVertexAttribL3dv(index, v);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public unsafe static void VertexAttribL3d<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttribL3dv(index, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public unsafe static void VertexAttribL4(uint index, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglVertexAttribL4dv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public unsafe static void VertexAttribL4(uint index, double* v)
	{
		Delegates.pglVertexAttribL4dv(index, v);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public unsafe static void VertexAttribL4d<T>(uint index, T v) where T : struct
	{
		TypedReference typedReference = __makeref(v);
		nint num = *(nint*)(&typedReference);
		Delegates.pglVertexAttribL4dv(index, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public static void VertexAttribLPointer(uint index, int size, VertexAttribLType type, int stride, nint pointer)
	{
		Delegates.pglVertexAttribLPointer(index, size, (int)type, stride, pointer);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public static void VertexAttribLPointer(uint index, int size, VertexAttribLType type, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			VertexAttribLPointer(index, size, type, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_vertex_attrib_64bit", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_vertex_attrib_64bit")]
	public unsafe static void GetVertexAttribL(uint index, VertexAttribEnum pname, [Out] double[] @params)
	{
		fixed (double* params2 = @params)
		{
			Delegates.pglGetVertexAttribLdv(index, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public unsafe static void ViewportArray(uint first, int count, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglViewportArrayv(first, count, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public static void ViewportIndexed(uint index, float x, float y, float w, float h)
	{
		Delegates.pglViewportIndexedf(index, x, y, w, h);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public unsafe static void ViewportIndexed(uint index, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglViewportIndexedfv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public unsafe static void ScissorArray(uint first, int count, int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglScissorArrayv(first, count, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public static void ScissorIndexed(uint index, int left, int bottom, int width, int height)
	{
		Delegates.pglScissorIndexed(index, left, bottom, width, height);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public unsafe static void ScissorIndexed(uint index, int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglScissorIndexedv(index, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	public unsafe static void DepthRangeArray(uint first, int count, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglDepthRangeArrayv(first, count, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	public static void DepthRangeIndexed(uint index, double n, double f)
	{
		Delegates.pglDepthRangeIndexed(index, n, f);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public unsafe static void Get(int target, uint index, [Out] float[] data)
	{
		fixed (float* data2 = data)
		{
			Delegates.pglGetFloati_v(target, index, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public unsafe static void Get(GetPName target, uint index, [Out] float[] data)
	{
		fixed (float* data2 = data)
		{
			Delegates.pglGetFloati_v((int)target, index, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public unsafe static void Get(int target, uint index, out float data)
	{
		fixed (float* data2 = &data)
		{
			Delegates.pglGetFloati_v(target, index, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public unsafe static void Get(GetPName target, uint index, out float data)
	{
		fixed (float* data2 = &data)
		{
			Delegates.pglGetFloati_v((int)target, index, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public unsafe static void Get(GetPName target, uint index, [Out] float* data)
	{
		Delegates.pglGetFloati_v((int)target, index, data);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public unsafe static void GetFloat<T>(GetPName target, uint index, out T data) where T : struct
	{
		data = default(T);
		TypedReference typedReference = __makeref(data);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetFloati_v((int)target, index, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void Get(int target, uint index, [Out] double[] data)
	{
		fixed (double* data2 = data)
		{
			Delegates.pglGetDoublei_v(target, index, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void Get(GetPName target, uint index, [Out] double[] data)
	{
		fixed (double* data2 = data)
		{
			Delegates.pglGetDoublei_v((int)target, index, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void Get(int target, uint index, out double data)
	{
		fixed (double* data2 = &data)
		{
			Delegates.pglGetDoublei_v(target, index, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void Get(GetPName target, uint index, out double data)
	{
		fixed (double* data2 = &data)
		{
			Delegates.pglGetDoublei_v((int)target, index, data2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void Get(GetPName target, uint index, [Out] double* data)
	{
		Delegates.pglGetDoublei_v((int)target, index, data);
	}

	[RequiredByFeature("GL_VERSION_4_1")]
	[RequiredByFeature("GL_ARB_viewport_array", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetDouble<T>(GetPName target, uint index, out T data) where T : struct
	{
		data = default(T);
		TypedReference typedReference = __makeref(data);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetDoublei_v((int)target, index, (double*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_base_instance", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_base_instance", Api = "gles2")]
	public static void DrawArraysInstancedBaseInstance(PrimitiveType mode, int first, int count, int primcount, uint baseinstance)
	{
		Delegates.pglDrawArraysInstancedBaseInstance((int)mode, first, count, primcount, baseinstance);
	}

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_base_instance", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_base_instance", Api = "gles2")]
	public static void DrawElementsInstancedBaseInstance(PrimitiveType mode, int count, PrimitiveType type, nint indices, int primcount, uint baseinstance)
	{
		Delegates.pglDrawElementsInstancedBaseInstance((int)mode, count, (int)type, indices, primcount, baseinstance);
	}

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_base_instance", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_base_instance", Api = "gles2")]
	public static void DrawElementsInstancedBaseInstance(PrimitiveType mode, int count, PrimitiveType type, object indices, int primcount, uint baseinstance)
	{
		GCHandle gCHandle = GCHandle.Alloc(indices, GCHandleType.Pinned);
		try
		{
			DrawElementsInstancedBaseInstance(mode, count, type, gCHandle.AddrOfPinnedObject(), primcount, baseinstance);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_base_instance", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_base_instance", Api = "gles2")]
	public static void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, DrawElementsType type, nint indices, int primcount, int basevertex, uint baseinstance)
	{
		Delegates.pglDrawElementsInstancedBaseVertexBaseInstance((int)mode, count, (int)type, indices, primcount, basevertex, baseinstance);
	}

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_base_instance", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_base_instance", Api = "gles2")]
	public static void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, DrawElementsType type, object indices, int primcount, int basevertex, uint baseinstance)
	{
		GCHandle gCHandle = GCHandle.Alloc(indices, GCHandleType.Pinned);
		try
		{
			DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, gCHandle.AddrOfPinnedObject(), primcount, basevertex, baseinstance);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_internalformat_query", Api = "gl|glcore")]
	public unsafe static void GetInternalformat(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetInternalformativ((int)target, (int)internalformat, (int)pname, count, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_internalformat_query", Api = "gl|glcore")]
	public unsafe static void GetInternalformat(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetInternalformativ((int)target, (int)internalformat, (int)pname, @params.Length, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_shader_atomic_counters", Api = "gl|glcore")]
	public unsafe static void GetActiveAtomicCounterBuffer(uint program, uint bufferIndex, AtomicCounterBufferPName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetActiveAtomicCounterBufferiv(program, bufferIndex, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	public static void BindImageTexture(uint unit, uint texture, int level, bool layered, int layer, BufferAccess access, InternalFormat format)
	{
		Delegates.pglBindImageTexture(unit, texture, level, layered, layer, (int)access, (int)format);
	}

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_shader_image_load_store", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_shader_image_load_store")]
	public static void MemoryBarrier(MemoryBarrierMask barriers)
	{
		Delegates.pglMemoryBarrier((uint)barriers);
	}

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_texture_storage", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public static void TexStorage1D(TextureTarget target, int levels, SizedInternalFormat internalformat, int width)
	{
		Delegates.pglTexStorage1D((int)target, levels, (int)internalformat, width);
	}

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_texture_storage", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public static void TexStorage2D(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height)
	{
		Delegates.pglTexStorage2D((int)target, levels, (int)internalformat, width, height);
	}

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_storage", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_storage", Api = "gles1|gles2|gl|glcore")]
	public static void TexStorage3D(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height, int depth)
	{
		Delegates.pglTexStorage3D((int)target, levels, (int)internalformat, width, height, depth);
	}

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_transform_feedback_instanced", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_draw_transform_feedback", Api = "gles2")]
	public static void DrawTransformFeedbackInstanced(PrimitiveType mode, uint id, int primcount)
	{
		Delegates.pglDrawTransformFeedbackInstanced((int)mode, id, primcount);
	}

	[RequiredByFeature("GL_VERSION_4_2")]
	[RequiredByFeature("GL_ARB_transform_feedback_instanced", Api = "gl|glcore")]
	public static void DrawTransformFeedbackStreamInstanced(PrimitiveType mode, uint id, uint stream, int primcount)
	{
		Delegates.pglDrawTransformFeedbackStreamInstanced((int)mode, id, stream, primcount);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_clear_buffer_object", Api = "gl|glcore")]
	public static void ClearBufferData(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, nint data)
	{
		Delegates.pglClearBufferData((int)target, (int)internalformat, (int)format, (int)type, data);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_clear_buffer_object", Api = "gl|glcore")]
	public static void ClearBufferData(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			ClearBufferData(target, internalformat, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_clear_buffer_object", Api = "gl|glcore")]
	public static void ClearBufferSubData(BufferTarget target, SizedInternalFormat internalformat, nint offset, uint size, PixelFormat format, PixelType type, nint data)
	{
		Delegates.pglClearBufferSubData((int)target, (int)internalformat, offset, size, (int)format, (int)type, data);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_clear_buffer_object", Api = "gl|glcore")]
	public static void ClearBufferSubData(BufferTarget target, SizedInternalFormat internalformat, nint offset, uint size, PixelFormat format, PixelType type, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			ClearBufferSubData(target, internalformat, offset, size, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
	public static void DispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z)
	{
		Delegates.pglDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_compute_shader", Api = "gl|glcore")]
	public static void DispatchComputeIndirect(nint indirect)
	{
		Delegates.pglDispatchComputeIndirect(indirect);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_copy_image", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_copy_image", Api = "gles2")]
	[RequiredByFeature("GL_OES_copy_image", Api = "gles2")]
	public static void CopyImageSubData(uint srcName, CopyImageSubDataTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, CopyImageSubDataTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
	{
		Delegates.pglCopyImageSubData(srcName, (int)srcTarget, srcLevel, srcX, srcY, srcZ, dstName, (int)dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
	public static void FramebufferParameter(FramebufferTarget target, FramebufferParameterName pname, int param)
	{
		Delegates.pglFramebufferParameteri((int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
	public unsafe static void GetFramebufferParameter(FramebufferTarget target, FramebufferAttachmentParameterName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetFramebufferParameteriv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
	public unsafe static void GetFramebufferParameter(FramebufferTarget target, FramebufferAttachmentParameterName pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetFramebufferParameteriv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
	public unsafe static void GetFramebufferParameter(FramebufferTarget target, FramebufferAttachmentParameterName pname, [Out] int* @params)
	{
		Delegates.pglGetFramebufferParameteriv((int)target, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_framebuffer_no_attachments", Api = "gl|glcore")]
	public unsafe static void GetFramebufferParameteri<T>(FramebufferTarget target, FramebufferAttachmentParameterName pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetFramebufferParameteriv((int)target, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public unsafe static void GetInternalformat(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, [Out] long[] @params)
	{
		fixed (long* params2 = @params)
		{
			Delegates.pglGetInternalformati64v((int)target, (int)internalformat, (int)pname, count, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_internalformat_query2", Api = "gl|glcore")]
	public unsafe static void GetInternalformat(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, [Out] long[] @params)
	{
		fixed (long* params2 = @params)
		{
			Delegates.pglGetInternalformati64v((int)target, (int)internalformat, (int)pname, @params.Length, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
	public static void InvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth)
	{
		Delegates.pglInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
	public static void InvalidateTexImage(uint texture, int level)
	{
		Delegates.pglInvalidateTexImage(texture, level);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
	public static void InvalidateBufferSubData(uint buffer, nint offset, uint length)
	{
		Delegates.pglInvalidateBufferSubData(buffer, offset, length);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
	public static void InvalidateBufferData(uint buffer)
	{
		Delegates.pglInvalidateBufferData(buffer);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
	public unsafe static void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, params int[] attachments)
	{
		fixed (int* attachments2 = attachments)
		{
			Delegates.pglInvalidateFramebuffer((int)target, numAttachments, attachments2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
	public unsafe static void InvalidateFramebuffer(FramebufferTarget target, params int[] attachments)
	{
		fixed (int* attachments2 = attachments)
		{
			Delegates.pglInvalidateFramebuffer((int)target, attachments.Length, attachments2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
	public unsafe static void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, int[] attachments, int x, int y, int width, int height)
	{
		fixed (int* attachments2 = attachments)
		{
			Delegates.pglInvalidateSubFramebuffer((int)target, numAttachments, attachments2, x, y, width, height);
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_0", Api = "gles2")]
	[RequiredByFeature("GL_ARB_invalidate_subdata", Api = "gl|glcore")]
	public unsafe static void InvalidateSubFramebuffer(FramebufferTarget target, int[] attachments, int x, int y, int width, int height)
	{
		fixed (int* attachments2 = attachments)
		{
			Delegates.pglInvalidateSubFramebuffer((int)target, attachments.Length, attachments2, x, y, width, height);
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_AMD_multi_draw_indirect")]
	[RequiredByFeature("GL_ARB_multi_draw_indirect", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_multi_draw_indirect", Api = "gles2")]
	public static void MultiDrawArraysIndirect(PrimitiveType mode, nint indirect, int drawcount, int stride)
	{
		Delegates.pglMultiDrawArraysIndirect((int)mode, indirect, drawcount, stride);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_AMD_multi_draw_indirect")]
	[RequiredByFeature("GL_ARB_multi_draw_indirect", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_multi_draw_indirect", Api = "gles2")]
	public static void MultiDrawArraysIndirect(PrimitiveType mode, object indirect, int drawcount, int stride)
	{
		GCHandle gCHandle = GCHandle.Alloc(indirect, GCHandleType.Pinned);
		try
		{
			MultiDrawArraysIndirect(mode, gCHandle.AddrOfPinnedObject(), drawcount, stride);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_AMD_multi_draw_indirect")]
	[RequiredByFeature("GL_ARB_multi_draw_indirect", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_multi_draw_indirect", Api = "gles2")]
	public static void MultiDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, nint indirect, int drawcount, int stride)
	{
		Delegates.pglMultiDrawElementsIndirect((int)mode, (int)type, indirect, drawcount, stride);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_AMD_multi_draw_indirect")]
	[RequiredByFeature("GL_ARB_multi_draw_indirect", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_multi_draw_indirect", Api = "gles2")]
	public static void MultiDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, object indirect, int drawcount, int stride)
	{
		GCHandle gCHandle = GCHandle.Alloc(indirect, GCHandleType.Pinned);
		try
		{
			MultiDrawElementsIndirect(mode, type, gCHandle.AddrOfPinnedObject(), drawcount, stride);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public unsafe static void GetProgramInterface(uint program, ProgramInterface programInterface, ProgramInterfacePName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetProgramInterfaceiv(program, (int)programInterface, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public unsafe static void GetProgramInterface(uint program, ProgramInterface programInterface, ProgramInterfacePName pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetProgramInterfaceiv(program, (int)programInterface, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public static uint GetProgramResourceIndex(uint program, ProgramInterface programInterface, string name)
	{
		return Delegates.pglGetProgramResourceIndex(program, (int)programInterface, name);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public unsafe static void GetProgramResourceName(uint program, ProgramInterface programInterface, uint index, int bufSize, out int length, StringBuilder name)
	{
		fixed (int* length2 = &length)
		{
			Delegates.pglGetProgramResourceName(program, (int)programInterface, index, bufSize, length2, name);
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public unsafe static void GetProgramResource(uint program, ProgramInterface programInterface, uint index, int propCount, int[] props, int count, out int length, [Out] int[] @params)
	{
		fixed (int* props2 = props)
		{
			fixed (int* length2 = &length)
			{
				fixed (int* params2 = @params)
				{
					Delegates.pglGetProgramResourceiv(program, (int)programInterface, index, propCount, props2, count, length2, params2);
				}
			}
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public unsafe static void GetProgramResource(uint program, ProgramInterface programInterface, uint index, int[] props, out int length, [Out] int[] @params)
	{
		fixed (int* props2 = props)
		{
			fixed (int* length2 = &length)
			{
				fixed (int* params2 = @params)
				{
					Delegates.pglGetProgramResourceiv(program, (int)programInterface, index, props.Length, props2, @params.Length, length2, params2);
				}
			}
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public static int GetProgramResourceLocation(uint program, ProgramInterface programInterface, string name)
	{
		return Delegates.pglGetProgramResourceLocation(program, (int)programInterface, name);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_program_interface_query", Api = "gl|glcore")]
	public static int GetProgramResourceLocationIndex(uint program, ProgramInterface programInterface, string name)
	{
		return Delegates.pglGetProgramResourceLocationIndex(program, (int)programInterface, name);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_shader_storage_buffer_object", Api = "gl|glcore")]
	public static void ShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding)
	{
		Delegates.pglShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_buffer_range", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_buffer", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_buffer", Api = "gles2")]
	public static void TexBufferRange(TextureTarget target, SizedInternalFormat internalformat, uint buffer, nint offset, uint size)
	{
		Delegates.pglTexBufferRange((int)target, (int)internalformat, buffer, offset, size);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_storage_multisample", Api = "gl|glcore")]
	public static void TexStorage2DMultisample(TextureTarget target, int samples, SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations)
	{
		Delegates.pglTexStorage2DMultisample((int)target, samples, (int)internalformat, width, height, fixedsamplelocations);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_texture_storage_multisample", Api = "gl|glcore")]
	[RequiredByFeature("GL_OES_texture_storage_multisample_2d_array", Api = "gles2")]
	public static void TexStorage3DMultisample(TextureTarget target, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
	{
		Delegates.pglTexStorage3DMultisample((int)target, samples, (int)internalformat, width, height, depth, fixedsamplelocations);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_texture_view", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_texture_view", Api = "gles2")]
	[RequiredByFeature("GL_OES_texture_view", Api = "gles2")]
	public static void TextureView(uint texture, TextureTarget target, uint origtexture, SizedInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
	{
		Delegates.pglTextureView(texture, (int)target, origtexture, (int)internalformat, minlevel, numlevels, minlayer, numlayers);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
	public static void BindVertexBuffer(uint bindingindex, uint buffer, nint offset, int stride)
	{
		Delegates.pglBindVertexBuffer(bindingindex, buffer, offset, stride);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
	public static void VertexAttribFormat(uint attribindex, int size, VertexAttribType type, bool normalized, uint relativeoffset)
	{
		Delegates.pglVertexAttribFormat(attribindex, size, (int)type, normalized, relativeoffset);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
	public static void VertexAttribIFormat(uint attribindex, int size, VertexAttribIType type, uint relativeoffset)
	{
		Delegates.pglVertexAttribIFormat(attribindex, size, (int)type, relativeoffset);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
	public static void VertexAttribLFormat(uint attribindex, int size, VertexAttribLType type, uint relativeoffset)
	{
		Delegates.pglVertexAttribLFormat(attribindex, size, (int)type, relativeoffset);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
	public static void VertexAttribBinding(uint attribindex, uint bindingindex)
	{
		Delegates.pglVertexAttribBinding(attribindex, bindingindex);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_vertex_attrib_binding", Api = "gl|glcore")]
	public static void VertexBindingDivisor(uint bindingindex, uint divisor)
	{
		Delegates.pglVertexBindingDivisor(bindingindex, divisor);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	[RequiredByFeature("GL_KHR_debug")]
	[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
	public unsafe static void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, int count, uint[] ids, bool enabled)
	{
		fixed (uint* ids2 = ids)
		{
			Delegates.pglDebugMessageControl((int)source, (int)type, (int)severity, count, ids2, enabled);
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	[RequiredByFeature("GL_KHR_debug")]
	[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
	public unsafe static void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, uint[] ids, bool enabled)
	{
		fixed (uint* ids2 = ids)
		{
			Delegates.pglDebugMessageControl((int)source, (int)type, (int)severity, ids.Length, ids2, enabled);
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	[RequiredByFeature("GL_KHR_debug")]
	[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
	public static void DebugMessageInsert(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, string buf)
	{
		Delegates.pglDebugMessageInsert((int)source, (int)type, id, (int)severity, length, buf);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	[RequiredByFeature("GL_KHR_debug")]
	[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
	public static void DebugMessageCallback(DebugProc callback, nint userParam)
	{
		Delegates.pglDebugMessageCallback(callback, userParam);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	[RequiredByFeature("GL_KHR_debug")]
	[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
	public static void DebugMessageCallback(DebugProc callback, object userParam)
	{
		GCHandle gCHandle = GCHandle.Alloc(userParam, GCHandleType.Pinned);
		try
		{
			DebugMessageCallback(callback, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_ARB_debug_output", Api = "gl|glcore")]
	[RequiredByFeature("GL_KHR_debug")]
	[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
	public unsafe static uint GetDebugMessageLog(int bufSize, [Out] int[] sources, [Out] int[] types, [Out] uint[] ids, [Out] int[] severities, [Out] int[] lengths, StringBuilder messageLog)
	{
		uint result;
		fixed (int* sources2 = sources)
		{
			fixed (int* types2 = types)
			{
				fixed (uint* ids2 = ids)
				{
					fixed (int* severities2 = severities)
					{
						fixed (int* lengths2 = lengths)
						{
							result = Delegates.pglGetDebugMessageLog((uint)sources.Length, bufSize, sources2, types2, ids2, severities2, lengths2, messageLog);
						}
					}
				}
			}
		}
		return result;
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug")]
	[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
	public static void PushDebugGroup(DebugSource source, uint id, int length, string message)
	{
		Delegates.pglPushDebugGroup((int)source, id, length, message);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug")]
	[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
	public static void PopDebugGroup()
	{
		Delegates.pglPopDebugGroup();
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug")]
	[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
	public static void ObjectLabel(ObjectIdentifier identifier, uint name, int length, string label)
	{
		Delegates.pglObjectLabel((int)identifier, name, length, label);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug")]
	[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
	public unsafe static void GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, out int length, StringBuilder label)
	{
		fixed (int* length2 = &length)
		{
			Delegates.pglGetObjectLabel((int)identifier, name, bufSize, length2, label);
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug")]
	[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
	public static void ObjectPtrLabel(nint ptr, int length, string label)
	{
		Delegates.pglObjectPtrLabel(ptr, length, label);
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug")]
	[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
	public static void ObjectPtrLabel(object ptr, int length, string label)
	{
		GCHandle gCHandle = GCHandle.Alloc(ptr, GCHandleType.Pinned);
		try
		{
			ObjectPtrLabel(gCHandle.AddrOfPinnedObject(), length, label);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug")]
	[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
	public unsafe static void GetObjectPtrLabel(nint ptr, int bufSize, out int length, StringBuilder label)
	{
		fixed (int* length2 = &length)
		{
			Delegates.pglGetObjectPtrLabel(ptr, bufSize, length2, label);
		}
	}

	[RequiredByFeature("GL_VERSION_4_3")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_debug")]
	[RequiredByFeature("GL_KHR_debug", Api = "gles2")]
	public static void GetObjectPtrLabel(object ptr, int bufSize, out int length, StringBuilder label)
	{
		GCHandle gCHandle = GCHandle.Alloc(ptr, GCHandleType.Pinned);
		try
		{
			GetObjectPtrLabel(gCHandle.AddrOfPinnedObject(), bufSize, out length, label);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_buffer_storage", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_buffer_storage", Api = "gles2")]
	public static void BufferStorage(BufferStorageTarget target, uint size, nint data, BufferStorageMask flags)
	{
		Delegates.pglBufferStorage((int)target, size, data, (uint)flags);
	}

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_buffer_storage", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_buffer_storage", Api = "gles2")]
	public static void BufferStorage(BufferStorageTarget target, uint size, object data, BufferStorageMask flags)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			BufferStorage(target, size, gCHandle.AddrOfPinnedObject(), flags);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_clear_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_clear_texture", Api = "gles2")]
	public static void ClearTexImage(uint texture, int level, PixelFormat format, PixelType type, nint data)
	{
		Delegates.pglClearTexImage(texture, level, (int)format, (int)type, data);
	}

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_clear_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_clear_texture", Api = "gles2")]
	public static void ClearTexImage(uint texture, int level, PixelFormat format, PixelType type, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			ClearTexImage(texture, level, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_clear_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_clear_texture", Api = "gles2")]
	public static void ClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint data)
	{
		Delegates.pglClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, (int)format, (int)type, data);
	}

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_clear_texture", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_clear_texture", Api = "gles2")]
	public static void ClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_multi_bind", Api = "gl|glcore")]
	public unsafe static void BindBuffersBase(BufferTarget target, uint first, int count, uint[] buffers)
	{
		fixed (uint* buffers2 = buffers)
		{
			Delegates.pglBindBuffersBase((int)target, first, count, buffers2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_multi_bind", Api = "gl|glcore")]
	public unsafe static void BindBuffersBase(BufferTarget target, uint first, uint[] buffers)
	{
		fixed (uint* buffers2 = buffers)
		{
			Delegates.pglBindBuffersBase((int)target, first, buffers.Length, buffers2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_multi_bind", Api = "gl|glcore")]
	public unsafe static void BindBuffersRange(BufferTarget target, uint first, int count, uint[] buffers, nint[] offsets, uint[] sizes)
	{
		fixed (uint* buffers2 = buffers)
		{
			fixed (nint* offsets2 = offsets)
			{
				fixed (uint* sizes2 = sizes)
				{
					Delegates.pglBindBuffersRange((int)target, first, count, buffers2, offsets2, sizes2);
				}
			}
		}
	}

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_multi_bind", Api = "gl|glcore")]
	public unsafe static void BindBuffersRange(BufferTarget target, uint first, uint[] buffers, nint[] offsets, uint[] sizes)
	{
		fixed (uint* buffers2 = buffers)
		{
			fixed (nint* offsets2 = offsets)
			{
				fixed (uint* sizes2 = sizes)
				{
					Delegates.pglBindBuffersRange((int)target, first, buffers.Length, buffers2, offsets2, sizes2);
				}
			}
		}
	}

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_multi_bind", Api = "gl|glcore")]
	public unsafe static void BindTextures(uint first, params uint[] textures)
	{
		fixed (uint* textures2 = textures)
		{
			Delegates.pglBindTextures(first, textures.Length, textures2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_multi_bind", Api = "gl|glcore")]
	public unsafe static void BindSamplers(uint first, params uint[] samplers)
	{
		fixed (uint* samplers2 = samplers)
		{
			Delegates.pglBindSamplers(first, samplers.Length, samplers2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_multi_bind", Api = "gl|glcore")]
	public unsafe static void BindImageTextures(uint first, params uint[] textures)
	{
		fixed (uint* textures2 = textures)
		{
			Delegates.pglBindImageTextures(first, textures.Length, textures2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_4")]
	[RequiredByFeature("GL_ARB_multi_bind", Api = "gl|glcore")]
	public unsafe static void BindVertexBuffers(uint first, uint[] buffers, nint[] offsets, params int[] strides)
	{
		fixed (uint* buffers2 = buffers)
		{
			fixed (nint* offsets2 = offsets)
			{
				fixed (int* strides2 = strides)
				{
					Delegates.pglBindVertexBuffers(first, buffers.Length, buffers2, offsets2, strides2);
				}
			}
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_clip_control", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_clip_control", Api = "gles2")]
	public static void ClipControl(ClipControlOrigin origin, ClipControlDepth depth)
	{
		Delegates.pglClipControl((int)origin, (int)depth);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void CreateTransformFeedbacks(uint[] ids)
	{
		fixed (uint* ids2 = ids)
		{
			Delegates.pglCreateTransformFeedbacks(ids.Length, ids2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static uint CreateTransformFeedback()
	{
		uint result = default(uint);
		Delegates.pglCreateTransformFeedbacks(1, &result);
		return result;
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void TransformFeedbackBufferBase(uint xfb, uint index, uint buffer)
	{
		Delegates.pglTransformFeedbackBufferBase(xfb, index, buffer);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void TransformFeedbackBufferRange(uint xfb, uint index, uint buffer, nint offset, uint size)
	{
		Delegates.pglTransformFeedbackBufferRange(xfb, index, buffer, offset, size);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTransformFeedback(uint xfb, TransformFeedbackPName pname, [Out] int[] param)
	{
		fixed (int* param2 = param)
		{
			Delegates.pglGetTransformFeedbackiv(xfb, (int)pname, param2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTransformFeedback(uint xfb, TransformFeedbackPName pname, uint index, [Out] int[] param)
	{
		fixed (int* param2 = param)
		{
			Delegates.pglGetTransformFeedbacki_v(xfb, (int)pname, index, param2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTransformFeedback(uint xfb, TransformFeedbackPName pname, uint index, [Out] long[] param)
	{
		fixed (long* param2 = param)
		{
			Delegates.pglGetTransformFeedbacki64_v(xfb, (int)pname, index, param2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void CreateBuffers(uint[] buffers)
	{
		fixed (uint* buffers2 = buffers)
		{
			Delegates.pglCreateBuffers(buffers.Length, buffers2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static uint CreateBuffer()
	{
		uint result = default(uint);
		Delegates.pglCreateBuffers(1, &result);
		return result;
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedBufferStorage(uint buffer, uint size, nint data, BufferStorageMask flags)
	{
		Delegates.pglNamedBufferStorage(buffer, size, data, (uint)flags);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedBufferStorage(uint buffer, uint size, object data, BufferStorageMask flags)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			NamedBufferStorage(buffer, size, gCHandle.AddrOfPinnedObject(), flags);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void NamedBufferData(uint buffer, uint size, nint data, BufferUsage usage)
	{
		Delegates.pglNamedBufferData(buffer, size, data, (int)usage);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void NamedBufferData(uint buffer, uint size, object data, BufferUsage usage)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			NamedBufferData(buffer, size, gCHandle.AddrOfPinnedObject(), usage);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedBufferSubData(uint buffer, nint offset, uint size, nint data)
	{
		Delegates.pglNamedBufferSubData(buffer, offset, size, data);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_direct_state_access", Api = "gl|glcore")]
	public static void NamedBufferSubData(uint buffer, nint offset, uint size, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			NamedBufferSubData(buffer, offset, size, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void CopyNamedBufferSubData(uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, uint size)
	{
		Delegates.pglCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void ClearNamedBufferData(uint buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, nint data)
	{
		Delegates.pglClearNamedBufferData(buffer, (int)internalformat, (int)format, (int)type, data);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void ClearNamedBufferData(uint buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			ClearNamedBufferData(buffer, internalformat, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void ClearNamedBufferSubData(uint buffer, SizedInternalFormat internalformat, nint offset, uint size, PixelFormat format, PixelType type, nint data)
	{
		Delegates.pglClearNamedBufferSubData(buffer, (int)internalformat, offset, size, (int)format, (int)type, data);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void ClearNamedBufferSubData(uint buffer, SizedInternalFormat internalformat, nint offset, uint size, PixelFormat format, PixelType type, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static nint MapNamedBuffer(uint buffer, BufferAccess access)
	{
		return Delegates.pglMapNamedBuffer(buffer, (int)access);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static nint MapNamedBufferRange(uint buffer, nint offset, uint length, MapBufferAccessMask access)
	{
		return Delegates.pglMapNamedBufferRange(buffer, offset, length, (uint)access);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static bool UnmapNamedBuffer(uint buffer)
	{
		return Delegates.pglUnmapNamedBuffer(buffer);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void FlushMappedNamedBufferRange(uint buffer, nint offset, uint length)
	{
		Delegates.pglFlushMappedNamedBufferRange(buffer, offset, length);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedBufferParameter(uint buffer, BufferPNameARB value, [Out] int[] data)
	{
		fixed (int* @params = data)
		{
			Delegates.pglGetNamedBufferParameteriv(buffer, (int)value, @params);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedBufferParameter(uint buffer, BufferPNameARB value, out int data)
	{
		fixed (int* @params = &data)
		{
			Delegates.pglGetNamedBufferParameteriv(buffer, (int)value, @params);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedBufferParameter(uint buffer, BufferPNameARB value, [Out] int* data)
	{
		Delegates.pglGetNamedBufferParameteriv(buffer, (int)value, data);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedBufferParameteri<T>(uint buffer, BufferPNameARB value, out T data) where T : struct
	{
		data = default(T);
		TypedReference typedReference = __makeref(data);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetNamedBufferParameteriv(buffer, (int)value, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedBufferParameter(uint buffer, BufferPNameARB value, [Out] long[] data)
	{
		fixed (long* @params = data)
		{
			Delegates.pglGetNamedBufferParameteri64v(buffer, (int)value, @params);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedBufferPointer(uint buffer, BufferPointerNameARB pname, out nint @params)
	{
		fixed (nint* params2 = &@params)
		{
			Delegates.pglGetNamedBufferPointerv(buffer, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void GetNamedBufferPointer(uint buffer, BufferPointerNameARB pname, object @params)
	{
		GCHandle gCHandle = GCHandle.Alloc(@params, GCHandleType.Pinned);
		try
		{
			GetNamedBufferPointer(buffer, pname, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void GetNamedBufferSubData(uint buffer, nint offset, uint size, nint data)
	{
		Delegates.pglGetNamedBufferSubData(buffer, offset, size, data);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void GetNamedBufferSubData(uint buffer, nint offset, uint size, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			GetNamedBufferSubData(buffer, offset, size, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void CreateFramebuffers(uint[] framebuffers)
	{
		fixed (uint* framebuffers2 = framebuffers)
		{
			Delegates.pglCreateFramebuffers(framebuffers.Length, framebuffers2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static uint CreateFramebuffer()
	{
		uint result = default(uint);
		Delegates.pglCreateFramebuffers(1, &result);
		return result;
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void NamedFramebufferRenderbuffer(uint framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
	{
		Delegates.pglNamedFramebufferRenderbuffer(framebuffer, (int)attachment, (int)renderbuffertarget, renderbuffer);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void NamedFramebufferParameter(uint framebuffer, FramebufferParameterName pname, int param)
	{
		Delegates.pglNamedFramebufferParameteri(framebuffer, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void NamedFramebufferTexture(uint framebuffer, FramebufferAttachment attachment, uint texture, int level)
	{
		Delegates.pglNamedFramebufferTexture(framebuffer, (int)attachment, texture, level);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void NamedFramebufferTextureLayer(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, int layer)
	{
		Delegates.pglNamedFramebufferTextureLayer(framebuffer, (int)attachment, texture, level, layer);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void NamedFramebufferDrawBuffer(uint framebuffer, ColorBuffer buf)
	{
		Delegates.pglNamedFramebufferDrawBuffer(framebuffer, (int)buf);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void NamedFramebufferDrawBuffers(uint framebuffer, int[] bufs)
	{
		fixed (int* bufs2 = bufs)
		{
			Delegates.pglNamedFramebufferDrawBuffers(framebuffer, bufs.Length, bufs2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void NamedFramebufferReadBuffer(uint framebuffer, ColorBuffer mode)
	{
		Delegates.pglNamedFramebufferReadBuffer(framebuffer, (int)mode);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void InvalidateNamedFramebufferData(uint framebuffer, int[] attachments)
	{
		fixed (int* attachments2 = attachments)
		{
			Delegates.pglInvalidateNamedFramebufferData(framebuffer, attachments.Length, attachments2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void InvalidateNamedFramebufferSubData(uint framebuffer, int[] attachments, int x, int y, int width, int height)
	{
		fixed (int* attachments2 = attachments)
		{
			Delegates.pglInvalidateNamedFramebufferSubData(framebuffer, attachments.Length, attachments2, x, y, width, height);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void ClearNamedFramebuffer(uint framebuffer, Buffer buffer, int drawbuffer, int[] value)
	{
		fixed (int* value2 = value)
		{
			Delegates.pglClearNamedFramebufferiv(framebuffer, (int)buffer, drawbuffer, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void ClearNamedFramebuffer(uint framebuffer, Buffer buffer, int drawbuffer, uint[] value)
	{
		fixed (uint* value2 = value)
		{
			Delegates.pglClearNamedFramebufferuiv(framebuffer, (int)buffer, drawbuffer, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void ClearNamedFramebuffer(uint framebuffer, Buffer buffer, int drawbuffer, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglClearNamedFramebufferfv(framebuffer, (int)buffer, drawbuffer, value2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void ClearNamedFramebuffer(uint framebuffer, Buffer buffer, int drawbuffer, float depth, int stencil)
	{
		Delegates.pglClearNamedFramebufferfi(framebuffer, (int)buffer, drawbuffer, depth, stencil);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void BlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter)
	{
		Delegates.pglBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, (uint)mask, (int)filter);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static FramebufferStatus CheckNamedFramebufferStatus(uint framebuffer, FramebufferTarget target)
	{
		return (FramebufferStatus)Delegates.pglCheckNamedFramebufferStatus(framebuffer, (int)target);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedFramebufferParameter(uint framebuffer, GetFramebufferParameter pname, [Out] int[] param)
	{
		fixed (int* param2 = param)
		{
			Delegates.pglGetNamedFramebufferParameteriv(framebuffer, (int)pname, param2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedFramebufferParameter(uint framebuffer, GetFramebufferParameter pname, out int param)
	{
		fixed (int* param2 = &param)
		{
			Delegates.pglGetNamedFramebufferParameteriv(framebuffer, (int)pname, param2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedFramebufferParameter(uint framebuffer, GetFramebufferParameter pname, [Out] int* param)
	{
		Delegates.pglGetNamedFramebufferParameteriv(framebuffer, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedFramebufferParameteri<T>(uint framebuffer, GetFramebufferParameter pname, out T param) where T : struct
	{
		param = default(T);
		TypedReference typedReference = __makeref(param);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetNamedFramebufferParameteriv(framebuffer, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedFramebufferAttachmentParameter(uint framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetNamedFramebufferAttachmentParameteriv(framebuffer, (int)attachment, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedFramebufferAttachmentParameter(uint framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetNamedFramebufferAttachmentParameteriv(framebuffer, (int)attachment, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedFramebufferAttachmentParameter(uint framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, [Out] int* @params)
	{
		Delegates.pglGetNamedFramebufferAttachmentParameteriv(framebuffer, (int)attachment, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedFramebufferAttachmentParameteri<T>(uint framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetNamedFramebufferAttachmentParameteriv(framebuffer, (int)attachment, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void CreateRenderbuffers(uint[] renderbuffers)
	{
		fixed (uint* renderbuffers2 = renderbuffers)
		{
			Delegates.pglCreateRenderbuffers(renderbuffers.Length, renderbuffers2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static uint CreateRenderbuffer()
	{
		uint result = default(uint);
		Delegates.pglCreateRenderbuffers(1, &result);
		return result;
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void NamedRenderbufferStorage(uint renderbuffer, InternalFormat internalformat, int width, int height)
	{
		Delegates.pglNamedRenderbufferStorage(renderbuffer, (int)internalformat, width, height);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void NamedRenderbufferStorageMultisample(uint renderbuffer, int samples, InternalFormat internalformat, int width, int height)
	{
		Delegates.pglNamedRenderbufferStorageMultisample(renderbuffer, samples, (int)internalformat, width, height);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedRenderbufferParameter(uint renderbuffer, RenderbufferParameterName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetNamedRenderbufferParameteriv(renderbuffer, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedRenderbufferParameter(uint renderbuffer, RenderbufferParameterName pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetNamedRenderbufferParameteriv(renderbuffer, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedRenderbufferParameter(uint renderbuffer, RenderbufferParameterName pname, [Out] int* @params)
	{
		Delegates.pglGetNamedRenderbufferParameteriv(renderbuffer, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetNamedRenderbufferParameteri<T>(uint renderbuffer, RenderbufferParameterName pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetNamedRenderbufferParameteriv(renderbuffer, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void CreateTextures(TextureTarget target, int n, uint[] textures)
	{
		fixed (uint* textures2 = textures)
		{
			Delegates.pglCreateTextures((int)target, n, textures2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void CreateTextures(TextureTarget target, uint[] textures)
	{
		fixed (uint* textures2 = textures)
		{
			Delegates.pglCreateTextures((int)target, textures.Length, textures2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static uint CreateTexture(TextureTarget target)
	{
		uint result = default(uint);
		Delegates.pglCreateTextures((int)target, 1, &result);
		return result;
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void TextureBuffer(uint texture, SizedInternalFormat internalformat, uint buffer)
	{
		Delegates.pglTextureBuffer(texture, (int)internalformat, buffer);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void TextureBufferRange(uint texture, SizedInternalFormat internalformat, uint buffer, nint offset, uint size)
	{
		Delegates.pglTextureBufferRange(texture, (int)internalformat, buffer, offset, size);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void TextureStorage1D(uint texture, int levels, SizedInternalFormat internalformat, int width)
	{
		Delegates.pglTextureStorage1D(texture, levels, (int)internalformat, width);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void TextureStorage2D(uint texture, int levels, SizedInternalFormat internalformat, int width, int height)
	{
		Delegates.pglTextureStorage2D(texture, levels, (int)internalformat, width, height);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void TextureStorage3D(uint texture, int levels, SizedInternalFormat internalformat, int width, int height, int depth)
	{
		Delegates.pglTextureStorage3D(texture, levels, (int)internalformat, width, height, depth);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void TextureStorage2DMultisample(uint texture, int samples, SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations)
	{
		Delegates.pglTextureStorage2DMultisample(texture, samples, (int)internalformat, width, height, fixedsamplelocations);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void TextureStorage3DMultisample(uint texture, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
	{
		Delegates.pglTextureStorage3DMultisample(texture, samples, (int)internalformat, width, height, depth, fixedsamplelocations);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void TextureSubImage1D(uint texture, int level, int xoffset, int width, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglTextureSubImage1D(texture, level, xoffset, width, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void TextureSubImage1D(uint texture, int level, int xoffset, int width, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			TextureSubImage1D(texture, level, xoffset, width, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void TextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglTextureSubImage2D(texture, level, xoffset, yoffset, width, height, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void TextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void TextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void TextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void CompressedTextureSubImage1D(uint texture, int level, int xoffset, int width, InternalFormat format, int imageSize, nint data)
	{
		Delegates.pglCompressedTextureSubImage1D(texture, level, xoffset, width, (int)format, imageSize, data);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void CompressedTextureSubImage1D(uint texture, int level, int xoffset, int width, InternalFormat format, int imageSize, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void CompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, nint data)
	{
		Delegates.pglCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, (int)format, imageSize, data);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void CompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void CompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, nint data)
	{
		Delegates.pglCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, (int)format, imageSize, data);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void CompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void CopyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, int width)
	{
		Delegates.pglCopyTextureSubImage1D(texture, level, xoffset, x, y, width);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void CopyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, int width, int height)
	{
		Delegates.pglCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void CopyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
	{
		Delegates.pglCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void TextureParameter(uint texture, TextureParameterName pname, float param)
	{
		Delegates.pglTextureParameterf(texture, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameter(uint texture, TextureParameterName pname, float[] param)
	{
		fixed (float* param2 = param)
		{
			Delegates.pglTextureParameterfv(texture, (int)pname, param2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameter(uint texture, TextureParameterName pname, float* param)
	{
		Delegates.pglTextureParameterfv(texture, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameterf<T>(uint texture, TextureParameterName pname, T param) where T : struct
	{
		TypedReference typedReference = __makeref(param);
		nint num = *(nint*)(&typedReference);
		Delegates.pglTextureParameterfv(texture, (int)pname, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void TextureParameter(uint texture, TextureParameterName pname, int param)
	{
		Delegates.pglTextureParameteri(texture, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameterI(uint texture, TextureParameterName pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglTextureParameterIiv(texture, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameterI(uint texture, TextureParameterName pname, int* @params)
	{
		Delegates.pglTextureParameterIiv(texture, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameterIi<T>(uint texture, TextureParameterName pname, T @params) where T : struct
	{
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglTextureParameterIiv(texture, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameterI(uint texture, TextureParameterName pname, uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglTextureParameterIuiv(texture, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameterI(uint texture, TextureParameterName pname, uint* @params)
	{
		Delegates.pglTextureParameterIuiv(texture, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameterIui<T>(uint texture, TextureParameterName pname, T @params) where T : struct
	{
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglTextureParameterIuiv(texture, (int)pname, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameter(uint texture, TextureParameterName pname, int[] param)
	{
		fixed (int* param2 = param)
		{
			Delegates.pglTextureParameteriv(texture, (int)pname, param2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameter(uint texture, TextureParameterName pname, int* param)
	{
		Delegates.pglTextureParameteriv(texture, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void TextureParameteri<T>(uint texture, TextureParameterName pname, T param) where T : struct
	{
		TypedReference typedReference = __makeref(param);
		nint num = *(nint*)(&typedReference);
		Delegates.pglTextureParameteriv(texture, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void GenerateTextureMipmap(uint texture)
	{
		Delegates.pglGenerateTextureMipmap(texture);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void BindTextureUnit(uint unit, uint texture)
	{
		Delegates.pglBindTextureUnit(unit, texture);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void GetTextureImage(uint texture, int level, PixelFormat format, PixelType type, int bufSize, nint pixels)
	{
		Delegates.pglGetTextureImage(texture, level, (int)format, (int)type, bufSize, pixels);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void GetTextureImage(uint texture, int level, PixelFormat format, PixelType type, int bufSize, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			GetTextureImage(texture, level, format, type, bufSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void GetCompressedTextureImage(uint texture, int level, int bufSize, nint pixels)
	{
		Delegates.pglGetCompressedTextureImage(texture, level, bufSize, pixels);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void GetCompressedTextureImage(uint texture, int level, int bufSize, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			GetCompressedTextureImage(texture, level, bufSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureLevelParameter(uint texture, int level, GetTextureParameter pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetTextureLevelParameterfv(texture, level, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureLevelParameter(uint texture, int level, GetTextureParameter pname, out float @params)
	{
		fixed (float* params2 = &@params)
		{
			Delegates.pglGetTextureLevelParameterfv(texture, level, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureLevelParameter(uint texture, int level, GetTextureParameter pname, [Out] float* @params)
	{
		Delegates.pglGetTextureLevelParameterfv(texture, level, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureLevelParameterf<T>(uint texture, int level, GetTextureParameter pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetTextureLevelParameterfv(texture, level, (int)pname, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureLevelParameter(uint texture, int level, GetTextureParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetTextureLevelParameteriv(texture, level, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureLevelParameter(uint texture, int level, GetTextureParameter pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetTextureLevelParameteriv(texture, level, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureLevelParameter(uint texture, int level, GetTextureParameter pname, [Out] int* @params)
	{
		Delegates.pglGetTextureLevelParameteriv(texture, level, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureLevelParameteri<T>(uint texture, int level, GetTextureParameter pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetTextureLevelParameteriv(texture, level, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameter(uint texture, GetTextureParameter pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetTextureParameterfv(texture, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameter(uint texture, GetTextureParameter pname, out float @params)
	{
		fixed (float* params2 = &@params)
		{
			Delegates.pglGetTextureParameterfv(texture, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameter(uint texture, GetTextureParameter pname, [Out] float* @params)
	{
		Delegates.pglGetTextureParameterfv(texture, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterf<T>(uint texture, GetTextureParameter pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetTextureParameterfv(texture, (int)pname, (float*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterI(uint texture, GetTextureParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetTextureParameterIiv(texture, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterI(uint texture, GetTextureParameter pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetTextureParameterIiv(texture, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterI(uint texture, GetTextureParameter pname, [Out] int* @params)
	{
		Delegates.pglGetTextureParameterIiv(texture, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterIi<T>(uint texture, GetTextureParameter pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetTextureParameterIiv(texture, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterI(uint texture, GetTextureParameter pname, [Out] uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglGetTextureParameterIuiv(texture, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterI(uint texture, GetTextureParameter pname, out uint @params)
	{
		fixed (uint* params2 = &@params)
		{
			Delegates.pglGetTextureParameterIuiv(texture, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterI(uint texture, GetTextureParameter pname, [Out] uint* @params)
	{
		Delegates.pglGetTextureParameterIuiv(texture, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameterIui<T>(uint texture, GetTextureParameter pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetTextureParameterIuiv(texture, (int)pname, (uint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameter(uint texture, GetTextureParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetTextureParameteriv(texture, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameter(uint texture, GetTextureParameter pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetTextureParameteriv(texture, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameter(uint texture, GetTextureParameter pname, [Out] int* @params)
	{
		Delegates.pglGetTextureParameteriv(texture, (int)pname, @params);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetTextureParameteri<T>(uint texture, GetTextureParameter pname, out T @params) where T : struct
	{
		@params = default(T);
		TypedReference typedReference = __makeref(@params);
		nint num = *(nint*)(&typedReference);
		Delegates.pglGetTextureParameteriv(texture, (int)pname, (int*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void CreateVertexArrays(uint[] arrays)
	{
		fixed (uint* arrays2 = arrays)
		{
			Delegates.pglCreateVertexArrays(arrays.Length, arrays2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static uint CreateVertexArray()
	{
		uint result = default(uint);
		Delegates.pglCreateVertexArrays(1, &result);
		return result;
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void DisableVertexArrayAttrib(uint vaobj, uint index)
	{
		Delegates.pglDisableVertexArrayAttrib(vaobj, index);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void EnableVertexArrayAttrib(uint vaobj, uint index)
	{
		Delegates.pglEnableVertexArrayAttrib(vaobj, index);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayElementBuffer(uint vaobj, uint buffer)
	{
		Delegates.pglVertexArrayElementBuffer(vaobj, buffer);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, nint offset, int stride)
	{
		Delegates.pglVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void VertexArrayVertexBuffers(uint vaobj, uint first, uint[] buffers, nint[] offsets, int[] strides)
	{
		fixed (uint* buffers2 = buffers)
		{
			fixed (nint* offsets2 = offsets)
			{
				fixed (int* strides2 = strides)
				{
					Delegates.pglVertexArrayVertexBuffers(vaobj, first, buffers.Length, buffers2, offsets2, strides2);
				}
			}
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex)
	{
		Delegates.pglVertexArrayAttribBinding(vaobj, attribindex, bindingindex);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayAttribFormat(uint vaobj, uint attribindex, int size, VertexAttribType type, bool normalized, uint relativeoffset)
	{
		Delegates.pglVertexArrayAttribFormat(vaobj, attribindex, size, (int)type, normalized, relativeoffset);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, VertexAttribIType type, uint relativeoffset)
	{
		Delegates.pglVertexArrayAttribIFormat(vaobj, attribindex, size, (int)type, relativeoffset);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, VertexAttribLType type, uint relativeoffset)
	{
		Delegates.pglVertexArrayAttribLFormat(vaobj, attribindex, size, (int)type, relativeoffset);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void VertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor)
	{
		Delegates.pglVertexArrayBindingDivisor(vaobj, bindingindex, divisor);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetVertexArray(uint vaobj, VertexArrayPName pname, [Out] int[] param)
	{
		fixed (int* param2 = param)
		{
			Delegates.pglGetVertexArrayiv(vaobj, (int)pname, param2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetVertexArrayIndexed(uint vaobj, uint index, VertexArrayPName pname, [Out] int[] param)
	{
		fixed (int* param2 = param)
		{
			Delegates.pglGetVertexArrayIndexediv(vaobj, index, (int)pname, param2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void GetVertexArrayIndexed(uint vaobj, uint index, VertexArrayPName pname, [Out] long[] param)
	{
		fixed (long* param2 = param)
		{
			Delegates.pglGetVertexArrayIndexed64iv(vaobj, index, (int)pname, param2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void CreateSamplers(uint[] samplers)
	{
		fixed (uint* samplers2 = samplers)
		{
			Delegates.pglCreateSamplers(samplers.Length, samplers2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static uint CreateSampler()
	{
		uint result = default(uint);
		Delegates.pglCreateSamplers(1, &result);
		return result;
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void CreateProgramPipelines(uint[] pipelines)
	{
		fixed (uint* pipelines2 = pipelines)
		{
			Delegates.pglCreateProgramPipelines(pipelines.Length, pipelines2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static uint CreateProgramPipeline()
	{
		uint result = default(uint);
		Delegates.pglCreateProgramPipelines(1, &result);
		return result;
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void CreateQueries(QueryTarget target, int n, uint[] ids)
	{
		fixed (uint* ids2 = ids)
		{
			Delegates.pglCreateQueries((int)target, n, ids2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static void CreateQueries(QueryTarget target, uint[] ids)
	{
		fixed (uint* ids2 = ids)
		{
			Delegates.pglCreateQueries((int)target, ids.Length, ids2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public unsafe static uint CreateQuery(QueryTarget target)
	{
		uint result = default(uint);
		Delegates.pglCreateQueries((int)target, 1, &result);
		return result;
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void GetQueryBufferObject64i(uint id, uint buffer, QueryObjectParameterName pname, nint offset)
	{
		Delegates.pglGetQueryBufferObjecti64v(id, buffer, (int)pname, offset);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void GetQueryBufferObject32i(uint id, uint buffer, QueryObjectParameterName pname, nint offset)
	{
		Delegates.pglGetQueryBufferObjectiv(id, buffer, (int)pname, offset);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void GetQueryBufferObject64ui(uint id, uint buffer, QueryObjectParameterName pname, nint offset)
	{
		Delegates.pglGetQueryBufferObjectui64v(id, buffer, (int)pname, offset);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_direct_state_access", Api = "gl|glcore")]
	public static void GetQueryBufferObject32ui(uint id, uint buffer, QueryObjectParameterName pname, nint offset)
	{
		Delegates.pglGetQueryBufferObjectuiv(id, buffer, (int)pname, offset);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_3_1", Api = "gles2")]
	[RequiredByFeature("GL_ARB_ES3_1_compatibility", Api = "gl|glcore")]
	public static void MemoryBarrierByRegion(MemoryBarrierMask barriers)
	{
		Delegates.pglMemoryBarrierByRegion((uint)barriers);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_get_texture_sub_image", Api = "gl|glcore")]
	public static void GetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, nint pixels)
	{
		Delegates.pglGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, (int)format, (int)type, bufSize, pixels);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_get_texture_sub_image", Api = "gl|glcore")]
	public static void GetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_get_texture_sub_image", Api = "gl|glcore")]
	public static void GetCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, nint pixels)
	{
		Delegates.pglGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_get_texture_sub_image", Api = "gl|glcore")]
	public static void GetCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_robustness", Api = "gles1|gles2")]
	[RequiredByFeature("GL_KHR_robustness")]
	[RequiredByFeature("GL_KHR_robustness", Api = "gles2")]
	public static GraphicsResetStatus GetGraphicsResetStatus()
	{
		return (GraphicsResetStatus)Delegates.pglGetGraphicsResetStatus();
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	public static void GetnCompressedTexImage(TextureTarget target, int lod, int bufSize, nint pixels)
	{
		Delegates.pglGetnCompressedTexImage((int)target, lod, bufSize, pixels);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	public static void GetnCompressedTexImage(TextureTarget target, int lod, int bufSize, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			GetnCompressedTexImage(target, lod, bufSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	public static void GetnTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, nint pixels)
	{
		Delegates.pglGetnTexImage((int)target, level, (int)format, (int)type, bufSize, pixels);
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	public static void GetnTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			GetnTexImage(target, level, format, type, bufSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] double[] @params)
	{
		fixed (double* params2 = @params)
		{
			Delegates.pglGetnUniformdv(program, location, bufSize, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_robustness", Api = "gles1|gles2")]
	[RequiredByFeature("GL_KHR_robustness")]
	[RequiredByFeature("GL_KHR_robustness", Api = "gles2")]
	public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetnUniformfv(program, location, bufSize, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_EXT_robustness", Api = "gles1|gles2")]
	[RequiredByFeature("GL_KHR_robustness")]
	[RequiredByFeature("GL_KHR_robustness", Api = "gles2")]
	public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetnUniformiv(program, location, bufSize, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_KHR_robustness")]
	[RequiredByFeature("GL_KHR_robustness", Api = "gles2")]
	public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglGetnUniformuiv(program, location, bufSize, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ES_VERSION_3_2", Api = "gles2")]
	[RequiredByFeature("GL_SC_VERSION_2_0", Api = "glsc2")]
	[RequiredByFeature("GL_ARB_robustness", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_robustness", Api = "gles1|gles2")]
	[RequiredByFeature("GL_KHR_robustness")]
	[RequiredByFeature("GL_KHR_robustness", Api = "gles2")]
	public static void ReadnPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, nint data)
	{
		Delegates.pglReadnPixels(x, y, width, height, (int)format, (int)type, bufSize, data);
	}

	[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
	public unsafe static void GetnMap(MapTarget target, MapQuery query, int bufSize, [Out] double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglGetnMapdv((int)target, (int)query, bufSize, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
	public unsafe static void GetnMap(MapTarget target, MapQuery query, int bufSize, [Out] float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglGetnMapfv((int)target, (int)query, bufSize, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
	public unsafe static void GetnMap(MapTarget target, MapQuery query, int bufSize, [Out] int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglGetnMapiv((int)target, (int)query, bufSize, v2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
	public unsafe static void GetnPixelMap(PixelMap map, int bufSize, [Out] float[] values)
	{
		fixed (float* values2 = values)
		{
			Delegates.pglGetnPixelMapfv((int)map, bufSize, values2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
	public unsafe static void GetnPixelMap(PixelMap map, int bufSize, [Out] uint[] values)
	{
		fixed (uint* values2 = values)
		{
			Delegates.pglGetnPixelMapuiv((int)map, bufSize, values2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
	public unsafe static void GetnPixelMap(PixelMap map, int bufSize, [Out] ushort[] values)
	{
		fixed (ushort* values2 = values)
		{
			Delegates.pglGetnPixelMapusv((int)map, bufSize, values2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
	public unsafe static void GetnPolygonStipple([Out] byte[] pattern)
	{
		fixed (byte* pattern2 = pattern)
		{
			Delegates.pglGetnPolygonStipple(pattern.Length, pattern2);
		}
	}

	[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
	public static void GetnColorTable(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, nint table)
	{
		Delegates.pglGetnColorTable((int)target, (int)format, (int)type, bufSize, table);
	}

	[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
	public static void GetnColorTable(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, object table)
	{
		GCHandle gCHandle = GCHandle.Alloc(table, GCHandleType.Pinned);
		try
		{
			GetnColorTable(target, format, type, bufSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
	public static void GetnConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, nint image)
	{
		Delegates.pglGetnConvolutionFilter((int)target, (int)format, (int)type, bufSize, image);
	}

	[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
	public static void GetnConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, object image)
	{
		GCHandle gCHandle = GCHandle.Alloc(image, GCHandleType.Pinned);
		try
		{
			GetnConvolutionFilter(target, format, type, bufSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
	public static void GetnSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, int rowBufSize, nint row, int columnBufSize, nint column, nint span)
	{
		Delegates.pglGetnSeparableFilter((int)target, (int)format, (int)type, rowBufSize, row, columnBufSize, column, span);
	}

	[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
	public static void GetnSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, int rowBufSize, object row, int columnBufSize, object column, object span)
	{
		GCHandle gCHandle = GCHandle.Alloc(row, GCHandleType.Pinned);
		GCHandle gCHandle2 = GCHandle.Alloc(column, GCHandleType.Pinned);
		GCHandle gCHandle3 = GCHandle.Alloc(span, GCHandleType.Pinned);
		try
		{
			GetnSeparableFilter(target, format, type, rowBufSize, gCHandle.AddrOfPinnedObject(), columnBufSize, gCHandle2.AddrOfPinnedObject(), gCHandle3.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
			gCHandle2.Free();
			gCHandle3.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
	public static void GetnHistogram(HistogramTarget target, bool reset, PixelFormat format, PixelType type, int bufSize, nint values)
	{
		Delegates.pglGetnHistogram((int)target, reset, (int)format, (int)type, bufSize, values);
	}

	[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
	public static void GetnHistogram(HistogramTarget target, bool reset, PixelFormat format, PixelType type, int bufSize, object values)
	{
		GCHandle gCHandle = GCHandle.Alloc(values, GCHandleType.Pinned);
		try
		{
			GetnHistogram(target, reset, format, type, bufSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
	public static void GetnMinmax(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, int bufSize, nint values)
	{
		Delegates.pglGetnMinmax((int)target, reset, (int)format, (int)type, bufSize, values);
	}

	[RequiredByFeature("GL_VERSION_4_5", Profile = "compatibility")]
	public static void GetnMinmax(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, int bufSize, object values)
	{
		GCHandle gCHandle = GCHandle.Alloc(values, GCHandleType.Pinned);
		try
		{
			GetnMinmax(target, reset, format, type, bufSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_5")]
	[RequiredByFeature("GL_ARB_texture_barrier", Api = "gl|glcore")]
	public static void TextureBarrier()
	{
		Delegates.pglTextureBarrier();
	}

	[RequiredByFeature("GL_VERSION_4_6")]
	[RequiredByFeature("GL_ARB_gl_spirv", Api = "gl|glcore")]
	public unsafe static void SpecializeShader(uint shader, string pEntryPoint, uint[] pConstantIndex, uint[] pConstantValue)
	{
		fixed (uint* pConstantIndex2 = pConstantIndex)
		{
			fixed (uint* pConstantValue2 = pConstantValue)
			{
				Delegates.pglSpecializeShader(shader, pEntryPoint, (uint)pConstantIndex.Length, pConstantIndex2, pConstantValue2);
			}
		}
	}

	[RequiredByFeature("GL_VERSION_4_6")]
	[RequiredByFeature("GL_ARB_indirect_parameters", Api = "gl|glcore")]
	public static void MultiDrawArraysIndirect(PrimitiveType mode, nint indirect, nint drawcount, int maxdrawcount, int stride)
	{
		Delegates.pglMultiDrawArraysIndirectCount((int)mode, indirect, drawcount, maxdrawcount, stride);
	}

	[RequiredByFeature("GL_VERSION_4_6")]
	[RequiredByFeature("GL_ARB_indirect_parameters", Api = "gl|glcore")]
	public static void MultiDrawArraysIndirect(PrimitiveType mode, object indirect, nint drawcount, int maxdrawcount, int stride)
	{
		GCHandle gCHandle = GCHandle.Alloc(indirect, GCHandleType.Pinned);
		try
		{
			MultiDrawArraysIndirect(mode, gCHandle.AddrOfPinnedObject(), drawcount, maxdrawcount, stride);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_6")]
	[RequiredByFeature("GL_ARB_indirect_parameters", Api = "gl|glcore")]
	public static void MultiDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, nint indirect, nint drawcount, int maxdrawcount, int stride)
	{
		Delegates.pglMultiDrawElementsIndirectCount((int)mode, (int)type, indirect, drawcount, maxdrawcount, stride);
	}

	[RequiredByFeature("GL_VERSION_4_6")]
	[RequiredByFeature("GL_ARB_indirect_parameters", Api = "gl|glcore")]
	public static void MultiDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, object indirect, nint drawcount, int maxdrawcount, int stride)
	{
		GCHandle gCHandle = GCHandle.Alloc(indirect, GCHandleType.Pinned);
		try
		{
			MultiDrawElementsIndirect(mode, type, gCHandle.AddrOfPinnedObject(), drawcount, maxdrawcount, stride);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_VERSION_4_6")]
	[RequiredByFeature("GL_ARB_polygon_offset_clamp", Api = "gl|glcore")]
	[RequiredByFeature("GL_EXT_polygon_offset_clamp", Api = "gl|glcore|gles2")]
	public static void PolygonOffsetClamp(float factor, float units, float clamp)
	{
		Delegates.pglPolygonOffsetClamp(factor, units, clamp);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	public unsafe static void ClipPlane(ClipPlaneName p, float[] eqn)
	{
		fixed (float* eqn2 = eqn)
		{
			Delegates.pglClipPlanef((int)p, eqn2);
		}
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	public static void Frustum(float left, float right, float bottom, float top, float near, float far)
	{
		Delegates.pglFrustumf(left, right, bottom, top, near, far);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	public unsafe static void GetClipPlane(ClipPlaneName plane, [Out] float[] equation)
	{
		fixed (float* equation2 = equation)
		{
			Delegates.pglGetClipPlanef((int)plane, equation2);
		}
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1", Profile = "common")]
	public static void Ortho(float left, float right, float bottom, float top, float near, float far)
	{
		Delegates.pglOrthof(left, right, bottom, top, near, far);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void AlphaFunc(AlphaFunction func, nint @ref)
	{
		Delegates.pglAlphaFuncx((int)func, @ref);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void ClearColor(nint red, nint green, nint blue, nint alpha)
	{
		Delegates.pglClearColorx(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void ClearDepth(nint depth)
	{
		Delegates.pglClearDepthx(depth);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public unsafe static void ClipPlane(ClipPlaneName plane, nint[] equation)
	{
		fixed (nint* equation2 = equation)
		{
			Delegates.pglClipPlanex((int)plane, equation2);
		}
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void Color4(nint red, nint green, nint blue, nint alpha)
	{
		Delegates.pglColor4x(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void DepthRange(nint n, nint f)
	{
		Delegates.pglDepthRangex(n, f);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void Fog(FogPName pname, nint param)
	{
		Delegates.pglFogx((int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public unsafe static void Fog(FogPName pname, nint[] param)
	{
		fixed (nint* param2 = param)
		{
			Delegates.pglFogxv((int)pname, param2);
		}
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void Frustum(nint left, nint right, nint bottom, nint top, nint near, nint far)
	{
		Delegates.pglFrustumx(left, right, bottom, top, near, far);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public unsafe static void GetClipPlane(ClipPlaneName plane, [Out] nint[] equation)
	{
		fixed (nint* equation2 = equation)
		{
			Delegates.pglGetClipPlanex((int)plane, equation2);
		}
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public unsafe static void GetFixed(GetPName pname, [Out] nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglGetFixedv((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public unsafe static void GetLightxv(LightName light, LightParameter pname, [Out] nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglGetLightxv((int)light, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public unsafe static void GetMaterial(TriangleFace face, MaterialParameter pname, [Out] nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglGetMaterialxv((int)face, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public unsafe static void GetTexEnv(TextureEnvTarget target, TextureEnvParameter pname, [Out] nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglGetTexEnvxv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglGetTexParameterxv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void LightModel(LightModelParameter pname, nint param)
	{
		Delegates.pglLightModelx((int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public unsafe static void LightModel(LightModelParameter pname, nint[] param)
	{
		fixed (nint* param2 = param)
		{
			Delegates.pglLightModelxv((int)pname, param2);
		}
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void Lightx(LightName light, LightParameter pname, nint param)
	{
		Delegates.pglLightx((int)light, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public unsafe static void Lightxv(LightName light, LightParameter pname, nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglLightxv((int)light, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void LineWidth(nint width)
	{
		Delegates.pglLineWidthx(width);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public unsafe static void LoadMatrixx(nint[] m)
	{
		fixed (nint* m2 = m)
		{
			Delegates.pglLoadMatrixx(m2);
		}
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public unsafe static void LoadMatrixx(nint* m)
	{
		Delegates.pglLoadMatrixx(m);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public unsafe static void LoadMatrixx<T>(T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglLoadMatrixx((nint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void Material(TriangleFace face, MaterialParameter pname, nint param)
	{
		Delegates.pglMaterialx((int)face, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public unsafe static void Material(TriangleFace face, MaterialParameter pname, nint[] param)
	{
		fixed (nint* param2 = param)
		{
			Delegates.pglMaterialxv((int)face, (int)pname, param2);
		}
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public unsafe static void MultMatrixx(nint[] m)
	{
		fixed (nint* m2 = m)
		{
			Delegates.pglMultMatrixx(m2);
		}
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public unsafe static void MultMatrixx(nint* m)
	{
		Delegates.pglMultMatrixx(m);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public unsafe static void MultMatrixx<T>(T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglMultMatrixx((nint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void MultiTexCoord4(TextureUnit texture, nint s, nint t, nint r, nint q)
	{
		Delegates.pglMultiTexCoord4x((int)texture, s, t, r, q);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void Normal3(nint nx, nint ny, nint nz)
	{
		Delegates.pglNormal3x(nx, ny, nz);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void Orthox(nint left, nint right, nint bottom, nint top, nint near, nint far)
	{
		Delegates.pglOrthox(left, right, bottom, top, near, far);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void PointParameter(PointParameterNameARB pname, nint param)
	{
		Delegates.pglPointParameterx((int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public unsafe static void PointParameter(PointParameterNameARB pname, nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglPointParameterxv((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void PointSize(nint size)
	{
		Delegates.pglPointSizex(size);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void PolygonOffset(nint factor, nint units)
	{
		Delegates.pglPolygonOffsetx(factor, units);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void Rotate(nint angle, nint x, nint y, nint z)
	{
		Delegates.pglRotatex(angle, x, y, z);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void SampleCoverage(int value, bool invert)
	{
		Delegates.pglSampleCoveragex(value, invert);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void Scale(nint x, nint y, nint z)
	{
		Delegates.pglScalex(x, y, z);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, nint param)
	{
		Delegates.pglTexEnvx((int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public unsafe static void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglTexEnvxv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void TexParameter(TextureTarget target, GetTextureParameter pname, nint param)
	{
		Delegates.pglTexParameterx((int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public unsafe static void TexParameter(TextureTarget target, GetTextureParameter pname, nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglTexParameterxv((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_VERSION_ES_CM_1_0", Api = "gles1")]
	public static void Translate(nint x, nint y, nint z)
	{
		Delegates.pglTranslatex(x, y, z);
	}

	[RequiredByFeature("GL_GREMEDY_frame_terminator")]
	public static void FrameTerminatorGREMEDY()
	{
		Delegates.pglFrameTerminatorGREMEDY();
	}

	[RequiredByFeature("GL_GREMEDY_string_marker")]
	public static void StringMarkerGREMEDY(int len, nint @string)
	{
		Delegates.pglStringMarkerGREMEDY(len, @string);
	}

	[RequiredByFeature("GL_GREMEDY_string_marker")]
	public static void StringMarkerGREMEDY(int len, object @string)
	{
		GCHandle gCHandle = GCHandle.Alloc(@string, GCHandleType.Pinned);
		try
		{
			StringMarkerGREMEDY(len, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_HP_image_transform")]
	public static void ImageTransformParameterHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, int param)
	{
		Delegates.pglImageTransformParameteriHP((int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_HP_image_transform")]
	public static void ImageTransformParameterHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, float param)
	{
		Delegates.pglImageTransformParameterfHP((int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_HP_image_transform")]
	public unsafe static void ImageTransformParameterHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglImageTransformParameterivHP((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_HP_image_transform")]
	public unsafe static void ImageTransformParameterHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglImageTransformParameterfvHP((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_HP_image_transform")]
	public unsafe static void GetImageTransformParameterHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetImageTransformParameterivHP((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_HP_image_transform")]
	public unsafe static void GetImageTransformParameterHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetImageTransformParameterfvHP((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_IBM_multimode_draw_arrays")]
	public unsafe static void MultiModeDrawArraysIBM(int[] mode, int[] first, int[] count, int modestride)
	{
		fixed (int* mode2 = mode)
		{
			fixed (int* first2 = first)
			{
				fixed (int* count2 = count)
				{
					Delegates.pglMultiModeDrawArraysIBM(mode2, first2, count2, first.Length, modestride);
				}
			}
		}
	}

	[RequiredByFeature("GL_IBM_multimode_draw_arrays")]
	public unsafe static void MultiModeDrawElementsIBM(int[] mode, int[] count, DrawElementsType type, nint[] indices, int primcount, int modestride)
	{
		fixed (int* mode2 = mode)
		{
			fixed (int* count2 = count)
			{
				fixed (nint* indices2 = indices)
				{
					Delegates.pglMultiModeDrawElementsIBM(mode2, count2, (int)type, indices2, primcount, modestride);
				}
			}
		}
	}

	[RequiredByFeature("GL_IBM_multimode_draw_arrays")]
	public unsafe static void MultiModeDrawElementsIBM(int[] mode, int[] count, DrawElementsType type, nint[] indices, int modestride)
	{
		fixed (int* mode2 = mode)
		{
			fixed (int* count2 = count)
			{
				fixed (nint* indices2 = indices)
				{
					Delegates.pglMultiModeDrawElementsIBM(mode2, count2, (int)type, indices2, count.Length, modestride);
				}
			}
		}
	}

	[RequiredByFeature("GL_IBM_static_data")]
	public static void FlushStaticDataIBM(int target)
	{
		Delegates.pglFlushStaticDataIBM(target);
	}

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public unsafe static void ColorPointerListIBM(int size, ColorPointerType type, int stride, nint[] pointer, int ptrstride)
	{
		fixed (nint* pointer2 = pointer)
		{
			Delegates.pglColorPointerListIBM(size, (int)type, stride, pointer2, ptrstride);
		}
	}

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public unsafe static void SecondaryColorPointerListIBM(int size, SecondaryColorPointerTypeIBM type, int stride, nint[] pointer, int ptrstride)
	{
		fixed (nint* pointer2 = pointer)
		{
			Delegates.pglSecondaryColorPointerListIBM(size, (int)type, stride, pointer2, ptrstride);
		}
	}

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public static void EdgeFlagPointerListIBM(int stride, bool[] pointer, int ptrstride)
	{
		Delegates.pglEdgeFlagPointerListIBM(stride, pointer, ptrstride);
	}

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public unsafe static void FogCoordPointerListIBM(FogPointerTypeIBM type, int stride, nint[] pointer, int ptrstride)
	{
		fixed (nint* pointer2 = pointer)
		{
			Delegates.pglFogCoordPointerListIBM((int)type, stride, pointer2, ptrstride);
		}
	}

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public unsafe static void IndexPointerListIBM(IndexPointerType type, int stride, nint[] pointer, int ptrstride)
	{
		fixed (nint* pointer2 = pointer)
		{
			Delegates.pglIndexPointerListIBM((int)type, stride, pointer2, ptrstride);
		}
	}

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public unsafe static void NormalPointerListIBM(NormalPointerType type, int stride, nint[] pointer, int ptrstride)
	{
		fixed (nint* pointer2 = pointer)
		{
			Delegates.pglNormalPointerListIBM((int)type, stride, pointer2, ptrstride);
		}
	}

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public unsafe static void TexCoordPointerListIBM(int size, TexCoordPointerType type, int stride, nint[] pointer, int ptrstride)
	{
		fixed (nint* pointer2 = pointer)
		{
			Delegates.pglTexCoordPointerListIBM(size, (int)type, stride, pointer2, ptrstride);
		}
	}

	[RequiredByFeature("GL_IBM_vertex_array_lists")]
	public unsafe static void VertexPointerListIBM(int size, VertexPointerType type, int stride, nint[] pointer, int ptrstride)
	{
		fixed (nint* pointer2 = pointer)
		{
			Delegates.pglVertexPointerListIBM(size, (int)type, stride, pointer2, ptrstride);
		}
	}

	[RequiredByFeature("GL_IMG_framebuffer_downsample", Api = "gles2")]
	public static void FramebufferTexture2DIMG(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int xscale, int yscale)
	{
		Delegates.pglFramebufferTexture2DDownsampleIMG((int)target, (int)attachment, (int)textarget, texture, level, xscale, yscale);
	}

	[RequiredByFeature("GL_IMG_framebuffer_downsample", Api = "gles2")]
	public static void FramebufferTextureLayerIMG(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer, int xscale, int yscale)
	{
		Delegates.pglFramebufferTextureLayerDownsampleIMG((int)target, (int)attachment, texture, level, layer, xscale, yscale);
	}

	[RequiredByFeature("GL_IMG_multisampled_render_to_texture", Api = "gles1|gles2")]
	public static void RenderbufferStorageMultisampleIMG(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height)
	{
		Delegates.pglRenderbufferStorageMultisampleIMG((int)target, samples, (int)internalformat, width, height);
	}

	[RequiredByFeature("GL_IMG_multisampled_render_to_texture", Api = "gles1|gles2")]
	public static void FramebufferTexture2DMultisampleIMG(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int samples)
	{
		Delegates.pglFramebufferTexture2DMultisampleIMG((int)target, (int)attachment, (int)textarget, texture, level, samples);
	}

	[RequiredByFeature("GL_IMG_user_clip_plane", Api = "gles1")]
	public unsafe static void ClipPlaneIMG(ClipPlaneName p, float[] eqn)
	{
		fixed (float* eqn2 = eqn)
		{
			Delegates.pglClipPlanefIMG((int)p, eqn2);
		}
	}

	[RequiredByFeature("GL_IMG_user_clip_plane", Api = "gles1")]
	public unsafe static void ClipPlaneIMG(ClipPlaneName p, nint[] eqn)
	{
		fixed (nint* eqn2 = eqn)
		{
			Delegates.pglClipPlanexIMG((int)p, eqn2);
		}
	}

	[RequiredByFeature("GL_INTEL_framebuffer_CMAA", Api = "gl|glcore|gles2")]
	public static void ApplyFramebufferAttachmentINTEL()
	{
		Delegates.pglApplyFramebufferAttachmentCMAAINTEL();
	}

	[RequiredByFeature("GL_INTEL_map_texture")]
	public static void SyncTextureINTEL(uint texture)
	{
		Delegates.pglSyncTextureINTEL(texture);
	}

	[RequiredByFeature("GL_INTEL_map_texture")]
	public static void UnmapTexture2DINTEL(uint texture, int level)
	{
		Delegates.pglUnmapTexture2DINTEL(texture, level);
	}

	[RequiredByFeature("GL_INTEL_map_texture")]
	public unsafe static nint MapTexture2DINTEL(uint texture, int level, uint access, int[] stride, int[] layout)
	{
		nint result;
		fixed (int* stride2 = stride)
		{
			fixed (int* layout2 = layout)
			{
				result = Delegates.pglMapTexture2DINTEL(texture, level, access, stride2, layout2);
			}
		}
		return result;
	}

	[RequiredByFeature("GL_INTEL_parallel_arrays")]
	public unsafe static void VertexPointerINTEL(int size, VertexPointerType type, nint[] pointer)
	{
		fixed (nint* pointer2 = pointer)
		{
			Delegates.pglVertexPointervINTEL(size, (int)type, pointer2);
		}
	}

	[RequiredByFeature("GL_INTEL_parallel_arrays")]
	public unsafe static void NormalPointerINTEL(NormalPointerType type, nint[] pointer)
	{
		fixed (nint* pointer2 = pointer)
		{
			Delegates.pglNormalPointervINTEL((int)type, pointer2);
		}
	}

	[RequiredByFeature("GL_INTEL_parallel_arrays")]
	public unsafe static void ColorPointerINTEL(int size, VertexPointerType type, nint[] pointer)
	{
		fixed (nint* pointer2 = pointer)
		{
			Delegates.pglColorPointervINTEL(size, (int)type, pointer2);
		}
	}

	[RequiredByFeature("GL_INTEL_parallel_arrays")]
	public unsafe static void TexCoordPointerINTEL(int size, VertexPointerType type, nint[] pointer)
	{
		fixed (nint* pointer2 = pointer)
		{
			Delegates.pglTexCoordPointervINTEL(size, (int)type, pointer2);
		}
	}

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public static void BeginPerfQueryINTEL(uint queryHandle)
	{
		Delegates.pglBeginPerfQueryINTEL(queryHandle);
	}

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public unsafe static void CreatePerfQueryINTEL(uint queryId, uint[] queryHandle)
	{
		fixed (uint* queryHandle2 = queryHandle)
		{
			Delegates.pglCreatePerfQueryINTEL(queryId, queryHandle2);
		}
	}

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public static void DeletePerfQueryINTEL(uint queryHandle)
	{
		Delegates.pglDeletePerfQueryINTEL(queryHandle);
	}

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public static void EndPerfQueryINTEL(uint queryHandle)
	{
		Delegates.pglEndPerfQueryINTEL(queryHandle);
	}

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public unsafe static void GetFirstPerfQueryIdINTEL([Out] uint[] queryId)
	{
		fixed (uint* queryId2 = queryId)
		{
			Delegates.pglGetFirstPerfQueryIdINTEL(queryId2);
		}
	}

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public unsafe static void GetNextPerfQueryIdINTEL(uint queryId, [Out] uint[] nextQueryId)
	{
		fixed (uint* nextQueryId2 = nextQueryId)
		{
			Delegates.pglGetNextPerfQueryIdINTEL(queryId, nextQueryId2);
		}
	}

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public unsafe static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, StringBuilder counterName, uint counterDescLength, StringBuilder counterDesc, [Out] uint[] counterOffset, [Out] uint[] counterDataSize, [Out] uint[] counterTypeEnum, [Out] uint[] counterDataTypeEnum, [Out] ulong[] rawCounterMaxValue)
	{
		fixed (uint* counterOffset2 = counterOffset)
		{
			fixed (uint* counterDataSize2 = counterDataSize)
			{
				fixed (uint* counterTypeEnum2 = counterTypeEnum)
				{
					fixed (uint* counterDataTypeEnum2 = counterDataTypeEnum)
					{
						fixed (ulong* rawCounterMaxValue2 = rawCounterMaxValue)
						{
							Delegates.pglGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset2, counterDataSize2, counterTypeEnum2, counterDataTypeEnum2, rawCounterMaxValue2);
						}
					}
				}
			}
		}
	}

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public unsafe static void GetPerfQueryDataINTEL(uint queryHandle, uint flags, int dataSize, nint data, [Out] uint[] bytesWritten)
	{
		fixed (uint* bytesWritten2 = bytesWritten)
		{
			Delegates.pglGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten2);
		}
	}

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public static void GetPerfQueryDataINTEL(uint queryHandle, uint flags, int dataSize, object data, [Out] uint[] bytesWritten)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			GetPerfQueryDataINTEL(queryHandle, flags, dataSize, gCHandle.AddrOfPinnedObject(), bytesWritten);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public unsafe static void GetPerfQueryIdByNameINTEL(string queryName, [Out] uint[] queryId)
	{
		fixed (uint* queryId2 = queryId)
		{
			Delegates.pglGetPerfQueryIdByNameINTEL(queryName, queryId2);
		}
	}

	[RequiredByFeature("GL_INTEL_performance_query", Api = "gl|glcore|gles2")]
	public unsafe static void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, StringBuilder queryName, [Out] uint[] dataSize, [Out] uint[] noCounters, [Out] uint[] noInstances, [Out] uint[] capsMask)
	{
		fixed (uint* dataSize2 = dataSize)
		{
			fixed (uint* noCounters2 = noCounters)
			{
				fixed (uint* noInstances2 = noInstances)
				{
					fixed (uint* capsMask2 = capsMask)
					{
						Delegates.pglGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize2, noCounters2, noInstances2, capsMask2);
					}
				}
			}
		}
	}

	[RequiredByFeature("GL_ARB_parallel_shader_compile", Api = "gl|glcore")]
	[RequiredByFeature("GL_KHR_parallel_shader_compile", Api = "gl|glcore|gles2")]
	public static void MaxShaderCompilerThreadsKHR(uint count)
	{
		Delegates.pglMaxShaderCompilerThreadsKHR(count);
	}

	[RequiredByFeature("GL_MESA_framebuffer_flip_y", Api = "gl|glcore|gles2")]
	public static void FramebufferParameterMESA(FramebufferTarget target, FramebufferParameterName pname, int param)
	{
		Delegates.pglFramebufferParameteriMESA((int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_MESA_framebuffer_flip_y", Api = "gl|glcore|gles2")]
	public unsafe static void GetFramebufferParameterMESA(FramebufferTarget target, FramebufferAttachmentParameterName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetFramebufferParameterivMESA((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_MESA_resize_buffers")]
	public static void ResizeBuffersMESA()
	{
		Delegates.pglResizeBuffersMESA();
	}

	[RequiredByFeature("GL_MESA_window_pos")]
	public static void WindowPos4MESA(double x, double y, double z, double w)
	{
		Delegates.pglWindowPos4dMESA(x, y, z, w);
	}

	[RequiredByFeature("GL_MESA_window_pos")]
	public unsafe static void WindowPos4MESA(double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglWindowPos4dvMESA(v2);
		}
	}

	[RequiredByFeature("GL_MESA_window_pos")]
	public static void WindowPos4MESA(float x, float y, float z, float w)
	{
		Delegates.pglWindowPos4fMESA(x, y, z, w);
	}

	[RequiredByFeature("GL_MESA_window_pos")]
	public unsafe static void WindowPos4MESA(float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglWindowPos4fvMESA(v2);
		}
	}

	[RequiredByFeature("GL_MESA_window_pos")]
	public static void WindowPos4MESA(int x, int y, int z, int w)
	{
		Delegates.pglWindowPos4iMESA(x, y, z, w);
	}

	[RequiredByFeature("GL_MESA_window_pos")]
	public unsafe static void WindowPos4MESA(int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglWindowPos4ivMESA(v2);
		}
	}

	[RequiredByFeature("GL_MESA_window_pos")]
	public static void WindowPos4MESA(short x, short y, short z, short w)
	{
		Delegates.pglWindowPos4sMESA(x, y, z, w);
	}

	[RequiredByFeature("GL_MESA_window_pos")]
	public unsafe static void WindowPos4MESA(short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglWindowPos4svMESA(v2);
		}
	}

	[RequiredByFeature("GL_NVX_conditional_render")]
	public static void BeginConditionalRenderNVX(uint id)
	{
		Delegates.pglBeginConditionalRenderNVX(id);
	}

	[RequiredByFeature("GL_NVX_gpu_multicast2")]
	public static void UploadGpuMaskNVX(uint mask)
	{
		Delegates.pglUploadGpuMaskNVX(mask);
	}

	[RequiredByFeature("GL_NVX_gpu_multicast2")]
	public unsafe static void MulticastViewportArrayvNVX(uint gpu, uint first, int count, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglMulticastViewportArrayvNVX(gpu, first, count, v2);
		}
	}

	[RequiredByFeature("GL_NVX_gpu_multicast2")]
	public static void MulticastViewportPositionWScaleNVX(uint gpu, uint index, float xcoeff, float ycoeff)
	{
		Delegates.pglMulticastViewportPositionWScaleNVX(gpu, index, xcoeff, ycoeff);
	}

	[RequiredByFeature("GL_NVX_gpu_multicast2")]
	public unsafe static void MulticastScissorArrayvNVX(uint gpu, uint first, int count, int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglMulticastScissorArrayvNVX(gpu, first, count, v2);
		}
	}

	[RequiredByFeature("GL_NVX_gpu_multicast2")]
	public unsafe static uint AsyncCopyBufferSubDataNVX(uint[] waitSemaphoreArray, ulong[] fenceValueArray, uint readGpu, uint writeGpuMask, uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, uint size, uint[] signalSemaphoreArray, ulong[] signalValueArray)
	{
		uint result;
		fixed (uint* waitSemaphoreArray2 = waitSemaphoreArray)
		{
			fixed (ulong* fenceValueArray2 = fenceValueArray)
			{
				fixed (uint* signalSemaphoreArray2 = signalSemaphoreArray)
				{
					fixed (ulong* signalValueArray2 = signalValueArray)
					{
						result = Delegates.pglAsyncCopyBufferSubDataNVX(waitSemaphoreArray.Length, waitSemaphoreArray2, fenceValueArray2, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreArray.Length, signalSemaphoreArray2, signalValueArray2);
					}
				}
			}
		}
		return result;
	}

	[RequiredByFeature("GL_NVX_gpu_multicast2")]
	public unsafe static uint AsyncCopyImageSubDataNVX(uint[] waitSemaphoreArray, ulong[] waitValueArray, uint srcGpu, uint dstGpuMask, uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth, uint[] signalSemaphoreArray, ulong[] signalValueArray)
	{
		uint result;
		fixed (uint* waitSemaphoreArray2 = waitSemaphoreArray)
		{
			fixed (ulong* waitValueArray2 = waitValueArray)
			{
				fixed (uint* signalSemaphoreArray2 = signalSemaphoreArray)
				{
					fixed (ulong* signalValueArray2 = signalValueArray)
					{
						result = Delegates.pglAsyncCopyImageSubDataNVX(waitSemaphoreArray.Length, waitSemaphoreArray2, waitValueArray2, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreArray.Length, signalSemaphoreArray2, signalValueArray2);
					}
				}
			}
		}
		return result;
	}

	[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
	public static void LGPUNamedBufferSubDataNVX(uint gpuMask, uint buffer, nint offset, uint size, nint data)
	{
		Delegates.pglLGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data);
	}

	[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
	public static void LGPUNamedBufferSubDataNVX(uint gpuMask, uint buffer, nint offset, uint size, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			LGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
	public static void LGPUCopyImageSubDataNVX(uint sourceGpu, uint destinationGpuMask, uint srcName, int srcTarget, int srcLevel, int srcX, int srxY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth)
	{
		Delegates.pglLGPUCopyImageSubDataNVX(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
	}

	[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
	public static void NVX()
	{
		Delegates.pglLGPUInterlockNVX();
	}

	[RequiredByFeature("GL_NVX_progress_fence")]
	public static uint CreateProgressFenceNVX()
	{
		return Delegates.pglCreateProgressFenceNVX();
	}

	[RequiredByFeature("GL_NVX_progress_fence")]
	public unsafe static void SignalSemaphoreNVX(uint signalGpu, uint[] semaphoreArray, ulong[] fenceValueArray)
	{
		fixed (uint* semaphoreArray2 = semaphoreArray)
		{
			fixed (ulong* fenceValueArray2 = fenceValueArray)
			{
				Delegates.pglSignalSemaphoreui64NVX(signalGpu, semaphoreArray.Length, semaphoreArray2, fenceValueArray2);
			}
		}
	}

	[RequiredByFeature("GL_NVX_progress_fence")]
	public unsafe static void WaitSemaphoreNVX(uint waitGpu, uint[] semaphoreArray, ulong[] fenceValueArray)
	{
		fixed (uint* semaphoreArray2 = semaphoreArray)
		{
			fixed (ulong* fenceValueArray2 = fenceValueArray)
			{
				Delegates.pglWaitSemaphoreui64NVX(waitGpu, semaphoreArray.Length, semaphoreArray2, fenceValueArray2);
			}
		}
	}

	[RequiredByFeature("GL_NVX_progress_fence")]
	public unsafe static void ClientWaitSemaphoreNVX(uint[] semaphoreArray, ulong[] fenceValueArray)
	{
		fixed (uint* semaphoreArray2 = semaphoreArray)
		{
			fixed (ulong* fenceValueArray2 = fenceValueArray)
			{
				Delegates.pglClientWaitSemaphoreui64NVX(semaphoreArray.Length, semaphoreArray2, fenceValueArray2);
			}
		}
	}

	[RequiredByFeature("GL_NV_alpha_to_coverage_dither_control")]
	public static void AlphaToCoverageDitherControlNV(int mode)
	{
		Delegates.pglAlphaToCoverageDitherControlNV(mode);
	}

	[RequiredByFeature("GL_NV_bindless_multi_draw_indirect", Api = "gl|glcore")]
	public static void MultiDrawArraysIndirectBindNV(PrimitiveType mode, nint indirect, int drawCount, int stride, int vertexBufferCount)
	{
		Delegates.pglMultiDrawArraysIndirectBindlessNV((int)mode, indirect, drawCount, stride, vertexBufferCount);
	}

	[RequiredByFeature("GL_NV_bindless_multi_draw_indirect", Api = "gl|glcore")]
	public static void MultiDrawArraysIndirectBindNV(PrimitiveType mode, object indirect, int drawCount, int stride, int vertexBufferCount)
	{
		GCHandle gCHandle = GCHandle.Alloc(indirect, GCHandleType.Pinned);
		try
		{
			MultiDrawArraysIndirectBindNV(mode, gCHandle.AddrOfPinnedObject(), drawCount, stride, vertexBufferCount);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_bindless_multi_draw_indirect", Api = "gl|glcore")]
	public static void MultiDrawElementsIndirectBindNV(PrimitiveType mode, DrawElementsType type, nint indirect, int drawCount, int stride, int vertexBufferCount)
	{
		Delegates.pglMultiDrawElementsIndirectBindlessNV((int)mode, (int)type, indirect, drawCount, stride, vertexBufferCount);
	}

	[RequiredByFeature("GL_NV_bindless_multi_draw_indirect", Api = "gl|glcore")]
	public static void MultiDrawElementsIndirectBindNV(PrimitiveType mode, DrawElementsType type, object indirect, int drawCount, int stride, int vertexBufferCount)
	{
		GCHandle gCHandle = GCHandle.Alloc(indirect, GCHandleType.Pinned);
		try
		{
			MultiDrawElementsIndirectBindNV(mode, type, gCHandle.AddrOfPinnedObject(), drawCount, stride, vertexBufferCount);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_bindless_multi_draw_indirect_count", Api = "gl|glcore")]
	public static void MultiDrawArraysIndirectBindNV(PrimitiveType mode, nint indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
	{
		Delegates.pglMultiDrawArraysIndirectBindlessCountNV((int)mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
	}

	[RequiredByFeature("GL_NV_bindless_multi_draw_indirect_count", Api = "gl|glcore")]
	public static void MultiDrawArraysIndirectBindNV(PrimitiveType mode, object indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
	{
		GCHandle gCHandle = GCHandle.Alloc(indirect, GCHandleType.Pinned);
		try
		{
			MultiDrawArraysIndirectBindNV(mode, gCHandle.AddrOfPinnedObject(), drawCount, maxDrawCount, stride, vertexBufferCount);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_bindless_multi_draw_indirect_count", Api = "gl|glcore")]
	public static void MultiDrawElementsIndirectBindNV(PrimitiveType mode, DrawElementsType type, nint indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
	{
		Delegates.pglMultiDrawElementsIndirectBindlessCountNV((int)mode, (int)type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
	}

	[RequiredByFeature("GL_NV_bindless_multi_draw_indirect_count", Api = "gl|glcore")]
	public static void MultiDrawElementsIndirectBindNV(PrimitiveType mode, DrawElementsType type, object indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
	{
		GCHandle gCHandle = GCHandle.Alloc(indirect, GCHandleType.Pinned);
		try
		{
			MultiDrawElementsIndirectBindNV(mode, type, gCHandle.AddrOfPinnedObject(), drawCount, maxDrawCount, stride, vertexBufferCount);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
	public static ulong GetTextureHandleNV(uint texture)
	{
		return Delegates.pglGetTextureHandleNV(texture);
	}

	[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
	public static ulong GetTextureSamplerHandleNV(uint texture, uint sampler)
	{
		return Delegates.pglGetTextureSamplerHandleNV(texture, sampler);
	}

	[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
	public static void MakeTextureHandleResidentNV(ulong handle)
	{
		Delegates.pglMakeTextureHandleResidentNV(handle);
	}

	[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
	public static void MakeTextureHandleNonResidentNV(ulong handle)
	{
		Delegates.pglMakeTextureHandleNonResidentNV(handle);
	}

	[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
	public static ulong GetImageHandleNV(uint texture, int level, bool layered, int layer, PixelFormat format)
	{
		return Delegates.pglGetImageHandleNV(texture, level, layered, layer, (int)format);
	}

	[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
	public static void MakeImageHandleResidentNV(ulong handle, int access)
	{
		Delegates.pglMakeImageHandleResidentNV(handle, access);
	}

	[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
	public static void MakeImageHandleNonResidentNV(ulong handle)
	{
		Delegates.pglMakeImageHandleNonResidentNV(handle);
	}

	[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
	public static void UniformHandleNV(int location, ulong value)
	{
		Delegates.pglUniformHandleui64NV(location, value);
	}

	[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
	public unsafe static void UniformHandleNV(int location, ulong[] value)
	{
		fixed (ulong* value2 = value)
		{
			Delegates.pglUniformHandleui64vNV(location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
	public static void ProgramUniformHandleNV(uint program, int location, ulong value)
	{
		Delegates.pglProgramUniformHandleui64NV(program, location, value);
	}

	[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
	public unsafe static void ProgramUniformHandleNV(uint program, int location, ulong[] values)
	{
		fixed (ulong* values2 = values)
		{
			Delegates.pglProgramUniformHandleui64vNV(program, location, values.Length, values2);
		}
	}

	[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
	public static bool IsTextureHandleResidentNV(ulong handle)
	{
		return Delegates.pglIsTextureHandleResidentNV(handle);
	}

	[RequiredByFeature("GL_NV_bindless_texture", Api = "gl|glcore|gles2")]
	public static bool IsImageHandleResidentNV(ulong handle)
	{
		return Delegates.pglIsImageHandleResidentNV(handle);
	}

	[RequiredByFeature("GL_NV_blend_equation_advanced", Api = "gl|glcore|gles2")]
	public static void BlendParameterNV(int pname, int value)
	{
		Delegates.pglBlendParameteriNV(pname, value);
	}

	[RequiredByFeature("GL_NV_clip_space_w_scaling", Api = "gl|glcore|gles2")]
	public static void ViewportPositionWScaleNV(uint index, float xcoeff, float ycoeff)
	{
		Delegates.pglViewportPositionWScaleNV(index, xcoeff, ycoeff);
	}

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public unsafe static void CreateStateNV(uint[] states)
	{
		fixed (uint* states2 = states)
		{
			Delegates.pglCreateStatesNV(states.Length, states2);
		}
	}

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public unsafe static uint CreateStateNV()
	{
		uint result = default(uint);
		Delegates.pglCreateStatesNV(1, &result);
		return result;
	}

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public unsafe static void DeleteStateNV(uint[] states)
	{
		fixed (uint* states2 = states)
		{
			Delegates.pglDeleteStatesNV(states.Length, states2);
		}
	}

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public static bool IsStateNV(uint state)
	{
		return Delegates.pglIsStateNV(state);
	}

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public static void StateCaptureNV(uint state, int mode)
	{
		Delegates.pglStateCaptureNV(state, mode);
	}

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public static uint GetNV(CommandOpcodesNV tokenID, uint size)
	{
		return Delegates.pglGetCommandHeaderNV((int)tokenID, size);
	}

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public static ushort GetStageIndexNV(ShaderType shadertype)
	{
		return Delegates.pglGetStageIndexNV((int)shadertype);
	}

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public unsafe static void DrawCommandsNV(int primitiveMode, uint buffer, nint[] indirects, int[] sizes, uint count)
	{
		fixed (nint* indirects2 = indirects)
		{
			fixed (int* sizes2 = sizes)
			{
				Delegates.pglDrawCommandsNV(primitiveMode, buffer, indirects2, sizes2, count);
			}
		}
	}

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public unsafe static void DrawCommandsAddressNV(int primitiveMode, ulong[] indirects, int[] sizes, uint count)
	{
		fixed (ulong* indirects2 = indirects)
		{
			fixed (int* sizes2 = sizes)
			{
				Delegates.pglDrawCommandsAddressNV(primitiveMode, indirects2, sizes2, count);
			}
		}
	}

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public unsafe static void DrawCommandsStateNV(uint buffer, nint[] indirects, int[] sizes, uint[] states, uint[] fbos, uint count)
	{
		fixed (nint* indirects2 = indirects)
		{
			fixed (int* sizes2 = sizes)
			{
				fixed (uint* states2 = states)
				{
					fixed (uint* fbos2 = fbos)
					{
						Delegates.pglDrawCommandsStatesNV(buffer, indirects2, sizes2, states2, fbos2, count);
					}
				}
			}
		}
	}

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public unsafe static void DrawCommandsStatesAddresNV(ulong[] indirects, int[] sizes, uint[] states, uint[] fbos, uint count)
	{
		fixed (ulong* indirects2 = indirects)
		{
			fixed (int* sizes2 = sizes)
			{
				fixed (uint* states2 = states)
				{
					fixed (uint* fbos2 = fbos)
					{
						Delegates.pglDrawCommandsStatesAddressNV(indirects2, sizes2, states2, fbos2, count);
					}
				}
			}
		}
	}

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public unsafe static void CreateCommandListsNV(uint[] lists)
	{
		fixed (uint* lists2 = lists)
		{
			Delegates.pglCreateCommandListsNV(lists.Length, lists2);
		}
	}

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public unsafe static uint CreateCommandListNV()
	{
		uint result = default(uint);
		Delegates.pglCreateCommandListsNV(1, &result);
		return result;
	}

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public unsafe static void DeleteCommandListsNV(uint[] lists)
	{
		fixed (uint* lists2 = lists)
		{
			Delegates.pglDeleteCommandListsNV(lists.Length, lists2);
		}
	}

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public static bool IsCommandListNV(uint list)
	{
		return Delegates.pglIsCommandListNV(list);
	}

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public unsafe static void ListDrawCommandsStatesClientNV(uint list, uint segment, nint[] indirects, int[] sizes, uint[] states, uint[] fbos)
	{
		fixed (nint* indirects2 = indirects)
		{
			fixed (int* sizes2 = sizes)
			{
				fixed (uint* states2 = states)
				{
					fixed (uint* fbos2 = fbos)
					{
						Delegates.pglListDrawCommandsStatesClientNV(list, segment, indirects2, sizes2, states2, fbos2, (uint)indirects.Length);
					}
				}
			}
		}
	}

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public static void CommandListSegmentsNV(uint list, uint segments)
	{
		Delegates.pglCommandListSegmentsNV(list, segments);
	}

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public static void CompileCommandListNV(uint list)
	{
		Delegates.pglCompileCommandListNV(list);
	}

	[RequiredByFeature("GL_NV_command_list", Api = "gl|glcore")]
	public static void CallCommandListNV(uint list)
	{
		Delegates.pglCallCommandListNV(list);
	}

	[RequiredByFeature("GL_NV_conservative_raster", Api = "gl|glcore|gles2")]
	public static void SubpixelPrecisionBiasNV(uint xbits, uint ybits)
	{
		Delegates.pglSubpixelPrecisionBiasNV(xbits, ybits);
	}

	[RequiredByFeature("GL_NV_conservative_raster_dilate", Api = "gl|glcore")]
	public static void ConservativeRasterParameterfNV(int pname, float value)
	{
		Delegates.pglConservativeRasterParameterfNV(pname, value);
	}

	[RequiredByFeature("GL_NV_conservative_raster_pre_snap_triangles", Api = "gl|glcore|gles2")]
	public static void ConservativeRasterParameteriNV(int pname, int param)
	{
		Delegates.pglConservativeRasterParameteriNV(pname, param);
	}

	[RequiredByFeature("GL_NV_copy_image")]
	public static void CopyImageSubDataNV(uint srcName, CopyBufferSubDataTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, CopyBufferSubDataTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth)
	{
		Delegates.pglCopyImageSubDataNV(srcName, (int)srcTarget, srcLevel, srcX, srcY, srcZ, dstName, (int)dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
	}

	[RequiredByFeature("GL_NV_coverage_sample", Api = "gles2")]
	public static void CoverageMaskNV(bool mask)
	{
		Delegates.pglCoverageMaskNV(mask);
	}

	[RequiredByFeature("GL_NV_coverage_sample", Api = "gles2")]
	public static void CoverageOpNV(int operation)
	{
		Delegates.pglCoverageOperationNV(operation);
	}

	[RequiredByFeature("GL_NV_depth_buffer_float", Api = "gl|glcore")]
	public static void DepthRangedNV(double zNear, double zFar)
	{
		Delegates.pglDepthRangedNV(zNear, zFar);
	}

	[RequiredByFeature("GL_NV_depth_buffer_float", Api = "gl|glcore")]
	public static void ClearDepthdNV(double depth)
	{
		Delegates.pglClearDepthdNV(depth);
	}

	[RequiredByFeature("GL_NV_depth_buffer_float", Api = "gl|glcore")]
	public static void DepthBoundsdNV(double zmin, double zmax)
	{
		Delegates.pglDepthBoundsdNV(zmin, zmax);
	}

	[RequiredByFeature("GL_NV_draw_buffers", Api = "gles2")]
	public unsafe static void DrawBuffersNV(int[] bufs)
	{
		fixed (int* bufs2 = bufs)
		{
			Delegates.pglDrawBuffersNV(bufs.Length, bufs2);
		}
	}

	[RequiredByFeature("GL_NV_draw_texture")]
	public static void DrawTextureNV(uint texture, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1)
	{
		Delegates.pglDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
	}

	[RequiredByFeature("GL_NV_draw_vulkan_image", Api = "gl|glcore|gles2")]
	public static void DrawVkImageNV(ulong vkImage, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1)
	{
		Delegates.pglDrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
	}

	[RequiredByFeature("GL_NV_draw_vulkan_image", Api = "gl|glcore|gles2")]
	public static VulkanProc GetVkProcAddrNV(string name)
	{
		return Delegates.pglGetVkProcAddrNV(name);
	}

	[RequiredByFeature("GL_NV_draw_vulkan_image", Api = "gl|glcore|gles2")]
	public static void WaitVkSemaphoreNV(ulong vkSemaphore)
	{
		Delegates.pglWaitVkSemaphoreNV(vkSemaphore);
	}

	[RequiredByFeature("GL_NV_draw_vulkan_image", Api = "gl|glcore|gles2")]
	public static void SignalVkSemaphoreNV(ulong vkSemaphore)
	{
		Delegates.pglSignalVkSemaphoreNV(vkSemaphore);
	}

	[RequiredByFeature("GL_NV_draw_vulkan_image", Api = "gl|glcore|gles2")]
	public static void SignalVkFenceNV(ulong vkFence)
	{
		Delegates.pglSignalVkFenceNV(vkFence);
	}

	[RequiredByFeature("GL_NV_evaluators")]
	public static void MapControlPointNV(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, nint points)
	{
		Delegates.pglMapControlPointsNV((int)target, index, (int)type, ustride, vstride, uorder, vorder, packed, points);
	}

	[RequiredByFeature("GL_NV_evaluators")]
	public static void MapControlPointNV(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, object points)
	{
		GCHandle gCHandle = GCHandle.Alloc(points, GCHandleType.Pinned);
		try
		{
			MapControlPointNV(target, index, type, ustride, vstride, uorder, vorder, packed, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_evaluators")]
	public unsafe static void MapParameterNV(EvalTargetNV target, MapParameterNV pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglMapParameterivNV((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_evaluators")]
	public unsafe static void MapParameterNV(EvalTargetNV target, MapParameterNV pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglMapParameterfvNV((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_evaluators")]
	public static void GetMapControlPointNV(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed, nint points)
	{
		Delegates.pglGetMapControlPointsNV((int)target, index, (int)type, ustride, vstride, packed, points);
	}

	[RequiredByFeature("GL_NV_evaluators")]
	public static void GetMapControlPointNV(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed, object points)
	{
		GCHandle gCHandle = GCHandle.Alloc(points, GCHandleType.Pinned);
		try
		{
			GetMapControlPointNV(target, index, type, ustride, vstride, packed, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_evaluators")]
	public unsafe static void GetMapParameterNV(EvalTargetNV target, MapParameterNV pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetMapParameterivNV((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_evaluators")]
	public unsafe static void GetMapParameterNV(EvalTargetNV target, MapParameterNV pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetMapParameterfvNV((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_evaluators")]
	public unsafe static void GetMapAttribParameterNV(EvalTargetNV target, uint index, MapAttribParameterNV pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetMapAttribParameterivNV((int)target, index, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_evaluators")]
	public unsafe static void GetMapAttribParameterNV(EvalTargetNV target, uint index, MapAttribParameterNV pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetMapAttribParameterfvNV((int)target, index, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_evaluators")]
	public static void EvalMapNV(EvalTargetNV target, EvalMapsModeNV mode)
	{
		Delegates.pglEvalMapsNV((int)target, (int)mode);
	}

	[RequiredByFeature("GL_NV_explicit_multisample")]
	public static void SampleMaskIndexedNV(uint index, uint mask)
	{
		Delegates.pglSampleMaskIndexedNV(index, mask);
	}

	[RequiredByFeature("GL_NV_explicit_multisample")]
	public static void TexRenderbufferNV(TextureTarget target, uint renderbuffer)
	{
		Delegates.pglTexRenderbufferNV((int)target, renderbuffer);
	}

	[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
	public unsafe static void DeleteFencesNV(params uint[] fences)
	{
		fixed (uint* fences2 = fences)
		{
			Delegates.pglDeleteFencesNV(fences.Length, fences2);
		}
	}

	[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
	public unsafe static void GenFencesNV(uint[] fences)
	{
		fixed (uint* fences2 = fences)
		{
			Delegates.pglGenFencesNV(fences.Length, fences2);
		}
	}

	[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
	public unsafe static uint GenFenceNV()
	{
		uint result = default(uint);
		Delegates.pglGenFencesNV(1, &result);
		return result;
	}

	[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
	public static bool IsFenceNV(uint fence)
	{
		return Delegates.pglIsFenceNV(fence);
	}

	[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
	public static bool TestFenceNV(uint fence)
	{
		return Delegates.pglTestFenceNV(fence);
	}

	[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
	public unsafe static void GetFenceNV(uint fence, FenceParameterNameNV pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetFenceivNV(fence, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
	public static void FinishFenceNV(uint fence)
	{
		Delegates.pglFinishFenceNV(fence);
	}

	[RequiredByFeature("GL_NV_fence", Api = "gl|gles1|gles2")]
	public static void SetFenceNV(uint fence, FenceConditionNV condition)
	{
		Delegates.pglSetFenceNV(fence, (int)condition);
	}

	[RequiredByFeature("GL_NV_fragment_coverage_to_color", Api = "gl|glcore|gles2")]
	public static void FragmentCoverageColorNV(uint color)
	{
		Delegates.pglFragmentCoverageColorNV(color);
	}

	[RequiredByFeature("GL_NV_fragment_program")]
	public unsafe static void ProgramNamedParameter4NV(uint id, int len, byte[] name, float x, float y, float z, float w)
	{
		fixed (byte* name2 = name)
		{
			Delegates.pglProgramNamedParameter4fNV(id, len, name2, x, y, z, w);
		}
	}

	[RequiredByFeature("GL_NV_fragment_program")]
	public unsafe static void ProgramNamedParameter4NV(uint id, int len, byte[] name, float[] v)
	{
		fixed (byte* name2 = name)
		{
			fixed (float* v2 = v)
			{
				Delegates.pglProgramNamedParameter4fvNV(id, len, name2, v2);
			}
		}
	}

	[RequiredByFeature("GL_NV_fragment_program")]
	public unsafe static void ProgramNamedParameter4NV(uint id, int len, byte[] name, double x, double y, double z, double w)
	{
		fixed (byte* name2 = name)
		{
			Delegates.pglProgramNamedParameter4dNV(id, len, name2, x, y, z, w);
		}
	}

	[RequiredByFeature("GL_NV_fragment_program")]
	public unsafe static void ProgramNamedParameter4NV(uint id, int len, byte[] name, double[] v)
	{
		fixed (byte* name2 = name)
		{
			fixed (double* v2 = v)
			{
				Delegates.pglProgramNamedParameter4dvNV(id, len, name2, v2);
			}
		}
	}

	[RequiredByFeature("GL_NV_fragment_program")]
	public unsafe static void GetProgramNamedParameterNV(uint id, int len, byte[] name, [Out] float[] @params)
	{
		fixed (byte* name2 = name)
		{
			fixed (float* params2 = @params)
			{
				Delegates.pglGetProgramNamedParameterfvNV(id, len, name2, params2);
			}
		}
	}

	[RequiredByFeature("GL_NV_fragment_program")]
	public unsafe static void GetProgramNamedParameterNV(uint id, int len, byte[] name, [Out] double[] @params)
	{
		fixed (byte* name2 = name)
		{
			fixed (double* params2 = @params)
			{
				Delegates.pglGetProgramNamedParameterdvNV(id, len, name2, params2);
			}
		}
	}

	[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
	public unsafe static void CoverageModulationTableNV(float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglCoverageModulationTableNV(v.Length, v2);
		}
	}

	[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
	public unsafe static void GetCoverageModulationTableNV(int bufSize, [Out] float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglGetCoverageModulationTableNV(bufSize, v2);
		}
	}

	[RequiredByFeature("GL_NV_framebuffer_mixed_samples", Api = "gl|glcore|gles2")]
	public static void CoverageNV(int components)
	{
		Delegates.pglCoverageModulationNV(components);
	}

	[RequiredByFeature("GL_NV_framebuffer_multisample_coverage", Api = "gl|glcore")]
	public static void RenderbufferStorageMultisampleCoverageNV(RenderbufferTarget target, int coverageSamples, int colorSamples, InternalFormat internalformat, int width, int height)
	{
		Delegates.pglRenderbufferStorageMultisampleCoverageNV((int)target, coverageSamples, colorSamples, (int)internalformat, width, height);
	}

	[RequiredByFeature("GL_NV_geometry_program4")]
	public static void ProgramVertexLimitNV(ProgramTarget target, int limit)
	{
		Delegates.pglProgramVertexLimitNV((int)target, limit);
	}

	[RequiredByFeature("GL_NV_gpu_multicast")]
	public static void RenderGpuMaskNV(uint mask)
	{
		Delegates.pglRenderGpuMaskNV(mask);
	}

	[RequiredByFeature("GL_NV_gpu_multicast")]
	public static void MulticastBufferSubDataNV(uint gpuMask, uint buffer, nint offset, uint size, nint data)
	{
		Delegates.pglMulticastBufferSubDataNV(gpuMask, buffer, offset, size, data);
	}

	[RequiredByFeature("GL_NV_gpu_multicast")]
	public static void MulticastBufferSubDataNV(uint gpuMask, uint buffer, nint offset, uint size, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			MulticastBufferSubDataNV(gpuMask, buffer, offset, size, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_gpu_multicast")]
	public static void MulticastCopyBufferSubDataNV(uint readGpu, uint writeGpuMask, uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, uint size)
	{
		Delegates.pglMulticastCopyBufferSubDataNV(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);
	}

	[RequiredByFeature("GL_NV_gpu_multicast")]
	public static void MulticastCopyImageSubDataNV(uint srcGpu, uint dstGpuMask, uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
	{
		Delegates.pglMulticastCopyImageSubDataNV(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
	}

	[RequiredByFeature("GL_NV_gpu_multicast")]
	public static void MulticastBlitFramebufferNV(uint srcGpu, uint dstGpu, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, int filter)
	{
		Delegates.pglMulticastBlitFramebufferNV(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, (uint)mask, filter);
	}

	[RequiredByFeature("GL_NV_gpu_multicast")]
	public unsafe static void MulticastFramebufferSampleLocationsfvNV(uint gpu, uint framebuffer, uint start, int count, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglMulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_multicast")]
	public static void MulticastBarrierNV()
	{
		Delegates.pglMulticastBarrierNV();
	}

	[RequiredByFeature("GL_NV_gpu_multicast")]
	public static void MulticastWaitSyncNV(uint signalGpu, uint waitGpuMask)
	{
		Delegates.pglMulticastWaitSyncNV(signalGpu, waitGpuMask);
	}

	[RequiredByFeature("GL_NV_gpu_multicast")]
	public unsafe static void MulticastGetQueryObjectivNV(uint gpu, uint id, int pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglMulticastGetQueryObjectivNV(gpu, id, pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_multicast")]
	public unsafe static void MulticastGetQueryObjectuivNV(uint gpu, uint id, int pname, uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglMulticastGetQueryObjectuivNV(gpu, id, pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_multicast")]
	public unsafe static void MulticastGetQueryObjecti64vNV(uint gpu, uint id, int pname, long[] @params)
	{
		fixed (long* params2 = @params)
		{
			Delegates.pglMulticastGetQueryObjecti64vNV(gpu, id, pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_multicast")]
	public unsafe static void MulticastGetQueryObjectui64vNV(uint gpu, uint id, int pname, ulong[] @params)
	{
		fixed (ulong* params2 = @params)
		{
			Delegates.pglMulticastGetQueryObjectui64vNV(gpu, id, pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_program4")]
	public static void ProgramLocalParameterI4NV(ProgramTarget target, uint index, int x, int y, int z, int w)
	{
		Delegates.pglProgramLocalParameterI4iNV((int)target, index, x, y, z, w);
	}

	[RequiredByFeature("GL_NV_gpu_program4")]
	public unsafe static void ProgramLocalParameterI4NV(ProgramTarget target, uint index, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglProgramLocalParameterI4ivNV((int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_program4")]
	public unsafe static void ProgramLocalParametersI4NV(ProgramTarget target, uint index, int count, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglProgramLocalParametersI4ivNV((int)target, index, count, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_program4")]
	public unsafe static void ProgramLocalParametersI4NV(ProgramTarget target, uint index, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglProgramLocalParametersI4ivNV((int)target, index, @params.Length / 4, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_program4")]
	public static void ProgramLocalParameterI4uiNV(ProgramTarget target, uint index, uint x, uint y, uint z, uint w)
	{
		Delegates.pglProgramLocalParameterI4uiNV((int)target, index, x, y, z, w);
	}

	[RequiredByFeature("GL_NV_gpu_program4")]
	public unsafe static void ProgramLocalParameterI4uiNV(ProgramTarget target, uint index, uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglProgramLocalParameterI4uivNV((int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_program4")]
	public unsafe static void ProgramLocalParametersI4uiNV(ProgramTarget target, uint index, int count, uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglProgramLocalParametersI4uivNV((int)target, index, count, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_program4")]
	public unsafe static void ProgramLocalParametersI4uiNV(ProgramTarget target, uint index, uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglProgramLocalParametersI4uivNV((int)target, index, @params.Length / 4, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_program4")]
	public static void ProgramEnvParameterI4NV(ProgramTarget target, uint index, int x, int y, int z, int w)
	{
		Delegates.pglProgramEnvParameterI4iNV((int)target, index, x, y, z, w);
	}

	[RequiredByFeature("GL_NV_gpu_program4")]
	public unsafe static void ProgramEnvParameterI4NV(ProgramTarget target, uint index, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglProgramEnvParameterI4ivNV((int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_program4")]
	public unsafe static void ProgramEnvParametersI4NV(ProgramTarget target, uint index, int count, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglProgramEnvParametersI4ivNV((int)target, index, count, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_program4")]
	public unsafe static void ProgramEnvParametersI4NV(ProgramTarget target, uint index, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglProgramEnvParametersI4ivNV((int)target, index, @params.Length / 4, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_program4")]
	public static void ProgramEnvParameterI4uiNV(ProgramTarget target, uint index, uint x, uint y, uint z, uint w)
	{
		Delegates.pglProgramEnvParameterI4uiNV((int)target, index, x, y, z, w);
	}

	[RequiredByFeature("GL_NV_gpu_program4")]
	public unsafe static void ProgramEnvParameterI4uiNV(ProgramTarget target, uint index, uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglProgramEnvParameterI4uivNV((int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_program4")]
	public unsafe static void ProgramEnvParametersI4uiNV(ProgramTarget target, uint index, int count, uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglProgramEnvParametersI4uivNV((int)target, index, count, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_program4")]
	public unsafe static void ProgramEnvParametersI4uiNV(ProgramTarget target, uint index, uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglProgramEnvParametersI4uivNV((int)target, index, @params.Length / 4, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_program4")]
	public unsafe static void GetProgramLocalParameterINV(ProgramTarget target, uint index, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetProgramLocalParameterIivNV((int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_program4")]
	public unsafe static void GetProgramLocalParameterINV(ProgramTarget target, uint index, [Out] uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglGetProgramLocalParameterIuivNV((int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_program4")]
	public unsafe static void GetProgramEnvParameterINV(ProgramTarget target, uint index, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetProgramEnvParameterIivNV((int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_program4")]
	public unsafe static void GetProgramEnvParameterINV(ProgramTarget target, uint index, [Out] uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglGetProgramEnvParameterIuivNV((int)target, index, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_program5")]
	public unsafe static void ProgramSubroutineParametersNV(int target, uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglProgramSubroutineParametersuivNV(target, @params.Length, params2);
		}
	}

	[RequiredByFeature("GL_NV_gpu_program5")]
	public unsafe static void GetProgramSubroutineParameterNV(int target, uint index, [Out] uint[] param)
	{
		fixed (uint* param2 = param)
		{
			Delegates.pglGetProgramSubroutineParameteruivNV(target, index, param2);
		}
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public static void Uniform1NV(int location, long x)
	{
		Delegates.pglUniform1i64NV(location, x);
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public static void Uniform2NV(int location, long x, long y)
	{
		Delegates.pglUniform2i64NV(location, x, y);
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public static void Uniform3NV(int location, long x, long y, long z)
	{
		Delegates.pglUniform3i64NV(location, x, y, z);
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public static void Uniform4NV(int location, long x, long y, long z, long w)
	{
		Delegates.pglUniform4i64NV(location, x, y, z, w);
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public unsafe static void Uniform1NV(int location, long[] value)
	{
		fixed (long* value2 = value)
		{
			Delegates.pglUniform1i64vNV(location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public unsafe static void Uniform2NV(int location, long[] value)
	{
		fixed (long* value2 = value)
		{
			Delegates.pglUniform2i64vNV(location, value.Length / 2, value2);
		}
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public unsafe static void Uniform3NV(int location, long[] value)
	{
		fixed (long* value2 = value)
		{
			Delegates.pglUniform3i64vNV(location, value.Length / 3, value2);
		}
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public unsafe static void Uniform4NV(int location, long[] value)
	{
		fixed (long* value2 = value)
		{
			Delegates.pglUniform4i64vNV(location, value.Length / 4, value2);
		}
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public static void Uniform1NV(int location, ulong x)
	{
		Delegates.pglUniform1ui64NV(location, x);
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public static void Uniform2NV(int location, ulong x, ulong y)
	{
		Delegates.pglUniform2ui64NV(location, x, y);
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public static void Uniform3NV(int location, ulong x, ulong y, ulong z)
	{
		Delegates.pglUniform3ui64NV(location, x, y, z);
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public static void Uniform4NV(int location, ulong x, ulong y, ulong z, ulong w)
	{
		Delegates.pglUniform4ui64NV(location, x, y, z, w);
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public unsafe static void Uniform1NV(int location, ulong[] value)
	{
		fixed (ulong* value2 = value)
		{
			Delegates.pglUniform1ui64vNV(location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public unsafe static void Uniform2NV(int location, ulong[] value)
	{
		fixed (ulong* value2 = value)
		{
			Delegates.pglUniform2ui64vNV(location, value.Length / 2, value2);
		}
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public unsafe static void Uniform3NV(int location, ulong[] value)
	{
		fixed (ulong* value2 = value)
		{
			Delegates.pglUniform3ui64vNV(location, value.Length / 3, value2);
		}
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public unsafe static void Uniform4NV(int location, ulong[] value)
	{
		fixed (ulong* value2 = value)
		{
			Delegates.pglUniform4ui64vNV(location, value.Length / 4, value2);
		}
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public unsafe static void GetUniformNV(uint program, int location, [Out] long[] @params)
	{
		fixed (long* params2 = @params)
		{
			Delegates.pglGetUniformi64vNV(program, location, params2);
		}
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public static void ProgramUniform1NV(uint program, int location, long x)
	{
		Delegates.pglProgramUniform1i64NV(program, location, x);
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public static void ProgramUniform2NV(uint program, int location, long x, long y)
	{
		Delegates.pglProgramUniform2i64NV(program, location, x, y);
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public static void ProgramUniform3NV(uint program, int location, long x, long y, long z)
	{
		Delegates.pglProgramUniform3i64NV(program, location, x, y, z);
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public static void ProgramUniform4NV(uint program, int location, long x, long y, long z, long w)
	{
		Delegates.pglProgramUniform4i64NV(program, location, x, y, z, w);
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public unsafe static void ProgramUniform1NV(uint program, int location, long[] value)
	{
		fixed (long* value2 = value)
		{
			Delegates.pglProgramUniform1i64vNV(program, location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public unsafe static void ProgramUniform2NV(uint program, int location, long[] value)
	{
		fixed (long* value2 = value)
		{
			Delegates.pglProgramUniform2i64vNV(program, location, value.Length / 2, value2);
		}
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public unsafe static void ProgramUniform3NV(uint program, int location, long[] value)
	{
		fixed (long* value2 = value)
		{
			Delegates.pglProgramUniform3i64vNV(program, location, value.Length / 3, value2);
		}
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public unsafe static void ProgramUniform4NV(uint program, int location, long[] value)
	{
		fixed (long* value2 = value)
		{
			Delegates.pglProgramUniform4i64vNV(program, location, value.Length / 4, value2);
		}
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public static void ProgramUniform1NV(uint program, int location, ulong x)
	{
		Delegates.pglProgramUniform1ui64NV(program, location, x);
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public static void ProgramUniform2NV(uint program, int location, ulong x, ulong y)
	{
		Delegates.pglProgramUniform2ui64NV(program, location, x, y);
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public static void ProgramUniform3NV(uint program, int location, ulong x, ulong y, ulong z)
	{
		Delegates.pglProgramUniform3ui64NV(program, location, x, y, z);
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public static void ProgramUniform4NV(uint program, int location, ulong x, ulong y, ulong z, ulong w)
	{
		Delegates.pglProgramUniform4ui64NV(program, location, x, y, z, w);
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public unsafe static void ProgramUniform1NV(uint program, int location, ulong[] value)
	{
		fixed (ulong* value2 = value)
		{
			Delegates.pglProgramUniform1ui64vNV(program, location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public unsafe static void ProgramUniform2NV(uint program, int location, ulong[] value)
	{
		fixed (ulong* value2 = value)
		{
			Delegates.pglProgramUniform2ui64vNV(program, location, value.Length / 2, value2);
		}
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public unsafe static void ProgramUniform3NV(uint program, int location, ulong[] value)
	{
		fixed (ulong* value2 = value)
		{
			Delegates.pglProgramUniform3ui64vNV(program, location, value.Length / 3, value2);
		}
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_gpu_shader5", Api = "gl|glcore|gles2")]
	public unsafe static void ProgramUniform4NV(uint program, int location, ulong[] value)
	{
		fixed (ulong* value2 = value)
		{
			Delegates.pglProgramUniform4ui64vNV(program, location, value.Length / 4, value2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void Vertex2hNV(ushort x, ushort y)
	{
		Delegates.pglVertex2hNV(x, y);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void Vertex2hNV(ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglVertex2hvNV(v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void Vertex3hNV(ushort x, ushort y, ushort z)
	{
		Delegates.pglVertex3hNV(x, y, z);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void Vertex3hNV(ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglVertex3hvNV(v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void Vertex4hNV(ushort x, ushort y, ushort z, ushort w)
	{
		Delegates.pglVertex4hNV(x, y, z, w);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void Vertex4hNV(ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglVertex4hvNV(v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void Normal3hNV(ushort nx, ushort ny, ushort nz)
	{
		Delegates.pglNormal3hNV(nx, ny, nz);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void Normal3hNV(ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglNormal3hvNV(v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void Color3hNV(ushort red, ushort green, ushort blue)
	{
		Delegates.pglColor3hNV(red, green, blue);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void Color3hNV(ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglColor3hvNV(v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void Color4hNV(ushort red, ushort green, ushort blue, ushort alpha)
	{
		Delegates.pglColor4hNV(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void Color4hNV(ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglColor4hvNV(v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void TexCoord1hNV(ushort s)
	{
		Delegates.pglTexCoord1hNV(s);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void TexCoord1hNV(ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglTexCoord1hvNV(v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void TexCoord2hNV(ushort s, ushort t)
	{
		Delegates.pglTexCoord2hNV(s, t);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void TexCoord2hNV(ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglTexCoord2hvNV(v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void TexCoord3hNV(ushort s, ushort t, ushort r)
	{
		Delegates.pglTexCoord3hNV(s, t, r);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void TexCoord3hNV(ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglTexCoord3hvNV(v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void TexCoord4hNV(ushort s, ushort t, ushort r, ushort q)
	{
		Delegates.pglTexCoord4hNV(s, t, r, q);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void TexCoord4hNV(ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglTexCoord4hvNV(v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void MultiTexCoord1hNV(TextureUnit target, ushort s)
	{
		Delegates.pglMultiTexCoord1hNV((int)target, s);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void MultiTexCoord1hNV(TextureUnit target, ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglMultiTexCoord1hvNV((int)target, v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void MultiTexCoord2hNV(TextureUnit target, ushort s, ushort t)
	{
		Delegates.pglMultiTexCoord2hNV((int)target, s, t);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void MultiTexCoord2hNV(TextureUnit target, ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglMultiTexCoord2hvNV((int)target, v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void MultiTexCoord3hNV(TextureUnit target, ushort s, ushort t, ushort r)
	{
		Delegates.pglMultiTexCoord3hNV((int)target, s, t, r);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void MultiTexCoord3hNV(TextureUnit target, ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglMultiTexCoord3hvNV((int)target, v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void MultiTexCoord4hNV(TextureUnit target, ushort s, ushort t, ushort r, ushort q)
	{
		Delegates.pglMultiTexCoord4hNV((int)target, s, t, r, q);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void MultiTexCoord4hNV(TextureUnit target, ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglMultiTexCoord4hvNV((int)target, v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void FogCoordhNV(ushort fog)
	{
		Delegates.pglFogCoordhNV(fog);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void FogCoordhNV(ushort[] fog)
	{
		fixed (ushort* fog2 = fog)
		{
			Delegates.pglFogCoordhvNV(fog2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void SecondaryColor3hNV(ushort red, ushort green, ushort blue)
	{
		Delegates.pglSecondaryColor3hNV(red, green, blue);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void SecondaryColor3hNV(ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglSecondaryColor3hvNV(v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void VertexWeighthNV(ushort weight)
	{
		Delegates.pglVertexWeighthNV(weight);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void VertexWeighthNV(ushort[] weight)
	{
		fixed (ushort* weight2 = weight)
		{
			Delegates.pglVertexWeighthvNV(weight2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void VertexAttrib1NV(uint index, ushort x)
	{
		Delegates.pglVertexAttrib1hNV(index, x);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void VertexAttrib1hvNV(uint index, ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglVertexAttrib1hvNV(index, v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void VertexAttrib2NV(uint index, ushort x, ushort y)
	{
		Delegates.pglVertexAttrib2hNV(index, x, y);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void VertexAttrib2hvNV(uint index, ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglVertexAttrib2hvNV(index, v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void VertexAttrib3NV(uint index, ushort x, ushort y, ushort z)
	{
		Delegates.pglVertexAttrib3hNV(index, x, y, z);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void VertexAttrib3hvNV(uint index, ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglVertexAttrib3hvNV(index, v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public static void VertexAttrib4NV(uint index, ushort x, ushort y, ushort z, ushort w)
	{
		Delegates.pglVertexAttrib4hNV(index, x, y, z, w);
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void VertexAttrib4hvNV(uint index, ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglVertexAttrib4hvNV(index, v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void VertexAttribs1hvNV(uint index, ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglVertexAttribs1hvNV(index, v.Length, v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void VertexAttribs2hvNV(uint index, ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglVertexAttribs2hvNV(index, v.Length, v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void VertexAttribs3hvNV(uint index, ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglVertexAttribs3hvNV(index, v.Length, v2);
		}
	}

	[RequiredByFeature("GL_NV_half_float")]
	public unsafe static void VertexAttribs4hvNV(uint index, ushort[] v)
	{
		fixed (ushort* v2 = v)
		{
			Delegates.pglVertexAttribs4hvNV(index, v.Length, v2);
		}
	}

	[RequiredByFeature("GL_NV_internalformat_sample_query", Api = "gl|glcore|gles2")]
	public unsafe static void GetInternalformatSampleNV(TextureTarget target, InternalFormat internalformat, int samples, InternalFormatPName pname, int count, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetInternalformatSampleivNV((int)target, (int)internalformat, samples, (int)pname, count, params2);
		}
	}

	[RequiredByFeature("GL_NV_internalformat_sample_query", Api = "gl|glcore|gles2")]
	public unsafe static void GetInternalformatSampleNV(TextureTarget target, InternalFormat internalformat, int samples, InternalFormatPName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetInternalformatSampleivNV((int)target, (int)internalformat, samples, (int)pname, @params.Length, params2);
		}
	}

	[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
	public unsafe static void GetMemoryObjectDetachedResourcesuivNV(uint memory, int pname, int first, int count, [Out] uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglGetMemoryObjectDetachedResourcesuivNV(memory, pname, first, count, params2);
		}
	}

	[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
	public static void ResetMemoryObjectParameterNV(uint memory, int pname)
	{
		Delegates.pglResetMemoryObjectParameterNV(memory, pname);
	}

	[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
	public static void TexAttachMemoryNV(TextureTarget target, uint memory, ulong offset)
	{
		Delegates.pglTexAttachMemoryNV((int)target, memory, offset);
	}

	[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
	public static void BufferAttachMemoryNV(BufferTarget target, uint memory, ulong offset)
	{
		Delegates.pglBufferAttachMemoryNV((int)target, memory, offset);
	}

	[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
	public static void TextureAttachMemoryNV(uint texture, uint memory, ulong offset)
	{
		Delegates.pglTextureAttachMemoryNV(texture, memory, offset);
	}

	[RequiredByFeature("GL_NV_memory_attachment", Api = "gl|glcore|gles2")]
	public static void NamedBufferAttachMemoryNV(uint buffer, uint memory, ulong offset)
	{
		Delegates.pglNamedBufferAttachMemoryNV(buffer, memory, offset);
	}

	[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
	public static void BufferPageCommitmentNV(BufferStorageTarget target, nint offset, uint size, uint memory, ulong memOffset, bool commit)
	{
		Delegates.pglBufferPageCommitmentMemNV((int)target, offset, size, memory, memOffset, commit);
	}

	[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
	public static void TexPageCommitmentNV(TextureTarget target, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, bool commit)
	{
		Delegates.pglTexPageCommitmentMemNV((int)target, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
	}

	[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
	public static void NamedBufferPageCommitmentNV(uint buffer, nint offset, uint size, uint memory, ulong memOffset, bool commit)
	{
		Delegates.pglNamedBufferPageCommitmentMemNV(buffer, offset, size, memory, memOffset, commit);
	}

	[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
	public static void TexturePageCommitmentNV(uint texture, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, bool commit)
	{
		Delegates.pglTexturePageCommitmentMemNV(texture, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
	}

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public static void DrawMeshNV(uint first, uint count)
	{
		Delegates.pglDrawMeshTasksNV(first, count);
	}

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public static void DrawMeshTasksIndirectNV(nint indirect)
	{
		Delegates.pglDrawMeshTasksIndirectNV(indirect);
	}

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public static void MultiDrawMeshTasksIndirectNV(nint indirect, int drawcount, int stride)
	{
		Delegates.pglMultiDrawMeshTasksIndirectNV(indirect, drawcount, stride);
	}

	[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore|gles2")]
	public static void MultiDrawMeshTasksIndirectCountNV(nint indirect, nint drawcount, int maxdrawcount, int stride)
	{
		Delegates.pglMultiDrawMeshTasksIndirectCountNV(indirect, drawcount, maxdrawcount, stride);
	}

	[RequiredByFeature("GL_NV_occlusion_query")]
	public unsafe static void GenOcclusionQueriesNV(uint[] ids)
	{
		fixed (uint* ids2 = ids)
		{
			Delegates.pglGenOcclusionQueriesNV(ids.Length, ids2);
		}
	}

	[RequiredByFeature("GL_NV_occlusion_query")]
	public unsafe static uint GenOcclusionQueryNV()
	{
		uint result = default(uint);
		Delegates.pglGenOcclusionQueriesNV(1, &result);
		return result;
	}

	[RequiredByFeature("GL_NV_occlusion_query")]
	public unsafe static void DeleteOcclusionQueriesNV(params uint[] ids)
	{
		fixed (uint* ids2 = ids)
		{
			Delegates.pglDeleteOcclusionQueriesNV(ids.Length, ids2);
		}
	}

	[RequiredByFeature("GL_NV_occlusion_query")]
	public static bool IsOcclusionQueryNV(uint id)
	{
		return Delegates.pglIsOcclusionQueryNV(id);
	}

	[RequiredByFeature("GL_NV_occlusion_query")]
	public static void BeginOcclusionQueryNV(uint id)
	{
		Delegates.pglBeginOcclusionQueryNV(id);
	}

	[RequiredByFeature("GL_NV_occlusion_query")]
	public static void EndOcclusionQueryNV()
	{
		Delegates.pglEndOcclusionQueryNV();
	}

	[RequiredByFeature("GL_NV_occlusion_query")]
	public unsafe static void GetOcclusionQueryNV(uint id, OcclusionQueryParameterNameNV pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetOcclusionQueryivNV(id, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_occlusion_query")]
	public unsafe static void GetOcclusionQueryuivNV(uint id, OcclusionQueryParameterNameNV pname, [Out] uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglGetOcclusionQueryuivNV(id, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_parameter_buffer_object")]
	public unsafe static void ProgramBufferParametersNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglProgramBufferParametersfvNV((int)target, bindingIndex, wordIndex, count, params2);
		}
	}

	[RequiredByFeature("GL_NV_parameter_buffer_object")]
	public unsafe static void ProgramBufferParametersNV(ProgramTarget target, uint bindingIndex, uint wordIndex, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglProgramBufferParametersfvNV((int)target, bindingIndex, wordIndex, @params.Length, params2);
		}
	}

	[RequiredByFeature("GL_NV_parameter_buffer_object")]
	public unsafe static void ProgramBufferParametersINV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglProgramBufferParametersIivNV((int)target, bindingIndex, wordIndex, count, params2);
		}
	}

	[RequiredByFeature("GL_NV_parameter_buffer_object")]
	public unsafe static void ProgramBufferParametersINV(ProgramTarget target, uint bindingIndex, uint wordIndex, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglProgramBufferParametersIivNV((int)target, bindingIndex, wordIndex, @params.Length, params2);
		}
	}

	[RequiredByFeature("GL_NV_parameter_buffer_object")]
	public unsafe static void ProgramBufferParametersINV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglProgramBufferParametersIuivNV((int)target, bindingIndex, wordIndex, count, params2);
		}
	}

	[RequiredByFeature("GL_NV_parameter_buffer_object")]
	public unsafe static void ProgramBufferParametersINV(ProgramTarget target, uint bindingIndex, uint wordIndex, uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglProgramBufferParametersIuivNV((int)target, bindingIndex, wordIndex, @params.Length, params2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static uint GenPathsNV(int range)
	{
		return Delegates.pglGenPathsNV(range);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void DeletePathsNV(uint path, int range)
	{
		Delegates.pglDeletePathsNV(path, range);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static bool IsPathNV(uint path)
	{
		return Delegates.pglIsPathNV(path);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void PathCommandsNV(uint path, int numCommands, byte[] commands, int numCoords, PathCoordType coordType, nint coords)
	{
		fixed (byte* commands2 = commands)
		{
			Delegates.pglPathCommandsNV(path, numCommands, commands2, numCoords, (int)coordType, coords);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void PathCommandsNV(uint path, int numCommands, byte[] commands, int numCoords, int coordType, nint coords)
	{
		fixed (byte* commands2 = commands)
		{
			Delegates.pglPathCommandsNV(path, numCommands, commands2, numCoords, coordType, coords);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void PathCommandsNV(uint path, int numCommands, byte[] commands, int numCoords, PathCoordType coordType, object coords)
	{
		GCHandle gCHandle = GCHandle.Alloc(coords, GCHandleType.Pinned);
		try
		{
			PathCommandsNV(path, numCommands, commands, numCoords, coordType, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void PathCommandsNV(uint path, byte[] commands, int numCoords, PathCoordType coordType, nint coords)
	{
		fixed (byte* commands2 = commands)
		{
			Delegates.pglPathCommandsNV(path, commands.Length, commands2, numCoords, (int)coordType, coords);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void PathCoordsNV(uint path, int numCoords, PathCoordType coordType, nint coords)
	{
		Delegates.pglPathCoordsNV(path, numCoords, (int)coordType, coords);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void PathCoordsNV(uint path, int numCoords, PathCoordType coordType, object coords)
	{
		GCHandle gCHandle = GCHandle.Alloc(coords, GCHandleType.Pinned);
		try
		{
			PathCoordsNV(path, numCoords, coordType, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void PathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, byte[] commands, int numCoords, PathCoordType coordType, nint coords)
	{
		fixed (byte* commands2 = commands)
		{
			Delegates.pglPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands2, numCoords, (int)coordType, coords);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void PathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, byte[] commands, int numCoords, int coordType, nint coords)
	{
		fixed (byte* commands2 = commands)
		{
			Delegates.pglPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands2, numCoords, coordType, coords);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void PathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, byte[] commands, int numCoords, PathCoordType coordType, object coords)
	{
		GCHandle gCHandle = GCHandle.Alloc(coords, GCHandleType.Pinned);
		try
		{
			PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void PathSubCommandsNV(uint path, int commandStart, int commandsToDelete, byte[] commands, int numCoords, PathCoordType coordType, nint coords)
	{
		fixed (byte* commands2 = commands)
		{
			Delegates.pglPathSubCommandsNV(path, commandStart, commandsToDelete, commands.Length, commands2, numCoords, (int)coordType, coords);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void PathSubCoordNV(uint path, int coordStart, int numCoords, PathCoordType coordType, nint coords)
	{
		Delegates.pglPathSubCoordsNV(path, coordStart, numCoords, (int)coordType, coords);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void PathSubCoordNV(uint path, int coordStart, int numCoords, PathCoordType coordType, object coords)
	{
		GCHandle gCHandle = GCHandle.Alloc(coords, GCHandleType.Pinned);
		try
		{
			PathSubCoordNV(path, coordStart, numCoords, coordType, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void PathStringNV(uint path, PathStringFormat format, int length, nint pathString)
	{
		Delegates.pglPathStringNV(path, (int)format, length, pathString);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void PathStringNV(uint path, PathStringFormat format, int length, object pathString)
	{
		GCHandle gCHandle = GCHandle.Alloc(pathString, GCHandleType.Pinned);
		try
		{
			PathStringNV(path, format, length, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void PathGlyphsNV(uint firstPathName, PathFontTarget fontTarget, nint fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, nint charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
	{
		Delegates.pglPathGlyphsNV(firstPathName, (int)fontTarget, fontName, (uint)fontStyle, numGlyphs, (int)type, charcodes, (int)handleMissingGlyphs, pathParameterTemplate, emScale);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void PathGlyphsNV(uint firstPathName, PathFontTarget fontTarget, object fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, object charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
	{
		GCHandle gCHandle = GCHandle.Alloc(fontName, GCHandleType.Pinned);
		GCHandle gCHandle2 = GCHandle.Alloc(charcodes, GCHandleType.Pinned);
		try
		{
			PathGlyphsNV(firstPathName, fontTarget, gCHandle.AddrOfPinnedObject(), fontStyle, numGlyphs, type, gCHandle2.AddrOfPinnedObject(), handleMissingGlyphs, pathParameterTemplate, emScale);
		}
		finally
		{
			gCHandle.Free();
			gCHandle2.Free();
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void PathGlyphRangeNV(uint firstPathName, PathFontTarget fontTarget, nint fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
	{
		Delegates.pglPathGlyphRangeNV(firstPathName, (int)fontTarget, fontName, (uint)fontStyle, firstGlyph, numGlyphs, (int)handleMissingGlyphs, pathParameterTemplate, emScale);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void PathGlyphRangeNV(uint firstPathName, PathFontTarget fontTarget, object fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
	{
		GCHandle gCHandle = GCHandle.Alloc(fontName, GCHandleType.Pinned);
		try
		{
			PathGlyphRangeNV(firstPathName, fontTarget, gCHandle.AddrOfPinnedObject(), fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void WeightPathsNV(uint resultPath, uint[] paths, float[] weights)
	{
		fixed (uint* paths2 = paths)
		{
			fixed (float* weights2 = weights)
			{
				Delegates.pglWeightPathsNV(resultPath, paths.Length, paths2, weights2);
			}
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void CopyPathNV(uint resultPath, uint srcPath)
	{
		Delegates.pglCopyPathNV(resultPath, srcPath);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void InterpolatePathsNV(uint resultPath, uint pathA, uint pathB, float weight)
	{
		Delegates.pglInterpolatePathsNV(resultPath, pathA, pathB, weight);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void TransformPathNV(uint resultPath, uint srcPath, PathTransformType transformType, float[] transformValues)
	{
		fixed (float* transformValues2 = transformValues)
		{
			Delegates.pglTransformPathNV(resultPath, srcPath, (int)transformType, transformValues2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void PathParameterNV(uint path, PathParameter pname, int[] value)
	{
		fixed (int* value2 = value)
		{
			Delegates.pglPathParameterivNV(path, (int)pname, value2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void PathParameterNV(uint path, PathParameter pname, int value)
	{
		Delegates.pglPathParameteriNV(path, (int)pname, value);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void PathParameterNV(uint path, PathParameter pname, float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglPathParameterfvNV(path, (int)pname, value2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void PathParameterNV(uint path, PathParameter pname, float value)
	{
		Delegates.pglPathParameterfNV(path, (int)pname, value);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void PathDashArrayNV(uint path, float[] dashArray)
	{
		fixed (float* dashArray2 = dashArray)
		{
			Delegates.pglPathDashArrayNV(path, dashArray.Length, dashArray2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void PathStencilFuncNV(StencilFunction func, int @ref, uint mask)
	{
		Delegates.pglPathStencilFuncNV((int)func, @ref, mask);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void PathStencilDepthOffsetNV(float factor, float units)
	{
		Delegates.pglPathStencilDepthOffsetNV(factor, units);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void StencilFillPathNV(uint path, PathFillMode fillMode, uint mask)
	{
		Delegates.pglStencilFillPathNV(path, (int)fillMode, mask);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void StencilStrokePathNV(uint path, int reference, uint mask)
	{
		Delegates.pglStencilStrokePathNV(path, reference, mask);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void StencilFillPathInstancedNV(int numPaths, PathElementType pathNameType, nint paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, float[] transformValues)
	{
		fixed (float* transformValues2 = transformValues)
		{
			Delegates.pglStencilFillPathInstancedNV(numPaths, (int)pathNameType, paths, pathBase, (int)fillMode, mask, (int)transformType, transformValues2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void StencilFillPathInstancedNV(int numPaths, PathElementType pathNameType, object paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, float[] transformValues)
	{
		GCHandle gCHandle = GCHandle.Alloc(paths, GCHandleType.Pinned);
		try
		{
			StencilFillPathInstancedNV(numPaths, pathNameType, gCHandle.AddrOfPinnedObject(), pathBase, fillMode, mask, transformType, transformValues);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void StencilStrokePathInstancedNV(int numPaths, PathElementType pathNameType, nint paths, uint pathBase, int reference, uint mask, PathTransformType transformType, float[] transformValues)
	{
		fixed (float* transformValues2 = transformValues)
		{
			Delegates.pglStencilStrokePathInstancedNV(numPaths, (int)pathNameType, paths, pathBase, reference, mask, (int)transformType, transformValues2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void StencilStrokePathInstancedNV(int numPaths, PathElementType pathNameType, object paths, uint pathBase, int reference, uint mask, PathTransformType transformType, float[] transformValues)
	{
		GCHandle gCHandle = GCHandle.Alloc(paths, GCHandleType.Pinned);
		try
		{
			StencilStrokePathInstancedNV(numPaths, pathNameType, gCHandle.AddrOfPinnedObject(), pathBase, reference, mask, transformType, transformValues);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void PathCoverDepthFuncNV(DepthFunction func)
	{
		Delegates.pglPathCoverDepthFuncNV((int)func);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void CoverFillPathNV(uint path, PathCoverMode coverMode)
	{
		Delegates.pglCoverFillPathNV(path, (int)coverMode);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void CoverStrokePathNV(uint path, PathCoverMode coverMode)
	{
		Delegates.pglCoverStrokePathNV(path, (int)coverMode);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void CoverFillPathInstancedNV(int numPaths, PathElementType pathNameType, nint paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
	{
		fixed (float* transformValues2 = transformValues)
		{
			Delegates.pglCoverFillPathInstancedNV(numPaths, (int)pathNameType, paths, pathBase, (int)coverMode, (int)transformType, transformValues2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void CoverFillPathInstancedNV(int numPaths, PathElementType pathNameType, object paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
	{
		GCHandle gCHandle = GCHandle.Alloc(paths, GCHandleType.Pinned);
		try
		{
			CoverFillPathInstancedNV(numPaths, pathNameType, gCHandle.AddrOfPinnedObject(), pathBase, coverMode, transformType, transformValues);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void CoverStrokePathInstancedNV(int numPaths, PathElementType pathNameType, nint paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
	{
		fixed (float* transformValues2 = transformValues)
		{
			Delegates.pglCoverStrokePathInstancedNV(numPaths, (int)pathNameType, paths, pathBase, (int)coverMode, (int)transformType, transformValues2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void CoverStrokePathInstancedNV(int numPaths, PathElementType pathNameType, object paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
	{
		GCHandle gCHandle = GCHandle.Alloc(paths, GCHandleType.Pinned);
		try
		{
			CoverStrokePathInstancedNV(numPaths, pathNameType, gCHandle.AddrOfPinnedObject(), pathBase, coverMode, transformType, transformValues);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void GetPathParameterNV(uint path, PathParameter pname, [Out] int[] value)
	{
		fixed (int* value2 = value)
		{
			Delegates.pglGetPathParameterivNV(path, (int)pname, value2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void GetPathParameterNV(uint path, PathParameter pname, [Out] float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglGetPathParameterfvNV(path, (int)pname, value2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void GetPathCommandsNV(uint path, [Out] byte[] commands)
	{
		fixed (byte* commands2 = commands)
		{
			Delegates.pglGetPathCommandsNV(path, commands2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void GetPathCoordsNV(uint path, [Out] float[] coords)
	{
		fixed (float* coords2 = coords)
		{
			Delegates.pglGetPathCoordsNV(path, coords2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void GetPathDashArrayNV(uint path, [Out] float[] dashArray)
	{
		fixed (float* dashArray2 = dashArray)
		{
			Delegates.pglGetPathDashArrayNV(path, dashArray2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void GetPathMetricsNV(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, nint paths, uint pathBase, int stride, [Out] float[] metrics)
	{
		fixed (float* metrics2 = metrics)
		{
			Delegates.pglGetPathMetricsNV((uint)metricQueryMask, numPaths, (int)pathNameType, paths, pathBase, stride, metrics2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void GetPathMetricsNV(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, object paths, uint pathBase, int stride, [Out] float[] metrics)
	{
		GCHandle gCHandle = GCHandle.Alloc(paths, GCHandleType.Pinned);
		try
		{
			GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, gCHandle.AddrOfPinnedObject(), pathBase, stride, metrics);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void GetPathMetricRangeNV(PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, [Out] float[] metrics)
	{
		fixed (float* metrics2 = metrics)
		{
			Delegates.pglGetPathMetricRangeNV((uint)metricQueryMask, firstPathName, numPaths, stride, metrics2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void GetPathSpacingNV(PathListMode pathListMode, int numPaths, PathElementType pathNameType, nint paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, [Out] float[] returnedSpacing)
	{
		fixed (float* returnedSpacing2 = returnedSpacing)
		{
			Delegates.pglGetPathSpacingNV((int)pathListMode, numPaths, (int)pathNameType, paths, pathBase, advanceScale, kerningScale, (int)transformType, returnedSpacing2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void GetPathSpacingNV(PathListMode pathListMode, int numPaths, PathElementType pathNameType, object paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, [Out] float[] returnedSpacing)
	{
		GCHandle gCHandle = GCHandle.Alloc(paths, GCHandleType.Pinned);
		try
		{
			GetPathSpacingNV(pathListMode, numPaths, pathNameType, gCHandle.AddrOfPinnedObject(), pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static bool IsPointInFillPathNV(uint path, uint mask, float x, float y)
	{
		return Delegates.pglIsPointInFillPathNV(path, mask, x, y);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static bool IsPointInStrokePathNV(uint path, float x, float y)
	{
		return Delegates.pglIsPointInStrokePathNV(path, x, y);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static float GetPathNV(uint path, int startSegment, int numSegments)
	{
		return Delegates.pglGetPathLengthNV(path, startSegment, numSegments);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static bool PointAlongPathNV(uint path, int startSegment, int numSegments, float distance, float[] x, float[] y, float[] tangentX, float[] tangentY)
	{
		bool result;
		fixed (float* x2 = x)
		{
			fixed (float* y2 = y)
			{
				fixed (float* tangentX2 = tangentX)
				{
					fixed (float* tangentY2 = tangentY)
					{
						result = Delegates.pglPointAlongPathNV(path, startSegment, numSegments, distance, x2, y2, tangentX2, tangentY2);
					}
				}
			}
		}
		return result;
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixLoad3x2NV(int matrixMode, float[] m)
	{
		fixed (float* m2 = m)
		{
			Delegates.pglMatrixLoad3x2fNV(matrixMode, m2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixLoad3NV(int matrixMode, float[] m)
	{
		fixed (float* m2 = m)
		{
			Delegates.pglMatrixLoad3x3fNV(matrixMode, m2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixLoadTransposeNV(int matrixMode, float[] m)
	{
		fixed (float* m2 = m)
		{
			Delegates.pglMatrixLoadTranspose3x3fNV(matrixMode, m2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixMult3x2NV(int matrixMode, float[] m)
	{
		fixed (float* m2 = m)
		{
			Delegates.pglMatrixMult3x2fNV(matrixMode, m2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixMult3x3NV(int matrixMode, float[] m)
	{
		fixed (float* m2 = m)
		{
			Delegates.pglMatrixMult3x3fNV(matrixMode, m2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void MatrixMultTransposeNV(int matrixMode, float[] m)
	{
		fixed (float* m2 = m)
		{
			Delegates.pglMatrixMultTranspose3x3fNV(matrixMode, m2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void StencilThenCoverFillPathNV(uint path, int fillMode, uint mask, int coverMode)
	{
		Delegates.pglStencilThenCoverFillPathNV(path, fillMode, mask, coverMode);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void StencilThenCoverStrokePathNV(uint path, int reference, uint mask, int coverMode)
	{
		Delegates.pglStencilThenCoverStrokePathNV(path, reference, mask, coverMode);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void StencilThenCoverFillPathInstancedNV(int numPaths, int pathNameType, nint paths, uint pathBase, int fillMode, uint mask, int coverMode, int transformType, float[] transformValues)
	{
		fixed (float* transformValues2 = transformValues)
		{
			Delegates.pglStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void StencilThenCoverFillPathInstancedNV(int numPaths, int pathNameType, object paths, uint pathBase, int fillMode, uint mask, int coverMode, int transformType, float[] transformValues)
	{
		GCHandle gCHandle = GCHandle.Alloc(paths, GCHandleType.Pinned);
		try
		{
			StencilThenCoverFillPathInstancedNV(numPaths, pathNameType, gCHandle.AddrOfPinnedObject(), pathBase, fillMode, mask, coverMode, transformType, transformValues);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void StencilThenCoverStrokePathInstancedNV(int numPaths, int pathNameType, nint paths, uint pathBase, int reference, uint mask, int coverMode, int transformType, float[] transformValues)
	{
		fixed (float* transformValues2 = transformValues)
		{
			Delegates.pglStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static void StencilThenCoverStrokePathInstancedNV(int numPaths, int pathNameType, object paths, uint pathBase, int reference, uint mask, int coverMode, int transformType, float[] transformValues)
	{
		GCHandle gCHandle = GCHandle.Alloc(paths, GCHandleType.Pinned);
		try
		{
			StencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, gCHandle.AddrOfPinnedObject(), pathBase, reference, mask, coverMode, transformType, transformValues);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static int PathGlyphIndexRangeNV(int fontTarget, nint fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, uint[] baseAndCount)
	{
		int result;
		fixed (uint* baseAndCount2 = baseAndCount)
		{
			result = Delegates.pglPathGlyphIndexRangeNV(fontTarget, fontName, (uint)fontStyle, pathParameterTemplate, emScale, baseAndCount2);
		}
		return result;
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static int PathGlyphIndexRangeNV(int fontTarget, object fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, uint[] baseAndCount)
	{
		GCHandle gCHandle = GCHandle.Alloc(fontName, GCHandleType.Pinned);
		try
		{
			return PathGlyphIndexRangeNV(fontTarget, gCHandle.AddrOfPinnedObject(), fontStyle, pathParameterTemplate, emScale, baseAndCount);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static int PathGlyphIndexArrayNV(uint firstPathName, int fontTarget, nint fontName, PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
	{
		return Delegates.pglPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, (uint)fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static int PathGlyphIndexArrayNV(uint firstPathName, int fontTarget, object fontName, PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
	{
		GCHandle gCHandle = GCHandle.Alloc(fontName, GCHandleType.Pinned);
		try
		{
			return PathGlyphIndexArrayNV(firstPathName, fontTarget, gCHandle.AddrOfPinnedObject(), fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static int PathMemoryGlyphIndexArrayNV(uint firstPathName, int fontTarget, uint fontSize, nint fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
	{
		return Delegates.pglPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public static int PathMemoryGlyphIndexArrayNV(uint firstPathName, int fontTarget, uint fontSize, object fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
	{
		GCHandle gCHandle = GCHandle.Alloc(fontData, GCHandleType.Pinned);
		try
		{
			return PathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, gCHandle.AddrOfPinnedObject(), faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void ProgramPathFragmentInputGenNV(uint program, int location, int genMode, int components, float[] coeffs)
	{
		fixed (float* coeffs2 = coeffs)
		{
			Delegates.pglProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void GetProgramResourceNV(uint program, ProgramInterface programInterface, uint index, int propCount, int[] props, int count, out int length, [Out] float[] @params)
	{
		fixed (int* props2 = props)
		{
			fixed (int* length2 = &length)
			{
				fixed (float* params2 = @params)
				{
					Delegates.pglGetProgramResourcefvNV(program, (int)programInterface, index, propCount, props2, count, length2, params2);
				}
			}
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
	public unsafe static void GetProgramResourceNV(uint program, ProgramInterface programInterface, uint index, int propCount, int[] props, out int length, [Out] float[] @params)
	{
		fixed (int* props2 = props)
		{
			fixed (int* length2 = &length)
			{
				fixed (float* params2 = @params)
				{
					Delegates.pglGetProgramResourcefvNV(program, (int)programInterface, index, propCount, props2, @params.Length, length2, params2);
				}
			}
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
	public unsafe static void PathColorGenNV(PathColor color, PathGenMode genMode, PathColorFormat colorFormat, float[] coeffs)
	{
		fixed (float* coeffs2 = coeffs)
		{
			Delegates.pglPathColorGenNV((int)color, (int)genMode, (int)colorFormat, coeffs2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
	public unsafe static void PathTexGenNV(PathColor texCoordSet, PathGenMode genMode, int components, float[] coeffs)
	{
		fixed (float* coeffs2 = coeffs)
		{
			Delegates.pglPathTexGenNV((int)texCoordSet, (int)genMode, components, coeffs2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
	public static void PathFogGenNV(PathGenMode genMode)
	{
		Delegates.pglPathFogGenNV((int)genMode);
	}

	[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
	public unsafe static void GetPathColorGenNV(PathColor color, PathGenMode pname, [Out] int[] value)
	{
		fixed (int* value2 = value)
		{
			Delegates.pglGetPathColorGenivNV((int)color, (int)pname, value2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
	public unsafe static void GetPathColorGenNV(PathColor color, PathGenMode pname, [Out] float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglGetPathColorGenfvNV((int)color, (int)pname, value2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
	public unsafe static void GetPathTexGenNV(TextureUnit texCoordSet, PathGenMode pname, [Out] int[] value)
	{
		fixed (int* value2 = value)
		{
			Delegates.pglGetPathTexGenivNV((int)texCoordSet, (int)pname, value2);
		}
	}

	[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
	public unsafe static void GetPathTexGenNV(TextureUnit texCoordSet, PathGenMode pname, [Out] float[] value)
	{
		fixed (float* value2 = value)
		{
			Delegates.pglGetPathTexGenfvNV((int)texCoordSet, (int)pname, value2);
		}
	}

	[RequiredByFeature("GL_NV_pixel_data_range")]
	public static void PixelDataRangeNV(PixelDataRangeTargetNV target, int length, nint pointer)
	{
		Delegates.pglPixelDataRangeNV((int)target, length, pointer);
	}

	[RequiredByFeature("GL_NV_pixel_data_range")]
	public static void PixelDataRangeNV(PixelDataRangeTargetNV target, int length, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			PixelDataRangeNV(target, length, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_pixel_data_range")]
	public static void FlushPixelDataRangeNV(PixelDataRangeTargetNV target)
	{
		Delegates.pglFlushPixelDataRangeNV((int)target);
	}

	[RequiredByFeature("GL_NV_present_video")]
	public static void PresentFrameKeyedNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, int type, int target0, uint fill0, uint key0, int target1, uint fill1, uint key1)
	{
		Delegates.pglPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
	}

	[RequiredByFeature("GL_NV_present_video")]
	public static void PresentFrameDualFillNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, int type, int target0, uint fill0, int target1, uint fill1, int target2, uint fill2, int target3, uint fill3)
	{
		Delegates.pglPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
	}

	[RequiredByFeature("GL_NV_present_video")]
	public unsafe static void GetVideoNV(uint video_slot, int pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetVideoivNV(video_slot, pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_present_video")]
	public unsafe static void GetVideoNV(uint video_slot, int pname, [Out] uint[] @params)
	{
		fixed (uint* params2 = @params)
		{
			Delegates.pglGetVideouivNV(video_slot, pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_present_video")]
	public unsafe static void GetVideoNV(uint video_slot, int pname, [Out] long[] @params)
	{
		fixed (long* params2 = @params)
		{
			Delegates.pglGetVideoi64vNV(video_slot, pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_present_video")]
	public unsafe static void GetVideoui64vNV(uint video_slot, int pname, [Out] ulong[] @params)
	{
		fixed (ulong* params2 = @params)
		{
			Delegates.pglGetVideoui64vNV(video_slot, pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_primitive_restart")]
	public static void PrimitiveRestartNV()
	{
		Delegates.pglPrimitiveRestartNV();
	}

	[RequiredByFeature("GL_NV_primitive_restart")]
	public static void PrimitiveRestartIndexNV(uint index)
	{
		Delegates.pglPrimitiveRestartIndexNV(index);
	}

	[RequiredByFeature("GL_NV_query_resource")]
	public unsafe static int QueryResourceNV(int queryType, int tagId, int[] buffer)
	{
		int result;
		fixed (int* buffer2 = buffer)
		{
			result = Delegates.pglQueryResourceNV(queryType, tagId, (uint)buffer.Length, buffer2);
		}
		return result;
	}

	[RequiredByFeature("GL_NV_query_resource_tag")]
	public unsafe static void GenQueryResourceTagNV(int[] tagIds)
	{
		fixed (int* tagIds2 = tagIds)
		{
			Delegates.pglGenQueryResourceTagNV(tagIds.Length, tagIds2);
		}
	}

	[RequiredByFeature("GL_NV_query_resource_tag")]
	public unsafe static int GenQueryResourceTagNV()
	{
		int result = default(int);
		Delegates.pglGenQueryResourceTagNV(1, &result);
		return result;
	}

	[RequiredByFeature("GL_NV_query_resource_tag")]
	public unsafe static void DeleteQueryResourceTagNV(int[] tagIds)
	{
		fixed (int* tagIds2 = tagIds)
		{
			Delegates.pglDeleteQueryResourceTagNV(tagIds.Length, tagIds2);
		}
	}

	[RequiredByFeature("GL_NV_query_resource_tag")]
	public static void QueryResourceTagNV(int tagId, string tagString)
	{
		Delegates.pglQueryResourceTagNV(tagId, tagString);
	}

	[RequiredByFeature("GL_NV_read_buffer", Api = "gles2")]
	public static void ReadBufferNV(int mode)
	{
		Delegates.pglReadBufferNV(mode);
	}

	[RequiredByFeature("GL_NV_register_combiners")]
	public unsafe static void CombinerParameterNV(CombinerParameterNV pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglCombinerParameterfvNV((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_register_combiners")]
	public static void CombinerParameterNV(CombinerParameterNV pname, float param)
	{
		Delegates.pglCombinerParameterfNV((int)pname, param);
	}

	[RequiredByFeature("GL_NV_register_combiners")]
	public unsafe static void CombinerParameterNV(CombinerParameterNV pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglCombinerParameterivNV((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_register_combiners")]
	public static void CombinerParameterNV(CombinerParameterNV pname, int param)
	{
		Delegates.pglCombinerParameteriNV((int)pname, param);
	}

	[RequiredByFeature("GL_NV_register_combiners")]
	public static void CombinerInputNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerRegisterNV input, CombinerMappingNV mapping, CombinerComponentUsageNV componentUsage)
	{
		Delegates.pglCombinerInputNV((int)stage, (int)portion, (int)variable, (int)input, (int)mapping, (int)componentUsage);
	}

	[RequiredByFeature("GL_NV_register_combiners")]
	public static void CombinerOutputNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerRegisterNV abOutput, CombinerRegisterNV cdOutput, CombinerRegisterNV sumOutput, CombinerScaleNV scale, CombinerBiasNV bias, bool abDotProduct, bool cdDotProduct, bool muxSum)
	{
		Delegates.pglCombinerOutputNV((int)stage, (int)portion, (int)abOutput, (int)cdOutput, (int)sumOutput, (int)scale, (int)bias, abDotProduct, cdDotProduct, muxSum);
	}

	[RequiredByFeature("GL_NV_register_combiners")]
	public static void FinalCombinerInputNV(CombinerVariableNV variable, CombinerRegisterNV input, CombinerMappingNV mapping, CombinerComponentUsageNV componentUsage)
	{
		Delegates.pglFinalCombinerInputNV((int)variable, (int)input, (int)mapping, (int)componentUsage);
	}

	[RequiredByFeature("GL_NV_register_combiners")]
	public unsafe static void GetCombinerInputParameterNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetCombinerInputParameterfvNV((int)stage, (int)portion, (int)variable, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_register_combiners")]
	public unsafe static void GetCombinerInputParameterNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetCombinerInputParameterivNV((int)stage, (int)portion, (int)variable, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_register_combiners")]
	public unsafe static void GetCombinerOutputParameterNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetCombinerOutputParameterfvNV((int)stage, (int)portion, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_register_combiners")]
	public unsafe static void GetCombinerOutputParameterNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetCombinerOutputParameterivNV((int)stage, (int)portion, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_register_combiners")]
	public unsafe static void GetFinalCombinerInputParameterNV(CombinerVariableNV variable, CombinerParameterNV pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetFinalCombinerInputParameterfvNV((int)variable, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_register_combiners")]
	public unsafe static void GetFinalCombinerInputParameterNV(CombinerVariableNV variable, CombinerParameterNV pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetFinalCombinerInputParameterivNV((int)variable, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_register_combiners2")]
	public unsafe static void CombinerStageParameterNV(CombinerStageNV stage, CombinerParameterNV pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglCombinerStageParameterfvNV((int)stage, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_register_combiners2")]
	public unsafe static void GetCombinerStageParameterNV(CombinerStageNV stage, CombinerParameterNV pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetCombinerStageParameterfvNV((int)stage, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_sample_locations", Api = "gl|glcore|gles2")]
	public unsafe static void FramebufferSampleLocationNV(FramebufferTarget target, uint start, int count, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglFramebufferSampleLocationsfvNV((int)target, start, count, v2);
		}
	}

	[RequiredByFeature("GL_NV_sample_locations", Api = "gl|glcore|gles2")]
	public unsafe static void NamedFramebufferSampleLocationNV(uint framebuffer, uint start, int count, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v2);
		}
	}

	[RequiredByFeature("GL_NV_sample_locations", Api = "gl|glcore|gles2")]
	public static void ResolveDepthValuesNV()
	{
		Delegates.pglResolveDepthValuesNV();
	}

	[RequiredByFeature("GL_NV_scissor_exclusive", Api = "gl|glcore|gles2")]
	public static void ScissorNV(int x, int y, int width, int height)
	{
		Delegates.pglScissorExclusiveNV(x, y, width, height);
	}

	[RequiredByFeature("GL_NV_scissor_exclusive", Api = "gl|glcore|gles2")]
	public unsafe static void ScissorExclusiveArrayvNV(uint first, int count, int[] v)
	{
		fixed (int* v2 = v)
		{
			Delegates.pglScissorExclusiveArrayvNV(first, count, v2);
		}
	}

	[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
	public static void MakeBufferResidentNV(int target, int access)
	{
		Delegates.pglMakeBufferResidentNV(target, access);
	}

	[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
	public static void MakeBufferNonResidentNV(int target)
	{
		Delegates.pglMakeBufferNonResidentNV(target);
	}

	[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
	public static bool IsBufferResidentNV(int target)
	{
		return Delegates.pglIsBufferResidentNV(target);
	}

	[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
	public static void MakeNamedBufferResidentNV(uint buffer, int access)
	{
		Delegates.pglMakeNamedBufferResidentNV(buffer, access);
	}

	[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
	public static void MakeNamedBufferNonResidentNV(uint buffer)
	{
		Delegates.pglMakeNamedBufferNonResidentNV(buffer);
	}

	[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
	public static bool IsNamedBufferResidentNV(uint buffer)
	{
		return Delegates.pglIsNamedBufferResidentNV(buffer);
	}

	[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
	public unsafe static void GetBufferParameterNV(BufferTarget target, int pname, [Out] ulong[] @params)
	{
		fixed (ulong* params2 = @params)
		{
			Delegates.pglGetBufferParameterui64vNV((int)target, pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
	public unsafe static void GetNamedBufferParameterNV(uint buffer, BufferPNameARB pname, [Out] ulong[] @params)
	{
		fixed (ulong* params2 = @params)
		{
			Delegates.pglGetNamedBufferParameterui64vNV(buffer, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
	public unsafe static void GetIntegerNV(int value, [Out] ulong[] result)
	{
		fixed (ulong* result2 = result)
		{
			Delegates.pglGetIntegerui64vNV(value, result2);
		}
	}

	[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
	public static void UniformNV(int location, ulong value)
	{
		Delegates.pglUniformui64NV(location, value);
	}

	[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
	public unsafe static void UniformNV(int location, ulong[] value)
	{
		fixed (ulong* value2 = value)
		{
			Delegates.pglUniformui64vNV(location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_AMD_gpu_shader_int64")]
	[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
	public unsafe static void GetUniformNV(uint program, int location, [Out] ulong[] @params)
	{
		fixed (ulong* params2 = @params)
		{
			Delegates.pglGetUniformui64vNV(program, location, params2);
		}
	}

	[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
	public static void ProgramUniformNV(uint program, int location, ulong value)
	{
		Delegates.pglProgramUniformui64NV(program, location, value);
	}

	[RequiredByFeature("GL_NV_shader_buffer_load", Api = "gl|glcore")]
	public unsafe static void ProgramUniformNV(uint program, int location, ulong[] value)
	{
		fixed (ulong* value2 = value)
		{
			Delegates.pglProgramUniformui64vNV(program, location, value.Length, value2);
		}
	}

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public static void BindShadingRateImageNV(uint texture)
	{
		Delegates.pglBindShadingRateImageNV(texture);
	}

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public unsafe static void GetShadingRateImagePaletteNV(uint viewport, uint entry, out int rate)
	{
		fixed (int* rate2 = &rate)
		{
			Delegates.pglGetShadingRateImagePaletteNV(viewport, entry, rate2);
		}
	}

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public unsafe static void GetShadingRateSampleLocationivNV(int rate, uint samples, uint index, [Out] int[] location)
	{
		fixed (int* location2 = location)
		{
			Delegates.pglGetShadingRateSampleLocationivNV(rate, samples, index, location2);
		}
	}

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public static void ShadingRateImageBarrierNV(bool synchronize)
	{
		Delegates.pglShadingRateImageBarrierNV(synchronize);
	}

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public unsafe static void ShadingRateImagePaletteNV(uint viewport, uint first, int[] rates)
	{
		fixed (int* rates2 = rates)
		{
			Delegates.pglShadingRateImagePaletteNV(viewport, first, rates.Length, rates2);
		}
	}

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public static void ShadingRateSampleOrderNV(int order)
	{
		Delegates.pglShadingRateSampleOrderNV(order);
	}

	[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore|gles2")]
	public unsafe static void ShadingRateSampleOrderCustomNV(int rate, uint samples, int[] locations)
	{
		fixed (int* locations2 = locations)
		{
			Delegates.pglShadingRateSampleOrderCustomNV(rate, samples, locations2);
		}
	}

	[RequiredByFeature("GL_NV_texture_barrier", Api = "gl|glcore")]
	public static void TextureBarrierNV()
	{
		Delegates.pglTextureBarrierNV();
	}

	[RequiredByFeature("GL_NV_texture_multisample")]
	public static void TexImage2DMultisampleCoverageNV(TextureTarget target, int coverageSamples, int colorSamples, InternalFormat internalFormat, int width, int height, bool fixedSampleLocations)
	{
		Delegates.pglTexImage2DMultisampleCoverageNV((int)target, coverageSamples, colorSamples, (int)internalFormat, width, height, fixedSampleLocations);
	}

	[RequiredByFeature("GL_NV_texture_multisample")]
	public static void TexImage3DMultisampleCoverageNV(TextureTarget target, int coverageSamples, int colorSamples, InternalFormat internalFormat, int width, int height, int depth, bool fixedSampleLocations)
	{
		Delegates.pglTexImage3DMultisampleCoverageNV((int)target, coverageSamples, colorSamples, (int)internalFormat, width, height, depth, fixedSampleLocations);
	}

	[RequiredByFeature("GL_NV_texture_multisample")]
	public static void TextureImage2DMultisampleNV(uint texture, TextureTarget target, int samples, InternalFormat internalFormat, int width, int height, bool fixedSampleLocations)
	{
		Delegates.pglTextureImage2DMultisampleNV(texture, (int)target, samples, (int)internalFormat, width, height, fixedSampleLocations);
	}

	[RequiredByFeature("GL_NV_texture_multisample")]
	public static void TextureImage3DMultisampleNV(uint texture, TextureTarget target, int samples, InternalFormat internalFormat, int width, int height, int depth, bool fixedSampleLocations)
	{
		Delegates.pglTextureImage3DMultisampleNV(texture, (int)target, samples, (int)internalFormat, width, height, depth, fixedSampleLocations);
	}

	[RequiredByFeature("GL_NV_texture_multisample")]
	public static void TextureImage2DMultisampleCoverageNV(uint texture, TextureTarget target, int coverageSamples, int colorSamples, InternalFormat internalFormat, int width, int height, bool fixedSampleLocations)
	{
		Delegates.pglTextureImage2DMultisampleCoverageNV(texture, (int)target, coverageSamples, colorSamples, (int)internalFormat, width, height, fixedSampleLocations);
	}

	[RequiredByFeature("GL_NV_texture_multisample")]
	public static void TextureImage3DMultisampleCoverageNV(uint texture, TextureTarget target, int coverageSamples, int colorSamples, InternalFormat internalFormat, int width, int height, int depth, bool fixedSampleLocations)
	{
		Delegates.pglTextureImage3DMultisampleCoverageNV(texture, (int)target, coverageSamples, colorSamples, (int)internalFormat, width, height, depth, fixedSampleLocations);
	}

	[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
	public unsafe static void CreateSemaphoreNV(uint[] semaphores)
	{
		fixed (uint* semaphores2 = semaphores)
		{
			Delegates.pglCreateSemaphoresNV(semaphores.Length, semaphores2);
		}
	}

	[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
	public unsafe static uint CreateSemaphoreNV()
	{
		uint result = default(uint);
		Delegates.pglCreateSemaphoresNV(1, &result);
		return result;
	}

	[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
	public unsafe static void SemaphoreParameterNV(uint semaphore, SemaphoreParameterName pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglSemaphoreParameterivNV(semaphore, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
	public unsafe static void GetSemaphoreParameterNV(uint semaphore, SemaphoreParameterName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetSemaphoreParameterivNV(semaphore, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_transform_feedback")]
	public unsafe static void TransformFeedbackAttribsNV(int count, int[] attribs, int bufferMode)
	{
		fixed (int* attribs2 = attribs)
		{
			Delegates.pglTransformFeedbackAttribsNV(count, attribs2, bufferMode);
		}
	}

	[RequiredByFeature("GL_NV_transform_feedback")]
	public unsafe static void TransformFeedbackVaryingsNV(uint program, int count, int[] locations, TransformFeedbackBufferMode bufferMode)
	{
		fixed (int* locations2 = locations)
		{
			Delegates.pglTransformFeedbackVaryingsNV(program, count, locations2, (int)bufferMode);
		}
	}

	[RequiredByFeature("GL_NV_transform_feedback")]
	public unsafe static void TransformFeedbackVaryingsNV(uint program, int[] locations, TransformFeedbackBufferMode bufferMode)
	{
		fixed (int* locations2 = locations)
		{
			Delegates.pglTransformFeedbackVaryingsNV(program, locations.Length, locations2, (int)bufferMode);
		}
	}

	[RequiredByFeature("GL_NV_transform_feedback")]
	public static void ActiveVaryingNV(uint program, string name)
	{
		Delegates.pglActiveVaryingNV(program, name);
	}

	[RequiredByFeature("GL_NV_transform_feedback")]
	public static int GetVaryingLocationNV(uint program, string name)
	{
		return Delegates.pglGetVaryingLocationNV(program, name);
	}

	[RequiredByFeature("GL_NV_transform_feedback")]
	public unsafe static void GetActiveVaryingNV(uint program, uint index, int bufSize, out int length, out int size, out int type, StringBuilder name)
	{
		fixed (int* length2 = &length)
		{
			fixed (int* size2 = &size)
			{
				fixed (int* type2 = &type)
				{
					Delegates.pglGetActiveVaryingNV(program, index, bufSize, length2, size2, type2, name);
				}
			}
		}
	}

	[RequiredByFeature("GL_NV_transform_feedback")]
	public unsafe static void GetTransformFeedbackVaryingNV(uint program, uint index, out int location)
	{
		fixed (int* location2 = &location)
		{
			Delegates.pglGetTransformFeedbackVaryingNV(program, index, location2);
		}
	}

	[RequiredByFeature("GL_NV_transform_feedback")]
	public unsafe static void TransformFeedbackStreamAttribsNV(int[] attribs, int[] bufstreams, int bufferMode)
	{
		fixed (int* attribs2 = attribs)
		{
			fixed (int* bufstreams2 = bufstreams)
			{
				Delegates.pglTransformFeedbackStreamAttribsNV(attribs.Length, attribs2, bufstreams.Length, bufstreams2, bufferMode);
			}
		}
	}

	[RequiredByFeature("GL_NV_transform_feedback2")]
	public static void BindTransformFeedbackNV(BufferTarget target, uint id)
	{
		Delegates.pglBindTransformFeedbackNV((int)target, id);
	}

	[RequiredByFeature("GL_NV_vdpau_interop")]
	public static void VDPAUInitNV(nint vdpDevice, nint getProcAddress)
	{
		Delegates.pglVDPAUInitNV(vdpDevice, getProcAddress);
	}

	[RequiredByFeature("GL_NV_vdpau_interop")]
	public static void VDPAUInitNV(object vdpDevice, object getProcAddress)
	{
		GCHandle gCHandle = GCHandle.Alloc(vdpDevice, GCHandleType.Pinned);
		GCHandle gCHandle2 = GCHandle.Alloc(getProcAddress, GCHandleType.Pinned);
		try
		{
			VDPAUInitNV(gCHandle.AddrOfPinnedObject(), gCHandle2.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
			gCHandle2.Free();
		}
	}

	[RequiredByFeature("GL_NV_vdpau_interop")]
	public static void VDPAUNV()
	{
		Delegates.pglVDPAUFiniNV();
	}

	[RequiredByFeature("GL_NV_vdpau_interop")]
	public unsafe static nint VDPAURegisterVideoSurfaceNV(nint vdpSurface, int target, int numTextureNames, uint[] textureNames)
	{
		nint result;
		fixed (uint* textureNames2 = textureNames)
		{
			result = Delegates.pglVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames2);
		}
		return result;
	}

	[RequiredByFeature("GL_NV_vdpau_interop")]
	public static nint VDPAURegisterVideoSurfaceNV(object vdpSurface, int target, int numTextureNames, uint[] textureNames)
	{
		GCHandle gCHandle = GCHandle.Alloc(vdpSurface, GCHandleType.Pinned);
		try
		{
			return VDPAURegisterVideoSurfaceNV(gCHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_vdpau_interop")]
	public unsafe static nint VDPAURegisterVideoSurfaceNV(nint vdpSurface, int target, uint[] textureNames)
	{
		nint result;
		fixed (uint* textureNames2 = textureNames)
		{
			result = Delegates.pglVDPAURegisterVideoSurfaceNV(vdpSurface, target, textureNames.Length, textureNames2);
		}
		return result;
	}

	[RequiredByFeature("GL_NV_vdpau_interop")]
	public unsafe static nint VDPAURegisterOutputSurfaceNV(nint vdpSurface, int target, int numTextureNames, uint[] textureNames)
	{
		nint result;
		fixed (uint* textureNames2 = textureNames)
		{
			result = Delegates.pglVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames2);
		}
		return result;
	}

	[RequiredByFeature("GL_NV_vdpau_interop")]
	public static nint VDPAURegisterOutputSurfaceNV(object vdpSurface, int target, int numTextureNames, uint[] textureNames)
	{
		GCHandle gCHandle = GCHandle.Alloc(vdpSurface, GCHandleType.Pinned);
		try
		{
			return VDPAURegisterOutputSurfaceNV(gCHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_vdpau_interop")]
	public unsafe static nint VDPAURegisterOutputSurfaceNV(nint vdpSurface, int target, uint[] textureNames)
	{
		nint result;
		fixed (uint* textureNames2 = textureNames)
		{
			result = Delegates.pglVDPAURegisterOutputSurfaceNV(vdpSurface, target, textureNames.Length, textureNames2);
		}
		return result;
	}

	[RequiredByFeature("GL_NV_vdpau_interop")]
	public static bool VDPAUIsSurfaceNV(nint surface)
	{
		return Delegates.pglVDPAUIsSurfaceNV(surface);
	}

	[RequiredByFeature("GL_NV_vdpau_interop")]
	public static void VDPAUUnregisterSurfaceNV(nint surface)
	{
		Delegates.pglVDPAUUnregisterSurfaceNV(surface);
	}

	[RequiredByFeature("GL_NV_vdpau_interop")]
	public unsafe static void VDPAUGetSurfaceNV(nint surface, int pname, int[] length, int[] values)
	{
		fixed (int* length2 = length)
		{
			fixed (int* values2 = values)
			{
				Delegates.pglVDPAUGetSurfaceivNV(surface, pname, values.Length, length2, values2);
			}
		}
	}

	[RequiredByFeature("GL_NV_vdpau_interop")]
	public static void VDPAUSurfaceNV(nint surface, int access)
	{
		Delegates.pglVDPAUSurfaceAccessNV(surface, access);
	}

	[RequiredByFeature("GL_NV_vdpau_interop")]
	public unsafe static void VDPAUMapSurfaceNV(nint[] surfaces)
	{
		fixed (nint* surfaces2 = surfaces)
		{
			Delegates.pglVDPAUMapSurfacesNV(surfaces.Length, surfaces2);
		}
	}

	[RequiredByFeature("GL_NV_vdpau_interop")]
	public unsafe static void VDPAUUnmapSurfaceNV(nint[] surfaces)
	{
		fixed (nint* surfaces2 = surfaces)
		{
			Delegates.pglVDPAUUnmapSurfacesNV(surfaces.Length, surfaces2);
		}
	}

	[RequiredByFeature("GL_NV_vdpau_interop2")]
	public unsafe static nint VDPAURegisterVideoSurfaceNV(nint vdpSurface, int target, int numTextureNames, uint[] textureNames, bool isFrameStructure)
	{
		nint result;
		fixed (uint* textureNames2 = textureNames)
		{
			result = Delegates.pglVDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface, target, numTextureNames, textureNames2, isFrameStructure);
		}
		return result;
	}

	[RequiredByFeature("GL_NV_vdpau_interop2")]
	public static nint VDPAURegisterVideoSurfaceNV(object vdpSurface, int target, int numTextureNames, uint[] textureNames, bool isFrameStructure)
	{
		GCHandle gCHandle = GCHandle.Alloc(vdpSurface, GCHandleType.Pinned);
		try
		{
			return VDPAURegisterVideoSurfaceNV(gCHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames, isFrameStructure);
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_vdpau_interop2")]
	public unsafe static nint VDPAURegisterVideoSurfaceNV(nint vdpSurface, int target, uint[] textureNames, bool isFrameStructure)
	{
		nint result;
		fixed (uint* textureNames2 = textureNames)
		{
			result = Delegates.pglVDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface, target, textureNames.Length, textureNames2, isFrameStructure);
		}
		return result;
	}

	[RequiredByFeature("GL_NV_vertex_array_range")]
	public static void FlushVertexArrayRangeNV()
	{
		Delegates.pglFlushVertexArrayRangeNV();
	}

	[RequiredByFeature("GL_NV_vertex_array_range")]
	public static void VertexArrayRangeNV(int length, nint pointer)
	{
		Delegates.pglVertexArrayRangeNV(length, pointer);
	}

	[RequiredByFeature("GL_NV_vertex_array_range")]
	public static void VertexArrayRangeNV(int length, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			VertexArrayRangeNV(length, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public static void VertexAttribL1NV(uint index, long x)
	{
		Delegates.pglVertexAttribL1i64NV(index, x);
	}

	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public static void VertexAttribL2NV(uint index, long x, long y)
	{
		Delegates.pglVertexAttribL2i64NV(index, x, y);
	}

	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public static void VertexAttribL3NV(uint index, long x, long y, long z)
	{
		Delegates.pglVertexAttribL3i64NV(index, x, y, z);
	}

	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public static void VertexAttribL4NV(uint index, long x, long y, long z, long w)
	{
		Delegates.pglVertexAttribL4i64NV(index, x, y, z, w);
	}

	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public unsafe static void VertexAttribL1NV(uint index, long[] v)
	{
		fixed (long* v2 = v)
		{
			Delegates.pglVertexAttribL1i64vNV(index, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public unsafe static void VertexAttribL2NV(uint index, long[] v)
	{
		fixed (long* v2 = v)
		{
			Delegates.pglVertexAttribL2i64vNV(index, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public unsafe static void VertexAttribL3NV(uint index, long[] v)
	{
		fixed (long* v2 = v)
		{
			Delegates.pglVertexAttribL3i64vNV(index, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public unsafe static void VertexAttribL4NV(uint index, long[] v)
	{
		fixed (long* v2 = v)
		{
			Delegates.pglVertexAttribL4i64vNV(index, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public static void VertexAttribL1NV(uint index, ulong x)
	{
		Delegates.pglVertexAttribL1ui64NV(index, x);
	}

	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public static void VertexAttribL2NV(uint index, ulong x, ulong y)
	{
		Delegates.pglVertexAttribL2ui64NV(index, x, y);
	}

	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public static void VertexAttribL3NV(uint index, ulong x, ulong y, ulong z)
	{
		Delegates.pglVertexAttribL3ui64NV(index, x, y, z);
	}

	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public static void VertexAttribL4NV(uint index, ulong x, ulong y, ulong z, ulong w)
	{
		Delegates.pglVertexAttribL4ui64NV(index, x, y, z, w);
	}

	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public unsafe static void VertexAttribL1NV(uint index, ulong[] v)
	{
		fixed (ulong* v2 = v)
		{
			Delegates.pglVertexAttribL1ui64vNV(index, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public unsafe static void VertexAttribL2NV(uint index, ulong[] v)
	{
		fixed (ulong* v2 = v)
		{
			Delegates.pglVertexAttribL2ui64vNV(index, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public unsafe static void VertexAttribL3NV(uint index, ulong[] v)
	{
		fixed (ulong* v2 = v)
		{
			Delegates.pglVertexAttribL3ui64vNV(index, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public unsafe static void VertexAttribL4NV(uint index, ulong[] v)
	{
		fixed (ulong* v2 = v)
		{
			Delegates.pglVertexAttribL4ui64vNV(index, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public unsafe static void GetVertexAttribLNV(uint index, VertexAttribEnum pname, [Out] long[] @params)
	{
		fixed (long* params2 = @params)
		{
			Delegates.pglGetVertexAttribLi64vNV(index, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public unsafe static void GetVertexAttribLNV(uint index, VertexAttribEnum pname, [Out] ulong[] @params)
	{
		fixed (ulong* params2 = @params)
		{
			Delegates.pglGetVertexAttribLui64vNV(index, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_attrib_integer_64bit", Api = "gl|glcore")]
	public static void VertexAttribLFormatNV(uint index, int size, VertexAttribLType type, int stride)
	{
		Delegates.pglVertexAttribLFormatNV(index, size, (int)type, stride);
	}

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public static void BufferAddressRangeNV(int pname, uint index, ulong address, uint length)
	{
		Delegates.pglBufferAddressRangeNV(pname, index, address, length);
	}

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public static void VertexFormatNV(int size, VertexPointerType type, int stride)
	{
		Delegates.pglVertexFormatNV(size, (int)type, stride);
	}

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public static void NormalFormatNV(int type, int stride)
	{
		Delegates.pglNormalFormatNV(type, stride);
	}

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public static void ColorFormatNV(int size, int type, int stride)
	{
		Delegates.pglColorFormatNV(size, type, stride);
	}

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public static void IndexFormatNV(int type, int stride)
	{
		Delegates.pglIndexFormatNV(type, stride);
	}

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public static void TexCoordFormatNV(int size, int type, int stride)
	{
		Delegates.pglTexCoordFormatNV(size, type, stride);
	}

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public static void EdgeFlagFormatNV(int stride)
	{
		Delegates.pglEdgeFlagFormatNV(stride);
	}

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public static void SecondaryColorFormatNV(int size, ColorPointerType type, int stride)
	{
		Delegates.pglSecondaryColorFormatNV(size, (int)type, stride);
	}

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public static void FogCoordFormatNV(int type, int stride)
	{
		Delegates.pglFogCoordFormatNV(type, stride);
	}

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public static void VertexAttribFormatNV(uint index, int size, VertexAttribType type, bool normalized, int stride)
	{
		Delegates.pglVertexAttribFormatNV(index, size, (int)type, normalized, stride);
	}

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public static void VertexAttribIFormatNV(uint index, int size, VertexAttribIType type, int stride)
	{
		Delegates.pglVertexAttribIFormatNV(index, size, (int)type, stride);
	}

	[RequiredByFeature("GL_NV_vertex_buffer_unified_memory", Api = "gl|glcore")]
	public unsafe static void GetIntegerNV(int value, uint index, [Out] ulong[] result)
	{
		fixed (ulong* result2 = result)
		{
			Delegates.pglGetIntegerui64i_vNV(value, index, result2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static bool AreProgramsResidentNV(uint[] programs, [Out] byte[] residences)
	{
		bool result;
		fixed (uint* programs2 = programs)
		{
			fixed (byte* residences2 = residences)
			{
				result = Delegates.pglAreProgramsResidentNV(programs.Length, programs2, residences2);
			}
		}
		return result;
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void ExecuteProgramNV(VertexAttribEnumNV target, uint id, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglExecuteProgramNV((int)target, id, params2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void GetProgramParameterNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, [Out] double[] @params)
	{
		fixed (double* params2 = @params)
		{
			Delegates.pglGetProgramParameterdvNV((int)target, index, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void GetProgramParameterNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetProgramParameterfvNV((int)target, index, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void GetProgramNV(uint id, VertexAttribEnumNV pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetProgramivNV(id, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void GetProgramStringNV(uint id, VertexAttribEnumNV pname, [Out] byte[] program)
	{
		fixed (byte* program2 = program)
		{
			Delegates.pglGetProgramStringNV(id, (int)pname, program2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void GetTrackMatrixNV(VertexAttribEnumNV target, uint address, VertexAttribEnumNV pname, out int @params)
	{
		fixed (int* params2 = &@params)
		{
			Delegates.pglGetTrackMatrixivNV((int)target, address, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void LoadProgramNV(VertexAttribEnumNV target, uint id, int len, byte[] program)
	{
		fixed (byte* program2 = program)
		{
			Delegates.pglLoadProgramNV((int)target, id, len, program2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void LoadProgramNV(VertexAttribEnumNV target, uint id, byte[] program)
	{
		fixed (byte* program2 = program)
		{
			Delegates.pglLoadProgramNV((int)target, id, program.Length, program2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public static void ProgramParameter4NV(VertexAttribEnumNV target, uint index, double x, double y, double z, double w)
	{
		Delegates.pglProgramParameter4dNV((int)target, index, x, y, z, w);
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void ProgramParameter4NV(VertexAttribEnumNV target, uint index, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglProgramParameter4dvNV((int)target, index, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public static void ProgramParameter4NV(VertexAttribEnumNV target, uint index, float x, float y, float z, float w)
	{
		Delegates.pglProgramParameter4fNV((int)target, index, x, y, z, w);
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void ProgramParameter4NV(VertexAttribEnumNV target, uint index, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglProgramParameter4fvNV((int)target, index, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void ProgramParameters4NV(VertexAttribEnumNV target, uint index, int count, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglProgramParameters4dvNV((int)target, index, count, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void ProgramParameters4NV(VertexAttribEnumNV target, uint index, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglProgramParameters4dvNV((int)target, index, v.Length / 4, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void ProgramParameters4NV(VertexAttribEnumNV target, uint index, int count, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglProgramParameters4fvNV((int)target, index, count, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void ProgramParameters4NV(VertexAttribEnumNV target, uint index, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglProgramParameters4fvNV((int)target, index, v.Length / 4, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void RequestResidentProgramsNV(uint[] programs)
	{
		fixed (uint* programs2 = programs)
		{
			Delegates.pglRequestResidentProgramsNV(programs.Length, programs2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public static void TrackMatrixNV(VertexAttribEnumNV target, uint address, VertexAttribEnumNV matrix, VertexAttribEnumNV transform)
	{
		Delegates.pglTrackMatrixNV((int)target, address, (int)matrix, (int)transform);
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public static void VertexAttribPointerNV(uint index, int fsize, VertexAttribEnumNV type, int stride, nint pointer)
	{
		Delegates.pglVertexAttribPointerNV(index, fsize, (int)type, stride, pointer);
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public static void VertexAttribPointerNV(uint index, int fsize, VertexAttribEnumNV type, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			VertexAttribPointerNV(index, fsize, type, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttribs1NV(uint index, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglVertexAttribs1dvNV(index, v.Length, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttribs1NV(uint index, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglVertexAttribs1fvNV(index, v.Length, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttribs1NV(uint index, short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglVertexAttribs1svNV(index, v.Length, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttribs2NV(uint index, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglVertexAttribs2dvNV(index, v.Length / 2, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttribs2NV(uint index, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglVertexAttribs2fvNV(index, v.Length / 2, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttribs2NV(uint index, short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglVertexAttribs2svNV(index, v.Length / 2, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttribs3NV(uint index, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglVertexAttribs3dvNV(index, v.Length / 3, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttribs3NV(uint index, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglVertexAttribs3fvNV(index, v.Length / 3, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttribs3NV(uint index, short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglVertexAttribs3svNV(index, v.Length / 3, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttribs4NV(uint index, double[] v)
	{
		fixed (double* v2 = v)
		{
			Delegates.pglVertexAttribs4dvNV(index, v.Length / 4, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttribs4NV(uint index, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglVertexAttribs4fvNV(index, v.Length / 4, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttribs4NV(uint index, short[] v)
	{
		fixed (short* v2 = v)
		{
			Delegates.pglVertexAttribs4svNV(index, v.Length / 4, v2);
		}
	}

	[RequiredByFeature("GL_NV_vertex_program")]
	public unsafe static void VertexAttribs4NV(uint index, byte[] v)
	{
		fixed (byte* v2 = v)
		{
			Delegates.pglVertexAttribs4ubvNV(index, v.Length / 4, v2);
		}
	}

	[RequiredByFeature("GL_NV_video_capture")]
	public static void BeginVideoCaptureNV(uint video_capture_slot)
	{
		Delegates.pglBeginVideoCaptureNV(video_capture_slot);
	}

	[RequiredByFeature("GL_NV_video_capture")]
	public static void BindVideoCaptureStreamBufferNV(uint video_capture_slot, uint stream, int frame_region, nint offset)
	{
		Delegates.pglBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset);
	}

	[RequiredByFeature("GL_NV_video_capture")]
	public static void BindVideoCaptureStreamTextureNV(uint video_capture_slot, uint stream, int frame_region, int target, uint texture)
	{
		Delegates.pglBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture);
	}

	[RequiredByFeature("GL_NV_video_capture")]
	public static void EndVideoCaptureNV(uint video_capture_slot)
	{
		Delegates.pglEndVideoCaptureNV(video_capture_slot);
	}

	[RequiredByFeature("GL_NV_video_capture")]
	public unsafe static void GetVideoCaptureNV(uint video_capture_slot, int pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetVideoCaptureivNV(video_capture_slot, pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_video_capture")]
	public unsafe static void GetVideoCaptureStreamNV(uint video_capture_slot, uint stream, int pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_video_capture")]
	public unsafe static void GetVideoCaptureStreamNV(uint video_capture_slot, uint stream, int pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_video_capture")]
	public unsafe static void GetVideoCaptureStreamNV(uint video_capture_slot, uint stream, int pname, [Out] double[] @params)
	{
		fixed (double* params2 = @params)
		{
			Delegates.pglGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_video_capture")]
	public unsafe static int VideoCaptureNV(uint video_capture_slot, uint[] sequence_num, ulong[] capture_time)
	{
		int result;
		fixed (uint* sequence_num2 = sequence_num)
		{
			fixed (ulong* capture_time2 = capture_time)
			{
				result = Delegates.pglVideoCaptureNV(video_capture_slot, sequence_num2, capture_time2);
			}
		}
		return result;
	}

	[RequiredByFeature("GL_NV_video_capture")]
	public unsafe static void VideoCaptureStreamParameterNV(uint video_capture_slot, uint stream, int pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_video_capture")]
	public unsafe static void VideoCaptureStreamParameterNV(uint video_capture_slot, uint stream, int pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_video_capture")]
	public unsafe static void VideoCaptureStreamParameterNV(uint video_capture_slot, uint stream, int pname, double[] @params)
	{
		fixed (double* params2 = @params)
		{
			Delegates.pglVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params2);
		}
	}

	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	public unsafe static void DepthRangeArrayNV(uint first, int count, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglDepthRangeArrayfvNV(first, count, v2);
		}
	}

	[RequiredByFeature("GL_NV_viewport_array", Api = "gles2")]
	public static void DepthRangeIndexedNV(uint index, float n, float f)
	{
		Delegates.pglDepthRangeIndexedfNV(index, n, f);
	}

	[RequiredByFeature("GL_NV_viewport_swizzle", Api = "gl|glcore|gles2")]
	public static void ViewportSwizzleNV(uint index, int swizzlex, int swizzley, int swizzlez, int swizzlew)
	{
		Delegates.pglViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew);
	}

	[RequiredByFeature("GL_OES_blend_equation_separate", Api = "gles1")]
	public static void BlendEquationSeparateOES(BlendEquationMode modeRGB, BlendEquationMode modeAlpha)
	{
		Delegates.pglBlendEquationSeparateOES((int)modeRGB, (int)modeAlpha);
	}

	[RequiredByFeature("GL_OES_blend_func_separate", Api = "gles1")]
	public static void BlendFuncSeparateOES(BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha)
	{
		Delegates.pglBlendFuncSeparateOES((int)srcRGB, (int)dstRGB, (int)srcAlpha, (int)dstAlpha);
	}

	[RequiredByFeature("GL_OES_blend_subtract", Api = "gles1")]
	public static void BlendEquationOES(BlendEquationMode mode)
	{
		Delegates.pglBlendEquationOES((int)mode);
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public static void MultiTexCoord1OES(TextureUnit texture, sbyte s)
	{
		Delegates.pglMultiTexCoord1bOES((int)texture, s);
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public unsafe static void MultiTexCoord1OES(TextureUnit texture, sbyte[] coords)
	{
		fixed (sbyte* coords2 = coords)
		{
			Delegates.pglMultiTexCoord1bvOES((int)texture, coords2);
		}
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public static void MultiTexCoord2OES(TextureUnit texture, sbyte s, sbyte t)
	{
		Delegates.pglMultiTexCoord2bOES((int)texture, s, t);
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public unsafe static void MultiTexCoord2OES(TextureUnit texture, sbyte[] coords)
	{
		fixed (sbyte* coords2 = coords)
		{
			Delegates.pglMultiTexCoord2bvOES((int)texture, coords2);
		}
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public static void MultiTexCoord3OES(TextureUnit texture, sbyte s, sbyte t, sbyte r)
	{
		Delegates.pglMultiTexCoord3bOES((int)texture, s, t, r);
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public unsafe static void MultiTexCoord3OES(TextureUnit texture, sbyte[] coords)
	{
		fixed (sbyte* coords2 = coords)
		{
			Delegates.pglMultiTexCoord3bvOES((int)texture, coords2);
		}
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public static void MultiTexCoord4OES(TextureUnit texture, sbyte s, sbyte t, sbyte r, sbyte q)
	{
		Delegates.pglMultiTexCoord4bOES((int)texture, s, t, r, q);
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public unsafe static void MultiTexCoord4OES(TextureUnit texture, sbyte[] coords)
	{
		fixed (sbyte* coords2 = coords)
		{
			Delegates.pglMultiTexCoord4bvOES((int)texture, coords2);
		}
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public static void TexCoord1OES(sbyte s)
	{
		Delegates.pglTexCoord1bOES(s);
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public unsafe static void TexCoord1OES(sbyte[] coords)
	{
		fixed (sbyte* coords2 = coords)
		{
			Delegates.pglTexCoord1bvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public static void TexCoord2OES(sbyte s, sbyte t)
	{
		Delegates.pglTexCoord2bOES(s, t);
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public unsafe static void TexCoord2OES(sbyte[] coords)
	{
		fixed (sbyte* coords2 = coords)
		{
			Delegates.pglTexCoord2bvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public static void TexCoord3OES(sbyte s, sbyte t, sbyte r)
	{
		Delegates.pglTexCoord3bOES(s, t, r);
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public unsafe static void TexCoord3OES(sbyte[] coords)
	{
		fixed (sbyte* coords2 = coords)
		{
			Delegates.pglTexCoord3bvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public static void TexCoord4OES(sbyte s, sbyte t, sbyte r, sbyte q)
	{
		Delegates.pglTexCoord4bOES(s, t, r, q);
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public unsafe static void TexCoord4OES(sbyte[] coords)
	{
		fixed (sbyte* coords2 = coords)
		{
			Delegates.pglTexCoord4bvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public static void Vertex2OES(sbyte x, sbyte y)
	{
		Delegates.pglVertex2bOES(x, y);
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public unsafe static void Vertex2OES(sbyte[] coords)
	{
		fixed (sbyte* coords2 = coords)
		{
			Delegates.pglVertex2bvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public static void Vertex3OES(sbyte x, sbyte y, sbyte z)
	{
		Delegates.pglVertex3bOES(x, y, z);
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public unsafe static void Vertex3OES(sbyte[] coords)
	{
		fixed (sbyte* coords2 = coords)
		{
			Delegates.pglVertex3bvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public static void Vertex4OES(sbyte x, sbyte y, sbyte z, sbyte w)
	{
		Delegates.pglVertex4bOES(x, y, z, w);
	}

	[RequiredByFeature("GL_OES_byte_coordinates")]
	public unsafe static void Vertex4OES(sbyte[] coords)
	{
		fixed (sbyte* coords2 = coords)
		{
			Delegates.pglVertex4bvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
	public static void DrawTexOES(short x, short y, short z, short width, short height)
	{
		Delegates.pglDrawTexsOES(x, y, z, width, height);
	}

	[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
	public static void DrawTexOES(int x, int y, int z, int width, int height)
	{
		Delegates.pglDrawTexiOES(x, y, z, width, height);
	}

	[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
	public static void DrawTexOES(nint x, nint y, nint z, nint width, nint height)
	{
		Delegates.pglDrawTexxOES(x, y, z, width, height);
	}

	[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
	public unsafe static void DrawTexOES(short[] coords)
	{
		fixed (short* coords2 = coords)
		{
			Delegates.pglDrawTexsvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
	public unsafe static void DrawTexOES(int[] coords)
	{
		fixed (int* coords2 = coords)
		{
			Delegates.pglDrawTexivOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
	public unsafe static void DrawTexOES(nint[] coords)
	{
		fixed (nint* coords2 = coords)
		{
			Delegates.pglDrawTexxvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
	public static void DrawTexOES(float x, float y, float z, float width, float height)
	{
		Delegates.pglDrawTexfOES(x, y, z, width, height);
	}

	[RequiredByFeature("GL_OES_draw_texture", Api = "gles1")]
	public unsafe static void DrawTexOES(float[] coords)
	{
		fixed (float* coords2 = coords)
		{
			Delegates.pglDrawTexfvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_EGL_image", Api = "gles1|gles2")]
	public static void EGLImageTargetTexture2DOES(int target, nint image)
	{
		Delegates.pglEGLImageTargetTexture2DOES(target, image);
	}

	[RequiredByFeature("GL_OES_EGL_image", Api = "gles1|gles2")]
	public static void EGLImageTargetRenderbufferStorageOES(int target, nint image)
	{
		Delegates.pglEGLImageTargetRenderbufferStorageOES(target, image);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void AlphaFuncOES(AlphaFunction func, nint @ref)
	{
		Delegates.pglAlphaFuncxOES((int)func, @ref);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void ClearColorOES(nint red, nint green, nint blue, nint alpha)
	{
		Delegates.pglClearColorxOES(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void ClearDepthOES(nint depth)
	{
		Delegates.pglClearDepthxOES(depth);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public unsafe static void ClipPlaneOES(ClipPlaneName plane, nint[] equation)
	{
		fixed (nint* equation2 = equation)
		{
			Delegates.pglClipPlanexOES((int)plane, equation2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void Color4OES(nint red, nint green, nint blue, nint alpha)
	{
		Delegates.pglColor4xOES(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void DepthRangeOES(nint n, nint f)
	{
		Delegates.pglDepthRangexOES(n, f);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void FogOES(FogPName pname, nint param)
	{
		Delegates.pglFogxOES((int)pname, param);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public unsafe static void FogOES(FogPName pname, nint[] param)
	{
		fixed (nint* param2 = param)
		{
			Delegates.pglFogxvOES((int)pname, param2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void FrustumOES(nint l, nint r, nint b, nint t, nint n, nint f)
	{
		Delegates.pglFrustumxOES(l, r, b, t, n, f);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public unsafe static void GetClipPlaneOES(ClipPlaneName plane, [Out] nint[] equation)
	{
		fixed (nint* equation2 = equation)
		{
			Delegates.pglGetClipPlanexOES((int)plane, equation2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public unsafe static void GetFixedOES(GetPName pname, [Out] nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglGetFixedvOES((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public unsafe static void GetTexEnvOES(TextureEnvTarget target, TextureEnvParameter pname, [Out] nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglGetTexEnvxvOES((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public unsafe static void GetTexParameterOES(TextureTarget target, GetTextureParameter pname, [Out] nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglGetTexParameterxvOES((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void LightModelOES(LightModelParameter pname, nint param)
	{
		Delegates.pglLightModelxOES((int)pname, param);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public unsafe static void LightModelOES(LightModelParameter pname, nint[] param)
	{
		fixed (nint* param2 = param)
		{
			Delegates.pglLightModelxvOES((int)pname, param2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void LightxOES(LightName light, LightParameter pname, nint param)
	{
		Delegates.pglLightxOES((int)light, (int)pname, param);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public unsafe static void LightxvOES(LightName light, LightParameter pname, nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglLightxvOES((int)light, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void LineWidthOES(nint width)
	{
		Delegates.pglLineWidthxOES(width);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public unsafe static void LoadMatrixxOES(nint[] m)
	{
		fixed (nint* m2 = m)
		{
			Delegates.pglLoadMatrixxOES(m2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public unsafe static void LoadMatrixxOES(nint* m)
	{
		Delegates.pglLoadMatrixxOES(m);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public unsafe static void LoadMatrixxOES<T>(T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglLoadMatrixxOES((nint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void MaterialOES(TriangleFace face, MaterialParameter pname, nint param)
	{
		Delegates.pglMaterialxOES((int)face, (int)pname, param);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public unsafe static void MaterialOES(TriangleFace face, MaterialParameter pname, nint[] param)
	{
		fixed (nint* param2 = param)
		{
			Delegates.pglMaterialxvOES((int)face, (int)pname, param2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public unsafe static void MultMatrixxOES(nint[] m)
	{
		fixed (nint* m2 = m)
		{
			Delegates.pglMultMatrixxOES(m2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public unsafe static void MultMatrixxOES(nint* m)
	{
		Delegates.pglMultMatrixxOES(m);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public unsafe static void MultMatrixxOES<T>(T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglMultMatrixxOES((nint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void MultiTexCoord4OES(TextureUnit texture, nint s, nint t, nint r, nint q)
	{
		Delegates.pglMultiTexCoord4xOES((int)texture, s, t, r, q);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void Normal3OES(nint nx, nint ny, nint nz)
	{
		Delegates.pglNormal3xOES(nx, ny, nz);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void OrthoxOES(nint l, nint r, nint b, nint t, nint n, nint f)
	{
		Delegates.pglOrthoxOES(l, r, b, t, n, f);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public unsafe static void PointParameterOES(PointParameterNameARB pname, nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglPointParameterxvOES((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void PointSizeOES(nint size)
	{
		Delegates.pglPointSizexOES(size);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void PolygonOffsetOES(nint factor, nint units)
	{
		Delegates.pglPolygonOffsetxOES(factor, units);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void RotateOES(nint angle, nint x, nint y, nint z)
	{
		Delegates.pglRotatexOES(angle, x, y, z);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void ScaleOES(nint x, nint y, nint z)
	{
		Delegates.pglScalexOES(x, y, z);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void TexEnvOES(TextureEnvTarget target, TextureEnvParameter pname, nint param)
	{
		Delegates.pglTexEnvxOES((int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public unsafe static void TexEnvOES(TextureEnvTarget target, TextureEnvParameter pname, nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglTexEnvxvOES((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void TexParameterOES(TextureTarget target, GetTextureParameter pname, nint param)
	{
		Delegates.pglTexParameterxOES((int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public unsafe static void TexParameterOES(TextureTarget target, GetTextureParameter pname, nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglTexParameterxvOES((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gl|gles1")]
	public static void TranslateOES(nint x, nint y, nint z)
	{
		Delegates.pglTranslatexOES(x, y, z);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gles1")]
	public unsafe static void GetLightxvOES(LightName light, LightParameter pname, [Out] nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglGetLightxvOES((int)light, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gles1")]
	public unsafe static void GetMaterialOES(TriangleFace face, MaterialParameter pname, [Out] nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglGetMaterialxvOES((int)face, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gles1")]
	public static void PointParameterOES(PointParameterNameARB pname, nint param)
	{
		Delegates.pglPointParameterxOES((int)pname, param);
	}

	[RequiredByFeature("GL_OES_fixed_point", Api = "gles1")]
	public static void SampleCoverageOES(int value, bool invert)
	{
		Delegates.pglSampleCoveragexOES(value, invert);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void AccumOES(int op, nint value)
	{
		Delegates.pglAccumxOES(op, value);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void BitmapOES(int width, int height, nint xorig, nint yorig, nint xmove, nint ymove, byte[] bitmap)
	{
		fixed (byte* bitmap2 = bitmap)
		{
			Delegates.pglBitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void BlendColorOES(nint red, nint green, nint blue, nint alpha)
	{
		Delegates.pglBlendColorxOES(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void ClearAccumOES(nint red, nint green, nint blue, nint alpha)
	{
		Delegates.pglClearAccumxOES(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void Color3OES(nint red, nint green, nint blue)
	{
		Delegates.pglColor3xOES(red, green, blue);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void Color3OES(nint[] components)
	{
		fixed (nint* components2 = components)
		{
			Delegates.pglColor3xvOES(components2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void Color4OES(nint[] components)
	{
		fixed (nint* components2 = components)
		{
			Delegates.pglColor4xvOES(components2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void ConvolutionParameterOES(ConvolutionTargetEXT target, ConvolutionParameter pname, nint param)
	{
		Delegates.pglConvolutionParameterxOES((int)target, (int)pname, param);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void ConvolutionParameterOES(ConvolutionTargetEXT target, ConvolutionParameter pname, nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglConvolutionParameterxvOES((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void EvalCoord1OES(nint u)
	{
		Delegates.pglEvalCoord1xOES(u);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void EvalCoord1OES(nint[] coords)
	{
		fixed (nint* coords2 = coords)
		{
			Delegates.pglEvalCoord1xvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void EvalCoord2OES(nint u, nint v)
	{
		Delegates.pglEvalCoord2xOES(u, v);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void EvalCoord2OES(nint[] coords)
	{
		fixed (nint* coords2 = coords)
		{
			Delegates.pglEvalCoord2xvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void FeedbackBufferOES(int type, nint[] buffer)
	{
		fixed (nint* buffer2 = buffer)
		{
			Delegates.pglFeedbackBufferxOES(buffer.Length, type, buffer2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void GetConvolutionParameterOES(int target, int pname, [Out] nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglGetConvolutionParameterxvOES(target, pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void GetHistogramParameterOES(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, [Out] nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglGetHistogramParameterxvOES((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void GetLightxOES(LightName light, LightParameter pname, [Out] nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglGetLightxOES((int)light, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void GetMapOES(MapTarget target, GetMapQuery query, [Out] nint[] v)
	{
		fixed (nint* v2 = v)
		{
			Delegates.pglGetMapxvOES((int)target, (int)query, v2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void GetMaterialOES(TriangleFace face, MaterialParameter pname, nint param)
	{
		Delegates.pglGetMaterialxOES((int)face, (int)pname, param);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void GetMaterialOES(TriangleFace face, MaterialParameter pname, object param)
	{
		GCHandle gCHandle = GCHandle.Alloc(param, GCHandleType.Pinned);
		try
		{
			GetMaterialOES(face, pname, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void GetPixelMap(PixelMap map, int size, [Out] nint[] values)
	{
		fixed (nint* values2 = values)
		{
			Delegates.pglGetPixelMapxv((int)map, size, values2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void GetPixelMap(PixelMap map, [Out] nint[] values)
	{
		fixed (nint* values2 = values)
		{
			Delegates.pglGetPixelMapxv((int)map, values.Length, values2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	public unsafe static void GetTexGenOES(TextureCoordName coord, TextureGenParameter pname, [Out] nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglGetTexGenxvOES((int)coord, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void GetTexLevelParameterOES(TextureTarget target, int level, GetTextureParameter pname, [Out] nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglGetTexLevelParameterxvOES((int)target, level, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void IndexOES(nint component)
	{
		Delegates.pglIndexxOES(component);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void IndexOES(nint[] component)
	{
		fixed (nint* component2 = component)
		{
			Delegates.pglIndexxvOES(component2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void LoadTransposeMatrixxOES(nint[] m)
	{
		fixed (nint* m2 = m)
		{
			Delegates.pglLoadTransposeMatrixxOES(m2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void LoadTransposeMatrixxOES(nint* m)
	{
		Delegates.pglLoadTransposeMatrixxOES(m);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void LoadTransposeMatrixxOES<T>(T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglLoadTransposeMatrixxOES((nint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void Map1OES(MapTarget target, nint u1, nint u2, int stride, int order, nint points)
	{
		Delegates.pglMap1xOES((int)target, u1, u2, stride, order, points);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void Map2OES(MapTarget target, nint u1, nint u2, int ustride, int uorder, nint v1, nint v2, int vstride, int vorder, nint points)
	{
		Delegates.pglMap2xOES((int)target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void MapGrid1OES(int n, nint u1, nint u2)
	{
		Delegates.pglMapGrid1xOES(n, u1, u2);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void MapGrid2OES(int n, nint u1, nint u2, nint v1, nint v2)
	{
		Delegates.pglMapGrid2xOES(n, u1, u2, v1, v2);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void MultTransposeMatrixxOES(nint[] m)
	{
		fixed (nint* m2 = m)
		{
			Delegates.pglMultTransposeMatrixxOES(m2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void MultTransposeMatrixxOES(nint* m)
	{
		Delegates.pglMultTransposeMatrixxOES(m);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void MultTransposeMatrixxOES<T>(T m) where T : struct
	{
		TypedReference typedReference = __makeref(m);
		nint num = *(nint*)(&typedReference);
		Delegates.pglMultTransposeMatrixxOES((nint*)((IntPtr)num).ToPointer());
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void MultiTexCoord1OES(TextureUnit texture, nint s)
	{
		Delegates.pglMultiTexCoord1xOES((int)texture, s);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void MultiTexCoord1OES(TextureUnit texture, nint[] coords)
	{
		fixed (nint* coords2 = coords)
		{
			Delegates.pglMultiTexCoord1xvOES((int)texture, coords2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void MultiTexCoord2OES(TextureUnit texture, nint s, nint t)
	{
		Delegates.pglMultiTexCoord2xOES((int)texture, s, t);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void MultiTexCoord2OES(TextureUnit texture, nint[] coords)
	{
		fixed (nint* coords2 = coords)
		{
			Delegates.pglMultiTexCoord2xvOES((int)texture, coords2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void MultiTexCoord3OES(TextureUnit texture, nint s, nint t, nint r)
	{
		Delegates.pglMultiTexCoord3xOES((int)texture, s, t, r);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void MultiTexCoord3OES(TextureUnit texture, nint[] coords)
	{
		fixed (nint* coords2 = coords)
		{
			Delegates.pglMultiTexCoord3xvOES((int)texture, coords2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void MultiTexCoord4OES(TextureUnit texture, nint[] coords)
	{
		fixed (nint* coords2 = coords)
		{
			Delegates.pglMultiTexCoord4xvOES((int)texture, coords2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void Normal3OES(nint[] coords)
	{
		fixed (nint* coords2 = coords)
		{
			Delegates.pglNormal3xvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void PassThroughOES(nint token)
	{
		Delegates.pglPassThroughxOES(token);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void PixelMap(PixelMap map, int size, nint[] values)
	{
		fixed (nint* values2 = values)
		{
			Delegates.pglPixelMapx((int)map, size, values2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void PixelMap(PixelMap map, nint[] values)
	{
		fixed (nint* values2 = values)
		{
			Delegates.pglPixelMapx((int)map, values.Length, values2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void PixelStore(PixelStoreParameter pname, nint param)
	{
		Delegates.pglPixelStorex((int)pname, param);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void PixelTransferOES(PixelTransferParameter pname, nint param)
	{
		Delegates.pglPixelTransferxOES((int)pname, param);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void PixelZoomOES(nint xfactor, nint yfactor)
	{
		Delegates.pglPixelZoomxOES(xfactor, yfactor);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void PrioritizeTexturesOES(uint[] textures, nint[] priorities)
	{
		fixed (uint* textures2 = textures)
		{
			fixed (nint* priorities2 = priorities)
			{
				Delegates.pglPrioritizeTexturesxOES(textures.Length, textures2, priorities2);
			}
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void RasterPos2OES(nint x, nint y)
	{
		Delegates.pglRasterPos2xOES(x, y);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void RasterPos2OES(nint[] coords)
	{
		fixed (nint* coords2 = coords)
		{
			Delegates.pglRasterPos2xvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void RasterPos3OES(nint x, nint y, nint z)
	{
		Delegates.pglRasterPos3xOES(x, y, z);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void RasterPos3OES(nint[] coords)
	{
		fixed (nint* coords2 = coords)
		{
			Delegates.pglRasterPos3xvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void RasterPos4OES(nint x, nint y, nint z, nint w)
	{
		Delegates.pglRasterPos4xOES(x, y, z, w);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void RasterPos4OES(nint[] coords)
	{
		fixed (nint* coords2 = coords)
		{
			Delegates.pglRasterPos4xvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void RectOES(nint x1, nint y1, nint x2, nint y2)
	{
		Delegates.pglRectxOES(x1, y1, x2, y2);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void RectOES(nint[] v1, nint[] v2)
	{
		fixed (nint* v3 = v1)
		{
			fixed (nint* v4 = v2)
			{
				Delegates.pglRectxvOES(v3, v4);
			}
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void TexCoord1OES(nint s)
	{
		Delegates.pglTexCoord1xOES(s);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void TexCoord1OES(nint[] coords)
	{
		fixed (nint* coords2 = coords)
		{
			Delegates.pglTexCoord1xvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void TexCoord2OES(nint s, nint t)
	{
		Delegates.pglTexCoord2xOES(s, t);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void TexCoord2OES(nint[] coords)
	{
		fixed (nint* coords2 = coords)
		{
			Delegates.pglTexCoord2xvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void TexCoord3OES(nint s, nint t, nint r)
	{
		Delegates.pglTexCoord3xOES(s, t, r);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void TexCoord3OES(nint[] coords)
	{
		fixed (nint* coords2 = coords)
		{
			Delegates.pglTexCoord3xvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void TexCoord4OES(nint s, nint t, nint r, nint q)
	{
		Delegates.pglTexCoord4xOES(s, t, r, q);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void TexCoord4OES(nint[] coords)
	{
		fixed (nint* coords2 = coords)
		{
			Delegates.pglTexCoord4xvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	public static void TexGenOES(TextureCoordName coord, TextureGenParameter pname, nint param)
	{
		Delegates.pglTexGenxOES((int)coord, (int)pname, param);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	public unsafe static void TexGenOES(TextureCoordName coord, TextureGenParameter pname, nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglTexGenxvOES((int)coord, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void Vertex2OES(nint x)
	{
		Delegates.pglVertex2xOES(x);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void Vertex2OES(nint[] coords)
	{
		fixed (nint* coords2 = coords)
		{
			Delegates.pglVertex2xvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void Vertex3OES(nint x, nint y)
	{
		Delegates.pglVertex3xOES(x, y);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void Vertex3OES(nint[] coords)
	{
		fixed (nint* coords2 = coords)
		{
			Delegates.pglVertex3xvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public static void Vertex4OES(nint x, nint y, nint z)
	{
		Delegates.pglVertex4xOES(x, y, z);
	}

	[RequiredByFeature("GL_OES_fixed_point")]
	public unsafe static void Vertex4OES(nint[] coords)
	{
		fixed (nint* coords2 = coords)
		{
			Delegates.pglVertex4xvOES(coords2);
		}
	}

	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public static bool IsRenderbufferOES(uint renderbuffer)
	{
		return Delegates.pglIsRenderbufferOES(renderbuffer);
	}

	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public static void BindRenderbufferOES(RenderbufferTarget target, uint renderbuffer)
	{
		Delegates.pglBindRenderbufferOES((int)target, renderbuffer);
	}

	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public unsafe static void DeleteRenderbuffersOES(uint[] renderbuffers)
	{
		fixed (uint* renderbuffers2 = renderbuffers)
		{
			Delegates.pglDeleteRenderbuffersOES(renderbuffers.Length, renderbuffers2);
		}
	}

	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public unsafe static void GenRenderbuffersOES(uint[] renderbuffers)
	{
		fixed (uint* renderbuffers2 = renderbuffers)
		{
			Delegates.pglGenRenderbuffersOES(renderbuffers.Length, renderbuffers2);
		}
	}

	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public unsafe static uint GenRenderbufferOES()
	{
		uint result = default(uint);
		Delegates.pglGenRenderbuffersOES(1, &result);
		return result;
	}

	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public static void RenderbufferStorageOES(RenderbufferTarget target, InternalFormat internalformat, int width, int height)
	{
		Delegates.pglRenderbufferStorageOES((int)target, (int)internalformat, width, height);
	}

	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public unsafe static void GetRenderbufferParameterOES(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetRenderbufferParameterivOES((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public static bool IsFramebufferOES(uint framebuffer)
	{
		return Delegates.pglIsFramebufferOES(framebuffer);
	}

	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public static void BindFramebufferOES(FramebufferTarget target, uint framebuffer)
	{
		Delegates.pglBindFramebufferOES((int)target, framebuffer);
	}

	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public unsafe static void DeleteFramebuffersOES(uint[] framebuffers)
	{
		fixed (uint* framebuffers2 = framebuffers)
		{
			Delegates.pglDeleteFramebuffersOES(framebuffers.Length, framebuffers2);
		}
	}

	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public unsafe static void GenFramebuffersOES(uint[] framebuffers)
	{
		fixed (uint* framebuffers2 = framebuffers)
		{
			Delegates.pglGenFramebuffersOES(framebuffers.Length, framebuffers2);
		}
	}

	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public unsafe static uint GenFramebufferOES()
	{
		uint result = default(uint);
		Delegates.pglGenFramebuffersOES(1, &result);
		return result;
	}

	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public static FramebufferStatus CheckFramebufferStatusOES(FramebufferTarget target)
	{
		return (FramebufferStatus)Delegates.pglCheckFramebufferStatusOES((int)target);
	}

	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public static void FramebufferRenderbufferOES(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
	{
		Delegates.pglFramebufferRenderbufferOES((int)target, (int)attachment, (int)renderbuffertarget, renderbuffer);
	}

	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public static void FramebufferTexture2DOES(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
	{
		Delegates.pglFramebufferTexture2DOES((int)target, (int)attachment, (int)textarget, texture, level);
	}

	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public unsafe static void GetFramebufferAttachmentParameterOES(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetFramebufferAttachmentParameterivOES((int)target, (int)attachment, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_framebuffer_object", Api = "gles1")]
	public static void GenerateMipmapOES(TextureTarget target)
	{
		Delegates.pglGenerateMipmapOES((int)target);
	}

	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public static void CurrentPaletteMatrixOES(uint matrixpaletteindex)
	{
		Delegates.pglCurrentPaletteMatrixOES(matrixpaletteindex);
	}

	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public static void LoadPaletteFromModelViewMatrixOES()
	{
		Delegates.pglLoadPaletteFromModelViewMatrixOES();
	}

	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public static void MatrixIndexPointerOES(int size, MatrixIndexPointerTypeARB type, int stride, nint pointer)
	{
		Delegates.pglMatrixIndexPointerOES(size, (int)type, stride, pointer);
	}

	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public static void MatrixIndexPointerOES(int size, MatrixIndexPointerTypeARB type, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			MatrixIndexPointerOES(size, type, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public static void WeightPointerOES(int size, int type, int stride, nint pointer)
	{
		Delegates.pglWeightPointerOES(size, type, stride, pointer);
	}

	[RequiredByFeature("GL_OES_matrix_palette", Api = "gles1")]
	public static void WeightPointerOES(int size, int type, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			WeightPointerOES(size, type, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_OES_point_size_array", Api = "gles1")]
	public static void PointSizePointerOES(int type, int stride, nint pointer)
	{
		Delegates.pglPointSizePointerOES(type, stride, pointer);
	}

	[RequiredByFeature("GL_OES_point_size_array", Api = "gles1")]
	public static void PointSizePointerOES(int type, int stride, object pointer)
	{
		GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
		try
		{
			PointSizePointerOES(type, stride, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_OES_query_matrix", Api = "gl|gles1")]
	public unsafe static uint QueryMatrixxOES(nint[] mantissa, int[] exponent)
	{
		uint result;
		fixed (nint* mantissa2 = mantissa)
		{
			fixed (int* exponent2 = exponent)
			{
				result = Delegates.pglQueryMatrixxOES(mantissa2, exponent2);
			}
		}
		return result;
	}

	[RequiredByFeature("GL_OES_single_precision", Api = "gl|gles1")]
	public unsafe static void ClipPlaneOES(ClipPlaneName plane, float[] equation)
	{
		fixed (float* equation2 = equation)
		{
			Delegates.pglClipPlanefOES((int)plane, equation2);
		}
	}

	[RequiredByFeature("GL_OES_single_precision", Api = "gl|gles1")]
	public static void FrustumOES(float l, float r, float b, float t, float n, float f)
	{
		Delegates.pglFrustumfOES(l, r, b, t, n, f);
	}

	[RequiredByFeature("GL_OES_single_precision", Api = "gl|gles1")]
	public unsafe static void GetClipPlaneOES(ClipPlaneName plane, [Out] float[] equation)
	{
		fixed (float* equation2 = equation)
		{
			Delegates.pglGetClipPlanefOES((int)plane, equation2);
		}
	}

	[RequiredByFeature("GL_OES_single_precision", Api = "gl|gles1")]
	public static void OrthoOES(float l, float r, float b, float t, float n, float f)
	{
		Delegates.pglOrthofOES(l, r, b, t, n, f);
	}

	[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
	public static void TexImage3DOES(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglTexImage3DOES((int)target, level, (int)internalformat, width, height, depth, border, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
	public static void TexImage3DOES(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			TexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
	public static void TexSubImage3DOES(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglTexSubImage3DOES((int)target, level, xoffset, yoffset, zoffset, width, height, depth, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
	public static void TexSubImage3DOES(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			TexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
	public static void CopyTexSubImage3DOES(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
	{
		Delegates.pglCopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height);
	}

	[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
	public static void CompressedTexImage3DOES(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, nint data)
	{
		Delegates.pglCompressedTexImage3DOES((int)target, level, (int)internalformat, width, height, depth, border, imageSize, data);
	}

	[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
	public static void CompressedTexImage3DOES(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			CompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
	public static void CompressedTexSubImage3DOES(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, nint data)
	{
		Delegates.pglCompressedTexSubImage3DOES((int)target, level, xoffset, yoffset, zoffset, width, height, depth, (int)format, imageSize, data);
	}

	[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
	public static void CompressedTexSubImage3DOES(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, object data)
	{
		GCHandle gCHandle = GCHandle.Alloc(data, GCHandleType.Pinned);
		try
		{
			CompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_OES_texture_3D", Api = "gles2")]
	public static void FramebufferTexture3DOES(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset)
	{
		Delegates.pglFramebufferTexture3DOES((int)target, (int)attachment, (int)textarget, texture, level, zoffset);
	}

	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	public static void TexGenOES(TextureCoordName coord, TextureGenParameter pname, float param)
	{
		Delegates.pglTexGenfOES((int)coord, (int)pname, param);
	}

	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	public unsafe static void TexGenOES(TextureCoordName coord, TextureGenParameter pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglTexGenfvOES((int)coord, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	public static void TexGenOES(TextureCoordName coord, TextureGenParameter pname, int param)
	{
		Delegates.pglTexGeniOES((int)coord, (int)pname, param);
	}

	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	public unsafe static void TexGenOES(TextureCoordName coord, TextureGenParameter pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglTexGenivOES((int)coord, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	public unsafe static void GetTexGenOES(TextureCoordName coord, TextureGenParameter pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetTexGenfvOES((int)coord, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_texture_cube_map", Api = "gles1")]
	public unsafe static void GetTexGenOES(TextureCoordName coord, TextureGenParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetTexGenivOES((int)coord, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public unsafe static void DepthRangeArrayOES(uint first, int count, float[] v)
	{
		fixed (float* v2 = v)
		{
			Delegates.pglDepthRangeArrayfvOES(first, count, v2);
		}
	}

	[RequiredByFeature("GL_OES_viewport_array", Api = "gles2")]
	public static void DepthRangeIndexedOES(uint index, float n, float f)
	{
		Delegates.pglDepthRangeIndexedfOES(index, n, f);
	}

	[RequiredByFeature("GL_OVR_multiview", Api = "gl|glcore|gles2")]
	public static void FramebufferTextureMultiOVR(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int baseViewIndex, int numViews)
	{
		Delegates.pglFramebufferTextureMultiviewOVR((int)target, (int)attachment, texture, level, baseViewIndex, numViews);
	}

	[RequiredByFeature("GL_OVR_multiview_multisampled_render_to_texture", Api = "gles2")]
	public static void FramebufferTextureMultisampleMultiOVR(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int samples, int baseViewIndex, int numViews)
	{
		Delegates.pglFramebufferTextureMultisampleMultiviewOVR((int)target, (int)attachment, texture, level, samples, baseViewIndex, numViews);
	}

	[RequiredByFeature("GL_PGI_misc_hints")]
	public static void HintPGI(HintTargetPGI target, VertexHintsMaskPGI mode)
	{
		Delegates.pglHintPGI((int)target, (int)mode);
	}

	[RequiredByFeature("GL_QCOM_alpha_test", Api = "gles2")]
	public static void AlphaFuncQCOM(int func, float @ref)
	{
		Delegates.pglAlphaFuncQCOM(func, @ref);
	}

	[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
	public unsafe static void GetDriverControlsQCOM([Out] int[] num, [Out] uint[] driverControls)
	{
		fixed (int* num2 = num)
		{
			fixed (uint* driverControls2 = driverControls)
			{
				Delegates.pglGetDriverControlsQCOM(num2, driverControls.Length, driverControls2);
			}
		}
	}

	[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
	public unsafe static void GetDriverControlStringQCOM(uint driverControl, int bufSize, [Out] int[] length, StringBuilder driverControlString)
	{
		fixed (int* length2 = length)
		{
			Delegates.pglGetDriverControlStringQCOM(driverControl, bufSize, length2, driverControlString);
		}
	}

	[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
	public static void EnableDriverControlQCOM(uint driverControl)
	{
		Delegates.pglEnableDriverControlQCOM(driverControl);
	}

	[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
	public static void DisableDriverControlQCOM(uint driverControl)
	{
		Delegates.pglDisableDriverControlQCOM(driverControl);
	}

	[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
	public unsafe static void ExtGetTexturesQCOM(uint[] textures, int maxTextures, int[] numTextures)
	{
		fixed (uint* textures2 = textures)
		{
			fixed (int* numTextures2 = numTextures)
			{
				Delegates.pglExtGetTexturesQCOM(textures2, maxTextures, numTextures2);
			}
		}
	}

	[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
	public unsafe static void ExtGetBuffersQCOM(uint[] buffers, int[] numBuffers)
	{
		fixed (uint* buffers2 = buffers)
		{
			fixed (int* numBuffers2 = numBuffers)
			{
				Delegates.pglExtGetBuffersQCOM(buffers2, buffers.Length, numBuffers2);
			}
		}
	}

	[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
	public unsafe static void ExtGetRenderbuffersQCOM(uint[] renderbuffers, int[] numRenderbuffers)
	{
		fixed (uint* renderbuffers2 = renderbuffers)
		{
			fixed (int* numRenderbuffers2 = numRenderbuffers)
			{
				Delegates.pglExtGetRenderbuffersQCOM(renderbuffers2, renderbuffers.Length, numRenderbuffers2);
			}
		}
	}

	[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
	public unsafe static void ExtGetFramebuffersQCOM(uint[] framebuffers, int[] numFramebuffers)
	{
		fixed (uint* framebuffers2 = framebuffers)
		{
			fixed (int* numFramebuffers2 = numFramebuffers)
			{
				Delegates.pglExtGetFramebuffersQCOM(framebuffers2, framebuffers.Length, numFramebuffers2);
			}
		}
	}

	[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
	public unsafe static void ExtGetTexLevelParameterivQCOM(uint texture, int face, int level, int pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglExtGetTexLevelParameterivQCOM(texture, face, level, pname, params2);
		}
	}

	[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
	public static void ExtTexObjectStateOverrideiQCOM(int target, int pname, int param)
	{
		Delegates.pglExtTexObjectStateOverrideiQCOM(target, pname, param);
	}

	[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
	public static void ExtGetTexSubImageQCOM(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint texels)
	{
		Delegates.pglExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, (int)format, (int)type, texels);
	}

	[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
	public unsafe static void ExtGetBufferPointervQCOM(int target, nint[] @params)
	{
		fixed (nint* params2 = @params)
		{
			Delegates.pglExtGetBufferPointervQCOM(target, params2);
		}
	}

	[RequiredByFeature("GL_QCOM_extended_get2", Api = "gles1|gles2")]
	public unsafe static void ExtGetShadersQCOM(uint[] shaders, int[] numShaders)
	{
		fixed (uint* shaders2 = shaders)
		{
			fixed (int* numShaders2 = numShaders)
			{
				Delegates.pglExtGetShadersQCOM(shaders2, shaders.Length, numShaders2);
			}
		}
	}

	[RequiredByFeature("GL_QCOM_extended_get2", Api = "gles1|gles2")]
	public unsafe static void ExtGetProgramsQCOM(uint[] programs, int[] numPrograms)
	{
		fixed (uint* programs2 = programs)
		{
			fixed (int* numPrograms2 = numPrograms)
			{
				Delegates.pglExtGetProgramsQCOM(programs2, programs.Length, numPrograms2);
			}
		}
	}

	[RequiredByFeature("GL_QCOM_extended_get2", Api = "gles1|gles2")]
	public static bool ExtIsProgramBinaryQCOM(uint program)
	{
		return Delegates.pglExtIsProgramBinaryQCOM(program);
	}

	[RequiredByFeature("GL_QCOM_extended_get2", Api = "gles1|gles2")]
	public unsafe static void ExtGetProgramBinarySourceQCOM(uint program, ShaderType shadertype, string source, int[] length)
	{
		fixed (int* length2 = length)
		{
			Delegates.pglExtGetProgramBinarySourceQCOM(program, (int)shadertype, source, length2);
		}
	}

	[RequiredByFeature("GL_QCOM_framebuffer_foveated", Api = "gles2")]
	public unsafe static void FramebufferFoveationQCOM(uint framebuffer, uint numLayers, uint focalPointsPerLayer, uint requestedFeatures, uint[] providedFeatures)
	{
		fixed (uint* providedFeatures2 = providedFeatures)
		{
			Delegates.pglFramebufferFoveationConfigQCOM(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures2);
		}
	}

	[RequiredByFeature("GL_QCOM_framebuffer_foveated", Api = "gles2")]
	public static void FramebufferFoveationParametersQCOM(uint framebuffer, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea)
	{
		Delegates.pglFramebufferFoveationParametersQCOM(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
	}

	[RequiredByFeature("GL_QCOM_frame_extrapolation", Api = "gles2")]
	public static void ExtrapolateTex2DQCOM(uint src1, uint src2, uint output, float scaleFactor)
	{
		Delegates.pglExtrapolateTex2DQCOM(src1, src2, output, scaleFactor);
	}

	[RequiredByFeature("GL_QCOM_motion_estimation", Api = "gles2")]
	public static void TexQCOM(uint @ref, uint target, uint output)
	{
		Delegates.pglTexEstimateMotionQCOM(@ref, target, output);
	}

	[RequiredByFeature("GL_QCOM_motion_estimation", Api = "gles2")]
	public static void TexEstimateMotionRegionsQCOM(uint @ref, uint target, uint output, uint mask)
	{
		Delegates.pglTexEstimateMotionRegionsQCOM(@ref, target, output, mask);
	}

	[RequiredByFeature("GL_QCOM_shader_framebuffer_fetch_noncoherent", Api = "gles2")]
	public static void FramebufferFetchBarrierQCOM()
	{
		Delegates.pglFramebufferFetchBarrierQCOM();
	}

	[RequiredByFeature("GL_QCOM_shading_rate", Api = "gles2")]
	public static void ShadingQCOM(ShadingRateQCOM rate)
	{
		Delegates.pglShadingRateQCOM((int)rate);
	}

	[RequiredByFeature("GL_QCOM_texture_foveated", Api = "gles2")]
	public static void TextureFoveationParametersQCOM(uint texture, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea)
	{
		Delegates.pglTextureFoveationParametersQCOM(texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
	}

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	public static void StartQCOM(uint x, uint y, uint width, uint height, BufferBitQCOM preserveMask)
	{
		Delegates.pglStartTilingQCOM(x, y, width, height, (uint)preserveMask);
	}

	[RequiredByFeature("GL_QCOM_tiled_rendering", Api = "gles1|gles2")]
	public static void EndQCOM(BufferBitQCOM preserveMask)
	{
		Delegates.pglEndTilingQCOM((uint)preserveMask);
	}

	[RequiredByFeature("GL_SGIS_detail_texture")]
	public unsafe static void DetailTexFuncSGIS(TextureTarget target, int n, float[] points)
	{
		fixed (float* points2 = points)
		{
			Delegates.pglDetailTexFuncSGIS((int)target, n, points2);
		}
	}

	[RequiredByFeature("GL_SGIS_detail_texture")]
	public unsafe static void DetailTexFuncSGIS(TextureTarget target, float[] points)
	{
		fixed (float* points2 = points)
		{
			Delegates.pglDetailTexFuncSGIS((int)target, points.Length / 2, points2);
		}
	}

	[RequiredByFeature("GL_SGIS_detail_texture")]
	public unsafe static void GetDetailTexFuncSGIS(TextureTarget target, [Out] float[] points)
	{
		fixed (float* points2 = points)
		{
			Delegates.pglGetDetailTexFuncSGIS((int)target, points2);
		}
	}

	[RequiredByFeature("GL_SGIS_fog_function")]
	public unsafe static void FogFuncSGIS(float[] points)
	{
		fixed (float* points2 = points)
		{
			Delegates.pglFogFuncSGIS(points.Length / 2, points2);
		}
	}

	[RequiredByFeature("GL_SGIS_fog_function")]
	public unsafe static void GetFogFuncSGIS([Out] float[] points)
	{
		fixed (float* points2 = points)
		{
			Delegates.pglGetFogFuncSGIS(points2);
		}
	}

	[RequiredByFeature("GL_SGIS_pixel_texture")]
	public static void PixelTexGenParameterSGIS(PixelTexGenParameterNameSGIS pname, int param)
	{
		Delegates.pglPixelTexGenParameteriSGIS((int)pname, param);
	}

	[RequiredByFeature("GL_SGIS_pixel_texture")]
	public unsafe static void PixelTexGenParameterSGIS(PixelTexGenParameterNameSGIS pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglPixelTexGenParameterivSGIS((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGIS_pixel_texture")]
	public static void PixelTexGenParameterSGIS(PixelTexGenParameterNameSGIS pname, float param)
	{
		Delegates.pglPixelTexGenParameterfSGIS((int)pname, param);
	}

	[RequiredByFeature("GL_SGIS_pixel_texture")]
	public unsafe static void PixelTexGenParameterSGIS(PixelTexGenParameterNameSGIS pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglPixelTexGenParameterfvSGIS((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGIS_pixel_texture")]
	public unsafe static void GetPixelTexGenParameterSGIS(PixelTexGenParameterNameSGIS pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetPixelTexGenParameterivSGIS((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGIS_pixel_texture")]
	public unsafe static void GetPixelTexGenParameterSGIS(PixelTexGenParameterNameSGIS pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetPixelTexGenParameterfvSGIS((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGIS_sharpen_texture")]
	public unsafe static void SharpenTexFuncSGIS(TextureTarget target, int n, float[] points)
	{
		fixed (float* points2 = points)
		{
			Delegates.pglSharpenTexFuncSGIS((int)target, n, points2);
		}
	}

	[RequiredByFeature("GL_SGIS_sharpen_texture")]
	public unsafe static void SharpenTexFuncSGIS(TextureTarget target, float[] points)
	{
		fixed (float* points2 = points)
		{
			Delegates.pglSharpenTexFuncSGIS((int)target, points.Length / 2, points2);
		}
	}

	[RequiredByFeature("GL_SGIS_sharpen_texture")]
	public unsafe static void GetSharpenTexFuncSGIS(TextureTarget target, [Out] float[] points)
	{
		fixed (float* points2 = points)
		{
			Delegates.pglGetSharpenTexFuncSGIS((int)target, points2);
		}
	}

	[RequiredByFeature("GL_SGIS_texture4D")]
	public static void TexImage4DSGIS(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglTexImage4DSGIS((int)target, level, (int)internalformat, width, height, depth, size4d, border, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_SGIS_texture4D")]
	public static void TexImage4DSGIS(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			TexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_SGIS_texture4D")]
	public static void TexSubImage4DSGIS(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, nint pixels)
	{
		Delegates.pglTexSubImage4DSGIS((int)target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, (int)format, (int)type, pixels);
	}

	[RequiredByFeature("GL_SGIS_texture4D")]
	public static void TexSubImage4DSGIS(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, object pixels)
	{
		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
		try
		{
			TexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_SGIS_texture_color_mask")]
	public static void TextureColorMaskSGIS(bool red, bool green, bool blue, bool alpha)
	{
		Delegates.pglTextureColorMaskSGIS(red, green, blue, alpha);
	}

	[RequiredByFeature("GL_SGIS_texture_filter4")]
	public unsafe static void GetTexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, [Out] float[] weights)
	{
		fixed (float* weights2 = weights)
		{
			Delegates.pglGetTexFilterFuncSGIS((int)target, (int)filter, weights2);
		}
	}

	[RequiredByFeature("GL_SGIS_texture_filter4")]
	public unsafe static void TexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, int n, float[] weights)
	{
		fixed (float* weights2 = weights)
		{
			Delegates.pglTexFilterFuncSGIS((int)target, (int)filter, n, weights2);
		}
	}

	[RequiredByFeature("GL_SGIS_texture_filter4")]
	public unsafe static void TexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, float[] weights)
	{
		fixed (float* weights2 = weights)
		{
			Delegates.pglTexFilterFuncSGIS((int)target, (int)filter, weights.Length, weights2);
		}
	}

	[RequiredByFeature("GL_SGIX_async")]
	public static void AsyncMarkerSGIX(uint marker)
	{
		Delegates.pglAsyncMarkerSGIX(marker);
	}

	[RequiredByFeature("GL_SGIX_async")]
	public unsafe static int FinishAsyncSGIX(uint[] markerp)
	{
		int result;
		fixed (uint* markerp2 = markerp)
		{
			result = Delegates.pglFinishAsyncSGIX(markerp2);
		}
		return result;
	}

	[RequiredByFeature("GL_SGIX_async")]
	public unsafe static int PollAsyncSGIX(uint[] markerp)
	{
		int result;
		fixed (uint* markerp2 = markerp)
		{
			result = Delegates.pglPollAsyncSGIX(markerp2);
		}
		return result;
	}

	[RequiredByFeature("GL_SGIX_async")]
	public static uint GenAsyncMarkerSGIX(int range)
	{
		return Delegates.pglGenAsyncMarkersSGIX(range);
	}

	[RequiredByFeature("GL_SGIX_async")]
	public static void DeleteAsyncMarkerSGIX(uint marker, int range)
	{
		Delegates.pglDeleteAsyncMarkersSGIX(marker, range);
	}

	[RequiredByFeature("GL_SGIX_async")]
	public static bool IsAsyncMarkerSGIX(uint marker)
	{
		return Delegates.pglIsAsyncMarkerSGIX(marker);
	}

	[RequiredByFeature("GL_SGIX_flush_raster")]
	public static void FlushRasterSGIX()
	{
		Delegates.pglFlushRasterSGIX();
	}

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public static void FragmentColorMaterialSGIX(TriangleFace face, MaterialParameter mode)
	{
		Delegates.pglFragmentColorMaterialSGIX((int)face, (int)mode);
	}

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public static void FragmentLightSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, float param)
	{
		Delegates.pglFragmentLightfSGIX((int)light, (int)pname, param);
	}

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public unsafe static void FragmentLightSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglFragmentLightfvSGIX((int)light, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public static void FragmentLightSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, int param)
	{
		Delegates.pglFragmentLightiSGIX((int)light, (int)pname, param);
	}

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public unsafe static void FragmentLightSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglFragmentLightivSGIX((int)light, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public static void FragmentLightModelSGIX(FragmentLightModelParameterSGIX pname, float param)
	{
		Delegates.pglFragmentLightModelfSGIX((int)pname, param);
	}

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public unsafe static void FragmentLightModelSGIX(FragmentLightModelParameterSGIX pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglFragmentLightModelfvSGIX((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public static void FragmentLightModelSGIX(FragmentLightModelParameterSGIX pname, int param)
	{
		Delegates.pglFragmentLightModeliSGIX((int)pname, param);
	}

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public unsafe static void FragmentLightModelSGIX(FragmentLightModelParameterSGIX pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglFragmentLightModelivSGIX((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public static void FragmentMaterialSGIX(TriangleFace face, MaterialParameter pname, float param)
	{
		Delegates.pglFragmentMaterialfSGIX((int)face, (int)pname, param);
	}

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public unsafe static void FragmentMaterialSGIX(TriangleFace face, MaterialParameter pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglFragmentMaterialfvSGIX((int)face, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public static void FragmentMaterialSGIX(TriangleFace face, MaterialParameter pname, int param)
	{
		Delegates.pglFragmentMaterialiSGIX((int)face, (int)pname, param);
	}

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public unsafe static void FragmentMaterialSGIX(TriangleFace face, MaterialParameter pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglFragmentMaterialivSGIX((int)face, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public unsafe static void GetFragmentLightSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetFragmentLightfvSGIX((int)light, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public unsafe static void GetFragmentLightSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetFragmentLightivSGIX((int)light, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public unsafe static void GetFragmentMaterialSGIX(TriangleFace face, MaterialParameter pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetFragmentMaterialfvSGIX((int)face, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public unsafe static void GetFragmentMaterialSGIX(TriangleFace face, MaterialParameter pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetFragmentMaterialivSGIX((int)face, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGIX_fragment_lighting")]
	public static void LightEnvSGIX(LightEnvParameterSGIX pname, LightEnvModeSGIX param)
	{
		Delegates.pglLightEnviSGIX((int)pname, (int)param);
	}

	[RequiredByFeature("GL_SGIX_framezoom")]
	public static void FrameZoomSGIX(int factor)
	{
		Delegates.pglFrameZoomSGIX(factor);
	}

	[RequiredByFeature("GL_SGIX_igloo_interface")]
	public static void IglooInterfaceSGIX(int pname, nint @params)
	{
		Delegates.pglIglooInterfaceSGIX(pname, @params);
	}

	[RequiredByFeature("GL_SGIX_igloo_interface")]
	public static void IglooInterfaceSGIX(int pname, object @params)
	{
		GCHandle gCHandle = GCHandle.Alloc(@params, GCHandleType.Pinned);
		try
		{
			IglooInterfaceSGIX(pname, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_SGIX_instruments")]
	public static int GetInstrumentsSGIX()
	{
		return Delegates.pglGetInstrumentsSGIX();
	}

	[RequiredByFeature("GL_SGIX_instruments")]
	public unsafe static void InstrumentsBufferSGIX(int[] buffer)
	{
		fixed (int* buffer2 = buffer)
		{
			Delegates.pglInstrumentsBufferSGIX(buffer.Length, buffer2);
		}
	}

	[RequiredByFeature("GL_SGIX_instruments")]
	public unsafe static int PollInstrumentsSGIX(int[] marker_p)
	{
		int result;
		fixed (int* marker_p2 = marker_p)
		{
			result = Delegates.pglPollInstrumentsSGIX(marker_p2);
		}
		return result;
	}

	[RequiredByFeature("GL_SGIX_instruments")]
	public static void ReadInstrumentsSGIX(int marker)
	{
		Delegates.pglReadInstrumentsSGIX(marker);
	}

	[RequiredByFeature("GL_SGIX_instruments")]
	public static void StartInstrumentsSGIX()
	{
		Delegates.pglStartInstrumentsSGIX();
	}

	[RequiredByFeature("GL_SGIX_instruments")]
	public static void StopInstrumentsSGIX(int marker)
	{
		Delegates.pglStopInstrumentsSGIX(marker);
	}

	[RequiredByFeature("GL_SGIX_list_priority")]
	public unsafe static void GetListParameterSGIX(uint list, ListParameterName pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetListParameterfvSGIX(list, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGIX_list_priority")]
	public unsafe static void GetListParameterSGIX(uint list, ListParameterName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetListParameterivSGIX(list, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGIX_list_priority")]
	public static void ListParameterSGIX(uint list, ListParameterName pname, float param)
	{
		Delegates.pglListParameterfSGIX(list, (int)pname, param);
	}

	[RequiredByFeature("GL_SGIX_list_priority")]
	public unsafe static void ListParameterSGIX(uint list, ListParameterName pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglListParameterfvSGIX(list, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGIX_list_priority")]
	public static void ListParameterSGIX(uint list, ListParameterName pname, int param)
	{
		Delegates.pglListParameteriSGIX(list, (int)pname, param);
	}

	[RequiredByFeature("GL_SGIX_list_priority")]
	public unsafe static void ListParameterSGIX(uint list, ListParameterName pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglListParameterivSGIX(list, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGIX_pixel_texture")]
	public static void PixelTexGenSGIX(PixelTexGenModeSGIX mode)
	{
		Delegates.pglPixelTexGenSGIX((int)mode);
	}

	[RequiredByFeature("GL_SGIX_polynomial_ffd")]
	public unsafe static void DeformationMap3SGIX(FfdTargetSGIX target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double[] points)
	{
		fixed (double* points2 = points)
		{
			Delegates.pglDeformationMap3dSGIX((int)target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points2);
		}
	}

	[RequiredByFeature("GL_SGIX_polynomial_ffd")]
	public unsafe static void DeformationMap3SGIX(FfdTargetSGIX target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float[] points)
	{
		fixed (float* points2 = points)
		{
			Delegates.pglDeformationMap3fSGIX((int)target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points2);
		}
	}

	[RequiredByFeature("GL_SGIX_polynomial_ffd")]
	public static void DeformSGIX(FfdMaskSGIX mask)
	{
		Delegates.pglDeformSGIX((uint)mask);
	}

	[RequiredByFeature("GL_SGIX_polynomial_ffd")]
	public static void LoadIdentityDeformationMapSGIX(FfdMaskSGIX mask)
	{
		Delegates.pglLoadIdentityDeformationMapSGIX((uint)mask);
	}

	[RequiredByFeature("GL_SGIX_reference_plane")]
	public unsafe static void ReferencePlaneSGIX(double[] equation)
	{
		fixed (double* equation2 = equation)
		{
			Delegates.pglReferencePlaneSGIX(equation2);
		}
	}

	[RequiredByFeature("GL_SGIX_sprite")]
	public static void SpriteParameterSGIX(SpriteParameterNameSGIX pname, float param)
	{
		Delegates.pglSpriteParameterfSGIX((int)pname, param);
	}

	[RequiredByFeature("GL_SGIX_sprite")]
	public unsafe static void SpriteParameterSGIX(SpriteParameterNameSGIX pname, float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglSpriteParameterfvSGIX((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGIX_sprite")]
	public static void SpriteParameterSGIX(SpriteParameterNameSGIX pname, int param)
	{
		Delegates.pglSpriteParameteriSGIX((int)pname, param);
	}

	[RequiredByFeature("GL_SGIX_sprite")]
	public unsafe static void SpriteParameterSGIX(SpriteParameterNameSGIX pname, int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglSpriteParameterivSGIX((int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGIX_tag_sample_buffer")]
	public static void TagSampleBufferSGIX()
	{
		Delegates.pglTagSampleBufferSGIX();
	}

	[RequiredByFeature("GL_SGI_color_table")]
	public static void GetColorTableSGI(ColorTableTargetSGI target, PixelFormat format, PixelType type, nint table)
	{
		Delegates.pglGetColorTableSGI((int)target, (int)format, (int)type, table);
	}

	[RequiredByFeature("GL_SGI_color_table")]
	public static void GetColorTableSGI(ColorTableTargetSGI target, PixelFormat format, PixelType type, object table)
	{
		GCHandle gCHandle = GCHandle.Alloc(table, GCHandleType.Pinned);
		try
		{
			GetColorTableSGI(target, format, type, gCHandle.AddrOfPinnedObject());
		}
		finally
		{
			gCHandle.Free();
		}
	}

	[RequiredByFeature("GL_SGI_color_table")]
	public unsafe static void GetColorTableParameterSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, [Out] float[] @params)
	{
		fixed (float* params2 = @params)
		{
			Delegates.pglGetColorTableParameterfvSGI((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SGI_color_table")]
	public unsafe static void GetColorTableParameterSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, [Out] int[] @params)
	{
		fixed (int* params2 = @params)
		{
			Delegates.pglGetColorTableParameterivSGI((int)target, (int)pname, params2);
		}
	}

	[RequiredByFeature("GL_SUNX_constant_data")]
	public static void FinishTextureSUNX()
	{
		Delegates.pglFinishTextureSUNX();
	}

	[RequiredByFeature("GL_SUN_global_alpha")]
	public static void GlobalAlphaFactorSUN(sbyte factor)
	{
		Delegates.pglGlobalAlphaFactorbSUN(factor);
	}

	[RequiredByFeature("GL_SUN_global_alpha")]
	public static void GlobalAlphaFactorSUN(short factor)
	{
		Delegates.pglGlobalAlphaFactorsSUN(factor);
	}

	[RequiredByFeature("GL_SUN_global_alpha")]
	public static void GlobalAlphaFactorSUN(int factor)
	{
		Delegates.pglGlobalAlphaFactoriSUN(factor);
	}

	[RequiredByFeature("GL_SUN_global_alpha")]
	public static void GlobalAlphaFactorSUN(float factor)
	{
		Delegates.pglGlobalAlphaFactorfSUN(factor);
	}

	[RequiredByFeature("GL_SUN_global_alpha")]
	public static void GlobalAlphaFactorSUN(double factor)
	{
		Delegates.pglGlobalAlphaFactordSUN(factor);
	}

	[RequiredByFeature("GL_SUN_global_alpha")]
	public static void GlobalAlphaFactorubSUN(byte factor)
	{
		Delegates.pglGlobalAlphaFactorubSUN(factor);
	}

	[RequiredByFeature("GL_SUN_global_alpha")]
	public static void GlobalAlphaFactorusSUN(ushort factor)
	{
		Delegates.pglGlobalAlphaFactorusSUN(factor);
	}

	[RequiredByFeature("GL_SUN_global_alpha")]
	public static void GlobalAlphaFactoruiSUN(uint factor)
	{
		Delegates.pglGlobalAlphaFactoruiSUN(factor);
	}

	[RequiredByFeature("GL_SUN_mesh_array")]
	public static void DrawMeshArraysSUN(PrimitiveType mode, int first, int count, int width)
	{
		Delegates.pglDrawMeshArraysSUN((int)mode, first, count, width);
	}

	[RequiredByFeature("GL_SUN_triangle_list")]
	public static void ReplacementCodeuiSUN(TriangleListSUN code)
	{
		Delegates.pglReplacementCodeuiSUN((uint)code);
	}

	[RequiredByFeature("GL_SUN_triangle_list")]
	public static void ReplacementCodeusSUN(ushort code)
	{
		Delegates.pglReplacementCodeusSUN(code);
	}

	[RequiredByFeature("GL_SUN_triangle_list")]
	public static void ReplacementCodeubSUN(byte code)
	{
		Delegates.pglReplacementCodeubSUN(code);
	}

	[RequiredByFeature("GL_SUN_triangle_list")]
	public unsafe static void ReplacementCodeuiSUN(uint[] code)
	{
		fixed (uint* code2 = code)
		{
			Delegates.pglReplacementCodeuivSUN(code2);
		}
	}

	[RequiredByFeature("GL_SUN_triangle_list")]
	public unsafe static void ReplacementCodeusSUN(ushort[] code)
	{
		fixed (ushort* code2 = code)
		{
			Delegates.pglReplacementCodeusvSUN(code2);
		}
	}

	[RequiredByFeature("GL_SUN_triangle_list")]
	public unsafe static void ReplacementCodeubSUN(byte[] code)
	{
		fixed (byte* code2 = code)
		{
			Delegates.pglReplacementCodeubvSUN(code2);
		}
	}

	[RequiredByFeature("GL_SUN_triangle_list")]
	public unsafe static void ReplacementCodePointerSUN(ReplacementCodeTypeSUN type, int stride, nint[] pointer)
	{
		fixed (nint* pointer2 = pointer)
		{
			Delegates.pglReplacementCodePointerSUN((int)type, stride, pointer2);
		}
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public static void Color4ubVertex2fSUN(byte r, byte g, byte b, byte a, float x, float y)
	{
		Delegates.pglColor4ubVertex2fSUN(r, g, b, a, x, y);
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public unsafe static void Color4ubVertex2fvSUN(byte[] c, float[] v)
	{
		fixed (byte* c2 = c)
		{
			fixed (float* v2 = v)
			{
				Delegates.pglColor4ubVertex2fvSUN(c2, v2);
			}
		}
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public static void Color4ubVertex3fSUN(byte r, byte g, byte b, byte a, float x, float y, float z)
	{
		Delegates.pglColor4ubVertex3fSUN(r, g, b, a, x, y, z);
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public unsafe static void Color4ubVertex3fvSUN(byte[] c, float[] v)
	{
		fixed (byte* c2 = c)
		{
			fixed (float* v2 = v)
			{
				Delegates.pglColor4ubVertex3fvSUN(c2, v2);
			}
		}
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public static void Color3fVertex3fSUN(float r, float g, float b, float x, float y, float z)
	{
		Delegates.pglColor3fVertex3fSUN(r, g, b, x, y, z);
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public unsafe static void Color3fVertex3fvSUN(float[] c, float[] v)
	{
		fixed (float* c2 = c)
		{
			fixed (float* v2 = v)
			{
				Delegates.pglColor3fVertex3fvSUN(c2, v2);
			}
		}
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public static void Normal3fVertex3fSUN(float nx, float ny, float nz, float x, float y, float z)
	{
		Delegates.pglNormal3fVertex3fSUN(nx, ny, nz, x, y, z);
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public unsafe static void Normal3fVertex3fvSUN(float[] n, float[] v)
	{
		fixed (float* n2 = n)
		{
			fixed (float* v2 = v)
			{
				Delegates.pglNormal3fVertex3fvSUN(n2, v2);
			}
		}
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public static void Color4fNormal3fVertex3fSUN(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
	{
		Delegates.pglColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public unsafe static void Color4fNormal3fVertex3fvSUN(float[] c, float[] n, float[] v)
	{
		fixed (float* c2 = c)
		{
			fixed (float* n2 = n)
			{
				fixed (float* v2 = v)
				{
					Delegates.pglColor4fNormal3fVertex3fvSUN(c2, n2, v2);
				}
			}
		}
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public static void TexCoord2fVertex3fSUN(float s, float t, float x, float y, float z)
	{
		Delegates.pglTexCoord2fVertex3fSUN(s, t, x, y, z);
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public unsafe static void TexCoord2fVertex3fvSUN(float[] tc, float[] v)
	{
		fixed (float* tc2 = tc)
		{
			fixed (float* v2 = v)
			{
				Delegates.pglTexCoord2fVertex3fvSUN(tc2, v2);
			}
		}
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public static void TexCoord4fVertex4fSUN(float s, float t, float p, float q, float x, float y, float z, float w)
	{
		Delegates.pglTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public unsafe static void TexCoord4fVertex4fvSUN(float[] tc, float[] v)
	{
		fixed (float* tc2 = tc)
		{
			fixed (float* v2 = v)
			{
				Delegates.pglTexCoord4fVertex4fvSUN(tc2, v2);
			}
		}
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public static void TexCoord2fColor4ubVertex3fSUN(float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z)
	{
		Delegates.pglTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public unsafe static void TexCoord2fColor4ubVertex3fvSUN(float[] tc, byte[] c, float[] v)
	{
		fixed (float* tc2 = tc)
		{
			fixed (byte* c2 = c)
			{
				fixed (float* v2 = v)
				{
					Delegates.pglTexCoord2fColor4ubVertex3fvSUN(tc2, c2, v2);
				}
			}
		}
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public static void TexCoord2fColor3fVertex3fSUN(float s, float t, float r, float g, float b, float x, float y, float z)
	{
		Delegates.pglTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public unsafe static void TexCoord2fColor3fVertex3fvSUN(float[] tc, float[] c, float[] v)
	{
		fixed (float* tc2 = tc)
		{
			fixed (float* c2 = c)
			{
				fixed (float* v2 = v)
				{
					Delegates.pglTexCoord2fColor3fVertex3fvSUN(tc2, c2, v2);
				}
			}
		}
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public static void TexCoord2fNormal3fVertex3fSUN(float s, float t, float nx, float ny, float nz, float x, float y, float z)
	{
		Delegates.pglTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public unsafe static void TexCoord2fNormal3fVertex3fvSUN(float[] tc, float[] n, float[] v)
	{
		fixed (float* tc2 = tc)
		{
			fixed (float* n2 = n)
			{
				fixed (float* v2 = v)
				{
					Delegates.pglTexCoord2fNormal3fVertex3fvSUN(tc2, n2, v2);
				}
			}
		}
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public static void TexCoord2fColor4fNormal3fVertex3fSUN(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
	{
		Delegates.pglTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public unsafe static void TexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, float[] c, float[] n, float[] v)
	{
		fixed (float* tc2 = tc)
		{
			fixed (float* c2 = c)
			{
				fixed (float* n2 = n)
				{
					fixed (float* v2 = v)
					{
						Delegates.pglTexCoord2fColor4fNormal3fVertex3fvSUN(tc2, c2, n2, v2);
					}
				}
			}
		}
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public static void TexCoord4fColor4fNormal3fVertex4fSUN(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w)
	{
		Delegates.pglTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public unsafe static void TexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, float[] c, float[] n, float[] v)
	{
		fixed (float* tc2 = tc)
		{
			fixed (float* c2 = c)
			{
				fixed (float* n2 = n)
				{
					fixed (float* v2 = v)
					{
						Delegates.pglTexCoord4fColor4fNormal3fVertex4fvSUN(tc2, c2, n2, v2);
					}
				}
			}
		}
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public static void ReplacementCodeuiVertex3SUN(TriangleListSUN rc, float x, float y, float z)
	{
		Delegates.pglReplacementCodeuiVertex3fSUN((uint)rc, x, y, z);
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public unsafe static void ReplacementCodeuiVertex3SUN(uint[] rc, float[] v)
	{
		fixed (uint* rc2 = rc)
		{
			fixed (float* v2 = v)
			{
				Delegates.pglReplacementCodeuiVertex3fvSUN(rc2, v2);
			}
		}
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public static void ReplacementCodeuiColor4ubVertex3fSUN(TriangleListSUN rc, byte r, byte g, byte b, byte a, float x, float y, float z)
	{
		Delegates.pglReplacementCodeuiColor4ubVertex3fSUN((uint)rc, r, g, b, a, x, y, z);
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public unsafe static void ReplacementCodeuiColor4ubVertex3fvSUN(uint[] rc, byte[] c, float[] v)
	{
		fixed (uint* rc2 = rc)
		{
			fixed (byte* c2 = c)
			{
				fixed (float* v2 = v)
				{
					Delegates.pglReplacementCodeuiColor4ubVertex3fvSUN(rc2, c2, v2);
				}
			}
		}
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public static void ReplacementCodeuiColor3fVertex3fSUN(TriangleListSUN rc, float r, float g, float b, float x, float y, float z)
	{
		Delegates.pglReplacementCodeuiColor3fVertex3fSUN((uint)rc, r, g, b, x, y, z);
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public unsafe static void ReplacementCodeuiColor3fVertex3fvSUN(uint[] rc, float[] c, float[] v)
	{
		fixed (uint* rc2 = rc)
		{
			fixed (float* c2 = c)
			{
				fixed (float* v2 = v)
				{
					Delegates.pglReplacementCodeuiColor3fVertex3fvSUN(rc2, c2, v2);
				}
			}
		}
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public static void ReplacementCodeuiNormal3fVertex3fSUN(TriangleListSUN rc, float nx, float ny, float nz, float x, float y, float z)
	{
		Delegates.pglReplacementCodeuiNormal3fVertex3fSUN((uint)rc, nx, ny, nz, x, y, z);
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public unsafe static void ReplacementCodeuiNormal3fVertex3fvSUN(uint[] rc, float[] n, float[] v)
	{
		fixed (uint* rc2 = rc)
		{
			fixed (float* n2 = n)
			{
				fixed (float* v2 = v)
				{
					Delegates.pglReplacementCodeuiNormal3fVertex3fvSUN(rc2, n2, v2);
				}
			}
		}
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public static void ReplacementCodeuiColor4fNormal3fVertex3fSUN(TriangleListSUN rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
	{
		Delegates.pglReplacementCodeuiColor4fNormal3fVertex3fSUN((uint)rc, r, g, b, a, nx, ny, nz, x, y, z);
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public unsafe static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint[] rc, float[] c, float[] n, float[] v)
	{
		fixed (uint* rc2 = rc)
		{
			fixed (float* c2 = c)
			{
				fixed (float* n2 = n)
				{
					fixed (float* v2 = v)
					{
						Delegates.pglReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc2, c2, n2, v2);
					}
				}
			}
		}
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public static void ReplacementCodeuiTexCoord2fVertex3fSUN(TriangleListSUN rc, float s, float t, float x, float y, float z)
	{
		Delegates.pglReplacementCodeuiTexCoord2fVertex3fSUN((uint)rc, s, t, x, y, z);
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public unsafe static void ReplacementCodeuiTexCoord2fVertex3fvSUN(uint[] rc, float[] tc, float[] v)
	{
		fixed (uint* rc2 = rc)
		{
			fixed (float* tc2 = tc)
			{
				fixed (float* v2 = v)
				{
					Delegates.pglReplacementCodeuiTexCoord2fVertex3fvSUN(rc2, tc2, v2);
				}
			}
		}
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(TriangleListSUN rc, float s, float t, float nx, float ny, float nz, float x, float y, float z)
	{
		Delegates.pglReplacementCodeuiTexCoord2fNormal3fVertex3fSUN((uint)rc, s, t, nx, ny, nz, x, y, z);
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public unsafe static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint[] rc, float[] tc, float[] n, float[] v)
	{
		fixed (uint* rc2 = rc)
		{
			fixed (float* tc2 = tc)
			{
				fixed (float* n2 = n)
				{
					fixed (float* v2 = v)
					{
						Delegates.pglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc2, tc2, n2, v2);
					}
				}
			}
		}
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(TriangleListSUN rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
	{
		Delegates.pglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN((uint)rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
	}

	[RequiredByFeature("GL_SUN_vertex")]
	public unsafe static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] rc, float[] tc, float[] c, float[] n, float[] v)
	{
		fixed (uint* rc2 = rc)
		{
			fixed (float* tc2 = tc)
			{
				fixed (float* c2 = c)
				{
					fixed (float* n2 = n)
					{
						fixed (float* v2 = v)
						{
							Delegates.pglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc2, tc2, c2, n2, v2);
						}
					}
				}
			}
		}
	}
}
